(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.wangEditor = {}));
})(this, (function (exports) { 'use strict';

  /**
   * @description browser polyfill
   * @author wangfupeng
   */
  var _a$1;
  // @ts-nocheck
  // 必须是浏览器环境
  if (typeof global === 'undefined') {
      // 检查 IE 浏览器
      if ('ActiveXObject' in window) {
          var info = '抱歉，wangEditor V5+ 版本开始，不在支持 IE 浏览器';
          info += '\n Sorry, wangEditor V5+ versions do not support IE browser.';
          console.error(info);
      }
      globalThisPolyfill();
      AggregateErrorPolyfill();
  }
  else if (global && ((_a$1 = global.navigator) === null || _a$1 === void 0 ? void 0 : _a$1.userAgent.match('QQBrowser'))) {
      // 兼容 QQ 浏览器 AggregateError 报错
      globalThisPolyfill();
      AggregateErrorPolyfill();
  }
  function globalThisPolyfill() {
      // 部分浏览器不支持 globalThis
      if (typeof globalThis === 'undefined') {
          // @ts-ignore
          window.globalThis = window;
      }
  }
  function AggregateErrorPolyfill() {
      if (typeof AggregateError === 'undefined') {
          window.AggregateError = function (errors, msg) {
              var err = new Error(msg);
              err.errors = errors;
              return err;
          };
      }
  }

  /**
   * @description node polyfill
   * @author wangfupeng
   */
  // @ts-nocheck
  // 必须是 node 环境
  if (typeof global === 'object') {
      // 用于 nodejs ，避免报错
      var globalProperty = Object.getOwnPropertyDescriptor(global, 'window');
      // global.window 为空则直接写入
      // 部分框架下已经定义了global.window且是不可写属性
      if (!global.window || globalProperty.set) {
          global.window = global;
          global.requestAnimationFrame = function () { };
          global.navigator = {
              userAgent: '',
          };
          global.location = {
              hostname: '0.0.0.0',
              port: 0,
              protocol: 'http:',
          };
          global.btoa = function () { };
          global.crypto = {
              getRandomValues: function (buffer) {
                  return nodeCrypto.randomFillSync(buffer);
              },
          };
      }
      if (global.document != null) {
          // SSR 环境下可能会报错 （issue 4409）
          if (global.document.getElementsByTagName == null) {
              global.document.getElementsByTagName = function () { return []; };
          }
      }
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function getAugmentedNamespace(n) {
    if (Object.prototype.hasOwnProperty.call(n, '__esModule')) return n;
    var f = n.default;
  	if (typeof f == "function") {
  		var a = function a () {
  			var isInstance = false;
        try {
          isInstance = this instanceof a;
        } catch {}
  			if (isInstance) {
          return Reflect.construct(f, arguments, this.constructor);
  			}
  			return f.apply(this, arguments);
  		};
  		a.prototype = f.prototype;
    } else a = {};
    Object.defineProperty(a, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  var dist$2 = {};

  var isPlainObject = {};

  var hasRequiredIsPlainObject;

  function requireIsPlainObject () {
  	if (hasRequiredIsPlainObject) return isPlainObject;
  	hasRequiredIsPlainObject = 1;

  	Object.defineProperty(isPlainObject, '__esModule', { value: true });

  	/*!
  	 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
  	 *
  	 * Copyright (c) 2014-2017, Jon Schlinkert.
  	 * Released under the MIT License.
  	 */

  	function isObject(o) {
  	  return Object.prototype.toString.call(o) === '[object Object]';
  	}

  	function isPlainObject$1(o) {
  	  var ctor,prot;

  	  if (isObject(o) === false) return false;

  	  // If has modified constructor
  	  ctor = o.constructor;
  	  if (ctor === undefined) return true;

  	  // If has modified prototype
  	  prot = ctor.prototype;
  	  if (isObject(prot) === false) return false;

  	  // If constructor does not have an Object-specific method
  	  if (prot.hasOwnProperty('isPrototypeOf') === false) {
  	    return false;
  	  }

  	  // Most likely a plain Object
  	  return true;
  	}

  	isPlainObject.isPlainObject = isPlainObject$1;
  	return isPlainObject;
  }

  var dist$1 = {exports: {}};

  var immer_cjs_development = {};

  var hasRequiredImmer_cjs_development;

  function requireImmer_cjs_development () {
  	if (hasRequiredImmer_cjs_development) return immer_cjs_development;
  	hasRequiredImmer_cjs_development = 1;

  	Object.defineProperty(immer_cjs_development, '__esModule', { value: true });

  	var _ref;

  	// Should be no imports here!
  	// Some things that should be evaluated before all else...
  	// We only want to know if non-polyfilled symbols are available
  	var hasSymbol = typeof Symbol !== "undefined" && typeof
  	/*#__PURE__*/
  	Symbol("x") === "symbol";
  	var hasMap = typeof Map !== "undefined";
  	var hasSet = typeof Set !== "undefined";
  	var hasProxies = typeof Proxy !== "undefined" && typeof Proxy.revocable !== "undefined" && typeof Reflect !== "undefined";
  	/**
  	 * The sentinel value returned by producers to replace the draft with undefined.
  	 */

  	var NOTHING = hasSymbol ?
  	/*#__PURE__*/
  	Symbol.for("immer-nothing") : (_ref = {}, _ref["immer-nothing"] = true, _ref);
  	/**
  	 * To let Immer treat your class instances as plain immutable objects
  	 * (albeit with a custom prototype), you must define either an instance property
  	 * or a static property on each of your custom classes.
  	 *
  	 * Otherwise, your class instance will never be drafted, which means it won't be
  	 * safe to mutate in a produce callback.
  	 */

  	var DRAFTABLE = hasSymbol ?
  	/*#__PURE__*/
  	Symbol.for("immer-draftable") : "__$immer_draftable";
  	var DRAFT_STATE = hasSymbol ?
  	/*#__PURE__*/
  	Symbol.for("immer-state") : "__$immer_state"; // Even a polyfilled Symbol might provide Symbol.iterator

  	var iteratorSymbol = typeof Symbol != "undefined" && Symbol.iterator || "@@iterator";

  	var errors = {
  	  0: "Illegal state",
  	  1: "Immer drafts cannot have computed properties",
  	  2: "This object has been frozen and should not be mutated",
  	  3: function _(data) {
  	    return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + data;
  	  },
  	  4: "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",
  	  5: "Immer forbids circular references",
  	  6: "The first or second argument to `produce` must be a function",
  	  7: "The third argument to `produce` must be a function or undefined",
  	  8: "First argument to `createDraft` must be a plain object, an array, or an immerable object",
  	  9: "First argument to `finishDraft` must be a draft returned by `createDraft`",
  	  10: "The given draft is already finalized",
  	  11: "Object.defineProperty() cannot be used on an Immer draft",
  	  12: "Object.setPrototypeOf() cannot be used on an Immer draft",
  	  13: "Immer only supports deleting array indices",
  	  14: "Immer only supports setting array indices and the 'length' property",
  	  15: function _(path) {
  	    return "Cannot apply patch, path doesn't resolve: " + path;
  	  },
  	  16: 'Sets cannot have "replace" patches.',
  	  17: function _(op) {
  	    return "Unsupported patch operation: " + op;
  	  },
  	  18: function _(plugin) {
  	    return "The plugin for '" + plugin + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + plugin + "()` when initializing your application.";
  	  },
  	  20: "Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available",
  	  21: function _(thing) {
  	    return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '" + thing + "'";
  	  },
  	  22: function _(thing) {
  	    return "'current' expects a draft, got: " + thing;
  	  },
  	  23: function _(thing) {
  	    return "'original' expects a draft, got: " + thing;
  	  },
  	  24: "Patching reserved attributes like __proto__, prototype and constructor is not allowed"
  	};
  	function die(error) {
  	  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
  	    args[_key - 1] = arguments[_key];
  	  }

  	  {
  	    var e = errors[error];
  	    var msg = !e ? "unknown error nr: " + error : typeof e === "function" ? e.apply(null, args) : e;
  	    throw new Error("[Immer] " + msg);
  	  }
  	}

  	/** Returns true if the given value is an Immer draft */

  	

  	function isDraft(value) {
  	  return !!value && !!value[DRAFT_STATE];
  	}
  	/** Returns true if the given value can be drafted by Immer */

  	

  	function isDraftable(value) {
  	  var _value$constructor;

  	  if (!value) return false;
  	  return isPlainObject(value) || Array.isArray(value) || !!value[DRAFTABLE] || !!((_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor[DRAFTABLE]) || isMap(value) || isSet(value);
  	}
  	var objectCtorString =
  	/*#__PURE__*/
  	Object.prototype.constructor.toString();
  	

  	function isPlainObject(value) {
  	  if (!value || typeof value !== "object") return false;
  	  var proto = Object.getPrototypeOf(value);

  	  if (proto === null) {
  	    return true;
  	  }

  	  var Ctor = Object.hasOwnProperty.call(proto, "constructor") && proto.constructor;
  	  if (Ctor === Object) return true;
  	  return typeof Ctor == "function" && Function.toString.call(Ctor) === objectCtorString;
  	}
  	function original(value) {
  	  if (!isDraft(value)) die(23, value);
  	  return value[DRAFT_STATE].base_;
  	}
  	

  	var ownKeys = typeof Reflect !== "undefined" && Reflect.ownKeys ? Reflect.ownKeys : typeof Object.getOwnPropertySymbols !== "undefined" ? function (obj) {
  	  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));
  	} :
  	/* istanbul ignore next */
  	Object.getOwnPropertyNames;
  	var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(target) {
  	  // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274
  	  var res = {};
  	  ownKeys(target).forEach(function (key) {
  	    res[key] = Object.getOwnPropertyDescriptor(target, key);
  	  });
  	  return res;
  	};
  	function each(obj, iter, enumerableOnly) {
  	  if (enumerableOnly === void 0) {
  	    enumerableOnly = false;
  	  }

  	  if (getArchtype(obj) === 0
  	  /* Object */
  	  ) {
  	      (enumerableOnly ? Object.keys : ownKeys)(obj).forEach(function (key) {
  	        if (!enumerableOnly || typeof key !== "symbol") iter(key, obj[key], obj);
  	      });
  	    } else {
  	    obj.forEach(function (entry, index) {
  	      return iter(index, entry, obj);
  	    });
  	  }
  	}
  	

  	function getArchtype(thing) {
  	  /* istanbul ignore next */
  	  var state = thing[DRAFT_STATE];
  	  return state ? state.type_ > 3 ? state.type_ - 4 // cause Object and Array map back from 4 and 5
  	  : state.type_ // others are the same
  	  : Array.isArray(thing) ? 1
  	  /* Array */
  	  : isMap(thing) ? 2
  	  /* Map */
  	  : isSet(thing) ? 3
  	  /* Set */
  	  : 0
  	  /* Object */
  	  ;
  	}
  	

  	function has(thing, prop) {
  	  return getArchtype(thing) === 2
  	  /* Map */
  	  ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);
  	}
  	

  	function get(thing, prop) {
  	  // @ts-ignore
  	  return getArchtype(thing) === 2
  	  /* Map */
  	  ? thing.get(prop) : thing[prop];
  	}
  	

  	function set(thing, propOrOldValue, value) {
  	  var t = getArchtype(thing);
  	  if (t === 2
  	  /* Map */
  	  ) thing.set(propOrOldValue, value);else if (t === 3
  	  /* Set */
  	  ) {
  	      thing.add(value);
  	    } else thing[propOrOldValue] = value;
  	}
  	

  	function is(x, y) {
  	  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
  	  if (x === y) {
  	    return x !== 0 || 1 / x === 1 / y;
  	  } else {
  	    return x !== x && y !== y;
  	  }
  	}
  	

  	function isMap(target) {
  	  return hasMap && target instanceof Map;
  	}
  	

  	function isSet(target) {
  	  return hasSet && target instanceof Set;
  	}
  	

  	function latest(state) {
  	  return state.copy_ || state.base_;
  	}
  	

  	function shallowCopy(base) {
  	  if (Array.isArray(base)) return Array.prototype.slice.call(base);
  	  var descriptors = getOwnPropertyDescriptors(base);
  	  delete descriptors[DRAFT_STATE];
  	  var keys = ownKeys(descriptors);

  	  for (var i = 0; i < keys.length; i++) {
  	    var key = keys[i];
  	    var desc = descriptors[key];

  	    if (desc.writable === false) {
  	      desc.writable = true;
  	      desc.configurable = true;
  	    } // like object.assign, we will read any _own_, get/set accessors. This helps in dealing
  	    // with libraries that trap values, like mobx or vue
  	    // unlike object.assign, non-enumerables will be copied as well


  	    if (desc.get || desc.set) descriptors[key] = {
  	      configurable: true,
  	      writable: true,
  	      enumerable: desc.enumerable,
  	      value: base[key]
  	    };
  	  }

  	  return Object.create(Object.getPrototypeOf(base), descriptors);
  	}
  	function freeze(obj, deep) {
  	  if (deep === void 0) {
  	    deep = false;
  	  }

  	  if (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj;

  	  if (getArchtype(obj) > 1
  	  /* Map or Set */
  	  ) {
  	      obj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;
  	    }

  	  Object.freeze(obj);
  	  if (deep) each(obj, function (key, value) {
  	    return freeze(value, true);
  	  }, true);
  	  return obj;
  	}

  	function dontMutateFrozenCollections() {
  	  die(2);
  	}

  	function isFrozen(obj) {
  	  if (obj == null || typeof obj !== "object") return true; // See #600, IE dies on non-objects in Object.isFrozen

  	  return Object.isFrozen(obj);
  	}

  	/** Plugin utilities */

  	var plugins = {};
  	function getPlugin(pluginKey) {
  	  var plugin = plugins[pluginKey];

  	  if (!plugin) {
  	    die(18, pluginKey);
  	  } // @ts-ignore


  	  return plugin;
  	}
  	function loadPlugin(pluginKey, implementation) {
  	  if (!plugins[pluginKey]) plugins[pluginKey] = implementation;
  	}

  	var currentScope;
  	function getCurrentScope() {
  	  if ( !currentScope) die(0);
  	  return currentScope;
  	}

  	function createScope(parent_, immer_) {
  	  return {
  	    drafts_: [],
  	    parent_: parent_,
  	    immer_: immer_,
  	    // Whenever the modified draft contains a draft from another scope, we
  	    // need to prevent auto-freezing so the unowned draft can be finalized.
  	    canAutoFreeze_: true,
  	    unfinalizedDrafts_: 0
  	  };
  	}

  	function usePatchesInScope(scope, patchListener) {
  	  if (patchListener) {
  	    getPlugin("Patches"); // assert we have the plugin

  	    scope.patches_ = [];
  	    scope.inversePatches_ = [];
  	    scope.patchListener_ = patchListener;
  	  }
  	}
  	function revokeScope(scope) {
  	  leaveScope(scope);
  	  scope.drafts_.forEach(revokeDraft); // @ts-ignore

  	  scope.drafts_ = null;
  	}
  	function leaveScope(scope) {
  	  if (scope === currentScope) {
  	    currentScope = scope.parent_;
  	  }
  	}
  	function enterScope(immer) {
  	  return currentScope = createScope(currentScope, immer);
  	}

  	function revokeDraft(draft) {
  	  var state = draft[DRAFT_STATE];
  	  if (state.type_ === 0
  	  /* ProxyObject */
  	  || state.type_ === 1
  	  /* ProxyArray */
  	  ) state.revoke_();else state.revoked_ = true;
  	}

  	function processResult(result, scope) {
  	  scope.unfinalizedDrafts_ = scope.drafts_.length;
  	  var baseDraft = scope.drafts_[0];
  	  var isReplaced = result !== undefined && result !== baseDraft;
  	  if (!scope.immer_.useProxies_) getPlugin("ES5").willFinalizeES5_(scope, result, isReplaced);

  	  if (isReplaced) {
  	    if (baseDraft[DRAFT_STATE].modified_) {
  	      revokeScope(scope);
  	      die(4);
  	    }

  	    if (isDraftable(result)) {
  	      // Finalize the result in case it contains (or is) a subset of the draft.
  	      result = finalize(scope, result);
  	      if (!scope.parent_) maybeFreeze(scope, result);
  	    }

  	    if (scope.patches_) {
  	      getPlugin("Patches").generateReplacementPatches_(baseDraft[DRAFT_STATE].base_, result, scope.patches_, scope.inversePatches_);
  	    }
  	  } else {
  	    // Finalize the base draft.
  	    result = finalize(scope, baseDraft, []);
  	  }

  	  revokeScope(scope);

  	  if (scope.patches_) {
  	    scope.patchListener_(scope.patches_, scope.inversePatches_);
  	  }

  	  return result !== NOTHING ? result : undefined;
  	}

  	function finalize(rootScope, value, path) {
  	  // Don't recurse in tho recursive data structures
  	  if (isFrozen(value)) return value;
  	  var state = value[DRAFT_STATE]; // A plain object, might need freezing, might contain drafts

  	  if (!state) {
  	    each(value, function (key, childValue) {
  	      return finalizeProperty(rootScope, state, value, key, childValue, path);
  	    }, true // See #590, don't recurse into non-enumerable of non drafted objects
  	    );
  	    return value;
  	  } // Never finalize drafts owned by another scope.


  	  if (state.scope_ !== rootScope) return value; // Unmodified draft, return the (frozen) original

  	  if (!state.modified_) {
  	    maybeFreeze(rootScope, state.base_, true);
  	    return state.base_;
  	  } // Not finalized yet, let's do that now


  	  if (!state.finalized_) {
  	    state.finalized_ = true;
  	    state.scope_.unfinalizedDrafts_--;
  	    var result = // For ES5, create a good copy from the draft first, with added keys and without deleted keys.
  	    state.type_ === 4
  	    /* ES5Object */
  	    || state.type_ === 5
  	    /* ES5Array */
  	    ? state.copy_ = shallowCopy(state.draft_) : state.copy_; // Finalize all children of the copy
  	    // For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628
  	    // To preserve insertion order in all cases we then clear the set
  	    // And we let finalizeProperty know it needs to re-add non-draft children back to the target

  	    var resultEach = result;
  	    var isSet = false;

  	    if (state.type_ === 3
  	    /* Set */
  	    ) {
  	        resultEach = new Set(result);
  	        result.clear();
  	        isSet = true;
  	      }

  	    each(resultEach, function (key, childValue) {
  	      return finalizeProperty(rootScope, state, result, key, childValue, path, isSet);
  	    }); // everything inside is frozen, we can freeze here

  	    maybeFreeze(rootScope, result, false); // first time finalizing, let's create those patches

  	    if (path && rootScope.patches_) {
  	      getPlugin("Patches").generatePatches_(state, path, rootScope.patches_, rootScope.inversePatches_);
  	    }
  	  }

  	  return state.copy_;
  	}

  	function finalizeProperty(rootScope, parentState, targetObject, prop, childValue, rootPath, targetIsSet) {
  	  if ( childValue === targetObject) die(5);

  	  if (isDraft(childValue)) {
  	    var path = rootPath && parentState && parentState.type_ !== 3
  	    /* Set */
  	    && // Set objects are atomic since they have no keys.
  	    !has(parentState.assigned_, prop) // Skip deep patches for assigned keys.
  	    ? rootPath.concat(prop) : undefined; // Drafts owned by `scope` are finalized here.

  	    var res = finalize(rootScope, childValue, path);
  	    set(targetObject, prop, res); // Drafts from another scope must prevented to be frozen
  	    // if we got a draft back from finalize, we're in a nested produce and shouldn't freeze

  	    if (isDraft(res)) {
  	      rootScope.canAutoFreeze_ = false;
  	    } else return;
  	  } else if (targetIsSet) {
  	    targetObject.add(childValue);
  	  } // Search new objects for unfinalized drafts. Frozen objects should never contain drafts.


  	  if (isDraftable(childValue) && !isFrozen(childValue)) {
  	    if (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {
  	      // optimization: if an object is not a draft, and we don't have to
  	      // deepfreeze everything, and we are sure that no drafts are left in the remaining object
  	      // cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.
  	      // This benefits especially adding large data tree's without further processing.
  	      // See add-data.js perf test
  	      return;
  	    }

  	    finalize(rootScope, childValue); // immer deep freezes plain objects, so if there is no parent state, we freeze as well

  	    if (!parentState || !parentState.scope_.parent_) maybeFreeze(rootScope, childValue);
  	  }
  	}

  	function maybeFreeze(scope, value, deep) {
  	  if (deep === void 0) {
  	    deep = false;
  	  }

  	  // we never freeze for a non-root scope; as it would prevent pruning for drafts inside wrapping objects
  	  if (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {
  	    freeze(value, deep);
  	  }
  	}

  	/**
  	 * Returns a new draft of the `base` object.
  	 *
  	 * The second argument is the parent draft-state (used internally).
  	 */

  	function createProxyProxy(base, parent) {
  	  var isArray = Array.isArray(base);
  	  var state = {
  	    type_: isArray ? 1
  	    /* ProxyArray */
  	    : 0
  	    /* ProxyObject */
  	    ,
  	    // Track which produce call this is associated with.
  	    scope_: parent ? parent.scope_ : getCurrentScope(),
  	    // True for both shallow and deep changes.
  	    modified_: false,
  	    // Used during finalization.
  	    finalized_: false,
  	    // Track which properties have been assigned (true) or deleted (false).
  	    assigned_: {},
  	    // The parent draft state.
  	    parent_: parent,
  	    // The base state.
  	    base_: base,
  	    // The base proxy.
  	    draft_: null,
  	    // The base copy with any updated values.
  	    copy_: null,
  	    // Called by the `produce` function.
  	    revoke_: null,
  	    isManual_: false
  	  }; // the traps must target something, a bit like the 'real' base.
  	  // but also, we need to be able to determine from the target what the relevant state is
  	  // (to avoid creating traps per instance to capture the state in closure,
  	  // and to avoid creating weird hidden properties as well)
  	  // So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)
  	  // Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb

  	  var target = state;
  	  var traps = objectTraps;

  	  if (isArray) {
  	    target = [state];
  	    traps = arrayTraps;
  	  }

  	  var _Proxy$revocable = Proxy.revocable(target, traps),
  	      revoke = _Proxy$revocable.revoke,
  	      proxy = _Proxy$revocable.proxy;

  	  state.draft_ = proxy;
  	  state.revoke_ = revoke;
  	  return proxy;
  	}
  	/**
  	 * Object drafts
  	 */

  	var objectTraps = {
  	  get: function get(state, prop) {
  	    if (prop === DRAFT_STATE) return state;
  	    var source = latest(state);

  	    if (!has(source, prop)) {
  	      // non-existing or non-own property...
  	      return readPropFromProto(state, source, prop);
  	    }

  	    var value = source[prop];

  	    if (state.finalized_ || !isDraftable(value)) {
  	      return value;
  	    } // Check for existing draft in modified state.
  	    // Assigned values are never drafted. This catches any drafts we created, too.


  	    if (value === peek(state.base_, prop)) {
  	      prepareCopy(state);
  	      return state.copy_[prop] = createProxy(state.scope_.immer_, value, state);
  	    }

  	    return value;
  	  },
  	  has: function has(state, prop) {
  	    return prop in latest(state);
  	  },
  	  ownKeys: function ownKeys(state) {
  	    return Reflect.ownKeys(latest(state));
  	  },
  	  set: function set(state, prop
  	  /* strictly not, but helps TS */
  	  , value) {
  	    var desc = getDescriptorFromProto(latest(state), prop);

  	    if (desc === null || desc === void 0 ? void 0 : desc.set) {
  	      // special case: if this write is captured by a setter, we have
  	      // to trigger it with the correct context
  	      desc.set.call(state.draft_, value);
  	      return true;
  	    }

  	    if (!state.modified_) {
  	      // the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)
  	      // from setting an existing property with value undefined to undefined (which is not a change)
  	      var current = peek(latest(state), prop); // special case, if we assigning the original value to a draft, we can ignore the assignment

  	      var currentState = current === null || current === void 0 ? void 0 : current[DRAFT_STATE];

  	      if (currentState && currentState.base_ === value) {
  	        state.copy_[prop] = value;
  	        state.assigned_[prop] = false;
  	        return true;
  	      }

  	      if (is(value, current) && (value !== undefined || has(state.base_, prop))) return true;
  	      prepareCopy(state);
  	      markChanged(state);
  	    }

  	    if (state.copy_[prop] === value && ( // special case: handle new props with value 'undefined'
  	    value !== undefined || prop in state.copy_) || // special case: NaN
  	    Number.isNaN(value) && Number.isNaN(state.copy_[prop])) return true; // @ts-ignore

  	    state.copy_[prop] = value;
  	    state.assigned_[prop] = true;
  	    return true;
  	  },
  	  deleteProperty: function deleteProperty(state, prop) {
  	    // The `undefined` check is a fast path for pre-existing keys.
  	    if (peek(state.base_, prop) !== undefined || prop in state.base_) {
  	      state.assigned_[prop] = false;
  	      prepareCopy(state);
  	      markChanged(state);
  	    } else {
  	      // if an originally not assigned property was deleted
  	      delete state.assigned_[prop];
  	    } // @ts-ignore


  	    if (state.copy_) delete state.copy_[prop];
  	    return true;
  	  },
  	  // Note: We never coerce `desc.value` into an Immer draft, because we can't make
  	  // the same guarantee in ES5 mode.
  	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(state, prop) {
  	    var owner = latest(state);
  	    var desc = Reflect.getOwnPropertyDescriptor(owner, prop);
  	    if (!desc) return desc;
  	    return {
  	      writable: true,
  	      configurable: state.type_ !== 1
  	      /* ProxyArray */
  	      || prop !== "length",
  	      enumerable: desc.enumerable,
  	      value: owner[prop]
  	    };
  	  },
  	  defineProperty: function defineProperty() {
  	    die(11);
  	  },
  	  getPrototypeOf: function getPrototypeOf(state) {
  	    return Object.getPrototypeOf(state.base_);
  	  },
  	  setPrototypeOf: function setPrototypeOf() {
  	    die(12);
  	  }
  	};
  	/**
  	 * Array drafts
  	 */

  	var arrayTraps = {};
  	each(objectTraps, function (key, fn) {
  	  // @ts-ignore
  	  arrayTraps[key] = function () {
  	    arguments[0] = arguments[0][0];
  	    return fn.apply(this, arguments);
  	  };
  	});

  	arrayTraps.deleteProperty = function (state, prop) {
  	  if ( isNaN(parseInt(prop))) die(13); // @ts-ignore

  	  return arrayTraps.set.call(this, state, prop, undefined);
  	};

  	arrayTraps.set = function (state, prop, value) {
  	  if ( prop !== "length" && isNaN(parseInt(prop))) die(14);
  	  return objectTraps.set.call(this, state[0], prop, value, state[0]);
  	}; // Access a property without creating an Immer draft.


  	function peek(draft, prop) {
  	  var state = draft[DRAFT_STATE];
  	  var source = state ? latest(state) : draft;
  	  return source[prop];
  	}

  	function readPropFromProto(state, source, prop) {
  	  var _desc$get;

  	  var desc = getDescriptorFromProto(source, prop);
  	  return desc ? "value" in desc ? desc.value : // This is a very special case, if the prop is a getter defined by the
  	  // prototype, we should invoke it with the draft as context!
  	  (_desc$get = desc.get) === null || _desc$get === void 0 ? void 0 : _desc$get.call(state.draft_) : undefined;
  	}

  	function getDescriptorFromProto(source, prop) {
  	  // 'in' checks proto!
  	  if (!(prop in source)) return undefined;
  	  var proto = Object.getPrototypeOf(source);

  	  while (proto) {
  	    var desc = Object.getOwnPropertyDescriptor(proto, prop);
  	    if (desc) return desc;
  	    proto = Object.getPrototypeOf(proto);
  	  }

  	  return undefined;
  	}

  	function markChanged(state) {
  	  if (!state.modified_) {
  	    state.modified_ = true;

  	    if (state.parent_) {
  	      markChanged(state.parent_);
  	    }
  	  }
  	}
  	function prepareCopy(state) {
  	  if (!state.copy_) {
  	    state.copy_ = shallowCopy(state.base_);
  	  }
  	}

  	var Immer =
  	/*#__PURE__*/
  	function () {
  	  function Immer(config) {
  	    var _this = this;

  	    this.useProxies_ = hasProxies;
  	    this.autoFreeze_ = true;
  	    /**
  	     * The `produce` function takes a value and a "recipe function" (whose
  	     * return value often depends on the base state). The recipe function is
  	     * free to mutate its first argument however it wants. All mutations are
  	     * only ever applied to a __copy__ of the base state.
  	     *
  	     * Pass only a function to create a "curried producer" which relieves you
  	     * from passing the recipe function every time.
  	     *
  	     * Only plain objects and arrays are made mutable. All other objects are
  	     * considered uncopyable.
  	     *
  	     * Note: This function is __bound__ to its `Immer` instance.
  	     *
  	     * @param {any} base - the initial state
  	     * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified
  	     * @param {Function} patchListener - optional function that will be called with all the patches produced here
  	     * @returns {any} a new state, or the initial state if nothing was modified
  	     */

  	    this.produce = function (base, recipe, patchListener) {
  	      // curried invocation
  	      if (typeof base === "function" && typeof recipe !== "function") {
  	        var defaultBase = recipe;
  	        recipe = base;
  	        var self = _this;
  	        return function curriedProduce(base) {
  	          var _this2 = this;

  	          if (base === void 0) {
  	            base = defaultBase;
  	          }

  	          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
  	            args[_key - 1] = arguments[_key];
  	          }

  	          return self.produce(base, function (draft) {
  	            var _recipe;

  	            return (_recipe = recipe).call.apply(_recipe, [_this2, draft].concat(args));
  	          }); // prettier-ignore
  	        };
  	      }

  	      if (typeof recipe !== "function") die(6);
  	      if (patchListener !== undefined && typeof patchListener !== "function") die(7);
  	      var result; // Only plain objects, arrays, and "immerable classes" are drafted.

  	      if (isDraftable(base)) {
  	        var scope = enterScope(_this);
  	        var proxy = createProxy(_this, base, undefined);
  	        var hasError = true;

  	        try {
  	          result = recipe(proxy);
  	          hasError = false;
  	        } finally {
  	          // finally instead of catch + rethrow better preserves original stack
  	          if (hasError) revokeScope(scope);else leaveScope(scope);
  	        }

  	        if (typeof Promise !== "undefined" && result instanceof Promise) {
  	          return result.then(function (result) {
  	            usePatchesInScope(scope, patchListener);
  	            return processResult(result, scope);
  	          }, function (error) {
  	            revokeScope(scope);
  	            throw error;
  	          });
  	        }

  	        usePatchesInScope(scope, patchListener);
  	        return processResult(result, scope);
  	      } else if (!base || typeof base !== "object") {
  	        result = recipe(base);
  	        if (result === undefined) result = base;
  	        if (result === NOTHING) result = undefined;
  	        if (_this.autoFreeze_) freeze(result, true);

  	        if (patchListener) {
  	          var p = [];
  	          var ip = [];
  	          getPlugin("Patches").generateReplacementPatches_(base, result, p, ip);
  	          patchListener(p, ip);
  	        }

  	        return result;
  	      } else die(21, base);
  	    };

  	    this.produceWithPatches = function (base, recipe) {
  	      // curried invocation
  	      if (typeof base === "function") {
  	        return function (state) {
  	          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
  	            args[_key2 - 1] = arguments[_key2];
  	          }

  	          return _this.produceWithPatches(state, function (draft) {
  	            return base.apply(void 0, [draft].concat(args));
  	          });
  	        };
  	      }

  	      var patches, inversePatches;

  	      var result = _this.produce(base, recipe, function (p, ip) {
  	        patches = p;
  	        inversePatches = ip;
  	      });

  	      if (typeof Promise !== "undefined" && result instanceof Promise) {
  	        return result.then(function (nextState) {
  	          return [nextState, patches, inversePatches];
  	        });
  	      }

  	      return [result, patches, inversePatches];
  	    };

  	    if (typeof (config === null || config === void 0 ? void 0 : config.useProxies) === "boolean") this.setUseProxies(config.useProxies);
  	    if (typeof (config === null || config === void 0 ? void 0 : config.autoFreeze) === "boolean") this.setAutoFreeze(config.autoFreeze);
  	  }

  	  var _proto = Immer.prototype;

  	  _proto.createDraft = function createDraft(base) {
  	    if (!isDraftable(base)) die(8);
  	    if (isDraft(base)) base = current(base);
  	    var scope = enterScope(this);
  	    var proxy = createProxy(this, base, undefined);
  	    proxy[DRAFT_STATE].isManual_ = true;
  	    leaveScope(scope);
  	    return proxy;
  	  };

  	  _proto.finishDraft = function finishDraft(draft, patchListener) {
  	    var state = draft && draft[DRAFT_STATE];

  	    {
  	      if (!state || !state.isManual_) die(9);
  	      if (state.finalized_) die(10);
  	    }

  	    var scope = state.scope_;
  	    usePatchesInScope(scope, patchListener);
  	    return processResult(undefined, scope);
  	  }
  	  /**
  	   * Pass true to automatically freeze all copies created by Immer.
  	   *
  	   * By default, auto-freezing is enabled.
  	   */
  	  ;

  	  _proto.setAutoFreeze = function setAutoFreeze(value) {
  	    this.autoFreeze_ = value;
  	  }
  	  /**
  	   * Pass true to use the ES2015 `Proxy` class when creating drafts, which is
  	   * always faster than using ES5 proxies.
  	   *
  	   * By default, feature detection is used, so calling this is rarely necessary.
  	   */
  	  ;

  	  _proto.setUseProxies = function setUseProxies(value) {
  	    if (value && !hasProxies) {
  	      die(20);
  	    }

  	    this.useProxies_ = value;
  	  };

  	  _proto.applyPatches = function applyPatches(base, patches) {
  	    // If a patch replaces the entire state, take that replacement as base
  	    // before applying patches
  	    var i;

  	    for (i = patches.length - 1; i >= 0; i--) {
  	      var patch = patches[i];

  	      if (patch.path.length === 0 && patch.op === "replace") {
  	        base = patch.value;
  	        break;
  	      }
  	    } // If there was a patch that replaced the entire state, start from the
  	    // patch after that.


  	    if (i > -1) {
  	      patches = patches.slice(i + 1);
  	    }

  	    var applyPatchesImpl = getPlugin("Patches").applyPatches_;

  	    if (isDraft(base)) {
  	      // N.B: never hits if some patch a replacement, patches are never drafts
  	      return applyPatchesImpl(base, patches);
  	    } // Otherwise, produce a copy of the base state.


  	    return this.produce(base, function (draft) {
  	      return applyPatchesImpl(draft, patches);
  	    });
  	  };

  	  return Immer;
  	}();
  	function createProxy(immer, value, parent) {
  	  // precondition: createProxy should be guarded by isDraftable, so we know we can safely draft
  	  var draft = isMap(value) ? getPlugin("MapSet").proxyMap_(value, parent) : isSet(value) ? getPlugin("MapSet").proxySet_(value, parent) : immer.useProxies_ ? createProxyProxy(value, parent) : getPlugin("ES5").createES5Proxy_(value, parent);
  	  var scope = parent ? parent.scope_ : getCurrentScope();
  	  scope.drafts_.push(draft);
  	  return draft;
  	}

  	function current(value) {
  	  if (!isDraft(value)) die(22, value);
  	  return currentImpl(value);
  	}

  	function currentImpl(value) {
  	  if (!isDraftable(value)) return value;
  	  var state = value[DRAFT_STATE];
  	  var copy;
  	  var archType = getArchtype(value);

  	  if (state) {
  	    if (!state.modified_ && (state.type_ < 4 || !getPlugin("ES5").hasChanges_(state))) return state.base_; // Optimization: avoid generating new drafts during copying

  	    state.finalized_ = true;
  	    copy = copyHelper(value, archType);
  	    state.finalized_ = false;
  	  } else {
  	    copy = copyHelper(value, archType);
  	  }

  	  each(copy, function (key, childValue) {
  	    if (state && get(state.base_, key) === childValue) return; // no need to copy or search in something that didn't change

  	    set(copy, key, currentImpl(childValue));
  	  }); // In the future, we might consider freezing here, based on the current settings

  	  return archType === 3
  	  /* Set */
  	  ? new Set(copy) : copy;
  	}

  	function copyHelper(value, archType) {
  	  // creates a shallow copy, even if it is a map or set
  	  switch (archType) {
  	    case 2
  	    /* Map */
  	    :
  	      return new Map(value);

  	    case 3
  	    /* Set */
  	    :
  	      // Set will be cloned as array temporarily, so that we can replace individual items
  	      return Array.from(value);
  	  }

  	  return shallowCopy(value);
  	}

  	function enableES5() {
  	  function willFinalizeES5_(scope, result, isReplaced) {
  	    if (!isReplaced) {
  	      if (scope.patches_) {
  	        markChangesRecursively(scope.drafts_[0]);
  	      } // This is faster when we don't care about which attributes changed.


  	      markChangesSweep(scope.drafts_);
  	    } // When a child draft is returned, look for changes.
  	    else if (isDraft(result) && result[DRAFT_STATE].scope_ === scope) {
  	        markChangesSweep(scope.drafts_);
  	      }
  	  }

  	  function createES5Draft(isArray, base) {
  	    if (isArray) {
  	      var draft = new Array(base.length);

  	      for (var i = 0; i < base.length; i++) {
  	        Object.defineProperty(draft, "" + i, proxyProperty(i, true));
  	      }

  	      return draft;
  	    } else {
  	      var _descriptors = getOwnPropertyDescriptors(base);

  	      delete _descriptors[DRAFT_STATE];
  	      var keys = ownKeys(_descriptors);

  	      for (var _i = 0; _i < keys.length; _i++) {
  	        var key = keys[_i];
  	        _descriptors[key] = proxyProperty(key, isArray || !!_descriptors[key].enumerable);
  	      }

  	      return Object.create(Object.getPrototypeOf(base), _descriptors);
  	    }
  	  }

  	  function createES5Proxy_(base, parent) {
  	    var isArray = Array.isArray(base);
  	    var draft = createES5Draft(isArray, base);
  	    var state = {
  	      type_: isArray ? 5
  	      /* ES5Array */
  	      : 4
  	      /* ES5Object */
  	      ,
  	      scope_: parent ? parent.scope_ : getCurrentScope(),
  	      modified_: false,
  	      finalized_: false,
  	      assigned_: {},
  	      parent_: parent,
  	      // base is the object we are drafting
  	      base_: base,
  	      // draft is the draft object itself, that traps all reads and reads from either the base (if unmodified) or copy (if modified)
  	      draft_: draft,
  	      copy_: null,
  	      revoked_: false,
  	      isManual_: false
  	    };
  	    Object.defineProperty(draft, DRAFT_STATE, {
  	      value: state,
  	      // enumerable: false <- the default
  	      writable: true
  	    });
  	    return draft;
  	  } // property descriptors are recycled to make sure we don't create a get and set closure per property,
  	  // but share them all instead


  	  var descriptors = {};

  	  function proxyProperty(prop, enumerable) {
  	    var desc = descriptors[prop];

  	    if (desc) {
  	      desc.enumerable = enumerable;
  	    } else {
  	      descriptors[prop] = desc = {
  	        configurable: true,
  	        enumerable: enumerable,
  	        get: function get() {
  	          var state = this[DRAFT_STATE];
  	          assertUnrevoked(state); // @ts-ignore

  	          return objectTraps.get(state, prop);
  	        },
  	        set: function set(value) {
  	          var state = this[DRAFT_STATE];
  	          assertUnrevoked(state); // @ts-ignore

  	          objectTraps.set(state, prop, value);
  	        }
  	      };
  	    }

  	    return desc;
  	  } // This looks expensive, but only proxies are visited, and only objects without known changes are scanned.


  	  function markChangesSweep(drafts) {
  	    // The natural order of drafts in the `scope` array is based on when they
  	    // were accessed. By processing drafts in reverse natural order, we have a
  	    // better chance of processing leaf nodes first. When a leaf node is known to
  	    // have changed, we can avoid any traversal of its ancestor nodes.
  	    for (var i = drafts.length - 1; i >= 0; i--) {
  	      var state = drafts[i][DRAFT_STATE];

  	      if (!state.modified_) {
  	        switch (state.type_) {
  	          case 5
  	          /* ES5Array */
  	          :
  	            if (hasArrayChanges(state)) markChanged(state);
  	            break;

  	          case 4
  	          /* ES5Object */
  	          :
  	            if (hasObjectChanges(state)) markChanged(state);
  	            break;
  	        }
  	      }
  	    }
  	  }

  	  function markChangesRecursively(object) {
  	    if (!object || typeof object !== "object") return;
  	    var state = object[DRAFT_STATE];
  	    if (!state) return;
  	    var base_ = state.base_,
  	        draft_ = state.draft_,
  	        assigned_ = state.assigned_,
  	        type_ = state.type_;

  	    if (type_ === 4
  	    /* ES5Object */
  	    ) {
  	        // Look for added keys.
  	        // probably there is a faster way to detect changes, as sweep + recurse seems to do some
  	        // unnecessary work.
  	        // also: probably we can store the information we detect here, to speed up tree finalization!
  	        each(draft_, function (key) {
  	          if (key === DRAFT_STATE) return; // The `undefined` check is a fast path for pre-existing keys.

  	          if (base_[key] === undefined && !has(base_, key)) {
  	            assigned_[key] = true;
  	            markChanged(state);
  	          } else if (!assigned_[key]) {
  	            // Only untouched properties trigger recursion.
  	            markChangesRecursively(draft_[key]);
  	          }
  	        }); // Look for removed keys.

  	        each(base_, function (key) {
  	          // The `undefined` check is a fast path for pre-existing keys.
  	          if (draft_[key] === undefined && !has(draft_, key)) {
  	            assigned_[key] = false;
  	            markChanged(state);
  	          }
  	        });
  	      } else if (type_ === 5
  	    /* ES5Array */
  	    ) {
  	        if (hasArrayChanges(state)) {
  	          markChanged(state);
  	          assigned_.length = true;
  	        }

  	        if (draft_.length < base_.length) {
  	          for (var i = draft_.length; i < base_.length; i++) {
  	            assigned_[i] = false;
  	          }
  	        } else {
  	          for (var _i2 = base_.length; _i2 < draft_.length; _i2++) {
  	            assigned_[_i2] = true;
  	          }
  	        } // Minimum count is enough, the other parts has been processed.


  	        var min = Math.min(draft_.length, base_.length);

  	        for (var _i3 = 0; _i3 < min; _i3++) {
  	          // Only untouched indices trigger recursion.
  	          if (!draft_.hasOwnProperty(_i3)) {
  	            assigned_[_i3] = true;
  	          }

  	          if (assigned_[_i3] === undefined) markChangesRecursively(draft_[_i3]);
  	        }
  	      }
  	  }

  	  function hasObjectChanges(state) {
  	    var base_ = state.base_,
  	        draft_ = state.draft_; // Search for added keys and changed keys. Start at the back, because
  	    // non-numeric keys are ordered by time of definition on the object.

  	    var keys = ownKeys(draft_);

  	    for (var i = keys.length - 1; i >= 0; i--) {
  	      var key = keys[i];
  	      if (key === DRAFT_STATE) continue;
  	      var baseValue = base_[key]; // The `undefined` check is a fast path for pre-existing keys.

  	      if (baseValue === undefined && !has(base_, key)) {
  	        return true;
  	      } // Once a base key is deleted, future changes go undetected, because its
  	      // descriptor is erased. This branch detects any missed changes.
  	      else {
  	          var value = draft_[key];

  	          var _state = value && value[DRAFT_STATE];

  	          if (_state ? _state.base_ !== baseValue : !is(value, baseValue)) {
  	            return true;
  	          }
  	        }
  	    } // At this point, no keys were added or changed.
  	    // Compare key count to determine if keys were deleted.


  	    var baseIsDraft = !!base_[DRAFT_STATE];
  	    return keys.length !== ownKeys(base_).length + (baseIsDraft ? 0 : 1); // + 1 to correct for DRAFT_STATE
  	  }

  	  function hasArrayChanges(state) {
  	    var draft_ = state.draft_;
  	    if (draft_.length !== state.base_.length) return true; // See #116
  	    // If we first shorten the length, our array interceptors will be removed.
  	    // If after that new items are added, result in the same original length,
  	    // those last items will have no intercepting property.
  	    // So if there is no own descriptor on the last position, we know that items were removed and added
  	    // N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check
  	    // the last one
  	    // last descriptor can be not a trap, if the array was extended

  	    var descriptor = Object.getOwnPropertyDescriptor(draft_, draft_.length - 1); // descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)

  	    if (descriptor && !descriptor.get) return true; // if we miss a property, it has been deleted, so array probobaly changed

  	    for (var i = 0; i < draft_.length; i++) {
  	      if (!draft_.hasOwnProperty(i)) return true;
  	    } // For all other cases, we don't have to compare, as they would have been picked up by the index setters


  	    return false;
  	  }

  	  function hasChanges_(state) {
  	    return state.type_ === 4
  	    /* ES5Object */
  	    ? hasObjectChanges(state) : hasArrayChanges(state);
  	  }

  	  function assertUnrevoked(state
  	  /*ES5State | MapState | SetState*/
  	  ) {
  	    if (state.revoked_) die(3, JSON.stringify(latest(state)));
  	  }

  	  loadPlugin("ES5", {
  	    createES5Proxy_: createES5Proxy_,
  	    willFinalizeES5_: willFinalizeES5_,
  	    hasChanges_: hasChanges_
  	  });
  	}

  	function enablePatches() {
  	  var REPLACE = "replace";
  	  var ADD = "add";
  	  var REMOVE = "remove";

  	  function generatePatches_(state, basePath, patches, inversePatches) {
  	    switch (state.type_) {
  	      case 0
  	      /* ProxyObject */
  	      :
  	      case 4
  	      /* ES5Object */
  	      :
  	      case 2
  	      /* Map */
  	      :
  	        return generatePatchesFromAssigned(state, basePath, patches, inversePatches);

  	      case 5
  	      /* ES5Array */
  	      :
  	      case 1
  	      /* ProxyArray */
  	      :
  	        return generateArrayPatches(state, basePath, patches, inversePatches);

  	      case 3
  	      /* Set */
  	      :
  	        return generateSetPatches(state, basePath, patches, inversePatches);
  	    }
  	  }

  	  function generateArrayPatches(state, basePath, patches, inversePatches) {
  	    var base_ = state.base_,
  	        assigned_ = state.assigned_;
  	    var copy_ = state.copy_; // Reduce complexity by ensuring `base` is never longer.

  	    if (copy_.length < base_.length) {
  	      var _ref = [copy_, base_];
  	      base_ = _ref[0];
  	      copy_ = _ref[1];
  	      var _ref2 = [inversePatches, patches];
  	      patches = _ref2[0];
  	      inversePatches = _ref2[1];
  	    } // Process replaced indices.


  	    for (var i = 0; i < base_.length; i++) {
  	      if (assigned_[i] && copy_[i] !== base_[i]) {
  	        var path = basePath.concat([i]);
  	        patches.push({
  	          op: REPLACE,
  	          path: path,
  	          // Need to maybe clone it, as it can in fact be the original value
  	          // due to the base/copy inversion at the start of this function
  	          value: clonePatchValueIfNeeded(copy_[i])
  	        });
  	        inversePatches.push({
  	          op: REPLACE,
  	          path: path,
  	          value: clonePatchValueIfNeeded(base_[i])
  	        });
  	      }
  	    } // Process added indices.


  	    for (var _i = base_.length; _i < copy_.length; _i++) {
  	      var _path = basePath.concat([_i]);

  	      patches.push({
  	        op: ADD,
  	        path: _path,
  	        // Need to maybe clone it, as it can in fact be the original value
  	        // due to the base/copy inversion at the start of this function
  	        value: clonePatchValueIfNeeded(copy_[_i])
  	      });
  	    }

  	    if (base_.length < copy_.length) {
  	      inversePatches.push({
  	        op: REPLACE,
  	        path: basePath.concat(["length"]),
  	        value: base_.length
  	      });
  	    }
  	  } // This is used for both Map objects and normal objects.


  	  function generatePatchesFromAssigned(state, basePath, patches, inversePatches) {
  	    var base_ = state.base_,
  	        copy_ = state.copy_;
  	    each(state.assigned_, function (key, assignedValue) {
  	      var origValue = get(base_, key);
  	      var value = get(copy_, key);
  	      var op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD;
  	      if (origValue === value && op === REPLACE) return;
  	      var path = basePath.concat(key);
  	      patches.push(op === REMOVE ? {
  	        op: op,
  	        path: path
  	      } : {
  	        op: op,
  	        path: path,
  	        value: value
  	      });
  	      inversePatches.push(op === ADD ? {
  	        op: REMOVE,
  	        path: path
  	      } : op === REMOVE ? {
  	        op: ADD,
  	        path: path,
  	        value: clonePatchValueIfNeeded(origValue)
  	      } : {
  	        op: REPLACE,
  	        path: path,
  	        value: clonePatchValueIfNeeded(origValue)
  	      });
  	    });
  	  }

  	  function generateSetPatches(state, basePath, patches, inversePatches) {
  	    var base_ = state.base_,
  	        copy_ = state.copy_;
  	    var i = 0;
  	    base_.forEach(function (value) {
  	      if (!copy_.has(value)) {
  	        var path = basePath.concat([i]);
  	        patches.push({
  	          op: REMOVE,
  	          path: path,
  	          value: value
  	        });
  	        inversePatches.unshift({
  	          op: ADD,
  	          path: path,
  	          value: value
  	        });
  	      }

  	      i++;
  	    });
  	    i = 0;
  	    copy_.forEach(function (value) {
  	      if (!base_.has(value)) {
  	        var path = basePath.concat([i]);
  	        patches.push({
  	          op: ADD,
  	          path: path,
  	          value: value
  	        });
  	        inversePatches.unshift({
  	          op: REMOVE,
  	          path: path,
  	          value: value
  	        });
  	      }

  	      i++;
  	    });
  	  }

  	  function generateReplacementPatches_(baseValue, replacement, patches, inversePatches) {
  	    patches.push({
  	      op: REPLACE,
  	      path: [],
  	      value: replacement === NOTHING ? undefined : replacement
  	    });
  	    inversePatches.push({
  	      op: REPLACE,
  	      path: [],
  	      value: baseValue
  	    });
  	  }

  	  function applyPatches_(draft, patches) {
  	    patches.forEach(function (patch) {
  	      var path = patch.path,
  	          op = patch.op;
  	      var base = draft;

  	      for (var i = 0; i < path.length - 1; i++) {
  	        var parentType = getArchtype(base);
  	        var p = path[i];

  	        if (typeof p !== "string" && typeof p !== "number") {
  	          p = "" + p;
  	        } // See #738, avoid prototype pollution


  	        if ((parentType === 0
  	        /* Object */
  	        || parentType === 1
  	        /* Array */
  	        ) && (p === "__proto__" || p === "constructor")) die(24);
  	        if (typeof base === "function" && p === "prototype") die(24);
  	        base = get(base, p);
  	        if (typeof base !== "object") die(15, path.join("/"));
  	      }

  	      var type = getArchtype(base);
  	      var value = deepClonePatchValue(patch.value); // used to clone patch to ensure original patch is not modified, see #411

  	      var key = path[path.length - 1];

  	      switch (op) {
  	        case REPLACE:
  	          switch (type) {
  	            case 2
  	            /* Map */
  	            :
  	              return base.set(key, value);

  	            /* istanbul ignore next */

  	            case 3
  	            /* Set */
  	            :
  	              die(16);

  	            default:
  	              // if value is an object, then it's assigned by reference
  	              // in the following add or remove ops, the value field inside the patch will also be modifyed
  	              // so we use value from the cloned patch
  	              // @ts-ignore
  	              return base[key] = value;
  	          }

  	        case ADD:
  	          switch (type) {
  	            case 1
  	            /* Array */
  	            :
  	              return key === "-" ? base.push(value) : base.splice(key, 0, value);

  	            case 2
  	            /* Map */
  	            :
  	              return base.set(key, value);

  	            case 3
  	            /* Set */
  	            :
  	              return base.add(value);

  	            default:
  	              return base[key] = value;
  	          }

  	        case REMOVE:
  	          switch (type) {
  	            case 1
  	            /* Array */
  	            :
  	              return base.splice(key, 1);

  	            case 2
  	            /* Map */
  	            :
  	              return base.delete(key);

  	            case 3
  	            /* Set */
  	            :
  	              return base.delete(patch.value);

  	            default:
  	              return delete base[key];
  	          }

  	        default:
  	          die(17, op);
  	      }
  	    });
  	    return draft;
  	  }

  	  function deepClonePatchValue(obj) {
  	    if (!isDraftable(obj)) return obj;
  	    if (Array.isArray(obj)) return obj.map(deepClonePatchValue);
  	    if (isMap(obj)) return new Map(Array.from(obj.entries()).map(function (_ref3) {
  	      var k = _ref3[0],
  	          v = _ref3[1];
  	      return [k, deepClonePatchValue(v)];
  	    }));
  	    if (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue));
  	    var cloned = Object.create(Object.getPrototypeOf(obj));

  	    for (var key in obj) {
  	      cloned[key] = deepClonePatchValue(obj[key]);
  	    }

  	    if (has(obj, DRAFTABLE)) cloned[DRAFTABLE] = obj[DRAFTABLE];
  	    return cloned;
  	  }

  	  function clonePatchValueIfNeeded(obj) {
  	    if (isDraft(obj)) {
  	      return deepClonePatchValue(obj);
  	    } else return obj;
  	  }

  	  loadPlugin("Patches", {
  	    applyPatches_: applyPatches_,
  	    generatePatches_: generatePatches_,
  	    generateReplacementPatches_: generateReplacementPatches_
  	  });
  	}

  	// types only!
  	function enableMapSet() {
  	  /* istanbul ignore next */
  	  var _extendStatics = function extendStatics(d, b) {
  	    _extendStatics = Object.setPrototypeOf || {
  	      __proto__: []
  	    } instanceof Array && function (d, b) {
  	      d.__proto__ = b;
  	    } || function (d, b) {
  	      for (var p in b) {
  	        if (b.hasOwnProperty(p)) d[p] = b[p];
  	      }
  	    };

  	    return _extendStatics(d, b);
  	  }; // Ugly hack to resolve #502 and inherit built in Map / Set


  	  function __extends(d, b) {
  	    _extendStatics(d, b);

  	    function __() {
  	      this.constructor = d;
  	    }

  	    d.prototype = ( // @ts-ignore
  	    __.prototype = b.prototype, new __());
  	  }

  	  var DraftMap = function (_super) {
  	    __extends(DraftMap, _super); // Create class manually, cause #502


  	    function DraftMap(target, parent) {
  	      this[DRAFT_STATE] = {
  	        type_: 2
  	        /* Map */
  	        ,
  	        parent_: parent,
  	        scope_: parent ? parent.scope_ : getCurrentScope(),
  	        modified_: false,
  	        finalized_: false,
  	        copy_: undefined,
  	        assigned_: undefined,
  	        base_: target,
  	        draft_: this,
  	        isManual_: false,
  	        revoked_: false
  	      };
  	      return this;
  	    }

  	    var p = DraftMap.prototype;
  	    Object.defineProperty(p, "size", {
  	      get: function get() {
  	        return latest(this[DRAFT_STATE]).size;
  	      } // enumerable: false,
  	      // configurable: true

  	    });

  	    p.has = function (key) {
  	      return latest(this[DRAFT_STATE]).has(key);
  	    };

  	    p.set = function (key, value) {
  	      var state = this[DRAFT_STATE];
  	      assertUnrevoked(state);

  	      if (!latest(state).has(key) || latest(state).get(key) !== value) {
  	        prepareMapCopy(state);
  	        markChanged(state);
  	        state.assigned_.set(key, true);
  	        state.copy_.set(key, value);
  	        state.assigned_.set(key, true);
  	      }

  	      return this;
  	    };

  	    p.delete = function (key) {
  	      if (!this.has(key)) {
  	        return false;
  	      }

  	      var state = this[DRAFT_STATE];
  	      assertUnrevoked(state);
  	      prepareMapCopy(state);
  	      markChanged(state);

  	      if (state.base_.has(key)) {
  	        state.assigned_.set(key, false);
  	      } else {
  	        state.assigned_.delete(key);
  	      }

  	      state.copy_.delete(key);
  	      return true;
  	    };

  	    p.clear = function () {
  	      var state = this[DRAFT_STATE];
  	      assertUnrevoked(state);

  	      if (latest(state).size) {
  	        prepareMapCopy(state);
  	        markChanged(state);
  	        state.assigned_ = new Map();
  	        each(state.base_, function (key) {
  	          state.assigned_.set(key, false);
  	        });
  	        state.copy_.clear();
  	      }
  	    };

  	    p.forEach = function (cb, thisArg) {
  	      var _this = this;

  	      var state = this[DRAFT_STATE];
  	      latest(state).forEach(function (_value, key, _map) {
  	        cb.call(thisArg, _this.get(key), key, _this);
  	      });
  	    };

  	    p.get = function (key) {
  	      var state = this[DRAFT_STATE];
  	      assertUnrevoked(state);
  	      var value = latest(state).get(key);

  	      if (state.finalized_ || !isDraftable(value)) {
  	        return value;
  	      }

  	      if (value !== state.base_.get(key)) {
  	        return value; // either already drafted or reassigned
  	      } // despite what it looks, this creates a draft only once, see above condition


  	      var draft = createProxy(state.scope_.immer_, value, state);
  	      prepareMapCopy(state);
  	      state.copy_.set(key, draft);
  	      return draft;
  	    };

  	    p.keys = function () {
  	      return latest(this[DRAFT_STATE]).keys();
  	    };

  	    p.values = function () {
  	      var _this2 = this,
  	          _ref;

  	      var iterator = this.keys();
  	      return _ref = {}, _ref[iteratorSymbol] = function () {
  	        return _this2.values();
  	      }, _ref.next = function next() {
  	        var r = iterator.next();
  	        /* istanbul ignore next */

  	        if (r.done) return r;

  	        var value = _this2.get(r.value);

  	        return {
  	          done: false,
  	          value: value
  	        };
  	      }, _ref;
  	    };

  	    p.entries = function () {
  	      var _this3 = this,
  	          _ref2;

  	      var iterator = this.keys();
  	      return _ref2 = {}, _ref2[iteratorSymbol] = function () {
  	        return _this3.entries();
  	      }, _ref2.next = function next() {
  	        var r = iterator.next();
  	        /* istanbul ignore next */

  	        if (r.done) return r;

  	        var value = _this3.get(r.value);

  	        return {
  	          done: false,
  	          value: [r.value, value]
  	        };
  	      }, _ref2;
  	    };

  	    p[iteratorSymbol] = function () {
  	      return this.entries();
  	    };

  	    return DraftMap;
  	  }(Map);

  	  function proxyMap_(target, parent) {
  	    // @ts-ignore
  	    return new DraftMap(target, parent);
  	  }

  	  function prepareMapCopy(state) {
  	    if (!state.copy_) {
  	      state.assigned_ = new Map();
  	      state.copy_ = new Map(state.base_);
  	    }
  	  }

  	  var DraftSet = function (_super) {
  	    __extends(DraftSet, _super); // Create class manually, cause #502


  	    function DraftSet(target, parent) {
  	      this[DRAFT_STATE] = {
  	        type_: 3
  	        /* Set */
  	        ,
  	        parent_: parent,
  	        scope_: parent ? parent.scope_ : getCurrentScope(),
  	        modified_: false,
  	        finalized_: false,
  	        copy_: undefined,
  	        base_: target,
  	        draft_: this,
  	        drafts_: new Map(),
  	        revoked_: false,
  	        isManual_: false
  	      };
  	      return this;
  	    }

  	    var p = DraftSet.prototype;
  	    Object.defineProperty(p, "size", {
  	      get: function get() {
  	        return latest(this[DRAFT_STATE]).size;
  	      } // enumerable: true,

  	    });

  	    p.has = function (value) {
  	      var state = this[DRAFT_STATE];
  	      assertUnrevoked(state); // bit of trickery here, to be able to recognize both the value, and the draft of its value

  	      if (!state.copy_) {
  	        return state.base_.has(value);
  	      }

  	      if (state.copy_.has(value)) return true;
  	      if (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value))) return true;
  	      return false;
  	    };

  	    p.add = function (value) {
  	      var state = this[DRAFT_STATE];
  	      assertUnrevoked(state);

  	      if (!this.has(value)) {
  	        prepareSetCopy(state);
  	        markChanged(state);
  	        state.copy_.add(value);
  	      }

  	      return this;
  	    };

  	    p.delete = function (value) {
  	      if (!this.has(value)) {
  	        return false;
  	      }

  	      var state = this[DRAFT_STATE];
  	      assertUnrevoked(state);
  	      prepareSetCopy(state);
  	      markChanged(state);
  	      return state.copy_.delete(value) || (state.drafts_.has(value) ? state.copy_.delete(state.drafts_.get(value)) :
  	      /* istanbul ignore next */
  	      false);
  	    };

  	    p.clear = function () {
  	      var state = this[DRAFT_STATE];
  	      assertUnrevoked(state);

  	      if (latest(state).size) {
  	        prepareSetCopy(state);
  	        markChanged(state);
  	        state.copy_.clear();
  	      }
  	    };

  	    p.values = function () {
  	      var state = this[DRAFT_STATE];
  	      assertUnrevoked(state);
  	      prepareSetCopy(state);
  	      return state.copy_.values();
  	    };

  	    p.entries = function entries() {
  	      var state = this[DRAFT_STATE];
  	      assertUnrevoked(state);
  	      prepareSetCopy(state);
  	      return state.copy_.entries();
  	    };

  	    p.keys = function () {
  	      return this.values();
  	    };

  	    p[iteratorSymbol] = function () {
  	      return this.values();
  	    };

  	    p.forEach = function forEach(cb, thisArg) {
  	      var iterator = this.values();
  	      var result = iterator.next();

  	      while (!result.done) {
  	        cb.call(thisArg, result.value, result.value, this);
  	        result = iterator.next();
  	      }
  	    };

  	    return DraftSet;
  	  }(Set);

  	  function proxySet_(target, parent) {
  	    // @ts-ignore
  	    return new DraftSet(target, parent);
  	  }

  	  function prepareSetCopy(state) {
  	    if (!state.copy_) {
  	      // create drafts for all entries to preserve insertion order
  	      state.copy_ = new Set();
  	      state.base_.forEach(function (value) {
  	        if (isDraftable(value)) {
  	          var draft = createProxy(state.scope_.immer_, value, state);
  	          state.drafts_.set(value, draft);
  	          state.copy_.add(draft);
  	        } else {
  	          state.copy_.add(value);
  	        }
  	      });
  	    }
  	  }

  	  function assertUnrevoked(state
  	  /*ES5State | MapState | SetState*/
  	  ) {
  	    if (state.revoked_) die(3, JSON.stringify(latest(state)));
  	  }

  	  loadPlugin("MapSet", {
  	    proxyMap_: proxyMap_,
  	    proxySet_: proxySet_
  	  });
  	}

  	function enableAllPlugins() {
  	  enableES5();
  	  enableMapSet();
  	  enablePatches();
  	}

  	var immer =
  	/*#__PURE__*/
  	new Immer();
  	/**
  	 * The `produce` function takes a value and a "recipe function" (whose
  	 * return value often depends on the base state). The recipe function is
  	 * free to mutate its first argument however it wants. All mutations are
  	 * only ever applied to a __copy__ of the base state.
  	 *
  	 * Pass only a function to create a "curried producer" which relieves you
  	 * from passing the recipe function every time.
  	 *
  	 * Only plain objects and arrays are made mutable. All other objects are
  	 * considered uncopyable.
  	 *
  	 * Note: This function is __bound__ to its `Immer` instance.
  	 *
  	 * @param {any} base - the initial state
  	 * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified
  	 * @param {Function} patchListener - optional function that will be called with all the patches produced here
  	 * @returns {any} a new state, or the initial state if nothing was modified
  	 */

  	var produce = immer.produce;
  	/**
  	 * Like `produce`, but `produceWithPatches` always returns a tuple
  	 * [nextState, patches, inversePatches] (instead of just the next state)
  	 */

  	var produceWithPatches =
  	/*#__PURE__*/
  	immer.produceWithPatches.bind(immer);
  	/**
  	 * Pass true to automatically freeze all copies created by Immer.
  	 *
  	 * Always freeze by default, even in production mode
  	 */

  	var setAutoFreeze =
  	/*#__PURE__*/
  	immer.setAutoFreeze.bind(immer);
  	/**
  	 * Pass true to use the ES2015 `Proxy` class when creating drafts, which is
  	 * always faster than using ES5 proxies.
  	 *
  	 * By default, feature detection is used, so calling this is rarely necessary.
  	 */

  	var setUseProxies =
  	/*#__PURE__*/
  	immer.setUseProxies.bind(immer);
  	/**
  	 * Apply an array of Immer patches to the first argument.
  	 *
  	 * This function is a producer, which means copy-on-write is in effect.
  	 */

  	var applyPatches =
  	/*#__PURE__*/
  	immer.applyPatches.bind(immer);
  	/**
  	 * Create an Immer draft from the given base state, which may be a draft itself.
  	 * The draft can be modified until you finalize it with the `finishDraft` function.
  	 */

  	var createDraft =
  	/*#__PURE__*/
  	immer.createDraft.bind(immer);
  	/**
  	 * Finalize an Immer draft from a `createDraft` call, returning the base state
  	 * (if no changes were made) or a modified copy. The draft must *not* be
  	 * mutated afterwards.
  	 *
  	 * Pass a function as the 2nd argument to generate Immer patches based on the
  	 * changes that were made.
  	 */

  	var finishDraft =
  	/*#__PURE__*/
  	immer.finishDraft.bind(immer);
  	/**
  	 * This function is actually a no-op, but can be used to cast an immutable type
  	 * to an draft type and make TypeScript happy
  	 *
  	 * @param value
  	 */

  	function castDraft(value) {
  	  return value;
  	}
  	/**
  	 * This function is actually a no-op, but can be used to cast a mutable type
  	 * to an immutable type and make TypeScript happy
  	 * @param value
  	 */

  	function castImmutable(value) {
  	  return value;
  	}

  	immer_cjs_development.Immer = Immer;
  	immer_cjs_development.applyPatches = applyPatches;
  	immer_cjs_development.castDraft = castDraft;
  	immer_cjs_development.castImmutable = castImmutable;
  	immer_cjs_development.createDraft = createDraft;
  	immer_cjs_development.current = current;
  	immer_cjs_development.default = produce;
  	immer_cjs_development.enableAllPlugins = enableAllPlugins;
  	immer_cjs_development.enableES5 = enableES5;
  	immer_cjs_development.enableMapSet = enableMapSet;
  	immer_cjs_development.enablePatches = enablePatches;
  	immer_cjs_development.finishDraft = finishDraft;
  	immer_cjs_development.freeze = freeze;
  	immer_cjs_development.immerable = DRAFTABLE;
  	immer_cjs_development.isDraft = isDraft;
  	immer_cjs_development.isDraftable = isDraftable;
  	immer_cjs_development.nothing = NOTHING;
  	immer_cjs_development.original = original;
  	immer_cjs_development.produce = produce;
  	immer_cjs_development.produceWithPatches = produceWithPatches;
  	immer_cjs_development.setAutoFreeze = setAutoFreeze;
  	immer_cjs_development.setUseProxies = setUseProxies;
  	
  	return immer_cjs_development;
  }

  var hasRequiredDist$2;

  function requireDist$2 () {
  	if (hasRequiredDist$2) return dist$1.exports;
  	hasRequiredDist$2 = 1;

  	{
  	  dist$1.exports = /*@__PURE__*/ requireImmer_cjs_development();
  	}
  	return dist$1.exports;
  }

  var hasRequiredDist$1;

  function requireDist$1 () {
  	if (hasRequiredDist$1) return dist$2;
  	hasRequiredDist$1 = 1;

  	Object.defineProperty(dist$2, '__esModule', { value: true });

  	var isPlainObject = requireIsPlainObject();
  	var immer = /*@__PURE__*/ requireDist$2();

  	function unwrapExports (x) {
  		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  	}

  	function createCommonjsModule(fn, module) {
  		return module = { exports: {} }, fn(module, module.exports), module.exports;
  	}

  	var arrayLikeToArray = createCommonjsModule(function (module) {
  	function _arrayLikeToArray(arr, len) {
  	  if (len == null || len > arr.length) len = arr.length;

  	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
  	    arr2[i] = arr[i];
  	  }

  	  return arr2;
  	}

  	module.exports = _arrayLikeToArray;
  	module.exports["default"] = module.exports, module.exports.__esModule = true;
  	});

  	unwrapExports(arrayLikeToArray);

  	var arrayWithoutHoles = createCommonjsModule(function (module) {
  	function _arrayWithoutHoles(arr) {
  	  if (Array.isArray(arr)) return arrayLikeToArray(arr);
  	}

  	module.exports = _arrayWithoutHoles;
  	module.exports["default"] = module.exports, module.exports.__esModule = true;
  	});

  	unwrapExports(arrayWithoutHoles);

  	var iterableToArray = createCommonjsModule(function (module) {
  	function _iterableToArray(iter) {
  	  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  	}

  	module.exports = _iterableToArray;
  	module.exports["default"] = module.exports, module.exports.__esModule = true;
  	});

  	unwrapExports(iterableToArray);

  	var unsupportedIterableToArray = createCommonjsModule(function (module) {
  	function _unsupportedIterableToArray(o, minLen) {
  	  if (!o) return;
  	  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  	  var n = Object.prototype.toString.call(o).slice(8, -1);
  	  if (n === "Object" && o.constructor) n = o.constructor.name;
  	  if (n === "Map" || n === "Set") return Array.from(o);
  	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
  	}

  	module.exports = _unsupportedIterableToArray;
  	module.exports["default"] = module.exports, module.exports.__esModule = true;
  	});

  	unwrapExports(unsupportedIterableToArray);

  	var nonIterableSpread = createCommonjsModule(function (module) {
  	function _nonIterableSpread() {
  	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  	}

  	module.exports = _nonIterableSpread;
  	module.exports["default"] = module.exports, module.exports.__esModule = true;
  	});

  	unwrapExports(nonIterableSpread);

  	var toConsumableArray = createCommonjsModule(function (module) {
  	function _toConsumableArray(arr) {
  	  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
  	}

  	module.exports = _toConsumableArray;
  	module.exports["default"] = module.exports, module.exports.__esModule = true;
  	});

  	var _toConsumableArray = unwrapExports(toConsumableArray);

  	var arrayWithHoles = createCommonjsModule(function (module) {
  	function _arrayWithHoles(arr) {
  	  if (Array.isArray(arr)) return arr;
  	}

  	module.exports = _arrayWithHoles;
  	module.exports["default"] = module.exports, module.exports.__esModule = true;
  	});

  	unwrapExports(arrayWithHoles);

  	var iterableToArrayLimit = createCommonjsModule(function (module) {
  	function _iterableToArrayLimit(arr, i) {
  	  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  	  if (_i == null) return;
  	  var _arr = [];
  	  var _n = true;
  	  var _d = false;

  	  var _s, _e;

  	  try {
  	    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
  	      _arr.push(_s.value);

  	      if (i && _arr.length === i) break;
  	    }
  	  } catch (err) {
  	    _d = true;
  	    _e = err;
  	  } finally {
  	    try {
  	      if (!_n && _i["return"] != null) _i["return"]();
  	    } finally {
  	      if (_d) throw _e;
  	    }
  	  }

  	  return _arr;
  	}

  	module.exports = _iterableToArrayLimit;
  	module.exports["default"] = module.exports, module.exports.__esModule = true;
  	});

  	unwrapExports(iterableToArrayLimit);

  	var nonIterableRest = createCommonjsModule(function (module) {
  	function _nonIterableRest() {
  	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  	}

  	module.exports = _nonIterableRest;
  	module.exports["default"] = module.exports, module.exports.__esModule = true;
  	});

  	unwrapExports(nonIterableRest);

  	var slicedToArray = createCommonjsModule(function (module) {
  	function _slicedToArray(arr, i) {
  	  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
  	}

  	module.exports = _slicedToArray;
  	module.exports["default"] = module.exports, module.exports.__esModule = true;
  	});

  	var _slicedToArray = unwrapExports(slicedToArray);

  	var defineProperty = createCommonjsModule(function (module) {
  	function _defineProperty(obj, key, value) {
  	  if (key in obj) {
  	    Object.defineProperty(obj, key, {
  	      value: value,
  	      enumerable: true,
  	      configurable: true,
  	      writable: true
  	    });
  	  } else {
  	    obj[key] = value;
  	  }

  	  return obj;
  	}

  	module.exports = _defineProperty;
  	module.exports["default"] = module.exports, module.exports.__esModule = true;
  	});

  	var _defineProperty = unwrapExports(defineProperty);

  	var DIRTY_PATHS = new WeakMap();
  	var DIRTY_PATH_KEYS = new WeakMap();
  	var FLUSHING = new WeakMap();
  	var NORMALIZING = new WeakMap();
  	var PATH_REFS = new WeakMap();
  	var POINT_REFS = new WeakMap();
  	var RANGE_REFS = new WeakMap();

  	function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  	function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$9(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  	function _createForOfIteratorHelper$7(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$7(o)) || allowArrayLike) { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  	function _unsupportedIterableToArray$7(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$7(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$7(o, minLen); }

  	function _arrayLikeToArray$7(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  	/**
  	 * Create a new Slate `Editor` object.
  	 */

  	var createEditor = function createEditor() {
  	  var editor = {
  	    children: [],
  	    operations: [],
  	    selection: null,
  	    marks: null,
  	    isInline: function isInline() {
  	      return false;
  	    },
  	    isVoid: function isVoid() {
  	      return false;
  	    },
  	    onChange: function onChange() {},
  	    apply: function apply(op) {
  	      var _iterator = _createForOfIteratorHelper$7(Editor.pathRefs(editor)),
  	          _step;

  	      try {
  	        for (_iterator.s(); !(_step = _iterator.n()).done;) {
  	          var ref = _step.value;
  	          PathRef.transform(ref, op);
  	        }
  	      } catch (err) {
  	        _iterator.e(err);
  	      } finally {
  	        _iterator.f();
  	      }

  	      var _iterator2 = _createForOfIteratorHelper$7(Editor.pointRefs(editor)),
  	          _step2;

  	      try {
  	        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
  	          var _ref = _step2.value;
  	          PointRef.transform(_ref, op);
  	        }
  	      } catch (err) {
  	        _iterator2.e(err);
  	      } finally {
  	        _iterator2.f();
  	      }

  	      var _iterator3 = _createForOfIteratorHelper$7(Editor.rangeRefs(editor)),
  	          _step3;

  	      try {
  	        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
  	          var _ref2 = _step3.value;
  	          RangeRef.transform(_ref2, op);
  	        }
  	      } catch (err) {
  	        _iterator3.e(err);
  	      } finally {
  	        _iterator3.f();
  	      }

  	      var oldDirtyPaths = DIRTY_PATHS.get(editor) || [];
  	      var oldDirtyPathKeys = DIRTY_PATH_KEYS.get(editor) || new Set();
  	      var dirtyPaths;
  	      var dirtyPathKeys;

  	      var add = function add(path) {
  	        if (path) {
  	          var key = path.join(',');

  	          if (!dirtyPathKeys.has(key)) {
  	            dirtyPathKeys.add(key);
  	            dirtyPaths.push(path);
  	          }
  	        }
  	      };

  	      if (Path.operationCanTransformPath(op)) {
  	        dirtyPaths = [];
  	        dirtyPathKeys = new Set();

  	        var _iterator4 = _createForOfIteratorHelper$7(oldDirtyPaths),
  	            _step4;

  	        try {
  	          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
  	            var path = _step4.value;
  	            var newPath = Path.transform(path, op);
  	            add(newPath);
  	          }
  	        } catch (err) {
  	          _iterator4.e(err);
  	        } finally {
  	          _iterator4.f();
  	        }
  	      } else {
  	        dirtyPaths = oldDirtyPaths;
  	        dirtyPathKeys = oldDirtyPathKeys;
  	      }

  	      var newDirtyPaths = editor.getDirtyPaths(op);

  	      var _iterator5 = _createForOfIteratorHelper$7(newDirtyPaths),
  	          _step5;

  	      try {
  	        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
  	          var _path = _step5.value;
  	          add(_path);
  	        }
  	      } catch (err) {
  	        _iterator5.e(err);
  	      } finally {
  	        _iterator5.f();
  	      }

  	      DIRTY_PATHS.set(editor, dirtyPaths);
  	      DIRTY_PATH_KEYS.set(editor, dirtyPathKeys);
  	      Transforms.transform(editor, op);
  	      editor.operations.push(op);
  	      Editor.normalize(editor); // Clear any formats applied to the cursor if the selection changes.

  	      if (op.type === 'set_selection') {
  	        editor.marks = null;
  	      }

  	      if (!FLUSHING.get(editor)) {
  	        FLUSHING.set(editor, true);
  	        Promise.resolve().then(function () {
  	          FLUSHING.set(editor, false);
  	          editor.onChange();
  	          editor.operations = [];
  	        });
  	      }
  	    },
  	    addMark: function addMark(key, value) {
  	      var selection = editor.selection;

  	      if (selection) {
  	        if (Range.isExpanded(selection)) {
  	          Transforms.setNodes(editor, _defineProperty({}, key, value), {
  	            match: Text.isText,
  	            split: true
  	          });
  	        } else {
  	          var marks = _objectSpread$9(_objectSpread$9({}, Editor.marks(editor) || {}), {}, _defineProperty({}, key, value));

  	          editor.marks = marks;

  	          if (!FLUSHING.get(editor)) {
  	            editor.onChange();
  	          }
  	        }
  	      }
  	    },
  	    deleteBackward: function deleteBackward(unit) {
  	      var selection = editor.selection;

  	      if (selection && Range.isCollapsed(selection)) {
  	        Transforms["delete"](editor, {
  	          unit: unit,
  	          reverse: true
  	        });
  	      }
  	    },
  	    deleteForward: function deleteForward(unit) {
  	      var selection = editor.selection;

  	      if (selection && Range.isCollapsed(selection)) {
  	        Transforms["delete"](editor, {
  	          unit: unit
  	        });
  	      }
  	    },
  	    deleteFragment: function deleteFragment(direction) {
  	      var selection = editor.selection;

  	      if (selection && Range.isExpanded(selection)) {
  	        Transforms["delete"](editor, {
  	          reverse: direction === 'backward'
  	        });
  	      }
  	    },
  	    getFragment: function getFragment() {
  	      var selection = editor.selection;

  	      if (selection) {
  	        return Node.fragment(editor, selection);
  	      }

  	      return [];
  	    },
  	    insertBreak: function insertBreak() {
  	      Transforms.splitNodes(editor, {
  	        always: true
  	      });
  	    },
  	    insertSoftBreak: function insertSoftBreak() {
  	      Transforms.splitNodes(editor, {
  	        always: true
  	      });
  	    },
  	    insertFragment: function insertFragment(fragment) {
  	      Transforms.insertFragment(editor, fragment);
  	    },
  	    insertNode: function insertNode(node) {
  	      Transforms.insertNodes(editor, node);
  	    },
  	    insertText: function insertText(text) {
  	      var selection = editor.selection,
  	          marks = editor.marks;

  	      if (selection) {
  	        if (marks) {
  	          var node = _objectSpread$9({
  	            text: text
  	          }, marks);

  	          Transforms.insertNodes(editor, node);
  	        } else {
  	          Transforms.insertText(editor, text);
  	        }

  	        editor.marks = null;
  	      }
  	    },
  	    normalizeNode: function normalizeNode(entry) {
  	      var _entry = _slicedToArray(entry, 2),
  	          node = _entry[0],
  	          path = _entry[1]; // There are no core normalizations for text nodes.


  	      if (Text.isText(node)) {
  	        return;
  	      } // Ensure that block and inline nodes have at least one text child.


  	      if (Element.isElement(node) && node.children.length === 0) {
  	        var child = {
  	          text: ''
  	        };
  	        Transforms.insertNodes(editor, child, {
  	          at: path.concat(0),
  	          voids: true
  	        });
  	        return;
  	      } // Determine whether the node should have block or inline children.


  	      var shouldHaveInlines = Editor.isEditor(node) ? false : Element.isElement(node) && (editor.isInline(node) || node.children.length === 0 || Text.isText(node.children[0]) || editor.isInline(node.children[0])); // Since we'll be applying operations while iterating, keep track of an
  	      // index that accounts for any added/removed nodes.

  	      var n = 0;

  	      for (var i = 0; i < node.children.length; i++, n++) {
  	        var currentNode = Node.get(editor, path);
  	        if (Text.isText(currentNode)) continue;
  	        var _child = node.children[i];
  	        var prev = currentNode.children[n - 1];
  	        var isLast = i === node.children.length - 1;
  	        var isInlineOrText = Text.isText(_child) || Element.isElement(_child) && editor.isInline(_child); // Only allow block nodes in the top-level children and parent blocks
  	        // that only contain block nodes. Similarly, only allow inline nodes in
  	        // other inline nodes, or parent blocks that only contain inlines and
  	        // text.

  	        if (isInlineOrText !== shouldHaveInlines) {
  	          Transforms.removeNodes(editor, {
  	            at: path.concat(n),
  	            voids: true
  	          });
  	          n--;
  	        } else if (Element.isElement(_child)) {
  	          // Ensure that inline nodes are surrounded by text nodes.
  	          if (editor.isInline(_child)) {
  	            if (prev == null || !Text.isText(prev)) {
  	              var newChild = {
  	                text: ''
  	              };
  	              Transforms.insertNodes(editor, newChild, {
  	                at: path.concat(n),
  	                voids: true
  	              });
  	              n++;
  	            } else if (isLast) {
  	              var _newChild = {
  	                text: ''
  	              };
  	              Transforms.insertNodes(editor, _newChild, {
  	                at: path.concat(n + 1),
  	                voids: true
  	              });
  	              n++;
  	            }
  	          }
  	        } else {
  	          // Merge adjacent text nodes that are empty or match.
  	          if (prev != null && Text.isText(prev)) {
  	            if (Text.equals(_child, prev, {
  	              loose: true
  	            })) {
  	              Transforms.mergeNodes(editor, {
  	                at: path.concat(n),
  	                voids: true
  	              });
  	              n--;
  	            } else if (prev.text === '') {
  	              Transforms.removeNodes(editor, {
  	                at: path.concat(n - 1),
  	                voids: true
  	              });
  	              n--;
  	            } else if (_child.text === '') {
  	              Transforms.removeNodes(editor, {
  	                at: path.concat(n),
  	                voids: true
  	              });
  	              n--;
  	            }
  	          }
  	        }
  	      }
  	    },
  	    removeMark: function removeMark(key) {
  	      var selection = editor.selection;

  	      if (selection) {
  	        if (Range.isExpanded(selection)) {
  	          Transforms.unsetNodes(editor, key, {
  	            match: Text.isText,
  	            split: true
  	          });
  	        } else {
  	          var marks = _objectSpread$9({}, Editor.marks(editor) || {});

  	          delete marks[key];
  	          editor.marks = marks;

  	          if (!FLUSHING.get(editor)) {
  	            editor.onChange();
  	          }
  	        }
  	      }
  	    },

  	    /**
  	     * Get the "dirty" paths generated from an operation.
  	     */
  	    getDirtyPaths: function getDirtyPaths(op) {
  	      switch (op.type) {
  	        case 'insert_text':
  	        case 'remove_text':
  	        case 'set_node':
  	          {
  	            var path = op.path;
  	            return Path.levels(path);
  	          }

  	        case 'insert_node':
  	          {
  	            var node = op.node,
  	                _path2 = op.path;
  	            var levels = Path.levels(_path2);
  	            var descendants = Text.isText(node) ? [] : Array.from(Node.nodes(node), function (_ref3) {
  	              var _ref4 = _slicedToArray(_ref3, 2),
  	                  p = _ref4[1];

  	              return _path2.concat(p);
  	            });
  	            return [].concat(_toConsumableArray(levels), _toConsumableArray(descendants));
  	          }

  	        case 'merge_node':
  	          {
  	            var _path3 = op.path;
  	            var ancestors = Path.ancestors(_path3);
  	            var previousPath = Path.previous(_path3);
  	            return [].concat(_toConsumableArray(ancestors), [previousPath]);
  	          }

  	        case 'move_node':
  	          {
  	            var _path4 = op.path,
  	                newPath = op.newPath;

  	            if (Path.equals(_path4, newPath)) {
  	              return [];
  	            }

  	            var oldAncestors = [];
  	            var newAncestors = [];

  	            var _iterator6 = _createForOfIteratorHelper$7(Path.ancestors(_path4)),
  	                _step6;

  	            try {
  	              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
  	                var ancestor = _step6.value;
  	                var p = Path.transform(ancestor, op);
  	                oldAncestors.push(p);
  	              }
  	            } catch (err) {
  	              _iterator6.e(err);
  	            } finally {
  	              _iterator6.f();
  	            }

  	            var _iterator7 = _createForOfIteratorHelper$7(Path.ancestors(newPath)),
  	                _step7;

  	            try {
  	              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
  	                var _ancestor = _step7.value;

  	                var _p = Path.transform(_ancestor, op);

  	                newAncestors.push(_p);
  	              }
  	            } catch (err) {
  	              _iterator7.e(err);
  	            } finally {
  	              _iterator7.f();
  	            }

  	            var newParent = newAncestors[newAncestors.length - 1];
  	            var newIndex = newPath[newPath.length - 1];
  	            var resultPath = newParent.concat(newIndex);
  	            return [].concat(oldAncestors, newAncestors, [resultPath]);
  	          }

  	        case 'remove_node':
  	          {
  	            var _path5 = op.path;

  	            var _ancestors = Path.ancestors(_path5);

  	            return _toConsumableArray(_ancestors);
  	          }

  	        case 'split_node':
  	          {
  	            var _path6 = op.path;

  	            var _levels = Path.levels(_path6);

  	            var nextPath = Path.next(_path6);
  	            return [].concat(_toConsumableArray(_levels), [nextPath]);
  	          }

  	        default:
  	          {
  	            return [];
  	          }
  	      }
  	    }
  	  };
  	  return editor;
  	};

  	var objectWithoutPropertiesLoose = createCommonjsModule(function (module) {
  	function _objectWithoutPropertiesLoose(source, excluded) {
  	  if (source == null) return {};
  	  var target = {};
  	  var sourceKeys = Object.keys(source);
  	  var key, i;

  	  for (i = 0; i < sourceKeys.length; i++) {
  	    key = sourceKeys[i];
  	    if (excluded.indexOf(key) >= 0) continue;
  	    target[key] = source[key];
  	  }

  	  return target;
  	}

  	module.exports = _objectWithoutPropertiesLoose;
  	module.exports["default"] = module.exports, module.exports.__esModule = true;
  	});

  	unwrapExports(objectWithoutPropertiesLoose);

  	var objectWithoutProperties = createCommonjsModule(function (module) {
  	function _objectWithoutProperties(source, excluded) {
  	  if (source == null) return {};
  	  var target = objectWithoutPropertiesLoose(source, excluded);
  	  var key, i;

  	  if (Object.getOwnPropertySymbols) {
  	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

  	    for (i = 0; i < sourceSymbolKeys.length; i++) {
  	      key = sourceSymbolKeys[i];
  	      if (excluded.indexOf(key) >= 0) continue;
  	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
  	      target[key] = source[key];
  	    }
  	  }

  	  return target;
  	}

  	module.exports = _objectWithoutProperties;
  	module.exports["default"] = module.exports, module.exports.__esModule = true;
  	});

  	var _objectWithoutProperties = unwrapExports(objectWithoutProperties);

  	function _createForOfIteratorHelper$6(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$6(o)) || allowArrayLike) { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  	function _unsupportedIterableToArray$6(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$6(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$6(o, minLen); }

  	function _arrayLikeToArray$6(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  	// Character (grapheme cluster) boundaries are determined according to
  	// the default grapheme cluster boundary specification, extended grapheme clusters variant[1].
  	//
  	// References:
  	//
  	// [1] https://www.unicode.org/reports/tr29/#Default_Grapheme_Cluster_Table
  	// [2] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakProperty.txt
  	// [3] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.html
  	// [4] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.txt

  	/**
  	 * Get the distance to the end of the first character in a string of text.
  	 */
  	var getCharacterDistance = function getCharacterDistance(str) {
  	  var isRTL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  	  var isLTR = !isRTL;
  	  var codepoints = isRTL ? codepointsIteratorRTL(str) : str;
  	  var left = CodepointType.None;
  	  var right = CodepointType.None;
  	  var distance = 0; // Evaluation of these conditions are deferred.

  	  var gb11 = null; // Is GB11 applicable?

  	  var gb12Or13 = null; // Is GB12 or GB13 applicable?

  	  var _iterator = _createForOfIteratorHelper$6(codepoints),
  	      _step;

  	  try {
  	    for (_iterator.s(); !(_step = _iterator.n()).done;) {
  	      var _char = _step.value;

  	      var code = _char.codePointAt(0);

  	      if (!code) break;
  	      var type = getCodepointType(_char, code);

  	      var _ref = isLTR ? [right, type] : [type, left];

  	      var _ref2 = _slicedToArray(_ref, 2);

  	      left = _ref2[0];
  	      right = _ref2[1];

  	      if (intersects(left, CodepointType.ZWJ) && intersects(right, CodepointType.ExtPict)) {
  	        if (isLTR) {
  	          gb11 = endsWithEmojiZWJ(str.substring(0, distance));
  	        } else {
  	          gb11 = endsWithEmojiZWJ(str.substring(0, str.length - distance));
  	        }

  	        if (!gb11) break;
  	      }

  	      if (intersects(left, CodepointType.RI) && intersects(right, CodepointType.RI)) {
  	        if (gb12Or13 !== null) {
  	          gb12Or13 = !gb12Or13;
  	        } else {
  	          if (isLTR) {
  	            gb12Or13 = true;
  	          } else {
  	            gb12Or13 = endsWithOddNumberOfRIs(str.substring(0, str.length - distance));
  	          }
  	        }

  	        if (!gb12Or13) break;
  	      }

  	      if (left !== CodepointType.None && right !== CodepointType.None && isBoundaryPair(left, right)) {
  	        break;
  	      }

  	      distance += _char.length;
  	    }
  	  } catch (err) {
  	    _iterator.e(err);
  	  } finally {
  	    _iterator.f();
  	  }

  	  return distance || 1;
  	};
  	var SPACE = /\s/;
  	var PUNCTUATION = /[\u0021-\u0023\u0025-\u002A\u002C-\u002F\u003A\u003B\u003F\u0040\u005B-\u005D\u005F\u007B\u007D\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E3B\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;
  	var CHAMELEON = /['\u2018\u2019]/;
  	/**
  	 * Get the distance to the end of the first word in a string of text.
  	 */

  	var getWordDistance = function getWordDistance(text) {
  	  var isRTL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  	  var dist = 0;
  	  var started = false;

  	  while (text.length > 0) {
  	    var charDist = getCharacterDistance(text, isRTL);

  	    var _splitByCharacterDist = splitByCharacterDistance(text, charDist, isRTL),
  	        _splitByCharacterDist2 = _slicedToArray(_splitByCharacterDist, 2),
  	        _char2 = _splitByCharacterDist2[0],
  	        remaining = _splitByCharacterDist2[1];

  	    if (isWordCharacter(_char2, remaining, isRTL)) {
  	      started = true;
  	      dist += charDist;
  	    } else if (!started) {
  	      dist += charDist;
  	    } else {
  	      break;
  	    }

  	    text = remaining;
  	  }

  	  return dist;
  	};
  	/**
  	 * Split a string in two parts at a given distance starting from the end when
  	 * `isRTL` is set to `true`.
  	 */

  	var splitByCharacterDistance = function splitByCharacterDistance(str, dist, isRTL) {
  	  if (isRTL) {
  	    var at = str.length - dist;
  	    return [str.slice(at, str.length), str.slice(0, at)];
  	  }

  	  return [str.slice(0, dist), str.slice(dist)];
  	};
  	/**
  	 * Check if a character is a word character. The `remaining` argument is used
  	 * because sometimes you must read subsequent characters to truly determine it.
  	 */

  	var isWordCharacter = function isWordCharacter(_char3, remaining) {
  	  var isRTL = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  	  if (SPACE.test(_char3)) {
  	    return false;
  	  } // Chameleons count as word characters as long as they're in a word, so
  	  // recurse to see if the next one is a word character or not.


  	  if (CHAMELEON.test(_char3)) {
  	    var charDist = getCharacterDistance(remaining, isRTL);

  	    var _splitByCharacterDist3 = splitByCharacterDistance(remaining, charDist, isRTL),
  	        _splitByCharacterDist4 = _slicedToArray(_splitByCharacterDist3, 2),
  	        nextChar = _splitByCharacterDist4[0],
  	        nextRemaining = _splitByCharacterDist4[1];

  	    if (isWordCharacter(nextChar, nextRemaining, isRTL)) {
  	      return true;
  	    }
  	  }

  	  if (PUNCTUATION.test(_char3)) {
  	    return false;
  	  }

  	  return true;
  	};
  	/**
  	 * Iterate on codepoints from right to left.
  	 */


  	var codepointsIteratorRTL = function* codepointsIteratorRTL(str) {
  	  var end = str.length - 1;

  	  for (var i = 0; i < str.length; i++) {
  	    var char1 = str.charAt(end - i);

  	    if (isLowSurrogate(char1.charCodeAt(0))) {
  	      var char2 = str.charAt(end - i - 1);

  	      if (isHighSurrogate(char2.charCodeAt(0))) {
  	        yield char2 + char1;
  	        i++;
  	        continue;
  	      }
  	    }

  	    yield char1;
  	  }
  	};
  	/**
  	 * Is `charCode` a high surrogate.
  	 *
  	 * https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates
  	 */

  	var isHighSurrogate = function isHighSurrogate(charCode) {
  	  return charCode >= 0xd800 && charCode <= 0xdbff;
  	};
  	/**
  	 * Is `charCode` a low surrogate.
  	 *
  	 * https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates
  	 */


  	var isLowSurrogate = function isLowSurrogate(charCode) {
  	  return charCode >= 0xdc00 && charCode <= 0xdfff;
  	};

  	var CodepointType;

  	(function (CodepointType) {
  	  CodepointType[CodepointType["None"] = 0] = "None";
  	  CodepointType[CodepointType["Extend"] = 1] = "Extend";
  	  CodepointType[CodepointType["ZWJ"] = 2] = "ZWJ";
  	  CodepointType[CodepointType["RI"] = 4] = "RI";
  	  CodepointType[CodepointType["Prepend"] = 8] = "Prepend";
  	  CodepointType[CodepointType["SpacingMark"] = 16] = "SpacingMark";
  	  CodepointType[CodepointType["L"] = 32] = "L";
  	  CodepointType[CodepointType["V"] = 64] = "V";
  	  CodepointType[CodepointType["T"] = 128] = "T";
  	  CodepointType[CodepointType["LV"] = 256] = "LV";
  	  CodepointType[CodepointType["LVT"] = 512] = "LVT";
  	  CodepointType[CodepointType["ExtPict"] = 1024] = "ExtPict";
  	  CodepointType[CodepointType["Any"] = 2048] = "Any";
  	})(CodepointType || (CodepointType = {}));

  	var reExtend = /^(?:[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09BE\u09C1-\u09C4\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3E\u0B3F\u0B41-\u0B44\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE\u0BC0\u0BCD\u0BD7\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC2\u0CC6\u0CCC\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D3E\u0D41-\u0D44\u0D4D\u0D57\u0D62\u0D63\u0D81\u0DCA\u0DCF\u0DD2-\u0DD4\u0DD6\u0DDF\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B03\u1B34-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFF9E\uFF9F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF3E\uDF40\uDF57\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB0\uDCB3-\uDCB8\uDCBA\uDCBD\uDCBF\uDCC0\uDCC2\uDCC3\uDDAF\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD30\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65\uDD67-\uDD69\uDD6E-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uD83C[\uDFFB-\uDFFF]|\uDB40[\uDC20-\uDC7F\uDD00-\uDDEF])$/;
  	var rePrepend = /^(?:[\u0600-\u0605\u06DD\u070F\u0890\u0891\u08E2\u0D4E]|\uD804[\uDCBD\uDCCD\uDDC2\uDDC3]|\uD806[\uDD3F\uDD41\uDE3A\uDE84-\uDE89]|\uD807\uDD46)$/;
  	var reSpacingMark = /^(?:[\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BF\u09C0\u09C7\u09C8\u09CB\u09CC\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0\u0CC1\u0CC3\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0D02\u0D03\u0D3F\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D82\u0D83\u0DD0\u0DD1\u0DD8-\u0DDE\u0DF2\u0DF3\u0E33\u0EB3\u0F3E\u0F3F\u0F7F\u1031\u103B\u103C\u1056\u1057\u1084\u1715\u1734\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A6D-\u1A72\u1B04\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF7\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC]|\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD45\uDD46\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDDCE\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB1\uDCB2\uDCB9\uDCBB\uDCBC\uDCBE\uDCC1\uDDB0\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF26]|\uD806[\uDC2C-\uDC2E\uDC38\uDD31-\uDD35\uDD37\uDD38\uDD3D\uDD40\uDD42\uDDD1-\uDDD3\uDDDC-\uDDDF\uDDE4\uDE39\uDE57\uDE58\uDE97]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4\uDD8A-\uDD8E\uDD93\uDD94\uDD96\uDEF5\uDEF6]|\uD81B[\uDF51-\uDF87\uDFF0\uDFF1]|\uD834[\uDD66\uDD6D])$/;
  	var reL = /^[\u1100-\u115F\uA960-\uA97C]$/;
  	var reV = /^[\u1160-\u11A7\uD7B0-\uD7C6]$/;
  	var reT = /^[\u11A8-\u11FF\uD7CB-\uD7FB]$/;
  	var reLV = /^[\uAC00\uAC1C\uAC38\uAC54\uAC70\uAC8C\uACA8\uACC4\uACE0\uACFC\uAD18\uAD34\uAD50\uAD6C\uAD88\uADA4\uADC0\uADDC\uADF8\uAE14\uAE30\uAE4C\uAE68\uAE84\uAEA0\uAEBC\uAED8\uAEF4\uAF10\uAF2C\uAF48\uAF64\uAF80\uAF9C\uAFB8\uAFD4\uAFF0\uB00C\uB028\uB044\uB060\uB07C\uB098\uB0B4\uB0D0\uB0EC\uB108\uB124\uB140\uB15C\uB178\uB194\uB1B0\uB1CC\uB1E8\uB204\uB220\uB23C\uB258\uB274\uB290\uB2AC\uB2C8\uB2E4\uB300\uB31C\uB338\uB354\uB370\uB38C\uB3A8\uB3C4\uB3E0\uB3FC\uB418\uB434\uB450\uB46C\uB488\uB4A4\uB4C0\uB4DC\uB4F8\uB514\uB530\uB54C\uB568\uB584\uB5A0\uB5BC\uB5D8\uB5F4\uB610\uB62C\uB648\uB664\uB680\uB69C\uB6B8\uB6D4\uB6F0\uB70C\uB728\uB744\uB760\uB77C\uB798\uB7B4\uB7D0\uB7EC\uB808\uB824\uB840\uB85C\uB878\uB894\uB8B0\uB8CC\uB8E8\uB904\uB920\uB93C\uB958\uB974\uB990\uB9AC\uB9C8\uB9E4\uBA00\uBA1C\uBA38\uBA54\uBA70\uBA8C\uBAA8\uBAC4\uBAE0\uBAFC\uBB18\uBB34\uBB50\uBB6C\uBB88\uBBA4\uBBC0\uBBDC\uBBF8\uBC14\uBC30\uBC4C\uBC68\uBC84\uBCA0\uBCBC\uBCD8\uBCF4\uBD10\uBD2C\uBD48\uBD64\uBD80\uBD9C\uBDB8\uBDD4\uBDF0\uBE0C\uBE28\uBE44\uBE60\uBE7C\uBE98\uBEB4\uBED0\uBEEC\uBF08\uBF24\uBF40\uBF5C\uBF78\uBF94\uBFB0\uBFCC\uBFE8\uC004\uC020\uC03C\uC058\uC074\uC090\uC0AC\uC0C8\uC0E4\uC100\uC11C\uC138\uC154\uC170\uC18C\uC1A8\uC1C4\uC1E0\uC1FC\uC218\uC234\uC250\uC26C\uC288\uC2A4\uC2C0\uC2DC\uC2F8\uC314\uC330\uC34C\uC368\uC384\uC3A0\uC3BC\uC3D8\uC3F4\uC410\uC42C\uC448\uC464\uC480\uC49C\uC4B8\uC4D4\uC4F0\uC50C\uC528\uC544\uC560\uC57C\uC598\uC5B4\uC5D0\uC5EC\uC608\uC624\uC640\uC65C\uC678\uC694\uC6B0\uC6CC\uC6E8\uC704\uC720\uC73C\uC758\uC774\uC790\uC7AC\uC7C8\uC7E4\uC800\uC81C\uC838\uC854\uC870\uC88C\uC8A8\uC8C4\uC8E0\uC8FC\uC918\uC934\uC950\uC96C\uC988\uC9A4\uC9C0\uC9DC\uC9F8\uCA14\uCA30\uCA4C\uCA68\uCA84\uCAA0\uCABC\uCAD8\uCAF4\uCB10\uCB2C\uCB48\uCB64\uCB80\uCB9C\uCBB8\uCBD4\uCBF0\uCC0C\uCC28\uCC44\uCC60\uCC7C\uCC98\uCCB4\uCCD0\uCCEC\uCD08\uCD24\uCD40\uCD5C\uCD78\uCD94\uCDB0\uCDCC\uCDE8\uCE04\uCE20\uCE3C\uCE58\uCE74\uCE90\uCEAC\uCEC8\uCEE4\uCF00\uCF1C\uCF38\uCF54\uCF70\uCF8C\uCFA8\uCFC4\uCFE0\uCFFC\uD018\uD034\uD050\uD06C\uD088\uD0A4\uD0C0\uD0DC\uD0F8\uD114\uD130\uD14C\uD168\uD184\uD1A0\uD1BC\uD1D8\uD1F4\uD210\uD22C\uD248\uD264\uD280\uD29C\uD2B8\uD2D4\uD2F0\uD30C\uD328\uD344\uD360\uD37C\uD398\uD3B4\uD3D0\uD3EC\uD408\uD424\uD440\uD45C\uD478\uD494\uD4B0\uD4CC\uD4E8\uD504\uD520\uD53C\uD558\uD574\uD590\uD5AC\uD5C8\uD5E4\uD600\uD61C\uD638\uD654\uD670\uD68C\uD6A8\uD6C4\uD6E0\uD6FC\uD718\uD734\uD750\uD76C\uD788]$/;
  	var reLVT = /^[\uAC01-\uAC1B\uAC1D-\uAC37\uAC39-\uAC53\uAC55-\uAC6F\uAC71-\uAC8B\uAC8D-\uACA7\uACA9-\uACC3\uACC5-\uACDF\uACE1-\uACFB\uACFD-\uAD17\uAD19-\uAD33\uAD35-\uAD4F\uAD51-\uAD6B\uAD6D-\uAD87\uAD89-\uADA3\uADA5-\uADBF\uADC1-\uADDB\uADDD-\uADF7\uADF9-\uAE13\uAE15-\uAE2F\uAE31-\uAE4B\uAE4D-\uAE67\uAE69-\uAE83\uAE85-\uAE9F\uAEA1-\uAEBB\uAEBD-\uAED7\uAED9-\uAEF3\uAEF5-\uAF0F\uAF11-\uAF2B\uAF2D-\uAF47\uAF49-\uAF63\uAF65-\uAF7F\uAF81-\uAF9B\uAF9D-\uAFB7\uAFB9-\uAFD3\uAFD5-\uAFEF\uAFF1-\uB00B\uB00D-\uB027\uB029-\uB043\uB045-\uB05F\uB061-\uB07B\uB07D-\uB097\uB099-\uB0B3\uB0B5-\uB0CF\uB0D1-\uB0EB\uB0ED-\uB107\uB109-\uB123\uB125-\uB13F\uB141-\uB15B\uB15D-\uB177\uB179-\uB193\uB195-\uB1AF\uB1B1-\uB1CB\uB1CD-\uB1E7\uB1E9-\uB203\uB205-\uB21F\uB221-\uB23B\uB23D-\uB257\uB259-\uB273\uB275-\uB28F\uB291-\uB2AB\uB2AD-\uB2C7\uB2C9-\uB2E3\uB2E5-\uB2FF\uB301-\uB31B\uB31D-\uB337\uB339-\uB353\uB355-\uB36F\uB371-\uB38B\uB38D-\uB3A7\uB3A9-\uB3C3\uB3C5-\uB3DF\uB3E1-\uB3FB\uB3FD-\uB417\uB419-\uB433\uB435-\uB44F\uB451-\uB46B\uB46D-\uB487\uB489-\uB4A3\uB4A5-\uB4BF\uB4C1-\uB4DB\uB4DD-\uB4F7\uB4F9-\uB513\uB515-\uB52F\uB531-\uB54B\uB54D-\uB567\uB569-\uB583\uB585-\uB59F\uB5A1-\uB5BB\uB5BD-\uB5D7\uB5D9-\uB5F3\uB5F5-\uB60F\uB611-\uB62B\uB62D-\uB647\uB649-\uB663\uB665-\uB67F\uB681-\uB69B\uB69D-\uB6B7\uB6B9-\uB6D3\uB6D5-\uB6EF\uB6F1-\uB70B\uB70D-\uB727\uB729-\uB743\uB745-\uB75F\uB761-\uB77B\uB77D-\uB797\uB799-\uB7B3\uB7B5-\uB7CF\uB7D1-\uB7EB\uB7ED-\uB807\uB809-\uB823\uB825-\uB83F\uB841-\uB85B\uB85D-\uB877\uB879-\uB893\uB895-\uB8AF\uB8B1-\uB8CB\uB8CD-\uB8E7\uB8E9-\uB903\uB905-\uB91F\uB921-\uB93B\uB93D-\uB957\uB959-\uB973\uB975-\uB98F\uB991-\uB9AB\uB9AD-\uB9C7\uB9C9-\uB9E3\uB9E5-\uB9FF\uBA01-\uBA1B\uBA1D-\uBA37\uBA39-\uBA53\uBA55-\uBA6F\uBA71-\uBA8B\uBA8D-\uBAA7\uBAA9-\uBAC3\uBAC5-\uBADF\uBAE1-\uBAFB\uBAFD-\uBB17\uBB19-\uBB33\uBB35-\uBB4F\uBB51-\uBB6B\uBB6D-\uBB87\uBB89-\uBBA3\uBBA5-\uBBBF\uBBC1-\uBBDB\uBBDD-\uBBF7\uBBF9-\uBC13\uBC15-\uBC2F\uBC31-\uBC4B\uBC4D-\uBC67\uBC69-\uBC83\uBC85-\uBC9F\uBCA1-\uBCBB\uBCBD-\uBCD7\uBCD9-\uBCF3\uBCF5-\uBD0F\uBD11-\uBD2B\uBD2D-\uBD47\uBD49-\uBD63\uBD65-\uBD7F\uBD81-\uBD9B\uBD9D-\uBDB7\uBDB9-\uBDD3\uBDD5-\uBDEF\uBDF1-\uBE0B\uBE0D-\uBE27\uBE29-\uBE43\uBE45-\uBE5F\uBE61-\uBE7B\uBE7D-\uBE97\uBE99-\uBEB3\uBEB5-\uBECF\uBED1-\uBEEB\uBEED-\uBF07\uBF09-\uBF23\uBF25-\uBF3F\uBF41-\uBF5B\uBF5D-\uBF77\uBF79-\uBF93\uBF95-\uBFAF\uBFB1-\uBFCB\uBFCD-\uBFE7\uBFE9-\uC003\uC005-\uC01F\uC021-\uC03B\uC03D-\uC057\uC059-\uC073\uC075-\uC08F\uC091-\uC0AB\uC0AD-\uC0C7\uC0C9-\uC0E3\uC0E5-\uC0FF\uC101-\uC11B\uC11D-\uC137\uC139-\uC153\uC155-\uC16F\uC171-\uC18B\uC18D-\uC1A7\uC1A9-\uC1C3\uC1C5-\uC1DF\uC1E1-\uC1FB\uC1FD-\uC217\uC219-\uC233\uC235-\uC24F\uC251-\uC26B\uC26D-\uC287\uC289-\uC2A3\uC2A5-\uC2BF\uC2C1-\uC2DB\uC2DD-\uC2F7\uC2F9-\uC313\uC315-\uC32F\uC331-\uC34B\uC34D-\uC367\uC369-\uC383\uC385-\uC39F\uC3A1-\uC3BB\uC3BD-\uC3D7\uC3D9-\uC3F3\uC3F5-\uC40F\uC411-\uC42B\uC42D-\uC447\uC449-\uC463\uC465-\uC47F\uC481-\uC49B\uC49D-\uC4B7\uC4B9-\uC4D3\uC4D5-\uC4EF\uC4F1-\uC50B\uC50D-\uC527\uC529-\uC543\uC545-\uC55F\uC561-\uC57B\uC57D-\uC597\uC599-\uC5B3\uC5B5-\uC5CF\uC5D1-\uC5EB\uC5ED-\uC607\uC609-\uC623\uC625-\uC63F\uC641-\uC65B\uC65D-\uC677\uC679-\uC693\uC695-\uC6AF\uC6B1-\uC6CB\uC6CD-\uC6E7\uC6E9-\uC703\uC705-\uC71F\uC721-\uC73B\uC73D-\uC757\uC759-\uC773\uC775-\uC78F\uC791-\uC7AB\uC7AD-\uC7C7\uC7C9-\uC7E3\uC7E5-\uC7FF\uC801-\uC81B\uC81D-\uC837\uC839-\uC853\uC855-\uC86F\uC871-\uC88B\uC88D-\uC8A7\uC8A9-\uC8C3\uC8C5-\uC8DF\uC8E1-\uC8FB\uC8FD-\uC917\uC919-\uC933\uC935-\uC94F\uC951-\uC96B\uC96D-\uC987\uC989-\uC9A3\uC9A5-\uC9BF\uC9C1-\uC9DB\uC9DD-\uC9F7\uC9F9-\uCA13\uCA15-\uCA2F\uCA31-\uCA4B\uCA4D-\uCA67\uCA69-\uCA83\uCA85-\uCA9F\uCAA1-\uCABB\uCABD-\uCAD7\uCAD9-\uCAF3\uCAF5-\uCB0F\uCB11-\uCB2B\uCB2D-\uCB47\uCB49-\uCB63\uCB65-\uCB7F\uCB81-\uCB9B\uCB9D-\uCBB7\uCBB9-\uCBD3\uCBD5-\uCBEF\uCBF1-\uCC0B\uCC0D-\uCC27\uCC29-\uCC43\uCC45-\uCC5F\uCC61-\uCC7B\uCC7D-\uCC97\uCC99-\uCCB3\uCCB5-\uCCCF\uCCD1-\uCCEB\uCCED-\uCD07\uCD09-\uCD23\uCD25-\uCD3F\uCD41-\uCD5B\uCD5D-\uCD77\uCD79-\uCD93\uCD95-\uCDAF\uCDB1-\uCDCB\uCDCD-\uCDE7\uCDE9-\uCE03\uCE05-\uCE1F\uCE21-\uCE3B\uCE3D-\uCE57\uCE59-\uCE73\uCE75-\uCE8F\uCE91-\uCEAB\uCEAD-\uCEC7\uCEC9-\uCEE3\uCEE5-\uCEFF\uCF01-\uCF1B\uCF1D-\uCF37\uCF39-\uCF53\uCF55-\uCF6F\uCF71-\uCF8B\uCF8D-\uCFA7\uCFA9-\uCFC3\uCFC5-\uCFDF\uCFE1-\uCFFB\uCFFD-\uD017\uD019-\uD033\uD035-\uD04F\uD051-\uD06B\uD06D-\uD087\uD089-\uD0A3\uD0A5-\uD0BF\uD0C1-\uD0DB\uD0DD-\uD0F7\uD0F9-\uD113\uD115-\uD12F\uD131-\uD14B\uD14D-\uD167\uD169-\uD183\uD185-\uD19F\uD1A1-\uD1BB\uD1BD-\uD1D7\uD1D9-\uD1F3\uD1F5-\uD20F\uD211-\uD22B\uD22D-\uD247\uD249-\uD263\uD265-\uD27F\uD281-\uD29B\uD29D-\uD2B7\uD2B9-\uD2D3\uD2D5-\uD2EF\uD2F1-\uD30B\uD30D-\uD327\uD329-\uD343\uD345-\uD35F\uD361-\uD37B\uD37D-\uD397\uD399-\uD3B3\uD3B5-\uD3CF\uD3D1-\uD3EB\uD3ED-\uD407\uD409-\uD423\uD425-\uD43F\uD441-\uD45B\uD45D-\uD477\uD479-\uD493\uD495-\uD4AF\uD4B1-\uD4CB\uD4CD-\uD4E7\uD4E9-\uD503\uD505-\uD51F\uD521-\uD53B\uD53D-\uD557\uD559-\uD573\uD575-\uD58F\uD591-\uD5AB\uD5AD-\uD5C7\uD5C9-\uD5E3\uD5E5-\uD5FF\uD601-\uD61B\uD61D-\uD637\uD639-\uD653\uD655-\uD66F\uD671-\uD68B\uD68D-\uD6A7\uD6A9-\uD6C3\uD6C5-\uD6DF\uD6E1-\uD6FB\uD6FD-\uD717\uD719-\uD733\uD735-\uD74F\uD751-\uD76B\uD76D-\uD787\uD789-\uD7A3]$/;
  	var reExtPict = /^(?:[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDE5\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFA]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD])$/;

  	var getCodepointType = function getCodepointType(_char4, code) {
  	  var type = CodepointType.Any;

  	  if (_char4.search(reExtend) !== -1) {
  	    type |= CodepointType.Extend;
  	  }

  	  if (code === 0x200d) {
  	    type |= CodepointType.ZWJ;
  	  }

  	  if (code >= 0x1f1e6 && code <= 0x1f1ff) {
  	    type |= CodepointType.RI;
  	  }

  	  if (_char4.search(rePrepend) !== -1) {
  	    type |= CodepointType.Prepend;
  	  }

  	  if (_char4.search(reSpacingMark) !== -1) {
  	    type |= CodepointType.SpacingMark;
  	  }

  	  if (_char4.search(reL) !== -1) {
  	    type |= CodepointType.L;
  	  }

  	  if (_char4.search(reV) !== -1) {
  	    type |= CodepointType.V;
  	  }

  	  if (_char4.search(reT) !== -1) {
  	    type |= CodepointType.T;
  	  }

  	  if (_char4.search(reLV) !== -1) {
  	    type |= CodepointType.LV;
  	  }

  	  if (_char4.search(reLVT) !== -1) {
  	    type |= CodepointType.LVT;
  	  }

  	  if (_char4.search(reExtPict) !== -1) {
  	    type |= CodepointType.ExtPict;
  	  }

  	  return type;
  	};

  	function intersects(x, y) {
  	  return (x & y) !== 0;
  	}

  	var NonBoundaryPairs = [// GB6
  	[CodepointType.L, CodepointType.L | CodepointType.V | CodepointType.LV | CodepointType.LVT], // GB7
  	[CodepointType.LV | CodepointType.V, CodepointType.V | CodepointType.T], // GB8
  	[CodepointType.LVT | CodepointType.T, CodepointType.T], // GB9
  	[CodepointType.Any, CodepointType.Extend | CodepointType.ZWJ], // GB9a
  	[CodepointType.Any, CodepointType.SpacingMark], // GB9b
  	[CodepointType.Prepend, CodepointType.Any], // GB11
  	[CodepointType.ZWJ, CodepointType.ExtPict], // GB12 and GB13
  	[CodepointType.RI, CodepointType.RI]];

  	function isBoundaryPair(left, right) {
  	  return NonBoundaryPairs.findIndex(function (r) {
  	    return intersects(left, r[0]) && intersects(right, r[1]);
  	  }) === -1;
  	}

  	var endingEmojiZWJ = /(?:[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDE5\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFA]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD])(?:[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09BE\u09C1-\u09C4\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3E\u0B3F\u0B41-\u0B44\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE\u0BC0\u0BCD\u0BD7\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC2\u0CC6\u0CCC\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D3E\u0D41-\u0D44\u0D4D\u0D57\u0D62\u0D63\u0D81\u0DCA\u0DCF\u0DD2-\u0DD4\u0DD6\u0DDF\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B03\u1B34-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFF9E\uFF9F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF3E\uDF40\uDF57\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB0\uDCB3-\uDCB8\uDCBA\uDCBD\uDCBF\uDCC0\uDCC2\uDCC3\uDDAF\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD30\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65\uDD67-\uDD69\uDD6E-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uD83C[\uDFFB-\uDFFF]|\uDB40[\uDC20-\uDC7F\uDD00-\uDDEF])*\u200D$/;

  	var endsWithEmojiZWJ = function endsWithEmojiZWJ(str) {
  	  return str.search(endingEmojiZWJ) !== -1;
  	};

  	var endingRIs = /(?:\uD83C[\uDDE6-\uDDFF])+$/g;

  	var endsWithOddNumberOfRIs = function endsWithOddNumberOfRIs(str) {
  	  var match = str.match(endingRIs);

  	  if (match === null) {
  	    return false;
  	  } else {
  	    // A RI is represented by a surrogate pair.
  	    var numRIs = match[0].length / 2;
  	    return numRIs % 2 === 1;
  	  }
  	};

  	/**
  	 * Shared the function with isElementType utility
  	 */

  	var isElement = function isElement(value) {
  	  return isPlainObject.isPlainObject(value) && Node.isNodeList(value.children) && !Editor.isEditor(value);
  	}; // eslint-disable-next-line no-redeclare


  	var Element = {
  	  /**
  	   * Check if a value implements the 'Ancestor' interface.
  	   */
  	  isAncestor: function isAncestor(value) {
  	    return isPlainObject.isPlainObject(value) && Node.isNodeList(value.children);
  	  },

  	  /**
  	   * Check if a value implements the `Element` interface.
  	   */
  	  isElement: isElement,

  	  /**
  	   * Check if a value is an array of `Element` objects.
  	   */
  	  isElementList: function isElementList(value) {
  	    return Array.isArray(value) && value.every(function (val) {
  	      return Element.isElement(val);
  	    });
  	  },

  	  /**
  	   * Check if a set of props is a partial of Element.
  	   */
  	  isElementProps: function isElementProps(props) {
  	    return props.children !== undefined;
  	  },

  	  /**
  	   * Check if a value implements the `Element` interface and has elementKey with selected value.
  	   * Default it check to `type` key value
  	   */
  	  isElementType: function isElementType(value, elementVal) {
  	    var elementKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'type';
  	    return isElement(value) && value[elementKey] === elementVal;
  	  },

  	  /**
  	   * Check if an element matches set of properties.
  	   *
  	   * Note: this checks custom properties, and it does not ensure that any
  	   * children are equivalent.
  	   */
  	  matches: function matches(element, props) {
  	    for (var key in props) {
  	      if (key === 'children') {
  	        continue;
  	      }

  	      if (element[key] !== props[key]) {
  	        return false;
  	      }
  	    }

  	    return true;
  	  }
  	};

  	var _excluded$4 = ["text"],
  	    _excluded2$3 = ["text"];

  	function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  	function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$8(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  	function _createForOfIteratorHelper$5(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$5(o)) || allowArrayLike) { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  	function _unsupportedIterableToArray$5(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$5(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$5(o, minLen); }

  	function _arrayLikeToArray$5(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  	var IS_EDITOR_CACHE = new WeakMap(); // eslint-disable-next-line no-redeclare

  	var Editor = {
  	  /**
  	   * Get the ancestor above a location in the document.
  	   */
  	  above: function above(editor) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    var _options$voids = options.voids,
  	        voids = _options$voids === void 0 ? false : _options$voids,
  	        _options$mode = options.mode,
  	        mode = _options$mode === void 0 ? 'lowest' : _options$mode,
  	        _options$at = options.at,
  	        at = _options$at === void 0 ? editor.selection : _options$at,
  	        match = options.match;

  	    if (!at) {
  	      return;
  	    }

  	    var path = Editor.path(editor, at);
  	    var reverse = mode === 'lowest';

  	    var _iterator = _createForOfIteratorHelper$5(Editor.levels(editor, {
  	      at: path,
  	      voids: voids,
  	      match: match,
  	      reverse: reverse
  	    })),
  	        _step;

  	    try {
  	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
  	        var _step$value = _slicedToArray(_step.value, 2),
  	            n = _step$value[0],
  	            p = _step$value[1];

  	        if (!Text.isText(n) && !Path.equals(path, p)) {
  	          return [n, p];
  	        }
  	      }
  	    } catch (err) {
  	      _iterator.e(err);
  	    } finally {
  	      _iterator.f();
  	    }
  	  },

  	  /**
  	   * Add a custom property to the leaf text nodes in the current selection.
  	   *
  	   * If the selection is currently collapsed, the marks will be added to the
  	   * `editor.marks` property instead, and applied when text is inserted next.
  	   */
  	  addMark: function addMark(editor, key, value) {
  	    editor.addMark(key, value);
  	  },

  	  /**
  	   * Get the point after a location.
  	   */
  	  after: function after(editor, at) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    var anchor = Editor.point(editor, at, {
  	      edge: 'end'
  	    });
  	    var focus = Editor.end(editor, []);
  	    var range = {
  	      anchor: anchor,
  	      focus: focus
  	    };
  	    var _options$distance = options.distance,
  	        distance = _options$distance === void 0 ? 1 : _options$distance;
  	    var d = 0;
  	    var target;

  	    var _iterator2 = _createForOfIteratorHelper$5(Editor.positions(editor, _objectSpread$8(_objectSpread$8({}, options), {}, {
  	      at: range
  	    }))),
  	        _step2;

  	    try {
  	      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
  	        var p = _step2.value;

  	        if (d > distance) {
  	          break;
  	        }

  	        if (d !== 0) {
  	          target = p;
  	        }

  	        d++;
  	      }
  	    } catch (err) {
  	      _iterator2.e(err);
  	    } finally {
  	      _iterator2.f();
  	    }

  	    return target;
  	  },

  	  /**
  	   * Get the point before a location.
  	   */
  	  before: function before(editor, at) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    var anchor = Editor.start(editor, []);
  	    var focus = Editor.point(editor, at, {
  	      edge: 'start'
  	    });
  	    var range = {
  	      anchor: anchor,
  	      focus: focus
  	    };
  	    var _options$distance2 = options.distance,
  	        distance = _options$distance2 === void 0 ? 1 : _options$distance2;
  	    var d = 0;
  	    var target;

  	    var _iterator3 = _createForOfIteratorHelper$5(Editor.positions(editor, _objectSpread$8(_objectSpread$8({}, options), {}, {
  	      at: range,
  	      reverse: true
  	    }))),
  	        _step3;

  	    try {
  	      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
  	        var p = _step3.value;

  	        if (d > distance) {
  	          break;
  	        }

  	        if (d !== 0) {
  	          target = p;
  	        }

  	        d++;
  	      }
  	    } catch (err) {
  	      _iterator3.e(err);
  	    } finally {
  	      _iterator3.f();
  	    }

  	    return target;
  	  },

  	  /**
  	   * Delete content in the editor backward from the current selection.
  	   */
  	  deleteBackward: function deleteBackward(editor) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    var _options$unit = options.unit,
  	        unit = _options$unit === void 0 ? 'character' : _options$unit;
  	    editor.deleteBackward(unit);
  	  },

  	  /**
  	   * Delete content in the editor forward from the current selection.
  	   */
  	  deleteForward: function deleteForward(editor) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    var _options$unit2 = options.unit,
  	        unit = _options$unit2 === void 0 ? 'character' : _options$unit2;
  	    editor.deleteForward(unit);
  	  },

  	  /**
  	   * Delete the content in the current selection.
  	   */
  	  deleteFragment: function deleteFragment(editor) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    var _options$direction = options.direction,
  	        direction = _options$direction === void 0 ? 'forward' : _options$direction;
  	    editor.deleteFragment(direction);
  	  },

  	  /**
  	   * Get the start and end points of a location.
  	   */
  	  edges: function edges(editor, at) {
  	    return [Editor.start(editor, at), Editor.end(editor, at)];
  	  },

  	  /**
  	   * Get the end point of a location.
  	   */
  	  end: function end(editor, at) {
  	    return Editor.point(editor, at, {
  	      edge: 'end'
  	    });
  	  },

  	  /**
  	   * Get the first node at a location.
  	   */
  	  first: function first(editor, at) {
  	    var path = Editor.path(editor, at, {
  	      edge: 'start'
  	    });
  	    return Editor.node(editor, path);
  	  },

  	  /**
  	   * Get the fragment at a location.
  	   */
  	  fragment: function fragment(editor, at) {
  	    var range = Editor.range(editor, at);
  	    var fragment = Node.fragment(editor, range);
  	    return fragment;
  	  },

  	  /**
  	   * Check if a node has block children.
  	   */
  	  hasBlocks: function hasBlocks(editor, element) {
  	    return element.children.some(function (n) {
  	      return Editor.isBlock(editor, n);
  	    });
  	  },

  	  /**
  	   * Check if a node has inline and text children.
  	   */
  	  hasInlines: function hasInlines(editor, element) {
  	    return element.children.some(function (n) {
  	      return Text.isText(n) || Editor.isInline(editor, n);
  	    });
  	  },

  	  /**
  	   * Check if a node has text children.
  	   */
  	  hasTexts: function hasTexts(editor, element) {
  	    return element.children.every(function (n) {
  	      return Text.isText(n);
  	    });
  	  },

  	  /**
  	   * Insert a block break at the current selection.
  	   *
  	   * If the selection is currently expanded, it will be deleted first.
  	   */
  	  insertBreak: function insertBreak(editor) {
  	    editor.insertBreak();
  	  },

  	  /**
  	   * Insert a soft break at the current selection.
  	   *
  	   * If the selection is currently expanded, it will be deleted first.
  	   */
  	  insertSoftBreak: function insertSoftBreak(editor) {
  	    editor.insertSoftBreak();
  	  },

  	  /**
  	   * Insert a fragment at the current selection.
  	   *
  	   * If the selection is currently expanded, it will be deleted first.
  	   */
  	  insertFragment: function insertFragment(editor, fragment) {
  	    editor.insertFragment(fragment);
  	  },

  	  /**
  	   * Insert a node at the current selection.
  	   *
  	   * If the selection is currently expanded, it will be deleted first.
  	   */
  	  insertNode: function insertNode(editor, node) {
  	    editor.insertNode(node);
  	  },

  	  /**
  	   * Insert text at the current selection.
  	   *
  	   * If the selection is currently expanded, it will be deleted first.
  	   */
  	  insertText: function insertText(editor, text) {
  	    editor.insertText(text);
  	  },

  	  /**
  	   * Check if a value is a block `Element` object.
  	   */
  	  isBlock: function isBlock(editor, value) {
  	    return Element.isElement(value) && !editor.isInline(value);
  	  },

  	  /**
  	   * Check if a value is an `Editor` object.
  	   */
  	  isEditor: function isEditor(value) {
  	    var cachedIsEditor = IS_EDITOR_CACHE.get(value);

  	    if (cachedIsEditor !== undefined) {
  	      return cachedIsEditor;
  	    }

  	    if (!isPlainObject.isPlainObject(value)) {
  	      return false;
  	    }

  	    var isEditor = typeof value.addMark === 'function' && typeof value.apply === 'function' && typeof value.deleteBackward === 'function' && typeof value.deleteForward === 'function' && typeof value.deleteFragment === 'function' && typeof value.insertBreak === 'function' && typeof value.insertSoftBreak === 'function' && typeof value.insertFragment === 'function' && typeof value.insertNode === 'function' && typeof value.insertText === 'function' && typeof value.isInline === 'function' && typeof value.isVoid === 'function' && typeof value.normalizeNode === 'function' && typeof value.onChange === 'function' && typeof value.removeMark === 'function' && typeof value.getDirtyPaths === 'function' && (value.marks === null || isPlainObject.isPlainObject(value.marks)) && (value.selection === null || Range.isRange(value.selection)) && Node.isNodeList(value.children) && Operation.isOperationList(value.operations);
  	    IS_EDITOR_CACHE.set(value, isEditor);
  	    return isEditor;
  	  },

  	  /**
  	   * Check if a point is the end point of a location.
  	   */
  	  isEnd: function isEnd(editor, point, at) {
  	    var end = Editor.end(editor, at);
  	    return Point.equals(point, end);
  	  },

  	  /**
  	   * Check if a point is an edge of a location.
  	   */
  	  isEdge: function isEdge(editor, point, at) {
  	    return Editor.isStart(editor, point, at) || Editor.isEnd(editor, point, at);
  	  },

  	  /**
  	   * Check if an element is empty, accounting for void nodes.
  	   */
  	  isEmpty: function isEmpty(editor, element) {
  	    var children = element.children;

  	    var _children = _slicedToArray(children, 1),
  	        first = _children[0];

  	    return children.length === 0 || children.length === 1 && Text.isText(first) && first.text === '' && !editor.isVoid(element);
  	  },

  	  /**
  	   * Check if a value is an inline `Element` object.
  	   */
  	  isInline: function isInline(editor, value) {
  	    return Element.isElement(value) && editor.isInline(value);
  	  },

  	  /**
  	   * Check if the editor is currently normalizing after each operation.
  	   */
  	  isNormalizing: function isNormalizing(editor) {
  	    var isNormalizing = NORMALIZING.get(editor);
  	    return isNormalizing === undefined ? true : isNormalizing;
  	  },

  	  /**
  	   * Check if a point is the start point of a location.
  	   */
  	  isStart: function isStart(editor, point, at) {
  	    // PERF: If the offset isn't `0` we know it's not the start.
  	    if (point.offset !== 0) {
  	      return false;
  	    }

  	    var start = Editor.start(editor, at);
  	    return Point.equals(point, start);
  	  },

  	  /**
  	   * Check if a value is a void `Element` object.
  	   */
  	  isVoid: function isVoid(editor, value) {
  	    return Element.isElement(value) && editor.isVoid(value);
  	  },

  	  /**
  	   * Get the last node at a location.
  	   */
  	  last: function last(editor, at) {
  	    var path = Editor.path(editor, at, {
  	      edge: 'end'
  	    });
  	    return Editor.node(editor, path);
  	  },

  	  /**
  	   * Get the leaf text node at a location.
  	   */
  	  leaf: function leaf(editor, at) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    var path = Editor.path(editor, at, options);
  	    var node = Node.leaf(editor, path);
  	    return [node, path];
  	  },

  	  /**
  	   * Iterate through all of the levels at a location.
  	   */
  	  levels: function* levels(editor) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    var _options$at2 = options.at,
  	        at = _options$at2 === void 0 ? editor.selection : _options$at2,
  	        _options$reverse = options.reverse,
  	        reverse = _options$reverse === void 0 ? false : _options$reverse,
  	        _options$voids2 = options.voids,
  	        voids = _options$voids2 === void 0 ? false : _options$voids2;
  	    var match = options.match;

  	    if (match == null) {
  	      match = function match() {
  	        return true;
  	      };
  	    }

  	    if (!at) {
  	      return;
  	    }

  	    var levels = [];
  	    var path = Editor.path(editor, at);

  	    var _iterator4 = _createForOfIteratorHelper$5(Node.levels(editor, path)),
  	        _step4;

  	    try {
  	      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
  	        var _step4$value = _slicedToArray(_step4.value, 2),
  	            n = _step4$value[0],
  	            p = _step4$value[1];

  	        if (!match(n, p)) {
  	          continue;
  	        }

  	        levels.push([n, p]);

  	        if (!voids && Editor.isVoid(editor, n)) {
  	          break;
  	        }
  	      }
  	    } catch (err) {
  	      _iterator4.e(err);
  	    } finally {
  	      _iterator4.f();
  	    }

  	    if (reverse) {
  	      levels.reverse();
  	    }

  	    yield* levels;
  	  },

  	  /**
  	   * Get the marks that would be added to text at the current selection.
  	   */
  	  marks: function marks(editor) {
  	    var marks = editor.marks,
  	        selection = editor.selection;

  	    if (!selection) {
  	      return null;
  	    }

  	    if (marks) {
  	      return marks;
  	    }

  	    if (Range.isExpanded(selection)) {
  	      var _Editor$nodes = Editor.nodes(editor, {
  	        match: Text.isText
  	      }),
  	          _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),
  	          match = _Editor$nodes2[0];

  	      if (match) {
  	        var _match = _slicedToArray(match, 1),
  	            _node = _match[0];

  	        _node.text;
  	            var _rest = _objectWithoutProperties(_node, _excluded$4);

  	        return _rest;
  	      } else {
  	        return {};
  	      }
  	    }

  	    var anchor = selection.anchor;
  	    var path = anchor.path;

  	    var _Editor$leaf = Editor.leaf(editor, path),
  	        _Editor$leaf2 = _slicedToArray(_Editor$leaf, 1),
  	        node = _Editor$leaf2[0];

  	    if (anchor.offset === 0) {
  	      var prev = Editor.previous(editor, {
  	        at: path,
  	        match: Text.isText
  	      });
  	      var block = Editor.above(editor, {
  	        match: function match(n) {
  	          return Editor.isBlock(editor, n);
  	        }
  	      });

  	      if (prev && block) {
  	        var _prev = _slicedToArray(prev, 2),
  	            prevNode = _prev[0],
  	            prevPath = _prev[1];

  	        var _block = _slicedToArray(block, 2),
  	            blockPath = _block[1];

  	        if (Path.isAncestor(blockPath, prevPath)) {
  	          node = prevNode;
  	        }
  	      }
  	    }

  	    var _node2 = node;
  	        _node2.text;
  	        var rest = _objectWithoutProperties(_node2, _excluded2$3);

  	    return rest;
  	  },

  	  /**
  	   * Get the matching node in the branch of the document after a location.
  	   */
  	  next: function next(editor) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    var _options$mode2 = options.mode,
  	        mode = _options$mode2 === void 0 ? 'lowest' : _options$mode2,
  	        _options$voids3 = options.voids,
  	        voids = _options$voids3 === void 0 ? false : _options$voids3;
  	    var match = options.match,
  	        _options$at3 = options.at,
  	        at = _options$at3 === void 0 ? editor.selection : _options$at3;

  	    if (!at) {
  	      return;
  	    }

  	    var pointAfterLocation = Editor.after(editor, at, {
  	      voids: voids
  	    });
  	    if (!pointAfterLocation) return;

  	    var _Editor$last = Editor.last(editor, []),
  	        _Editor$last2 = _slicedToArray(_Editor$last, 2),
  	        to = _Editor$last2[1];

  	    var span = [pointAfterLocation.path, to];

  	    if (Path.isPath(at) && at.length === 0) {
  	      throw new Error("Cannot get the next node from the root node!");
  	    }

  	    if (match == null) {
  	      if (Path.isPath(at)) {
  	        var _Editor$parent = Editor.parent(editor, at),
  	            _Editor$parent2 = _slicedToArray(_Editor$parent, 1),
  	            parent = _Editor$parent2[0];

  	        match = function match(n) {
  	          return parent.children.includes(n);
  	        };
  	      } else {
  	        match = function match() {
  	          return true;
  	        };
  	      }
  	    }

  	    var _Editor$nodes3 = Editor.nodes(editor, {
  	      at: span,
  	      match: match,
  	      mode: mode,
  	      voids: voids
  	    }),
  	        _Editor$nodes4 = _slicedToArray(_Editor$nodes3, 1),
  	        next = _Editor$nodes4[0];

  	    return next;
  	  },

  	  /**
  	   * Get the node at a location.
  	   */
  	  node: function node(editor, at) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    var path = Editor.path(editor, at, options);
  	    var node = Node.get(editor, path);
  	    return [node, path];
  	  },

  	  /**
  	   * Iterate through all of the nodes in the Editor.
  	   */
  	  nodes: function* nodes(editor) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    var _options$at4 = options.at,
  	        at = _options$at4 === void 0 ? editor.selection : _options$at4,
  	        _options$mode3 = options.mode,
  	        mode = _options$mode3 === void 0 ? 'all' : _options$mode3,
  	        _options$universal = options.universal,
  	        universal = _options$universal === void 0 ? false : _options$universal,
  	        _options$reverse2 = options.reverse,
  	        reverse = _options$reverse2 === void 0 ? false : _options$reverse2,
  	        _options$voids4 = options.voids,
  	        voids = _options$voids4 === void 0 ? false : _options$voids4;
  	    var match = options.match;

  	    if (!match) {
  	      match = function match() {
  	        return true;
  	      };
  	    }

  	    if (!at) {
  	      return;
  	    }

  	    var from;
  	    var to;

  	    if (Span.isSpan(at)) {
  	      from = at[0];
  	      to = at[1];
  	    } else {
  	      var first = Editor.path(editor, at, {
  	        edge: 'start'
  	      });
  	      var last = Editor.path(editor, at, {
  	        edge: 'end'
  	      });
  	      from = reverse ? last : first;
  	      to = reverse ? first : last;
  	    }

  	    var nodeEntries = Node.nodes(editor, {
  	      reverse: reverse,
  	      from: from,
  	      to: to,
  	      pass: function pass(_ref) {
  	        var _ref2 = _slicedToArray(_ref, 1),
  	            n = _ref2[0];

  	        return voids ? false : Editor.isVoid(editor, n);
  	      }
  	    });
  	    var matches = [];
  	    var hit;

  	    var _iterator5 = _createForOfIteratorHelper$5(nodeEntries),
  	        _step5;

  	    try {
  	      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
  	        var _step5$value = _slicedToArray(_step5.value, 2),
  	            node = _step5$value[0],
  	            path = _step5$value[1];

  	        var isLower = hit && Path.compare(path, hit[1]) === 0; // In highest mode any node lower than the last hit is not a match.

  	        if (mode === 'highest' && isLower) {
  	          continue;
  	        }

  	        if (!match(node, path)) {
  	          // If we've arrived at a leaf text node that is not lower than the last
  	          // hit, then we've found a branch that doesn't include a match, which
  	          // means the match is not universal.
  	          if (universal && !isLower && Text.isText(node)) {
  	            return;
  	          } else {
  	            continue;
  	          }
  	        } // If there's a match and it's lower than the last, update the hit.


  	        if (mode === 'lowest' && isLower) {
  	          hit = [node, path];
  	          continue;
  	        } // In lowest mode we emit the last hit, once it's guaranteed lowest.


  	        var emit = mode === 'lowest' ? hit : [node, path];

  	        if (emit) {
  	          if (universal) {
  	            matches.push(emit);
  	          } else {
  	            yield emit;
  	          }
  	        }

  	        hit = [node, path];
  	      } // Since lowest is always emitting one behind, catch up at the end.

  	    } catch (err) {
  	      _iterator5.e(err);
  	    } finally {
  	      _iterator5.f();
  	    }

  	    if (mode === 'lowest' && hit) {
  	      if (universal) {
  	        matches.push(hit);
  	      } else {
  	        yield hit;
  	      }
  	    } // Universal defers to ensure that the match occurs in every branch, so we
  	    // yield all of the matches after iterating.


  	    if (universal) {
  	      yield* matches;
  	    }
  	  },

  	  /**
  	   * Normalize any dirty objects in the editor.
  	   */
  	  normalize: function normalize(editor) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    var _options$force = options.force,
  	        force = _options$force === void 0 ? false : _options$force;

  	    var getDirtyPaths = function getDirtyPaths(editor) {
  	      return DIRTY_PATHS.get(editor) || [];
  	    };

  	    var getDirtyPathKeys = function getDirtyPathKeys(editor) {
  	      return DIRTY_PATH_KEYS.get(editor) || new Set();
  	    };

  	    var popDirtyPath = function popDirtyPath(editor) {
  	      var path = getDirtyPaths(editor).pop();
  	      var key = path.join(',');
  	      getDirtyPathKeys(editor)["delete"](key);
  	      return path;
  	    };

  	    if (!Editor.isNormalizing(editor)) {
  	      return;
  	    }

  	    if (force) {
  	      var allPaths = Array.from(Node.nodes(editor), function (_ref3) {
  	        var _ref4 = _slicedToArray(_ref3, 2),
  	            p = _ref4[1];

  	        return p;
  	      });
  	      var allPathKeys = new Set(allPaths.map(function (p) {
  	        return p.join(',');
  	      }));
  	      DIRTY_PATHS.set(editor, allPaths);
  	      DIRTY_PATH_KEYS.set(editor, allPathKeys);
  	    }

  	    if (getDirtyPaths(editor).length === 0) {
  	      return;
  	    }

  	    Editor.withoutNormalizing(editor, function () {
  	      /*
  	        Fix dirty elements with no children.
  	        editor.normalizeNode() does fix this, but some normalization fixes also require it to work.
  	        Running an initial pass avoids the catch-22 race condition.
  	      */
  	      var _iterator6 = _createForOfIteratorHelper$5(getDirtyPaths(editor)),
  	          _step6;

  	      try {
  	        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
  	          var _dirtyPath = _step6.value;

  	          if (Node.has(editor, _dirtyPath)) {
  	            var _entry = Editor.node(editor, _dirtyPath);

  	            var _entry2 = _slicedToArray(_entry, 2),
  	                node = _entry2[0],
  	                _ = _entry2[1];
  	            /*
  	              The default normalizer inserts an empty text node in this scenario, but it can be customised.
  	              So there is some risk here.
  	                         As long as the normalizer only inserts child nodes for this case it is safe to do in any order;
  	              by definition adding children to an empty node can't cause other paths to change.
  	            */


  	            if (Element.isElement(node) && node.children.length === 0) {
  	              editor.normalizeNode(_entry);
  	            }
  	          }
  	        }
  	      } catch (err) {
  	        _iterator6.e(err);
  	      } finally {
  	        _iterator6.f();
  	      }

  	      var max = getDirtyPaths(editor).length * 42; // HACK: better way?

  	      var m = 0;

  	      while (getDirtyPaths(editor).length !== 0) {
  	        if (m > max) {
  	          throw new Error("\n            Could not completely normalize the editor after ".concat(max, " iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\n          "));
  	        }

  	        var dirtyPath = popDirtyPath(editor); // If the node doesn't exist in the tree, it does not need to be normalized.

  	        if (Node.has(editor, dirtyPath)) {
  	          var entry = Editor.node(editor, dirtyPath);
  	          editor.normalizeNode(entry);
  	        }

  	        m++;
  	      }
  	    });
  	  },

  	  /**
  	   * Get the parent node of a location.
  	   */
  	  parent: function parent(editor, at) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    var path = Editor.path(editor, at, options);
  	    var parentPath = Path.parent(path);
  	    var entry = Editor.node(editor, parentPath);
  	    return entry;
  	  },

  	  /**
  	   * Get the path of a location.
  	   */
  	  path: function path(editor, at) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    var depth = options.depth,
  	        edge = options.edge;

  	    if (Path.isPath(at)) {
  	      if (edge === 'start') {
  	        var _Node$first = Node.first(editor, at),
  	            _Node$first2 = _slicedToArray(_Node$first, 2),
  	            firstPath = _Node$first2[1];

  	        at = firstPath;
  	      } else if (edge === 'end') {
  	        var _Node$last = Node.last(editor, at),
  	            _Node$last2 = _slicedToArray(_Node$last, 2),
  	            lastPath = _Node$last2[1];

  	        at = lastPath;
  	      }
  	    }

  	    if (Range.isRange(at)) {
  	      if (edge === 'start') {
  	        at = Range.start(at);
  	      } else if (edge === 'end') {
  	        at = Range.end(at);
  	      } else {
  	        at = Path.common(at.anchor.path, at.focus.path);
  	      }
  	    }

  	    if (Point.isPoint(at)) {
  	      at = at.path;
  	    }

  	    if (depth != null) {
  	      at = at.slice(0, depth);
  	    }

  	    return at;
  	  },
  	  hasPath: function hasPath(editor, path) {
  	    return Node.has(editor, path);
  	  },

  	  /**
  	   * Create a mutable ref for a `Path` object, which will stay in sync as new
  	   * operations are applied to the editor.
  	   */
  	  pathRef: function pathRef(editor, path) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    var _options$affinity = options.affinity,
  	        affinity = _options$affinity === void 0 ? 'forward' : _options$affinity;
  	    var ref = {
  	      current: path,
  	      affinity: affinity,
  	      unref: function unref() {
  	        var current = ref.current;
  	        var pathRefs = Editor.pathRefs(editor);
  	        pathRefs["delete"](ref);
  	        ref.current = null;
  	        return current;
  	      }
  	    };
  	    var refs = Editor.pathRefs(editor);
  	    refs.add(ref);
  	    return ref;
  	  },

  	  /**
  	   * Get the set of currently tracked path refs of the editor.
  	   */
  	  pathRefs: function pathRefs(editor) {
  	    var refs = PATH_REFS.get(editor);

  	    if (!refs) {
  	      refs = new Set();
  	      PATH_REFS.set(editor, refs);
  	    }

  	    return refs;
  	  },

  	  /**
  	   * Get the start or end point of a location.
  	   */
  	  point: function point(editor, at) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    var _options$edge = options.edge,
  	        edge = _options$edge === void 0 ? 'start' : _options$edge;

  	    if (Path.isPath(at)) {
  	      var path;

  	      if (edge === 'end') {
  	        var _Node$last3 = Node.last(editor, at),
  	            _Node$last4 = _slicedToArray(_Node$last3, 2),
  	            lastPath = _Node$last4[1];

  	        path = lastPath;
  	      } else {
  	        var _Node$first3 = Node.first(editor, at),
  	            _Node$first4 = _slicedToArray(_Node$first3, 2),
  	            firstPath = _Node$first4[1];

  	        path = firstPath;
  	      }

  	      var node = Node.get(editor, path);

  	      if (!Text.isText(node)) {
  	        throw new Error("Cannot get the ".concat(edge, " point in the node at path [").concat(at, "] because it has no ").concat(edge, " text node."));
  	      }

  	      return {
  	        path: path,
  	        offset: edge === 'end' ? node.text.length : 0
  	      };
  	    }

  	    if (Range.isRange(at)) {
  	      var _Range$edges = Range.edges(at),
  	          _Range$edges2 = _slicedToArray(_Range$edges, 2),
  	          start = _Range$edges2[0],
  	          end = _Range$edges2[1];

  	      return edge === 'start' ? start : end;
  	    }

  	    return at;
  	  },

  	  /**
  	   * Create a mutable ref for a `Point` object, which will stay in sync as new
  	   * operations are applied to the editor.
  	   */
  	  pointRef: function pointRef(editor, point) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    var _options$affinity2 = options.affinity,
  	        affinity = _options$affinity2 === void 0 ? 'forward' : _options$affinity2;
  	    var ref = {
  	      current: point,
  	      affinity: affinity,
  	      unref: function unref() {
  	        var current = ref.current;
  	        var pointRefs = Editor.pointRefs(editor);
  	        pointRefs["delete"](ref);
  	        ref.current = null;
  	        return current;
  	      }
  	    };
  	    var refs = Editor.pointRefs(editor);
  	    refs.add(ref);
  	    return ref;
  	  },

  	  /**
  	   * Get the set of currently tracked point refs of the editor.
  	   */
  	  pointRefs: function pointRefs(editor) {
  	    var refs = POINT_REFS.get(editor);

  	    if (!refs) {
  	      refs = new Set();
  	      POINT_REFS.set(editor, refs);
  	    }

  	    return refs;
  	  },

  	  /**
  	   * Return all the positions in `at` range where a `Point` can be placed.
  	   *
  	   * By default, moves forward by individual offsets at a time, but
  	   * the `unit` option can be used to to move by character, word, line, or block.
  	   *
  	   * The `reverse` option can be used to change iteration direction.
  	   *
  	   * Note: By default void nodes are treated as a single point and iteration
  	   * will not happen inside their content unless you pass in true for the
  	   * `voids` option, then iteration will occur.
  	   */
  	  positions: function* positions(editor) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    var _options$at5 = options.at,
  	        at = _options$at5 === void 0 ? editor.selection : _options$at5,
  	        _options$unit3 = options.unit,
  	        unit = _options$unit3 === void 0 ? 'offset' : _options$unit3,
  	        _options$reverse3 = options.reverse,
  	        reverse = _options$reverse3 === void 0 ? false : _options$reverse3,
  	        _options$voids5 = options.voids,
  	        voids = _options$voids5 === void 0 ? false : _options$voids5;

  	    if (!at) {
  	      return;
  	    }
  	    /**
  	     * Algorithm notes:
  	     *
  	     * Each step `distance` is dynamic depending on the underlying text
  	     * and the `unit` specified.  Each step, e.g., a line or word, may
  	     * span multiple text nodes, so we iterate through the text both on
  	     * two levels in step-sync:
  	     *
  	     * `leafText` stores the text on a text leaf level, and is advanced
  	     * through using the counters `leafTextOffset` and `leafTextRemaining`.
  	     *
  	     * `blockText` stores the text on a block level, and is shortened
  	     * by `distance` every time it is advanced.
  	     *
  	     * We only maintain a window of one blockText and one leafText because
  	     * a block node always appears before all of its leaf nodes.
  	     */


  	    var range = Editor.range(editor, at);

  	    var _Range$edges3 = Range.edges(range),
  	        _Range$edges4 = _slicedToArray(_Range$edges3, 2),
  	        start = _Range$edges4[0],
  	        end = _Range$edges4[1];

  	    var first = reverse ? end : start;
  	    var isNewBlock = false;
  	    var blockText = '';
  	    var distance = 0; // Distance for leafText to catch up to blockText.

  	    var leafTextRemaining = 0;
  	    var leafTextOffset = 0; // Iterate through all nodes in range, grabbing entire textual content
  	    // of block nodes in blockText, and text nodes in leafText.
  	    // Exploits the fact that nodes are sequenced in such a way that we first
  	    // encounter the block node, then all of its text nodes, so when iterating
  	    // through the blockText and leafText we just need to remember a window of
  	    // one block node and leaf node, respectively.

  	    var _iterator7 = _createForOfIteratorHelper$5(Editor.nodes(editor, {
  	      at: at,
  	      reverse: reverse,
  	      voids: voids
  	    })),
  	        _step7;

  	    try {
  	      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
  	        var _step7$value = _slicedToArray(_step7.value, 2),
  	            node = _step7$value[0],
  	            path = _step7$value[1];

  	        /*
  	         * ELEMENT NODE - Yield position(s) for voids, collect blockText for blocks
  	         */
  	        if (Element.isElement(node)) {
  	          // Void nodes are a special case, so by default we will always
  	          // yield their first point. If the `voids` option is set to true,
  	          // then we will iterate over their content.
  	          if (!voids && editor.isVoid(node)) {
  	            yield Editor.start(editor, path);
  	            continue;
  	          } // Inline element nodes are ignored as they don't themselves
  	          // contribute to `blockText` or `leafText` - their parent and
  	          // children do.


  	          if (editor.isInline(node)) continue; // Block element node - set `blockText` to its text content.

  	          if (Editor.hasInlines(editor, node)) {
  	            // We always exhaust block nodes before encountering a new one:
  	            //   console.assert(blockText === '',
  	            //     `blockText='${blockText}' - `+
  	            //     `not exhausted before new block node`, path)
  	            // Ensure range considered is capped to `range`, in the
  	            // start/end edge cases where block extends beyond range.
  	            // Equivalent to this, but presumably more performant:
  	            //   blockRange = Editor.range(editor, ...Editor.edges(editor, path))
  	            //   blockRange = Range.intersection(range, blockRange) // intersect
  	            //   blockText = Editor.string(editor, blockRange, { voids })
  	            var e = Path.isAncestor(path, end.path) ? end : Editor.end(editor, path);
  	            var s = Path.isAncestor(path, start.path) ? start : Editor.start(editor, path);
  	            blockText = Editor.string(editor, {
  	              anchor: s,
  	              focus: e
  	            }, {
  	              voids: voids
  	            });
  	            isNewBlock = true;
  	          }
  	        }
  	        /*
  	         * TEXT LEAF NODE - Iterate through text content, yielding
  	         * positions every `distance` offset according to `unit`.
  	         */


  	        if (Text.isText(node)) {
  	          var isFirst = Path.equals(path, first.path); // Proof that we always exhaust text nodes before encountering a new one:
  	          //   console.assert(leafTextRemaining <= 0,
  	          //     `leafTextRemaining=${leafTextRemaining} - `+
  	          //     `not exhausted before new leaf text node`, path)
  	          // Reset `leafText` counters for new text node.

  	          if (isFirst) {
  	            leafTextRemaining = reverse ? first.offset : node.text.length - first.offset;
  	            leafTextOffset = first.offset; // Works for reverse too.
  	          } else {
  	            leafTextRemaining = node.text.length;
  	            leafTextOffset = reverse ? leafTextRemaining : 0;
  	          } // Yield position at the start of node (potentially).


  	          if (isFirst || isNewBlock || unit === 'offset') {
  	            yield {
  	              path: path,
  	              offset: leafTextOffset
  	            };
  	            isNewBlock = false;
  	          } // Yield positions every (dynamically calculated) `distance` offset.


  	          while (true) {
  	            // If `leafText` has caught up with `blockText` (distance=0),
  	            // and if blockText is exhausted, break to get another block node,
  	            // otherwise advance blockText forward by the new `distance`.
  	            if (distance === 0) {
  	              if (blockText === '') break;
  	              distance = calcDistance(blockText, unit, reverse); // Split the string at the previously found distance and use the
  	              // remaining string for the next iteration.

  	              blockText = splitByCharacterDistance(blockText, distance, reverse)[1];
  	            } // Advance `leafText` by the current `distance`.


  	            leafTextOffset = reverse ? leafTextOffset - distance : leafTextOffset + distance;
  	            leafTextRemaining = leafTextRemaining - distance; // If `leafText` is exhausted, break to get a new leaf node
  	            // and set distance to the overflow amount, so we'll (maybe)
  	            // catch up to blockText in the next leaf text node.

  	            if (leafTextRemaining < 0) {
  	              distance = -leafTextRemaining;
  	              break;
  	            } // Successfully walked `distance` offsets through `leafText`
  	            // to catch up with `blockText`, so we can reset `distance`
  	            // and yield this position in this node.


  	            distance = 0;
  	            yield {
  	              path: path,
  	              offset: leafTextOffset
  	            };
  	          }
  	        }
  	      } // Proof that upon completion, we've exahusted both leaf and block text:
  	      //   console.assert(leafTextRemaining <= 0, "leafText wasn't exhausted")
  	      //   console.assert(blockText === '', "blockText wasn't exhausted")
  	      // Helper:
  	      // Return the distance in offsets for a step of size `unit` on given string.

  	    } catch (err) {
  	      _iterator7.e(err);
  	    } finally {
  	      _iterator7.f();
  	    }

  	    function calcDistance(text, unit, reverse) {
  	      if (unit === 'character') {
  	        return getCharacterDistance(text, reverse);
  	      } else if (unit === 'word') {
  	        return getWordDistance(text, reverse);
  	      } else if (unit === 'line' || unit === 'block') {
  	        return text.length;
  	      }

  	      return 1;
  	    }
  	  },

  	  /**
  	   * Get the matching node in the branch of the document before a location.
  	   */
  	  previous: function previous(editor) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    var _options$mode4 = options.mode,
  	        mode = _options$mode4 === void 0 ? 'lowest' : _options$mode4,
  	        _options$voids6 = options.voids,
  	        voids = _options$voids6 === void 0 ? false : _options$voids6;
  	    var match = options.match,
  	        _options$at6 = options.at,
  	        at = _options$at6 === void 0 ? editor.selection : _options$at6;

  	    if (!at) {
  	      return;
  	    }

  	    var pointBeforeLocation = Editor.before(editor, at, {
  	      voids: voids
  	    });

  	    if (!pointBeforeLocation) {
  	      return;
  	    }

  	    var _Editor$first = Editor.first(editor, []),
  	        _Editor$first2 = _slicedToArray(_Editor$first, 2),
  	        to = _Editor$first2[1]; // The search location is from the start of the document to the path of
  	    // the point before the location passed in


  	    var span = [pointBeforeLocation.path, to];

  	    if (Path.isPath(at) && at.length === 0) {
  	      throw new Error("Cannot get the previous node from the root node!");
  	    }

  	    if (match == null) {
  	      if (Path.isPath(at)) {
  	        var _Editor$parent3 = Editor.parent(editor, at),
  	            _Editor$parent4 = _slicedToArray(_Editor$parent3, 1),
  	            parent = _Editor$parent4[0];

  	        match = function match(n) {
  	          return parent.children.includes(n);
  	        };
  	      } else {
  	        match = function match() {
  	          return true;
  	        };
  	      }
  	    }

  	    var _Editor$nodes5 = Editor.nodes(editor, {
  	      reverse: true,
  	      at: span,
  	      match: match,
  	      mode: mode,
  	      voids: voids
  	    }),
  	        _Editor$nodes6 = _slicedToArray(_Editor$nodes5, 1),
  	        previous = _Editor$nodes6[0];

  	    return previous;
  	  },

  	  /**
  	   * Get a range of a location.
  	   */
  	  range: function range(editor, at, to) {
  	    if (Range.isRange(at) && !to) {
  	      return at;
  	    }

  	    var start = Editor.start(editor, at);
  	    var end = Editor.end(editor, to || at);
  	    return {
  	      anchor: start,
  	      focus: end
  	    };
  	  },

  	  /**
  	   * Create a mutable ref for a `Range` object, which will stay in sync as new
  	   * operations are applied to the editor.
  	   */
  	  rangeRef: function rangeRef(editor, range) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    var _options$affinity3 = options.affinity,
  	        affinity = _options$affinity3 === void 0 ? 'forward' : _options$affinity3;
  	    var ref = {
  	      current: range,
  	      affinity: affinity,
  	      unref: function unref() {
  	        var current = ref.current;
  	        var rangeRefs = Editor.rangeRefs(editor);
  	        rangeRefs["delete"](ref);
  	        ref.current = null;
  	        return current;
  	      }
  	    };
  	    var refs = Editor.rangeRefs(editor);
  	    refs.add(ref);
  	    return ref;
  	  },

  	  /**
  	   * Get the set of currently tracked range refs of the editor.
  	   */
  	  rangeRefs: function rangeRefs(editor) {
  	    var refs = RANGE_REFS.get(editor);

  	    if (!refs) {
  	      refs = new Set();
  	      RANGE_REFS.set(editor, refs);
  	    }

  	    return refs;
  	  },

  	  /**
  	   * Remove a custom property from all of the leaf text nodes in the current
  	   * selection.
  	   *
  	   * If the selection is currently collapsed, the removal will be stored on
  	   * `editor.marks` and applied to the text inserted next.
  	   */
  	  removeMark: function removeMark(editor, key) {
  	    editor.removeMark(key);
  	  },

  	  /**
  	   * Manually set if the editor should currently be normalizing.
  	   *
  	   * Note: Using this incorrectly can leave the editor in an invalid state.
  	   *
  	   */
  	  setNormalizing: function setNormalizing(editor, isNormalizing) {
  	    NORMALIZING.set(editor, isNormalizing);
  	  },

  	  /**
  	   * Get the start point of a location.
  	   */
  	  start: function start(editor, at) {
  	    return Editor.point(editor, at, {
  	      edge: 'start'
  	    });
  	  },

  	  /**
  	   * Get the text string content of a location.
  	   *
  	   * Note: by default the text of void nodes is considered to be an empty
  	   * string, regardless of content, unless you pass in true for the voids option
  	   */
  	  string: function string(editor, at) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    var _options$voids7 = options.voids,
  	        voids = _options$voids7 === void 0 ? false : _options$voids7;
  	    var range = Editor.range(editor, at);

  	    var _Range$edges5 = Range.edges(range),
  	        _Range$edges6 = _slicedToArray(_Range$edges5, 2),
  	        start = _Range$edges6[0],
  	        end = _Range$edges6[1];

  	    var text = '';

  	    var _iterator8 = _createForOfIteratorHelper$5(Editor.nodes(editor, {
  	      at: range,
  	      match: Text.isText,
  	      voids: voids
  	    })),
  	        _step8;

  	    try {
  	      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
  	        var _step8$value = _slicedToArray(_step8.value, 2),
  	            node = _step8$value[0],
  	            path = _step8$value[1];

  	        var t = node.text;

  	        if (Path.equals(path, end.path)) {
  	          t = t.slice(0, end.offset);
  	        }

  	        if (Path.equals(path, start.path)) {
  	          t = t.slice(start.offset);
  	        }

  	        text += t;
  	      }
  	    } catch (err) {
  	      _iterator8.e(err);
  	    } finally {
  	      _iterator8.f();
  	    }

  	    return text;
  	  },

  	  /**
  	   * Convert a range into a non-hanging one.
  	   */
  	  unhangRange: function unhangRange(editor, range) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    var _options$voids8 = options.voids,
  	        voids = _options$voids8 === void 0 ? false : _options$voids8;

  	    var _Range$edges7 = Range.edges(range),
  	        _Range$edges8 = _slicedToArray(_Range$edges7, 2),
  	        start = _Range$edges8[0],
  	        end = _Range$edges8[1]; // PERF: exit early if we can guarantee that the range isn't hanging.


  	    if (start.offset !== 0 || end.offset !== 0 || Range.isCollapsed(range)) {
  	      return range;
  	    }

  	    var endBlock = Editor.above(editor, {
  	      at: end,
  	      match: function match(n) {
  	        return Editor.isBlock(editor, n);
  	      }
  	    });
  	    var blockPath = endBlock ? endBlock[1] : [];
  	    var first = Editor.start(editor, start);
  	    var before = {
  	      anchor: first,
  	      focus: end
  	    };
  	    var skip = true;

  	    var _iterator9 = _createForOfIteratorHelper$5(Editor.nodes(editor, {
  	      at: before,
  	      match: Text.isText,
  	      reverse: true,
  	      voids: voids
  	    })),
  	        _step9;

  	    try {
  	      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
  	        var _step9$value = _slicedToArray(_step9.value, 2),
  	            node = _step9$value[0],
  	            path = _step9$value[1];

  	        if (skip) {
  	          skip = false;
  	          continue;
  	        }

  	        if (node.text !== '' || Path.isBefore(path, blockPath)) {
  	          end = {
  	            path: path,
  	            offset: node.text.length
  	          };
  	          break;
  	        }
  	      }
  	    } catch (err) {
  	      _iterator9.e(err);
  	    } finally {
  	      _iterator9.f();
  	    }

  	    return {
  	      anchor: start,
  	      focus: end
  	    };
  	  },

  	  /**
  	   * Match a void node in the current branch of the editor.
  	   */
  	  "void": function _void(editor) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    return Editor.above(editor, _objectSpread$8(_objectSpread$8({}, options), {}, {
  	      match: function match(n) {
  	        return Editor.isVoid(editor, n);
  	      }
  	    }));
  	  },

  	  /**
  	   * Call a function, deferring normalization until after it completes.
  	   */
  	  withoutNormalizing: function withoutNormalizing(editor, fn) {
  	    var value = Editor.isNormalizing(editor);
  	    Editor.setNormalizing(editor, false);

  	    try {
  	      fn();
  	    } finally {
  	      Editor.setNormalizing(editor, value);
  	    }

  	    Editor.normalize(editor);
  	  }
  	};

  	var Location = {
  	  /**
  	   * Check if a value implements the `Location` interface.
  	   */
  	  isLocation: function isLocation(value) {
  	    return Path.isPath(value) || Point.isPoint(value) || Range.isRange(value);
  	  }
  	}; // eslint-disable-next-line no-redeclare

  	var Span = {
  	  /**
  	   * Check if a value implements the `Span` interface.
  	   */
  	  isSpan: function isSpan(value) {
  	    return Array.isArray(value) && value.length === 2 && value.every(Path.isPath);
  	  }
  	};

  	var _excluded$3 = ["children"],
  	    _excluded2$2 = ["text"];

  	function _createForOfIteratorHelper$4(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike) { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  	function _unsupportedIterableToArray$4(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$4(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen); }

  	function _arrayLikeToArray$4(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  	var IS_NODE_LIST_CACHE = new WeakMap(); // eslint-disable-next-line no-redeclare

  	var Node = {
  	  /**
  	   * Get the node at a specific path, asserting that it's an ancestor node.
  	   */
  	  ancestor: function ancestor(root, path) {
  	    var node = Node.get(root, path);

  	    if (Text.isText(node)) {
  	      throw new Error("Cannot get the ancestor node at path [".concat(path, "] because it refers to a text node instead: ").concat(Scrubber.stringify(node)));
  	    }

  	    return node;
  	  },

  	  /**
  	   * Return a generator of all the ancestor nodes above a specific path.
  	   *
  	   * By default the order is top-down, from highest to lowest ancestor in
  	   * the tree, but you can pass the `reverse: true` option to go bottom-up.
  	   */
  	  ancestors: function* ancestors(root, path) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  	    var _iterator = _createForOfIteratorHelper$4(Path.ancestors(path, options)),
  	        _step;

  	    try {
  	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
  	        var p = _step.value;
  	        var n = Node.ancestor(root, p);
  	        var entry = [n, p];
  	        yield entry;
  	      }
  	    } catch (err) {
  	      _iterator.e(err);
  	    } finally {
  	      _iterator.f();
  	    }
  	  },

  	  /**
  	   * Get the child of a node at a specific index.
  	   */
  	  child: function child(root, index) {
  	    if (Text.isText(root)) {
  	      throw new Error("Cannot get the child of a text node: ".concat(Scrubber.stringify(root)));
  	    }

  	    var c = root.children[index];

  	    if (c == null) {
  	      throw new Error("Cannot get child at index `".concat(index, "` in node: ").concat(Scrubber.stringify(root)));
  	    }

  	    return c;
  	  },

  	  /**
  	   * Iterate over the children of a node at a specific path.
  	   */
  	  children: function* children(root, path) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    var _options$reverse = options.reverse,
  	        reverse = _options$reverse === void 0 ? false : _options$reverse;
  	    var ancestor = Node.ancestor(root, path);
  	    var children = ancestor.children;
  	    var index = reverse ? children.length - 1 : 0;

  	    while (reverse ? index >= 0 : index < children.length) {
  	      var child = Node.child(ancestor, index);
  	      var childPath = path.concat(index);
  	      yield [child, childPath];
  	      index = reverse ? index - 1 : index + 1;
  	    }
  	  },

  	  /**
  	   * Get an entry for the common ancesetor node of two paths.
  	   */
  	  common: function common(root, path, another) {
  	    var p = Path.common(path, another);
  	    var n = Node.get(root, p);
  	    return [n, p];
  	  },

  	  /**
  	   * Get the node at a specific path, asserting that it's a descendant node.
  	   */
  	  descendant: function descendant(root, path) {
  	    var node = Node.get(root, path);

  	    if (Editor.isEditor(node)) {
  	      throw new Error("Cannot get the descendant node at path [".concat(path, "] because it refers to the root editor node instead: ").concat(Scrubber.stringify(node)));
  	    }

  	    return node;
  	  },

  	  /**
  	   * Return a generator of all the descendant node entries inside a root node.
  	   */
  	  descendants: function* descendants(root) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  	    var _iterator2 = _createForOfIteratorHelper$4(Node.nodes(root, options)),
  	        _step2;

  	    try {
  	      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
  	        var _step2$value = _slicedToArray(_step2.value, 2),
  	            node = _step2$value[0],
  	            path = _step2$value[1];

  	        if (path.length !== 0) {
  	          // NOTE: we have to coerce here because checking the path's length does
  	          // guarantee that `node` is not a `Editor`, but TypeScript doesn't know.
  	          yield [node, path];
  	        }
  	      }
  	    } catch (err) {
  	      _iterator2.e(err);
  	    } finally {
  	      _iterator2.f();
  	    }
  	  },

  	  /**
  	   * Return a generator of all the element nodes inside a root node. Each iteration
  	   * will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the
  	   * root node is an element it will be included in the iteration as well.
  	   */
  	  elements: function* elements(root) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  	    var _iterator3 = _createForOfIteratorHelper$4(Node.nodes(root, options)),
  	        _step3;

  	    try {
  	      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
  	        var _step3$value = _slicedToArray(_step3.value, 2),
  	            node = _step3$value[0],
  	            path = _step3$value[1];

  	        if (Element.isElement(node)) {
  	          yield [node, path];
  	        }
  	      }
  	    } catch (err) {
  	      _iterator3.e(err);
  	    } finally {
  	      _iterator3.f();
  	    }
  	  },

  	  /**
  	   * Extract props from a Node.
  	   */
  	  extractProps: function extractProps(node) {
  	    if (Element.isAncestor(node)) {
  	      node.children;
  	          var properties = _objectWithoutProperties(node, _excluded$3);

  	      return properties;
  	    } else {
  	      node.text;
  	          var _properties = _objectWithoutProperties(node, _excluded2$2);

  	      return _properties;
  	    }
  	  },

  	  /**
  	   * Get the first node entry in a root node from a path.
  	   */
  	  first: function first(root, path) {
  	    var p = path.slice();
  	    var n = Node.get(root, p);

  	    while (n) {
  	      if (Text.isText(n) || n.children.length === 0) {
  	        break;
  	      } else {
  	        n = n.children[0];
  	        p.push(0);
  	      }
  	    }

  	    return [n, p];
  	  },

  	  /**
  	   * Get the sliced fragment represented by a range inside a root node.
  	   */
  	  fragment: function fragment(root, range) {
  	    if (Text.isText(root)) {
  	      throw new Error("Cannot get a fragment starting from a root text node: ".concat(Scrubber.stringify(root)));
  	    }

  	    var newRoot = immer.produce({
  	      children: root.children
  	    }, function (r) {
  	      var _Range$edges = Range.edges(range),
  	          _Range$edges2 = _slicedToArray(_Range$edges, 2),
  	          start = _Range$edges2[0],
  	          end = _Range$edges2[1];

  	      var nodeEntries = Node.nodes(r, {
  	        reverse: true,
  	        pass: function pass(_ref) {
  	          var _ref2 = _slicedToArray(_ref, 2),
  	              path = _ref2[1];

  	          return !Range.includes(range, path);
  	        }
  	      });

  	      var _iterator4 = _createForOfIteratorHelper$4(nodeEntries),
  	          _step4;

  	      try {
  	        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
  	          var _step4$value = _slicedToArray(_step4.value, 2),
  	              path = _step4$value[1];

  	          if (!Range.includes(range, path)) {
  	            var parent = Node.parent(r, path);
  	            var index = path[path.length - 1];
  	            parent.children.splice(index, 1);
  	          }

  	          if (Path.equals(path, end.path)) {
  	            var leaf = Node.leaf(r, path);
  	            leaf.text = leaf.text.slice(0, end.offset);
  	          }

  	          if (Path.equals(path, start.path)) {
  	            var _leaf = Node.leaf(r, path);

  	            _leaf.text = _leaf.text.slice(start.offset);
  	          }
  	        }
  	      } catch (err) {
  	        _iterator4.e(err);
  	      } finally {
  	        _iterator4.f();
  	      }

  	      if (Editor.isEditor(r)) {
  	        r.selection = null;
  	      }
  	    });
  	    return newRoot.children;
  	  },

  	  /**
  	   * Get the descendant node referred to by a specific path. If the path is an
  	   * empty array, it refers to the root node itself.
  	   */
  	  get: function get(root, path) {
  	    var node = root;

  	    for (var i = 0; i < path.length; i++) {
  	      var p = path[i];

  	      if (Text.isText(node) || !node.children[p]) {
  	        throw new Error("Cannot find a descendant at path [".concat(path, "] in node: ").concat(Scrubber.stringify(root)));
  	      }

  	      node = node.children[p];
  	    }

  	    return node;
  	  },

  	  /**
  	   * Check if a descendant node exists at a specific path.
  	   */
  	  has: function has(root, path) {
  	    var node = root;

  	    for (var i = 0; i < path.length; i++) {
  	      var p = path[i];

  	      if (Text.isText(node) || !node.children[p]) {
  	        return false;
  	      }

  	      node = node.children[p];
  	    }

  	    return true;
  	  },

  	  /**
  	   * Check if a value implements the `Node` interface.
  	   */
  	  isNode: function isNode(value) {
  	    return Text.isText(value) || Element.isElement(value) || Editor.isEditor(value);
  	  },

  	  /**
  	   * Check if a value is a list of `Node` objects.
  	   */
  	  isNodeList: function isNodeList(value) {
  	    if (!Array.isArray(value)) {
  	      return false;
  	    }

  	    var cachedResult = IS_NODE_LIST_CACHE.get(value);

  	    if (cachedResult !== undefined) {
  	      return cachedResult;
  	    }

  	    var isNodeList = value.every(function (val) {
  	      return Node.isNode(val);
  	    });
  	    IS_NODE_LIST_CACHE.set(value, isNodeList);
  	    return isNodeList;
  	  },

  	  /**
  	   * Get the last node entry in a root node from a path.
  	   */
  	  last: function last(root, path) {
  	    var p = path.slice();
  	    var n = Node.get(root, p);

  	    while (n) {
  	      if (Text.isText(n) || n.children.length === 0) {
  	        break;
  	      } else {
  	        var i = n.children.length - 1;
  	        n = n.children[i];
  	        p.push(i);
  	      }
  	    }

  	    return [n, p];
  	  },

  	  /**
  	   * Get the node at a specific path, ensuring it's a leaf text node.
  	   */
  	  leaf: function leaf(root, path) {
  	    var node = Node.get(root, path);

  	    if (!Text.isText(node)) {
  	      throw new Error("Cannot get the leaf node at path [".concat(path, "] because it refers to a non-leaf node: ").concat(Scrubber.stringify(node)));
  	    }

  	    return node;
  	  },

  	  /**
  	   * Return a generator of the in a branch of the tree, from a specific path.
  	   *
  	   * By default the order is top-down, from highest to lowest node in the tree,
  	   * but you can pass the `reverse: true` option to go bottom-up.
  	   */
  	  levels: function* levels(root, path) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  	    var _iterator5 = _createForOfIteratorHelper$4(Path.levels(path, options)),
  	        _step5;

  	    try {
  	      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
  	        var p = _step5.value;
  	        var n = Node.get(root, p);
  	        yield [n, p];
  	      }
  	    } catch (err) {
  	      _iterator5.e(err);
  	    } finally {
  	      _iterator5.f();
  	    }
  	  },

  	  /**
  	   * Check if a node matches a set of props.
  	   */
  	  matches: function matches(node, props) {
  	    return Element.isElement(node) && Element.isElementProps(props) && Element.matches(node, props) || Text.isText(node) && Text.isTextProps(props) && Text.matches(node, props);
  	  },

  	  /**
  	   * Return a generator of all the node entries of a root node. Each entry is
  	   * returned as a `[Node, Path]` tuple, with the path referring to the node's
  	   * position inside the root node.
  	   */
  	  nodes: function* nodes(root) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    var pass = options.pass,
  	        _options$reverse2 = options.reverse,
  	        reverse = _options$reverse2 === void 0 ? false : _options$reverse2;
  	    var _options$from = options.from,
  	        from = _options$from === void 0 ? [] : _options$from,
  	        to = options.to;
  	    var visited = new Set();
  	    var p = [];
  	    var n = root;

  	    while (true) {
  	      if (to && (reverse ? Path.isBefore(p, to) : Path.isAfter(p, to))) {
  	        break;
  	      }

  	      if (!visited.has(n)) {
  	        yield [n, p];
  	      } // If we're allowed to go downward and we haven't descended yet, do.


  	      if (!visited.has(n) && !Text.isText(n) && n.children.length !== 0 && (pass == null || pass([n, p]) === false)) {
  	        visited.add(n);
  	        var nextIndex = reverse ? n.children.length - 1 : 0;

  	        if (Path.isAncestor(p, from)) {
  	          nextIndex = from[p.length];
  	        }

  	        p = p.concat(nextIndex);
  	        n = Node.get(root, p);
  	        continue;
  	      } // If we're at the root and we can't go down, we're done.


  	      if (p.length === 0) {
  	        break;
  	      } // If we're going forward...


  	      if (!reverse) {
  	        var newPath = Path.next(p);

  	        if (Node.has(root, newPath)) {
  	          p = newPath;
  	          n = Node.get(root, p);
  	          continue;
  	        }
  	      } // If we're going backward...


  	      if (reverse && p[p.length - 1] !== 0) {
  	        var _newPath = Path.previous(p);

  	        p = _newPath;
  	        n = Node.get(root, p);
  	        continue;
  	      } // Otherwise we're going upward...


  	      p = Path.parent(p);
  	      n = Node.get(root, p);
  	      visited.add(n);
  	    }
  	  },

  	  /**
  	   * Get the parent of a node at a specific path.
  	   */
  	  parent: function parent(root, path) {
  	    var parentPath = Path.parent(path);
  	    var p = Node.get(root, parentPath);

  	    if (Text.isText(p)) {
  	      throw new Error("Cannot get the parent of path [".concat(path, "] because it does not exist in the root."));
  	    }

  	    return p;
  	  },

  	  /**
  	   * Get the concatenated text string of a node's content.
  	   *
  	   * Note that this will not include spaces or line breaks between block nodes.
  	   * It is not a user-facing string, but a string for performing offset-related
  	   * computations for a node.
  	   */
  	  string: function string(node) {
  	    if (Text.isText(node)) {
  	      return node.text;
  	    } else {
  	      return node.children.map(Node.string).join('');
  	    }
  	  },

  	  /**
  	   * Return a generator of all leaf text nodes in a root node.
  	   */
  	  texts: function* texts(root) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  	    var _iterator6 = _createForOfIteratorHelper$4(Node.nodes(root, options)),
  	        _step6;

  	    try {
  	      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
  	        var _step6$value = _slicedToArray(_step6.value, 2),
  	            node = _step6$value[0],
  	            path = _step6$value[1];

  	        if (Text.isText(node)) {
  	          yield [node, path];
  	        }
  	      }
  	    } catch (err) {
  	      _iterator6.e(err);
  	    } finally {
  	      _iterator6.f();
  	    }
  	  }
  	};

  	function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  	function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$7(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  	var Operation = {
  	  /**
  	   * Check of a value is a `NodeOperation` object.
  	   */
  	  isNodeOperation: function isNodeOperation(value) {
  	    return Operation.isOperation(value) && value.type.endsWith('_node');
  	  },

  	  /**
  	   * Check of a value is an `Operation` object.
  	   */
  	  isOperation: function isOperation(value) {
  	    if (!isPlainObject.isPlainObject(value)) {
  	      return false;
  	    }

  	    switch (value.type) {
  	      case 'insert_node':
  	        return Path.isPath(value.path) && Node.isNode(value.node);

  	      case 'insert_text':
  	        return typeof value.offset === 'number' && typeof value.text === 'string' && Path.isPath(value.path);

  	      case 'merge_node':
  	        return typeof value.position === 'number' && Path.isPath(value.path) && isPlainObject.isPlainObject(value.properties);

  	      case 'move_node':
  	        return Path.isPath(value.path) && Path.isPath(value.newPath);

  	      case 'remove_node':
  	        return Path.isPath(value.path) && Node.isNode(value.node);

  	      case 'remove_text':
  	        return typeof value.offset === 'number' && typeof value.text === 'string' && Path.isPath(value.path);

  	      case 'set_node':
  	        return Path.isPath(value.path) && isPlainObject.isPlainObject(value.properties) && isPlainObject.isPlainObject(value.newProperties);

  	      case 'set_selection':
  	        return value.properties === null && Range.isRange(value.newProperties) || value.newProperties === null && Range.isRange(value.properties) || isPlainObject.isPlainObject(value.properties) && isPlainObject.isPlainObject(value.newProperties);

  	      case 'split_node':
  	        return Path.isPath(value.path) && typeof value.position === 'number' && isPlainObject.isPlainObject(value.properties);

  	      default:
  	        return false;
  	    }
  	  },

  	  /**
  	   * Check if a value is a list of `Operation` objects.
  	   */
  	  isOperationList: function isOperationList(value) {
  	    return Array.isArray(value) && value.every(function (val) {
  	      return Operation.isOperation(val);
  	    });
  	  },

  	  /**
  	   * Check of a value is a `SelectionOperation` object.
  	   */
  	  isSelectionOperation: function isSelectionOperation(value) {
  	    return Operation.isOperation(value) && value.type.endsWith('_selection');
  	  },

  	  /**
  	   * Check of a value is a `TextOperation` object.
  	   */
  	  isTextOperation: function isTextOperation(value) {
  	    return Operation.isOperation(value) && value.type.endsWith('_text');
  	  },

  	  /**
  	   * Invert an operation, returning a new operation that will exactly undo the
  	   * original when applied.
  	   */
  	  inverse: function inverse(op) {
  	    switch (op.type) {
  	      case 'insert_node':
  	        {
  	          return _objectSpread$7(_objectSpread$7({}, op), {}, {
  	            type: 'remove_node'
  	          });
  	        }

  	      case 'insert_text':
  	        {
  	          return _objectSpread$7(_objectSpread$7({}, op), {}, {
  	            type: 'remove_text'
  	          });
  	        }

  	      case 'merge_node':
  	        {
  	          return _objectSpread$7(_objectSpread$7({}, op), {}, {
  	            type: 'split_node',
  	            path: Path.previous(op.path)
  	          });
  	        }

  	      case 'move_node':
  	        {
  	          var newPath = op.newPath,
  	              path = op.path; // PERF: in this case the move operation is a no-op anyways.

  	          if (Path.equals(newPath, path)) {
  	            return op;
  	          } // If the move happens completely within a single parent the path and
  	          // newPath are stable with respect to each other.


  	          if (Path.isSibling(path, newPath)) {
  	            return _objectSpread$7(_objectSpread$7({}, op), {}, {
  	              path: newPath,
  	              newPath: path
  	            });
  	          } // If the move does not happen within a single parent it is possible
  	          // for the move to impact the true path to the location where the node
  	          // was removed from and where it was inserted. We have to adjust for this
  	          // and find the original path. We can accomplish this (only in non-sibling)
  	          // moves by looking at the impact of the move operation on the node
  	          // after the original move path.


  	          var inversePath = Path.transform(path, op);
  	          var inverseNewPath = Path.transform(Path.next(path), op);
  	          return _objectSpread$7(_objectSpread$7({}, op), {}, {
  	            path: inversePath,
  	            newPath: inverseNewPath
  	          });
  	        }

  	      case 'remove_node':
  	        {
  	          return _objectSpread$7(_objectSpread$7({}, op), {}, {
  	            type: 'insert_node'
  	          });
  	        }

  	      case 'remove_text':
  	        {
  	          return _objectSpread$7(_objectSpread$7({}, op), {}, {
  	            type: 'insert_text'
  	          });
  	        }

  	      case 'set_node':
  	        {
  	          var properties = op.properties,
  	              newProperties = op.newProperties;
  	          return _objectSpread$7(_objectSpread$7({}, op), {}, {
  	            properties: newProperties,
  	            newProperties: properties
  	          });
  	        }

  	      case 'set_selection':
  	        {
  	          var _properties = op.properties,
  	              _newProperties = op.newProperties;

  	          if (_properties == null) {
  	            return _objectSpread$7(_objectSpread$7({}, op), {}, {
  	              properties: _newProperties,
  	              newProperties: null
  	            });
  	          } else if (_newProperties == null) {
  	            return _objectSpread$7(_objectSpread$7({}, op), {}, {
  	              properties: null,
  	              newProperties: _properties
  	            });
  	          } else {
  	            return _objectSpread$7(_objectSpread$7({}, op), {}, {
  	              properties: _newProperties,
  	              newProperties: _properties
  	            });
  	          }
  	        }

  	      case 'split_node':
  	        {
  	          return _objectSpread$7(_objectSpread$7({}, op), {}, {
  	            type: 'merge_node',
  	            path: Path.next(op.path)
  	          });
  	        }
  	    }
  	  }
  	};

  	var Path = {
  	  /**
  	   * Get a list of ancestor paths for a given path.
  	   *
  	   * The paths are sorted from shallowest to deepest ancestor. However, if the
  	   * `reverse: true` option is passed, they are reversed.
  	   */
  	  ancestors: function ancestors(path) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    var _options$reverse = options.reverse,
  	        reverse = _options$reverse === void 0 ? false : _options$reverse;
  	    var paths = Path.levels(path, options);

  	    if (reverse) {
  	      paths = paths.slice(1);
  	    } else {
  	      paths = paths.slice(0, -1);
  	    }

  	    return paths;
  	  },

  	  /**
  	   * Get the common ancestor path of two paths.
  	   */
  	  common: function common(path, another) {
  	    var common = [];

  	    for (var i = 0; i < path.length && i < another.length; i++) {
  	      var av = path[i];
  	      var bv = another[i];

  	      if (av !== bv) {
  	        break;
  	      }

  	      common.push(av);
  	    }

  	    return common;
  	  },

  	  /**
  	   * Compare a path to another, returning an integer indicating whether the path
  	   * was before, at, or after the other.
  	   *
  	   * Note: Two paths of unequal length can still receive a `0` result if one is
  	   * directly above or below the other. If you want exact matching, use
  	   * [[Path.equals]] instead.
  	   */
  	  compare: function compare(path, another) {
  	    var min = Math.min(path.length, another.length);

  	    for (var i = 0; i < min; i++) {
  	      if (path[i] < another[i]) return -1;
  	      if (path[i] > another[i]) return 1;
  	    }

  	    return 0;
  	  },

  	  /**
  	   * Check if a path ends after one of the indexes in another.
  	   */
  	  endsAfter: function endsAfter(path, another) {
  	    var i = path.length - 1;
  	    var as = path.slice(0, i);
  	    var bs = another.slice(0, i);
  	    var av = path[i];
  	    var bv = another[i];
  	    return Path.equals(as, bs) && av > bv;
  	  },

  	  /**
  	   * Check if a path ends at one of the indexes in another.
  	   */
  	  endsAt: function endsAt(path, another) {
  	    var i = path.length;
  	    var as = path.slice(0, i);
  	    var bs = another.slice(0, i);
  	    return Path.equals(as, bs);
  	  },

  	  /**
  	   * Check if a path ends before one of the indexes in another.
  	   */
  	  endsBefore: function endsBefore(path, another) {
  	    var i = path.length - 1;
  	    var as = path.slice(0, i);
  	    var bs = another.slice(0, i);
  	    var av = path[i];
  	    var bv = another[i];
  	    return Path.equals(as, bs) && av < bv;
  	  },

  	  /**
  	   * Check if a path is exactly equal to another.
  	   */
  	  equals: function equals(path, another) {
  	    return path.length === another.length && path.every(function (n, i) {
  	      return n === another[i];
  	    });
  	  },

  	  /**
  	   * Check if the path of previous sibling node exists
  	   */
  	  hasPrevious: function hasPrevious(path) {
  	    return path[path.length - 1] > 0;
  	  },

  	  /**
  	   * Check if a path is after another.
  	   */
  	  isAfter: function isAfter(path, another) {
  	    return Path.compare(path, another) === 1;
  	  },

  	  /**
  	   * Check if a path is an ancestor of another.
  	   */
  	  isAncestor: function isAncestor(path, another) {
  	    return path.length < another.length && Path.compare(path, another) === 0;
  	  },

  	  /**
  	   * Check if a path is before another.
  	   */
  	  isBefore: function isBefore(path, another) {
  	    return Path.compare(path, another) === -1;
  	  },

  	  /**
  	   * Check if a path is a child of another.
  	   */
  	  isChild: function isChild(path, another) {
  	    return path.length === another.length + 1 && Path.compare(path, another) === 0;
  	  },

  	  /**
  	   * Check if a path is equal to or an ancestor of another.
  	   */
  	  isCommon: function isCommon(path, another) {
  	    return path.length <= another.length && Path.compare(path, another) === 0;
  	  },

  	  /**
  	   * Check if a path is a descendant of another.
  	   */
  	  isDescendant: function isDescendant(path, another) {
  	    return path.length > another.length && Path.compare(path, another) === 0;
  	  },

  	  /**
  	   * Check if a path is the parent of another.
  	   */
  	  isParent: function isParent(path, another) {
  	    return path.length + 1 === another.length && Path.compare(path, another) === 0;
  	  },

  	  /**
  	   * Check is a value implements the `Path` interface.
  	   */
  	  isPath: function isPath(value) {
  	    return Array.isArray(value) && (value.length === 0 || typeof value[0] === 'number');
  	  },

  	  /**
  	   * Check if a path is a sibling of another.
  	   */
  	  isSibling: function isSibling(path, another) {
  	    if (path.length !== another.length) {
  	      return false;
  	    }

  	    var as = path.slice(0, -1);
  	    var bs = another.slice(0, -1);
  	    var al = path[path.length - 1];
  	    var bl = another[another.length - 1];
  	    return al !== bl && Path.equals(as, bs);
  	  },

  	  /**
  	   * Get a list of paths at every level down to a path. Note: this is the same
  	   * as `Path.ancestors`, but including the path itself.
  	   *
  	   * The paths are sorted from shallowest to deepest. However, if the `reverse:
  	   * true` option is passed, they are reversed.
  	   */
  	  levels: function levels(path) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    var _options$reverse2 = options.reverse,
  	        reverse = _options$reverse2 === void 0 ? false : _options$reverse2;
  	    var list = [];

  	    for (var i = 0; i <= path.length; i++) {
  	      list.push(path.slice(0, i));
  	    }

  	    if (reverse) {
  	      list.reverse();
  	    }

  	    return list;
  	  },

  	  /**
  	   * Given a path, get the path to the next sibling node.
  	   */
  	  next: function next(path) {
  	    if (path.length === 0) {
  	      throw new Error("Cannot get the next path of a root path [".concat(path, "], because it has no next index."));
  	    }

  	    var last = path[path.length - 1];
  	    return path.slice(0, -1).concat(last + 1);
  	  },

  	  /**
  	   * Returns whether this operation can affect paths or not. Used as an
  	   * optimization when updating dirty paths during normalization
  	   *
  	   * NOTE: This *must* be kept in sync with the implementation of 'transform'
  	   * below
  	   */
  	  operationCanTransformPath: function operationCanTransformPath(operation) {
  	    switch (operation.type) {
  	      case 'insert_node':
  	      case 'remove_node':
  	      case 'merge_node':
  	      case 'split_node':
  	      case 'move_node':
  	        return true;

  	      default:
  	        return false;
  	    }
  	  },

  	  /**
  	   * Given a path, return a new path referring to the parent node above it.
  	   */
  	  parent: function parent(path) {
  	    if (path.length === 0) {
  	      throw new Error("Cannot get the parent path of the root path [".concat(path, "]."));
  	    }

  	    return path.slice(0, -1);
  	  },

  	  /**
  	   * Given a path, get the path to the previous sibling node.
  	   */
  	  previous: function previous(path) {
  	    if (path.length === 0) {
  	      throw new Error("Cannot get the previous path of a root path [".concat(path, "], because it has no previous index."));
  	    }

  	    var last = path[path.length - 1];

  	    if (last <= 0) {
  	      throw new Error("Cannot get the previous path of a first child path [".concat(path, "] because it would result in a negative index."));
  	    }

  	    return path.slice(0, -1).concat(last - 1);
  	  },

  	  /**
  	   * Get a path relative to an ancestor.
  	   */
  	  relative: function relative(path, ancestor) {
  	    if (!Path.isAncestor(ancestor, path) && !Path.equals(path, ancestor)) {
  	      throw new Error("Cannot get the relative path of [".concat(path, "] inside ancestor [").concat(ancestor, "], because it is not above or equal to the path."));
  	    }

  	    return path.slice(ancestor.length);
  	  },

  	  /**
  	   * Transform a path by an operation.
  	   */
  	  transform: function transform(path, operation) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    return immer.produce(path, function (p) {
  	      var _options$affinity = options.affinity,
  	          affinity = _options$affinity === void 0 ? 'forward' : _options$affinity; // PERF: Exit early if the operation is guaranteed not to have an effect.

  	      if (!path || (path === null || path === void 0 ? void 0 : path.length) === 0) {
  	        return;
  	      }

  	      if (p === null) {
  	        return null;
  	      }

  	      switch (operation.type) {
  	        case 'insert_node':
  	          {
  	            var op = operation.path;

  	            if (Path.equals(op, p) || Path.endsBefore(op, p) || Path.isAncestor(op, p)) {
  	              p[op.length - 1] += 1;
  	            }

  	            break;
  	          }

  	        case 'remove_node':
  	          {
  	            var _op = operation.path;

  	            if (Path.equals(_op, p) || Path.isAncestor(_op, p)) {
  	              return null;
  	            } else if (Path.endsBefore(_op, p)) {
  	              p[_op.length - 1] -= 1;
  	            }

  	            break;
  	          }

  	        case 'merge_node':
  	          {
  	            var _op2 = operation.path,
  	                position = operation.position;

  	            if (Path.equals(_op2, p) || Path.endsBefore(_op2, p)) {
  	              p[_op2.length - 1] -= 1;
  	            } else if (Path.isAncestor(_op2, p)) {
  	              p[_op2.length - 1] -= 1;
  	              p[_op2.length] += position;
  	            }

  	            break;
  	          }

  	        case 'split_node':
  	          {
  	            var _op3 = operation.path,
  	                _position = operation.position;

  	            if (Path.equals(_op3, p)) {
  	              if (affinity === 'forward') {
  	                p[p.length - 1] += 1;
  	              } else if (affinity === 'backward') ; else {
  	                return null;
  	              }
  	            } else if (Path.endsBefore(_op3, p)) {
  	              p[_op3.length - 1] += 1;
  	            } else if (Path.isAncestor(_op3, p) && path[_op3.length] >= _position) {
  	              p[_op3.length - 1] += 1;
  	              p[_op3.length] -= _position;
  	            }

  	            break;
  	          }

  	        case 'move_node':
  	          {
  	            var _op4 = operation.path,
  	                onp = operation.newPath; // If the old and new path are the same, it's a no-op.

  	            if (Path.equals(_op4, onp)) {
  	              return;
  	            }

  	            if (Path.isAncestor(_op4, p) || Path.equals(_op4, p)) {
  	              var copy = onp.slice();

  	              if (Path.endsBefore(_op4, onp) && _op4.length < onp.length) {
  	                copy[_op4.length - 1] -= 1;
  	              }

  	              return copy.concat(p.slice(_op4.length));
  	            } else if (Path.isSibling(_op4, onp) && (Path.isAncestor(onp, p) || Path.equals(onp, p))) {
  	              if (Path.endsBefore(_op4, p)) {
  	                p[_op4.length - 1] -= 1;
  	              } else {
  	                p[_op4.length - 1] += 1;
  	              }
  	            } else if (Path.endsBefore(onp, p) || Path.equals(onp, p) || Path.isAncestor(onp, p)) {
  	              if (Path.endsBefore(_op4, p)) {
  	                p[_op4.length - 1] -= 1;
  	              }

  	              p[onp.length - 1] += 1;
  	            } else if (Path.endsBefore(_op4, p)) {
  	              if (Path.equals(onp, p)) {
  	                p[onp.length - 1] += 1;
  	              }

  	              p[_op4.length - 1] -= 1;
  	            }

  	            break;
  	          }
  	      }
  	    });
  	  }
  	};

  	var PathRef = {
  	  /**
  	   * Transform the path ref's current value by an operation.
  	   */
  	  transform: function transform(ref, op) {
  	    var current = ref.current,
  	        affinity = ref.affinity;

  	    if (current == null) {
  	      return;
  	    }

  	    var path = Path.transform(current, op, {
  	      affinity: affinity
  	    });
  	    ref.current = path;

  	    if (path == null) {
  	      ref.unref();
  	    }
  	  }
  	};

  	function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  	function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$6(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  	var Point = {
  	  /**
  	   * Compare a point to another, returning an integer indicating whether the
  	   * point was before, at, or after the other.
  	   */
  	  compare: function compare(point, another) {
  	    var result = Path.compare(point.path, another.path);

  	    if (result === 0) {
  	      if (point.offset < another.offset) return -1;
  	      if (point.offset > another.offset) return 1;
  	      return 0;
  	    }

  	    return result;
  	  },

  	  /**
  	   * Check if a point is after another.
  	   */
  	  isAfter: function isAfter(point, another) {
  	    return Point.compare(point, another) === 1;
  	  },

  	  /**
  	   * Check if a point is before another.
  	   */
  	  isBefore: function isBefore(point, another) {
  	    return Point.compare(point, another) === -1;
  	  },

  	  /**
  	   * Check if a point is exactly equal to another.
  	   */
  	  equals: function equals(point, another) {
  	    // PERF: ensure the offsets are equal first since they are cheaper to check.
  	    return point.offset === another.offset && Path.equals(point.path, another.path);
  	  },

  	  /**
  	   * Check if a value implements the `Point` interface.
  	   */
  	  isPoint: function isPoint(value) {
  	    return isPlainObject.isPlainObject(value) && typeof value.offset === 'number' && Path.isPath(value.path);
  	  },

  	  /**
  	   * Transform a point by an operation.
  	   */
  	  transform: function transform(point, op) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    return immer.produce(point, function (p) {
  	      if (p === null) {
  	        return null;
  	      }

  	      var _options$affinity = options.affinity,
  	          affinity = _options$affinity === void 0 ? 'forward' : _options$affinity;
  	      var path = p.path,
  	          offset = p.offset;

  	      switch (op.type) {
  	        case 'insert_node':
  	        case 'move_node':
  	          {
  	            p.path = Path.transform(path, op, options);
  	            break;
  	          }

  	        case 'insert_text':
  	          {
  	            if (Path.equals(op.path, path) && (op.offset < offset || op.offset === offset && affinity === 'forward')) {
  	              p.offset += op.text.length;
  	            }

  	            break;
  	          }

  	        case 'merge_node':
  	          {
  	            if (Path.equals(op.path, path)) {
  	              p.offset += op.position;
  	            }

  	            p.path = Path.transform(path, op, options);
  	            break;
  	          }

  	        case 'remove_text':
  	          {
  	            if (Path.equals(op.path, path) && op.offset <= offset) {
  	              p.offset -= Math.min(offset - op.offset, op.text.length);
  	            }

  	            break;
  	          }

  	        case 'remove_node':
  	          {
  	            if (Path.equals(op.path, path) || Path.isAncestor(op.path, path)) {
  	              return null;
  	            }

  	            p.path = Path.transform(path, op, options);
  	            break;
  	          }

  	        case 'split_node':
  	          {
  	            if (Path.equals(op.path, path)) {
  	              if (op.position === offset && affinity == null) {
  	                return null;
  	              } else if (op.position < offset || op.position === offset && affinity === 'forward') {
  	                p.offset -= op.position;
  	                p.path = Path.transform(path, op, _objectSpread$6(_objectSpread$6({}, options), {}, {
  	                  affinity: 'forward'
  	                }));
  	              }
  	            } else {
  	              p.path = Path.transform(path, op, options);
  	            }

  	            break;
  	          }
  	      }
  	    });
  	  }
  	};

  	var PointRef = {
  	  /**
  	   * Transform the point ref's current value by an operation.
  	   */
  	  transform: function transform(ref, op) {
  	    var current = ref.current,
  	        affinity = ref.affinity;

  	    if (current == null) {
  	      return;
  	    }

  	    var point = Point.transform(current, op, {
  	      affinity: affinity
  	    });
  	    ref.current = point;

  	    if (point == null) {
  	      ref.unref();
  	    }
  	  }
  	};

  	var _excluded$2 = ["anchor", "focus"];

  	function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  	function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$5(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  	var Range = {
  	  /**
  	   * Get the start and end points of a range, in the order in which they appear
  	   * in the document.
  	   */
  	  edges: function edges(range) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    var _options$reverse = options.reverse,
  	        reverse = _options$reverse === void 0 ? false : _options$reverse;
  	    var anchor = range.anchor,
  	        focus = range.focus;
  	    return Range.isBackward(range) === reverse ? [anchor, focus] : [focus, anchor];
  	  },

  	  /**
  	   * Get the end point of a range.
  	   */
  	  end: function end(range) {
  	    var _Range$edges = Range.edges(range),
  	        _Range$edges2 = _slicedToArray(_Range$edges, 2),
  	        end = _Range$edges2[1];

  	    return end;
  	  },

  	  /**
  	   * Check if a range is exactly equal to another.
  	   */
  	  equals: function equals(range, another) {
  	    return Point.equals(range.anchor, another.anchor) && Point.equals(range.focus, another.focus);
  	  },

  	  /**
  	   * Check if a range includes a path, a point or part of another range.
  	   */
  	  includes: function includes(range, target) {
  	    if (Range.isRange(target)) {
  	      if (Range.includes(range, target.anchor) || Range.includes(range, target.focus)) {
  	        return true;
  	      }

  	      var _Range$edges3 = Range.edges(range),
  	          _Range$edges4 = _slicedToArray(_Range$edges3, 2),
  	          rs = _Range$edges4[0],
  	          re = _Range$edges4[1];

  	      var _Range$edges5 = Range.edges(target),
  	          _Range$edges6 = _slicedToArray(_Range$edges5, 2),
  	          ts = _Range$edges6[0],
  	          te = _Range$edges6[1];

  	      return Point.isBefore(rs, ts) && Point.isAfter(re, te);
  	    }

  	    var _Range$edges7 = Range.edges(range),
  	        _Range$edges8 = _slicedToArray(_Range$edges7, 2),
  	        start = _Range$edges8[0],
  	        end = _Range$edges8[1];

  	    var isAfterStart = false;
  	    var isBeforeEnd = false;

  	    if (Point.isPoint(target)) {
  	      isAfterStart = Point.compare(target, start) >= 0;
  	      isBeforeEnd = Point.compare(target, end) <= 0;
  	    } else {
  	      isAfterStart = Path.compare(target, start.path) >= 0;
  	      isBeforeEnd = Path.compare(target, end.path) <= 0;
  	    }

  	    return isAfterStart && isBeforeEnd;
  	  },

  	  /**
  	   * Get the intersection of a range with another.
  	   */
  	  intersection: function intersection(range, another) {
  	    range.anchor;
  	        range.focus;
  	        var rest = _objectWithoutProperties(range, _excluded$2);

  	    var _Range$edges9 = Range.edges(range),
  	        _Range$edges10 = _slicedToArray(_Range$edges9, 2),
  	        s1 = _Range$edges10[0],
  	        e1 = _Range$edges10[1];

  	    var _Range$edges11 = Range.edges(another),
  	        _Range$edges12 = _slicedToArray(_Range$edges11, 2),
  	        s2 = _Range$edges12[0],
  	        e2 = _Range$edges12[1];

  	    var start = Point.isBefore(s1, s2) ? s2 : s1;
  	    var end = Point.isBefore(e1, e2) ? e1 : e2;

  	    if (Point.isBefore(end, start)) {
  	      return null;
  	    } else {
  	      return _objectSpread$5({
  	        anchor: start,
  	        focus: end
  	      }, rest);
  	    }
  	  },

  	  /**
  	   * Check if a range is backward, meaning that its anchor point appears in the
  	   * document _after_ its focus point.
  	   */
  	  isBackward: function isBackward(range) {
  	    var anchor = range.anchor,
  	        focus = range.focus;
  	    return Point.isAfter(anchor, focus);
  	  },

  	  /**
  	   * Check if a range is collapsed, meaning that both its anchor and focus
  	   * points refer to the exact same position in the document.
  	   */
  	  isCollapsed: function isCollapsed(range) {
  	    var anchor = range.anchor,
  	        focus = range.focus;
  	    return Point.equals(anchor, focus);
  	  },

  	  /**
  	   * Check if a range is expanded.
  	   *
  	   * This is the opposite of [[Range.isCollapsed]] and is provided for legibility.
  	   */
  	  isExpanded: function isExpanded(range) {
  	    return !Range.isCollapsed(range);
  	  },

  	  /**
  	   * Check if a range is forward.
  	   *
  	   * This is the opposite of [[Range.isBackward]] and is provided for legibility.
  	   */
  	  isForward: function isForward(range) {
  	    return !Range.isBackward(range);
  	  },

  	  /**
  	   * Check if a value implements the [[Range]] interface.
  	   */
  	  isRange: function isRange(value) {
  	    return isPlainObject.isPlainObject(value) && Point.isPoint(value.anchor) && Point.isPoint(value.focus);
  	  },

  	  /**
  	   * Iterate through all of the point entries in a range.
  	   */
  	  points: function* points(range) {
  	    yield [range.anchor, 'anchor'];
  	    yield [range.focus, 'focus'];
  	  },

  	  /**
  	   * Get the start point of a range.
  	   */
  	  start: function start(range) {
  	    var _Range$edges13 = Range.edges(range),
  	        _Range$edges14 = _slicedToArray(_Range$edges13, 1),
  	        start = _Range$edges14[0];

  	    return start;
  	  },

  	  /**
  	   * Transform a range by an operation.
  	   */
  	  transform: function transform(range, op) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    return immer.produce(range, function (r) {
  	      if (r === null) {
  	        return null;
  	      }

  	      var _options$affinity = options.affinity,
  	          affinity = _options$affinity === void 0 ? 'inward' : _options$affinity;
  	      var affinityAnchor;
  	      var affinityFocus;

  	      if (affinity === 'inward') {
  	        // If the range is collapsed, make sure to use the same affinity to
  	        // avoid the two points passing each other and expanding in the opposite
  	        // direction
  	        var isCollapsed = Range.isCollapsed(r);

  	        if (Range.isForward(r)) {
  	          affinityAnchor = 'forward';
  	          affinityFocus = isCollapsed ? affinityAnchor : 'backward';
  	        } else {
  	          affinityAnchor = 'backward';
  	          affinityFocus = isCollapsed ? affinityAnchor : 'forward';
  	        }
  	      } else if (affinity === 'outward') {
  	        if (Range.isForward(r)) {
  	          affinityAnchor = 'backward';
  	          affinityFocus = 'forward';
  	        } else {
  	          affinityAnchor = 'forward';
  	          affinityFocus = 'backward';
  	        }
  	      } else {
  	        affinityAnchor = affinity;
  	        affinityFocus = affinity;
  	      }

  	      var anchor = Point.transform(r.anchor, op, {
  	        affinity: affinityAnchor
  	      });
  	      var focus = Point.transform(r.focus, op, {
  	        affinity: affinityFocus
  	      });

  	      if (!anchor || !focus) {
  	        return null;
  	      }

  	      r.anchor = anchor;
  	      r.focus = focus;
  	    });
  	  }
  	};

  	var RangeRef = {
  	  /**
  	   * Transform the range ref's current value by an operation.
  	   */
  	  transform: function transform(ref, op) {
  	    var current = ref.current,
  	        affinity = ref.affinity;

  	    if (current == null) {
  	      return;
  	    }

  	    var path = Range.transform(current, op, {
  	      affinity: affinity
  	    });
  	    ref.current = path;

  	    if (path == null) {
  	      ref.unref();
  	    }
  	  }
  	};

  	var _scrubber = undefined;
  	/**
  	 * This interface implements a stringify() function, which is used by Slate
  	 * internally when generating exceptions containing end user data. Developers
  	 * using Slate may call Scrubber.setScrubber() to alter the behavior of this
  	 * stringify() function.
  	 *
  	 * For example, to prevent the cleartext logging of 'text' fields within Nodes:
  	 *
  	 *    import { Scrubber } from 'slate';
  	 *    Scrubber.setScrubber((key, val) => {
  	 *      if (key === 'text') return '...scrubbed...'
  	 *      return val
  	 *    });
  	 *
  	 */
  	// eslint-disable-next-line no-redeclare

  	var Scrubber = {
  	  setScrubber: function setScrubber(scrubber) {
  	    _scrubber = scrubber;
  	  },
  	  stringify: function stringify(value) {
  	    return JSON.stringify(value, _scrubber);
  	  }
  	};

  	/*
  	  Custom deep equal comparison for Slate nodes.

  	  We don't need general purpose deep equality;
  	  Slate only supports plain values, Arrays, and nested objects.
  	  Complex values nested inside Arrays are not supported.

  	  Slate objects are designed to be serialised, so
  	  missing keys are deliberately normalised to undefined.
  	 */

  	var isDeepEqual = function isDeepEqual(node, another) {
  	  for (var key in node) {
  	    var a = node[key];
  	    var b = another[key];

  	    if (isPlainObject.isPlainObject(a) && isPlainObject.isPlainObject(b)) {
  	      if (!isDeepEqual(a, b)) return false;
  	    } else if (Array.isArray(a) && Array.isArray(b)) {
  	      if (a.length !== b.length) return false;

  	      for (var i = 0; i < a.length; i++) {
  	        if (a[i] !== b[i]) return false;
  	      }
  	    } else if (a !== b) {
  	      return false;
  	    }
  	  }
  	  /*
  	    Deep object equality is only necessary in one direction; in the reverse direction
  	    we are only looking for keys that are missing.
  	    As above, undefined keys are normalised to missing.
  	  */


  	  for (var _key in another) {
  	    if (node[_key] === undefined && another[_key] !== undefined) {
  	      return false;
  	    }
  	  }

  	  return true;
  	};

  	var _excluded$1 = ["text"],
  	    _excluded2$1 = ["anchor", "focus"];

  	function _createForOfIteratorHelper$3(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike) { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  	function _unsupportedIterableToArray$3(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$3(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen); }

  	function _arrayLikeToArray$3(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  	function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  	function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  	var Text = {
  	  /**
  	   * Check if two text nodes are equal.
  	   *
  	   * When loose is set, the text is not compared. This is
  	   * used to check whether sibling text nodes can be merged.
  	   */
  	  equals: function equals(text, another) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    var _options$loose = options.loose,
  	        loose = _options$loose === void 0 ? false : _options$loose;

  	    function omitText(obj) {
  	      obj.text;
  	          var rest = _objectWithoutProperties(obj, _excluded$1);

  	      return rest;
  	    }

  	    return isDeepEqual(loose ? omitText(text) : text, loose ? omitText(another) : another);
  	  },

  	  /**
  	   * Check if a value implements the `Text` interface.
  	   */
  	  isText: function isText(value) {
  	    return isPlainObject.isPlainObject(value) && typeof value.text === 'string';
  	  },

  	  /**
  	   * Check if a value is a list of `Text` objects.
  	   */
  	  isTextList: function isTextList(value) {
  	    return Array.isArray(value) && value.every(function (val) {
  	      return Text.isText(val);
  	    });
  	  },

  	  /**
  	   * Check if some props are a partial of Text.
  	   */
  	  isTextProps: function isTextProps(props) {
  	    return props.text !== undefined;
  	  },

  	  /**
  	   * Check if an text matches set of properties.
  	   *
  	   * Note: this is for matching custom properties, and it does not ensure that
  	   * the `text` property are two nodes equal.
  	   */
  	  matches: function matches(text, props) {
  	    for (var key in props) {
  	      if (key === 'text') {
  	        continue;
  	      }

  	      if (!text.hasOwnProperty(key) || text[key] !== props[key]) {
  	        return false;
  	      }
  	    }

  	    return true;
  	  },

  	  /**
  	   * Get the leaves for a text node given decorations.
  	   */
  	  decorations: function decorations(node, _decorations) {
  	    var leaves = [_objectSpread$4({}, node)];

  	    var _iterator = _createForOfIteratorHelper$3(_decorations),
  	        _step;

  	    try {
  	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
  	        var dec = _step.value;

  	        var anchor = dec.anchor,
  	            focus = dec.focus,
  	            rest = _objectWithoutProperties(dec, _excluded2$1);

  	        var _Range$edges = Range.edges(dec),
  	            _Range$edges2 = _slicedToArray(_Range$edges, 2),
  	            start = _Range$edges2[0],
  	            end = _Range$edges2[1];

  	        var next = [];
  	        var leafEnd = 0;
  	        var decorationStart = start.offset;
  	        var decorationEnd = end.offset;

  	        var _iterator2 = _createForOfIteratorHelper$3(leaves),
  	            _step2;

  	        try {
  	          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
  	            var leaf = _step2.value;
  	            var length = leaf.text.length;
  	            var leafStart = leafEnd;
  	            leafEnd += length; // If the range encompasses the entire leaf, add the range.

  	            if (decorationStart <= leafStart && leafEnd <= decorationEnd) {
  	              Object.assign(leaf, rest);
  	              next.push(leaf);
  	              continue;
  	            } // If the range expanded and match the leaf, or starts after, or ends before it, continue.


  	            if (decorationStart !== decorationEnd && (decorationStart === leafEnd || decorationEnd === leafStart) || decorationStart > leafEnd || decorationEnd < leafStart || decorationEnd === leafStart && leafStart !== 0) {
  	              next.push(leaf);
  	              continue;
  	            } // Otherwise we need to split the leaf, at the start, end, or both,
  	            // and add the range to the middle intersecting section. Do the end
  	            // split first since we don't need to update the offset that way.


  	            var middle = leaf;
  	            var before = void 0;
  	            var after = void 0;

  	            if (decorationEnd < leafEnd) {
  	              var off = decorationEnd - leafStart;
  	              after = _objectSpread$4(_objectSpread$4({}, middle), {}, {
  	                text: middle.text.slice(off)
  	              });
  	              middle = _objectSpread$4(_objectSpread$4({}, middle), {}, {
  	                text: middle.text.slice(0, off)
  	              });
  	            }

  	            if (decorationStart > leafStart) {
  	              var _off = decorationStart - leafStart;

  	              before = _objectSpread$4(_objectSpread$4({}, middle), {}, {
  	                text: middle.text.slice(0, _off)
  	              });
  	              middle = _objectSpread$4(_objectSpread$4({}, middle), {}, {
  	                text: middle.text.slice(_off)
  	              });
  	            }

  	            Object.assign(middle, rest);

  	            if (before) {
  	              next.push(before);
  	            }

  	            next.push(middle);

  	            if (after) {
  	              next.push(after);
  	            }
  	          }
  	        } catch (err) {
  	          _iterator2.e(err);
  	        } finally {
  	          _iterator2.f();
  	        }

  	        leaves = next;
  	      }
  	    } catch (err) {
  	      _iterator.e(err);
  	    } finally {
  	      _iterator.f();
  	    }

  	    return leaves;
  	  }
  	};

  	function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  	function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  	function _createForOfIteratorHelper$2(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike) { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  	function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }

  	function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  	var applyToDraft = function applyToDraft(editor, selection, op) {
  	  switch (op.type) {
  	    case 'insert_node':
  	      {
  	        var path = op.path,
  	            node = op.node;
  	        var parent = Node.parent(editor, path);
  	        var index = path[path.length - 1];

  	        if (index > parent.children.length) {
  	          throw new Error("Cannot apply an \"insert_node\" operation at path [".concat(path, "] because the destination is past the end of the node."));
  	        }

  	        parent.children.splice(index, 0, node);

  	        if (selection) {
  	          var _iterator = _createForOfIteratorHelper$2(Range.points(selection)),
  	              _step;

  	          try {
  	            for (_iterator.s(); !(_step = _iterator.n()).done;) {
  	              var _step$value = _slicedToArray(_step.value, 2),
  	                  point = _step$value[0],
  	                  key = _step$value[1];

  	              selection[key] = Point.transform(point, op);
  	            }
  	          } catch (err) {
  	            _iterator.e(err);
  	          } finally {
  	            _iterator.f();
  	          }
  	        }

  	        break;
  	      }

  	    case 'insert_text':
  	      {
  	        var _path = op.path,
  	            offset = op.offset,
  	            text = op.text;
  	        if (text.length === 0) break;

  	        var _node = Node.leaf(editor, _path);

  	        var before = _node.text.slice(0, offset);

  	        var after = _node.text.slice(offset);

  	        _node.text = before + text + after;

  	        if (selection) {
  	          var _iterator2 = _createForOfIteratorHelper$2(Range.points(selection)),
  	              _step2;

  	          try {
  	            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
  	              var _step2$value = _slicedToArray(_step2.value, 2),
  	                  _point = _step2$value[0],
  	                  _key = _step2$value[1];

  	              selection[_key] = Point.transform(_point, op);
  	            }
  	          } catch (err) {
  	            _iterator2.e(err);
  	          } finally {
  	            _iterator2.f();
  	          }
  	        }

  	        break;
  	      }

  	    case 'merge_node':
  	      {
  	        var _path2 = op.path;

  	        var _node2 = Node.get(editor, _path2);

  	        var prevPath = Path.previous(_path2);
  	        var prev = Node.get(editor, prevPath);

  	        var _parent = Node.parent(editor, _path2);

  	        var _index = _path2[_path2.length - 1];

  	        if (Text.isText(_node2) && Text.isText(prev)) {
  	          prev.text += _node2.text;
  	        } else if (!Text.isText(_node2) && !Text.isText(prev)) {
  	          var _prev$children;

  	          (_prev$children = prev.children).push.apply(_prev$children, _toConsumableArray(_node2.children));
  	        } else {
  	          throw new Error("Cannot apply a \"merge_node\" operation at path [".concat(_path2, "] to nodes of different interfaces: ").concat(Scrubber.stringify(_node2), " ").concat(Scrubber.stringify(prev)));
  	        }

  	        _parent.children.splice(_index, 1);

  	        if (selection) {
  	          var _iterator3 = _createForOfIteratorHelper$2(Range.points(selection)),
  	              _step3;

  	          try {
  	            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
  	              var _step3$value = _slicedToArray(_step3.value, 2),
  	                  _point2 = _step3$value[0],
  	                  _key2 = _step3$value[1];

  	              selection[_key2] = Point.transform(_point2, op);
  	            }
  	          } catch (err) {
  	            _iterator3.e(err);
  	          } finally {
  	            _iterator3.f();
  	          }
  	        }

  	        break;
  	      }

  	    case 'move_node':
  	      {
  	        var _path3 = op.path,
  	            newPath = op.newPath;

  	        if (Path.isAncestor(_path3, newPath)) {
  	          throw new Error("Cannot move a path [".concat(_path3, "] to new path [").concat(newPath, "] because the destination is inside itself."));
  	        }

  	        var _node3 = Node.get(editor, _path3);

  	        var _parent2 = Node.parent(editor, _path3);

  	        var _index2 = _path3[_path3.length - 1]; // This is tricky, but since the `path` and `newPath` both refer to
  	        // the same snapshot in time, there's a mismatch. After either
  	        // removing the original position, the second step's path can be out
  	        // of date. So instead of using the `op.newPath` directly, we
  	        // transform `op.path` to ascertain what the `newPath` would be after
  	        // the operation was applied.

  	        _parent2.children.splice(_index2, 1);

  	        var truePath = Path.transform(_path3, op);
  	        var newParent = Node.get(editor, Path.parent(truePath));
  	        var newIndex = truePath[truePath.length - 1];
  	        newParent.children.splice(newIndex, 0, _node3);

  	        if (selection) {
  	          var _iterator4 = _createForOfIteratorHelper$2(Range.points(selection)),
  	              _step4;

  	          try {
  	            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
  	              var _step4$value = _slicedToArray(_step4.value, 2),
  	                  _point3 = _step4$value[0],
  	                  _key3 = _step4$value[1];

  	              selection[_key3] = Point.transform(_point3, op);
  	            }
  	          } catch (err) {
  	            _iterator4.e(err);
  	          } finally {
  	            _iterator4.f();
  	          }
  	        }

  	        break;
  	      }

  	    case 'remove_node':
  	      {
  	        var _path4 = op.path;
  	        var _index3 = _path4[_path4.length - 1];

  	        var _parent3 = Node.parent(editor, _path4);

  	        _parent3.children.splice(_index3, 1); // Transform all of the points in the value, but if the point was in the
  	        // node that was removed we need to update the range or remove it.


  	        if (selection) {
  	          var _iterator5 = _createForOfIteratorHelper$2(Range.points(selection)),
  	              _step5;

  	          try {
  	            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
  	              var _step5$value = _slicedToArray(_step5.value, 2),
  	                  _point4 = _step5$value[0],
  	                  _key4 = _step5$value[1];

  	              var result = Point.transform(_point4, op);

  	              if (selection != null && result != null) {
  	                selection[_key4] = result;
  	              } else {
  	                var _prev = void 0;

  	                var next = void 0;

  	                var _iterator6 = _createForOfIteratorHelper$2(Node.texts(editor)),
  	                    _step6;

  	                try {
  	                  for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
  	                    var _step6$value = _slicedToArray(_step6.value, 2),
  	                        n = _step6$value[0],
  	                        p = _step6$value[1];

  	                    if (Path.compare(p, _path4) === -1) {
  	                      _prev = [n, p];
  	                    } else {
  	                      next = [n, p];
  	                      break;
  	                    }
  	                  }
  	                } catch (err) {
  	                  _iterator6.e(err);
  	                } finally {
  	                  _iterator6.f();
  	                }

  	                var preferNext = false;

  	                if (_prev && next) {
  	                  if (Path.equals(next[1], _path4)) {
  	                    preferNext = !Path.hasPrevious(next[1]);
  	                  } else {
  	                    preferNext = Path.common(_prev[1], _path4).length < Path.common(next[1], _path4).length;
  	                  }
  	                }

  	                if (_prev && !preferNext) {
  	                  _point4.path = _prev[1];
  	                  _point4.offset = _prev[0].text.length;
  	                } else if (next) {
  	                  _point4.path = next[1];
  	                  _point4.offset = 0;
  	                } else {
  	                  selection = null;
  	                }
  	              }
  	            }
  	          } catch (err) {
  	            _iterator5.e(err);
  	          } finally {
  	            _iterator5.f();
  	          }
  	        }

  	        break;
  	      }

  	    case 'remove_text':
  	      {
  	        var _path5 = op.path,
  	            _offset = op.offset,
  	            _text = op.text;
  	        if (_text.length === 0) break;

  	        var _node4 = Node.leaf(editor, _path5);

  	        var _before = _node4.text.slice(0, _offset);

  	        var _after = _node4.text.slice(_offset + _text.length);

  	        _node4.text = _before + _after;

  	        if (selection) {
  	          var _iterator7 = _createForOfIteratorHelper$2(Range.points(selection)),
  	              _step7;

  	          try {
  	            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
  	              var _step7$value = _slicedToArray(_step7.value, 2),
  	                  _point5 = _step7$value[0],
  	                  _key5 = _step7$value[1];

  	              selection[_key5] = Point.transform(_point5, op);
  	            }
  	          } catch (err) {
  	            _iterator7.e(err);
  	          } finally {
  	            _iterator7.f();
  	          }
  	        }

  	        break;
  	      }

  	    case 'set_node':
  	      {
  	        var _path6 = op.path,
  	            properties = op.properties,
  	            newProperties = op.newProperties;

  	        if (_path6.length === 0) {
  	          throw new Error("Cannot set properties on the root node!");
  	        }

  	        var _node5 = Node.get(editor, _path6);

  	        for (var _key6 in newProperties) {
  	          if (_key6 === 'children' || _key6 === 'text') {
  	            throw new Error("Cannot set the \"".concat(_key6, "\" property of nodes!"));
  	          }

  	          var value = newProperties[_key6];

  	          if (value == null) {
  	            delete _node5[_key6];
  	          } else {
  	            _node5[_key6] = value;
  	          }
  	        } // properties that were previously defined, but are now missing, must be deleted


  	        for (var _key7 in properties) {
  	          if (!newProperties.hasOwnProperty(_key7)) {
  	            delete _node5[_key7];
  	          }
  	        }

  	        break;
  	      }

  	    case 'set_selection':
  	      {
  	        var _newProperties = op.newProperties;

  	        if (_newProperties == null) {
  	          selection = _newProperties;
  	        } else {
  	          if (selection == null) {
  	            if (!Range.isRange(_newProperties)) {
  	              throw new Error("Cannot apply an incomplete \"set_selection\" operation properties ".concat(Scrubber.stringify(_newProperties), " when there is no current selection."));
  	            }

  	            selection = _objectSpread$3({}, _newProperties);
  	          }

  	          for (var _key8 in _newProperties) {
  	            var _value = _newProperties[_key8];

  	            if (_value == null) {
  	              if (_key8 === 'anchor' || _key8 === 'focus') {
  	                throw new Error("Cannot remove the \"".concat(_key8, "\" selection property"));
  	              }

  	              delete selection[_key8];
  	            } else {
  	              selection[_key8] = _value;
  	            }
  	          }
  	        }

  	        break;
  	      }

  	    case 'split_node':
  	      {
  	        var _path7 = op.path,
  	            position = op.position,
  	            _properties = op.properties;

  	        if (_path7.length === 0) {
  	          throw new Error("Cannot apply a \"split_node\" operation at path [".concat(_path7, "] because the root node cannot be split."));
  	        }

  	        var _node6 = Node.get(editor, _path7);

  	        var _parent4 = Node.parent(editor, _path7);

  	        var _index4 = _path7[_path7.length - 1];
  	        var newNode;

  	        if (Text.isText(_node6)) {
  	          var _before2 = _node6.text.slice(0, position);

  	          var _after2 = _node6.text.slice(position);

  	          _node6.text = _before2;
  	          newNode = _objectSpread$3(_objectSpread$3({}, _properties), {}, {
  	            text: _after2
  	          });
  	        } else {
  	          var _before3 = _node6.children.slice(0, position);

  	          var _after3 = _node6.children.slice(position);

  	          _node6.children = _before3;
  	          newNode = _objectSpread$3(_objectSpread$3({}, _properties), {}, {
  	            children: _after3
  	          });
  	        }

  	        _parent4.children.splice(_index4 + 1, 0, newNode);

  	        if (selection) {
  	          var _iterator8 = _createForOfIteratorHelper$2(Range.points(selection)),
  	              _step8;

  	          try {
  	            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
  	              var _step8$value = _slicedToArray(_step8.value, 2),
  	                  _point6 = _step8$value[0],
  	                  _key9 = _step8$value[1];

  	              selection[_key9] = Point.transform(_point6, op);
  	            }
  	          } catch (err) {
  	            _iterator8.e(err);
  	          } finally {
  	            _iterator8.f();
  	          }
  	        }

  	        break;
  	      }
  	  }

  	  return selection;
  	}; // eslint-disable-next-line no-redeclare


  	var GeneralTransforms = {
  	  /**
  	   * Transform the editor by an operation.
  	   */
  	  transform: function transform(editor, op) {
  	    editor.children = immer.createDraft(editor.children);
  	    var selection = editor.selection && immer.createDraft(editor.selection);

  	    try {
  	      selection = applyToDraft(editor, selection, op);
  	    } finally {
  	      editor.children = immer.finishDraft(editor.children);

  	      if (selection) {
  	        editor.selection = immer.isDraft(selection) ? immer.finishDraft(selection) : selection;
  	      } else {
  	        editor.selection = null;
  	      }
  	    }
  	  }
  	};

  	var _excluded = ["text"],
  	    _excluded2 = ["children"];

  	function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  	function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  	function _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike) { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  	function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

  	function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  	var NodeTransforms = {
  	  /**
  	   * Insert nodes at a specific location in the Editor.
  	   */
  	  insertNodes: function insertNodes(editor, nodes) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    Editor.withoutNormalizing(editor, function () {
  	      var _options$hanging = options.hanging,
  	          hanging = _options$hanging === void 0 ? false : _options$hanging,
  	          _options$voids = options.voids,
  	          voids = _options$voids === void 0 ? false : _options$voids,
  	          _options$mode = options.mode,
  	          mode = _options$mode === void 0 ? 'lowest' : _options$mode;
  	      var at = options.at,
  	          match = options.match,
  	          select = options.select;

  	      if (Node.isNode(nodes)) {
  	        nodes = [nodes];
  	      }

  	      if (nodes.length === 0) {
  	        return;
  	      }

  	      var _nodes = nodes,
  	          _nodes2 = _slicedToArray(_nodes, 1),
  	          node = _nodes2[0]; // By default, use the selection as the target location. But if there is
  	      // no selection, insert at the end of the document since that is such a
  	      // common use case when inserting from a non-selected state.


  	      if (!at) {
  	        if (editor.selection) {
  	          at = editor.selection;
  	        } else if (editor.children.length > 0) {
  	          at = Editor.end(editor, []);
  	        } else {
  	          at = [0];
  	        }

  	        select = true;
  	      }

  	      if (select == null) {
  	        select = false;
  	      }

  	      if (Range.isRange(at)) {
  	        if (!hanging) {
  	          at = Editor.unhangRange(editor, at);
  	        }

  	        if (Range.isCollapsed(at)) {
  	          at = at.anchor;
  	        } else {
  	          var _Range$edges = Range.edges(at),
  	              _Range$edges2 = _slicedToArray(_Range$edges, 2),
  	              end = _Range$edges2[1];

  	          var pointRef = Editor.pointRef(editor, end);
  	          Transforms["delete"](editor, {
  	            at: at
  	          });
  	          at = pointRef.unref();
  	        }
  	      }

  	      if (Point.isPoint(at)) {
  	        if (match == null) {
  	          if (Text.isText(node)) {
  	            match = function match(n) {
  	              return Text.isText(n);
  	            };
  	          } else if (editor.isInline(node)) {
  	            match = function match(n) {
  	              return Text.isText(n) || Editor.isInline(editor, n);
  	            };
  	          } else {
  	            match = function match(n) {
  	              return Editor.isBlock(editor, n);
  	            };
  	          }
  	        }

  	        var _Editor$nodes = Editor.nodes(editor, {
  	          at: at.path,
  	          match: match,
  	          mode: mode,
  	          voids: voids
  	        }),
  	            _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),
  	            entry = _Editor$nodes2[0];

  	        if (entry) {
  	          var _entry = _slicedToArray(entry, 2),
  	              _matchPath = _entry[1];

  	          var pathRef = Editor.pathRef(editor, _matchPath);
  	          var isAtEnd = Editor.isEnd(editor, at, _matchPath);
  	          Transforms.splitNodes(editor, {
  	            at: at,
  	            match: match,
  	            mode: mode,
  	            voids: voids
  	          });
  	          var path = pathRef.unref();
  	          at = isAtEnd ? Path.next(path) : path;
  	        } else {
  	          return;
  	        }
  	      }

  	      var parentPath = Path.parent(at);
  	      var index = at[at.length - 1];

  	      if (!voids && Editor["void"](editor, {
  	        at: parentPath
  	      })) {
  	        return;
  	      }

  	      var _iterator = _createForOfIteratorHelper$1(nodes),
  	          _step;

  	      try {
  	        for (_iterator.s(); !(_step = _iterator.n()).done;) {
  	          var _node = _step.value;

  	          var _path = parentPath.concat(index);

  	          index++;
  	          editor.apply({
  	            type: 'insert_node',
  	            path: _path,
  	            node: _node
  	          });
  	          at = Path.next(at);
  	        }
  	      } catch (err) {
  	        _iterator.e(err);
  	      } finally {
  	        _iterator.f();
  	      }

  	      at = Path.previous(at);

  	      if (select) {
  	        var point = Editor.end(editor, at);

  	        if (point) {
  	          Transforms.select(editor, point);
  	        }
  	      }
  	    });
  	  },

  	  /**
  	   * Lift nodes at a specific location upwards in the document tree, splitting
  	   * their parent in two if necessary.
  	   */
  	  liftNodes: function liftNodes(editor) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    Editor.withoutNormalizing(editor, function () {
  	      var _options$at = options.at,
  	          at = _options$at === void 0 ? editor.selection : _options$at,
  	          _options$mode2 = options.mode,
  	          mode = _options$mode2 === void 0 ? 'lowest' : _options$mode2,
  	          _options$voids2 = options.voids,
  	          voids = _options$voids2 === void 0 ? false : _options$voids2;
  	      var match = options.match;

  	      if (match == null) {
  	        match = Path.isPath(at) ? matchPath(editor, at) : function (n) {
  	          return Editor.isBlock(editor, n);
  	        };
  	      }

  	      if (!at) {
  	        return;
  	      }

  	      var matches = Editor.nodes(editor, {
  	        at: at,
  	        match: match,
  	        mode: mode,
  	        voids: voids
  	      });
  	      var pathRefs = Array.from(matches, function (_ref) {
  	        var _ref2 = _slicedToArray(_ref, 2),
  	            p = _ref2[1];

  	        return Editor.pathRef(editor, p);
  	      });

  	      for (var _i = 0, _pathRefs = pathRefs; _i < _pathRefs.length; _i++) {
  	        var pathRef = _pathRefs[_i];
  	        var path = pathRef.unref();

  	        if (path.length < 2) {
  	          throw new Error("Cannot lift node at a path [".concat(path, "] because it has a depth of less than `2`."));
  	        }

  	        var parentNodeEntry = Editor.node(editor, Path.parent(path));

  	        var _parentNodeEntry = _slicedToArray(parentNodeEntry, 2),
  	            parent = _parentNodeEntry[0],
  	            parentPath = _parentNodeEntry[1];

  	        var index = path[path.length - 1];
  	        var length = parent.children.length;

  	        if (length === 1) {
  	          var toPath = Path.next(parentPath);
  	          Transforms.moveNodes(editor, {
  	            at: path,
  	            to: toPath,
  	            voids: voids
  	          });
  	          Transforms.removeNodes(editor, {
  	            at: parentPath,
  	            voids: voids
  	          });
  	        } else if (index === 0) {
  	          Transforms.moveNodes(editor, {
  	            at: path,
  	            to: parentPath,
  	            voids: voids
  	          });
  	        } else if (index === length - 1) {
  	          var _toPath = Path.next(parentPath);

  	          Transforms.moveNodes(editor, {
  	            at: path,
  	            to: _toPath,
  	            voids: voids
  	          });
  	        } else {
  	          var splitPath = Path.next(path);

  	          var _toPath2 = Path.next(parentPath);

  	          Transforms.splitNodes(editor, {
  	            at: splitPath,
  	            voids: voids
  	          });
  	          Transforms.moveNodes(editor, {
  	            at: path,
  	            to: _toPath2,
  	            voids: voids
  	          });
  	        }
  	      }
  	    });
  	  },

  	  /**
  	   * Merge a node at a location with the previous node of the same depth,
  	   * removing any empty containing nodes after the merge if necessary.
  	   */
  	  mergeNodes: function mergeNodes(editor) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    Editor.withoutNormalizing(editor, function () {
  	      var match = options.match,
  	          _options$at2 = options.at,
  	          at = _options$at2 === void 0 ? editor.selection : _options$at2;
  	      var _options$hanging2 = options.hanging,
  	          hanging = _options$hanging2 === void 0 ? false : _options$hanging2,
  	          _options$voids3 = options.voids,
  	          voids = _options$voids3 === void 0 ? false : _options$voids3,
  	          _options$mode3 = options.mode,
  	          mode = _options$mode3 === void 0 ? 'lowest' : _options$mode3;

  	      if (!at) {
  	        return;
  	      }

  	      if (match == null) {
  	        if (Path.isPath(at)) {
  	          var _Editor$parent = Editor.parent(editor, at),
  	              _Editor$parent2 = _slicedToArray(_Editor$parent, 1),
  	              parent = _Editor$parent2[0];

  	          match = function match(n) {
  	            return parent.children.includes(n);
  	          };
  	        } else {
  	          match = function match(n) {
  	            return Editor.isBlock(editor, n);
  	          };
  	        }
  	      }

  	      if (!hanging && Range.isRange(at)) {
  	        at = Editor.unhangRange(editor, at);
  	      }

  	      if (Range.isRange(at)) {
  	        if (Range.isCollapsed(at)) {
  	          at = at.anchor;
  	        } else {
  	          var _Range$edges3 = Range.edges(at),
  	              _Range$edges4 = _slicedToArray(_Range$edges3, 2),
  	              end = _Range$edges4[1];

  	          var pointRef = Editor.pointRef(editor, end);
  	          Transforms["delete"](editor, {
  	            at: at
  	          });
  	          at = pointRef.unref();

  	          if (options.at == null) {
  	            Transforms.select(editor, at);
  	          }
  	        }
  	      }

  	      var _Editor$nodes3 = Editor.nodes(editor, {
  	        at: at,
  	        match: match,
  	        voids: voids,
  	        mode: mode
  	      }),
  	          _Editor$nodes4 = _slicedToArray(_Editor$nodes3, 1),
  	          current = _Editor$nodes4[0];

  	      var prev = Editor.previous(editor, {
  	        at: at,
  	        match: match,
  	        voids: voids,
  	        mode: mode
  	      });

  	      if (!current || !prev) {
  	        return;
  	      }

  	      var _current = _slicedToArray(current, 2),
  	          node = _current[0],
  	          path = _current[1];

  	      var _prev = _slicedToArray(prev, 2),
  	          prevNode = _prev[0],
  	          prevPath = _prev[1];

  	      if (path.length === 0 || prevPath.length === 0) {
  	        return;
  	      }

  	      var newPath = Path.next(prevPath);
  	      var commonPath = Path.common(path, prevPath);
  	      var isPreviousSibling = Path.isSibling(path, prevPath);
  	      var levels = Array.from(Editor.levels(editor, {
  	        at: path
  	      }), function (_ref3) {
  	        var _ref4 = _slicedToArray(_ref3, 1),
  	            n = _ref4[0];

  	        return n;
  	      }).slice(commonPath.length).slice(0, -1); // Determine if the merge will leave an ancestor of the path empty as a
  	      // result, in which case we'll want to remove it after merging.

  	      var emptyAncestor = Editor.above(editor, {
  	        at: path,
  	        mode: 'highest',
  	        match: function match(n) {
  	          return levels.includes(n) && hasSingleChildNest(editor, n);
  	        }
  	      });
  	      var emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1]);
  	      var properties;
  	      var position; // Ensure that the nodes are equivalent, and figure out what the position
  	      // and extra properties of the merge will be.

  	      if (Text.isText(node) && Text.isText(prevNode)) {
  	        node.text;
  	            var rest = _objectWithoutProperties(node, _excluded);

  	        position = prevNode.text.length;
  	        properties = rest;
  	      } else if (Element.isElement(node) && Element.isElement(prevNode)) {
  	        node.children;
  	            var _rest = _objectWithoutProperties(node, _excluded2);

  	        position = prevNode.children.length;
  	        properties = _rest;
  	      } else {
  	        throw new Error("Cannot merge the node at path [".concat(path, "] with the previous sibling because it is not the same kind: ").concat(Scrubber.stringify(node), " ").concat(Scrubber.stringify(prevNode)));
  	      } // If the node isn't already the next sibling of the previous node, move
  	      // it so that it is before merging.


  	      if (!isPreviousSibling) {
  	        Transforms.moveNodes(editor, {
  	          at: path,
  	          to: newPath,
  	          voids: voids
  	        });
  	      } // If there was going to be an empty ancestor of the node that was merged,
  	      // we remove it from the tree.


  	      if (emptyRef) {
  	        Transforms.removeNodes(editor, {
  	          at: emptyRef.current,
  	          voids: voids
  	        });
  	      } // If the target node that we're merging with is empty, remove it instead
  	      // of merging the two. This is a common rich text editor behavior to
  	      // prevent losing formatting when deleting entire nodes when you have a
  	      // hanging selection.
  	      // if prevNode is first child in parent,don't remove it.


  	      if (Element.isElement(prevNode) && Editor.isEmpty(editor, prevNode) || Text.isText(prevNode) && prevNode.text === '' && prevPath[prevPath.length - 1] !== 0) {
  	        Transforms.removeNodes(editor, {
  	          at: prevPath,
  	          voids: voids
  	        });
  	      } else {
  	        editor.apply({
  	          type: 'merge_node',
  	          path: newPath,
  	          position: position,
  	          properties: properties
  	        });
  	      }

  	      if (emptyRef) {
  	        emptyRef.unref();
  	      }
  	    });
  	  },

  	  /**
  	   * Move the nodes at a location to a new location.
  	   */
  	  moveNodes: function moveNodes(editor, options) {
  	    Editor.withoutNormalizing(editor, function () {
  	      var to = options.to,
  	          _options$at3 = options.at,
  	          at = _options$at3 === void 0 ? editor.selection : _options$at3,
  	          _options$mode4 = options.mode,
  	          mode = _options$mode4 === void 0 ? 'lowest' : _options$mode4,
  	          _options$voids4 = options.voids,
  	          voids = _options$voids4 === void 0 ? false : _options$voids4;
  	      var match = options.match;

  	      if (!at) {
  	        return;
  	      }

  	      if (match == null) {
  	        match = Path.isPath(at) ? matchPath(editor, at) : function (n) {
  	          return Editor.isBlock(editor, n);
  	        };
  	      }

  	      var toRef = Editor.pathRef(editor, to);
  	      var targets = Editor.nodes(editor, {
  	        at: at,
  	        match: match,
  	        mode: mode,
  	        voids: voids
  	      });
  	      var pathRefs = Array.from(targets, function (_ref5) {
  	        var _ref6 = _slicedToArray(_ref5, 2),
  	            p = _ref6[1];

  	        return Editor.pathRef(editor, p);
  	      });

  	      for (var _i2 = 0, _pathRefs2 = pathRefs; _i2 < _pathRefs2.length; _i2++) {
  	        var pathRef = _pathRefs2[_i2];
  	        var path = pathRef.unref();
  	        var newPath = toRef.current;

  	        if (path.length !== 0) {
  	          editor.apply({
  	            type: 'move_node',
  	            path: path,
  	            newPath: newPath
  	          });
  	        }

  	        if (toRef.current && Path.isSibling(newPath, path) && Path.isAfter(newPath, path)) {
  	          // When performing a sibling move to a later index, the path at the destination is shifted
  	          // to before the insertion point instead of after. To ensure our group of nodes are inserted
  	          // in the correct order we increment toRef to account for that
  	          toRef.current = Path.next(toRef.current);
  	        }
  	      }

  	      toRef.unref();
  	    });
  	  },

  	  /**
  	   * Remove the nodes at a specific location in the document.
  	   */
  	  removeNodes: function removeNodes(editor) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    Editor.withoutNormalizing(editor, function () {
  	      var _options$hanging3 = options.hanging,
  	          hanging = _options$hanging3 === void 0 ? false : _options$hanging3,
  	          _options$voids5 = options.voids,
  	          voids = _options$voids5 === void 0 ? false : _options$voids5,
  	          _options$mode5 = options.mode,
  	          mode = _options$mode5 === void 0 ? 'lowest' : _options$mode5;
  	      var _options$at4 = options.at,
  	          at = _options$at4 === void 0 ? editor.selection : _options$at4,
  	          match = options.match;

  	      if (!at) {
  	        return;
  	      }

  	      if (match == null) {
  	        match = Path.isPath(at) ? matchPath(editor, at) : function (n) {
  	          return Editor.isBlock(editor, n);
  	        };
  	      }

  	      if (!hanging && Range.isRange(at)) {
  	        at = Editor.unhangRange(editor, at);
  	      }

  	      var depths = Editor.nodes(editor, {
  	        at: at,
  	        match: match,
  	        mode: mode,
  	        voids: voids
  	      });
  	      var pathRefs = Array.from(depths, function (_ref7) {
  	        var _ref8 = _slicedToArray(_ref7, 2),
  	            p = _ref8[1];

  	        return Editor.pathRef(editor, p);
  	      });

  	      for (var _i3 = 0, _pathRefs3 = pathRefs; _i3 < _pathRefs3.length; _i3++) {
  	        var pathRef = _pathRefs3[_i3];
  	        var path = pathRef.unref();

  	        if (path) {
  	          var _Editor$node = Editor.node(editor, path),
  	              _Editor$node2 = _slicedToArray(_Editor$node, 1),
  	              node = _Editor$node2[0];

  	          editor.apply({
  	            type: 'remove_node',
  	            path: path,
  	            node: node
  	          });
  	        }
  	      }
  	    });
  	  },

  	  /**
  	   * Set new properties on the nodes at a location.
  	   */
  	  setNodes: function setNodes(editor, props) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    Editor.withoutNormalizing(editor, function () {
  	      var match = options.match,
  	          _options$at5 = options.at,
  	          at = _options$at5 === void 0 ? editor.selection : _options$at5,
  	          compare = options.compare,
  	          merge = options.merge;
  	      var _options$hanging4 = options.hanging,
  	          hanging = _options$hanging4 === void 0 ? false : _options$hanging4,
  	          _options$mode6 = options.mode,
  	          mode = _options$mode6 === void 0 ? 'lowest' : _options$mode6,
  	          _options$split = options.split,
  	          split = _options$split === void 0 ? false : _options$split,
  	          _options$voids6 = options.voids,
  	          voids = _options$voids6 === void 0 ? false : _options$voids6;

  	      if (!at) {
  	        return;
  	      }

  	      if (match == null) {
  	        match = Path.isPath(at) ? matchPath(editor, at) : function (n) {
  	          return Editor.isBlock(editor, n);
  	        };
  	      }

  	      if (!hanging && Range.isRange(at)) {
  	        at = Editor.unhangRange(editor, at);
  	      }

  	      if (split && Range.isRange(at)) {
  	        if (Range.isCollapsed(at) && Editor.leaf(editor, at.anchor)[0].text.length > 0) {
  	          // If the range is collapsed in a non-empty node and 'split' is true, there's nothing to
  	          // set that won't get normalized away
  	          return;
  	        }

  	        var rangeRef = Editor.rangeRef(editor, at, {
  	          affinity: 'inward'
  	        });

  	        var _Range$edges5 = Range.edges(at),
  	            _Range$edges6 = _slicedToArray(_Range$edges5, 2),
  	            start = _Range$edges6[0],
  	            end = _Range$edges6[1];

  	        var splitMode = mode === 'lowest' ? 'lowest' : 'highest';
  	        var endAtEndOfNode = Editor.isEnd(editor, end, end.path);
  	        Transforms.splitNodes(editor, {
  	          at: end,
  	          match: match,
  	          mode: splitMode,
  	          voids: voids,
  	          always: !endAtEndOfNode
  	        });
  	        var startAtStartOfNode = Editor.isStart(editor, start, start.path);
  	        Transforms.splitNodes(editor, {
  	          at: start,
  	          match: match,
  	          mode: splitMode,
  	          voids: voids,
  	          always: !startAtStartOfNode
  	        });
  	        at = rangeRef.unref();

  	        if (options.at == null) {
  	          Transforms.select(editor, at);
  	        }
  	      }

  	      if (!compare) {
  	        compare = function compare(prop, nodeProp) {
  	          return prop !== nodeProp;
  	        };
  	      }

  	      var _iterator2 = _createForOfIteratorHelper$1(Editor.nodes(editor, {
  	        at: at,
  	        match: match,
  	        mode: mode,
  	        voids: voids
  	      })),
  	          _step2;

  	      try {
  	        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
  	          var _step2$value = _slicedToArray(_step2.value, 2),
  	              node = _step2$value[0],
  	              path = _step2$value[1];

  	          var properties = {};
  	          var newProperties = {}; // You can't set properties on the editor node.

  	          if (path.length === 0) {
  	            continue;
  	          }

  	          var hasChanges = false;

  	          for (var k in props) {
  	            if (k === 'children' || k === 'text') {
  	              continue;
  	            }

  	            if (compare(props[k], node[k])) {
  	              hasChanges = true; // Omit new properties from the old properties list

  	              if (node.hasOwnProperty(k)) properties[k] = node[k]; // Omit properties that have been removed from the new properties list

  	              if (merge) {
  	                if (props[k] != null) newProperties[k] = merge(node[k], props[k]);
  	              } else {
  	                if (props[k] != null) newProperties[k] = props[k];
  	              }
  	            }
  	          }

  	          if (hasChanges) {
  	            editor.apply({
  	              type: 'set_node',
  	              path: path,
  	              properties: properties,
  	              newProperties: newProperties
  	            });
  	          }
  	        }
  	      } catch (err) {
  	        _iterator2.e(err);
  	      } finally {
  	        _iterator2.f();
  	      }
  	    });
  	  },

  	  /**
  	   * Split the nodes at a specific location.
  	   */
  	  splitNodes: function splitNodes(editor) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    Editor.withoutNormalizing(editor, function () {
  	      var _options$mode7 = options.mode,
  	          mode = _options$mode7 === void 0 ? 'lowest' : _options$mode7,
  	          _options$voids7 = options.voids,
  	          voids = _options$voids7 === void 0 ? false : _options$voids7;
  	      var match = options.match,
  	          _options$at6 = options.at,
  	          at = _options$at6 === void 0 ? editor.selection : _options$at6,
  	          _options$height = options.height,
  	          height = _options$height === void 0 ? 0 : _options$height,
  	          _options$always = options.always,
  	          always = _options$always === void 0 ? false : _options$always;

  	      if (match == null) {
  	        match = function match(n) {
  	          return Editor.isBlock(editor, n);
  	        };
  	      }

  	      if (Range.isRange(at)) {
  	        at = deleteRange(editor, at);
  	      } // If the target is a path, the default height-skipping and position
  	      // counters need to account for us potentially splitting at a non-leaf.


  	      if (Path.isPath(at)) {
  	        var path = at;
  	        var point = Editor.point(editor, path);

  	        var _Editor$parent3 = Editor.parent(editor, path),
  	            _Editor$parent4 = _slicedToArray(_Editor$parent3, 1),
  	            parent = _Editor$parent4[0];

  	        match = function match(n) {
  	          return n === parent;
  	        };

  	        height = point.path.length - path.length + 1;
  	        at = point;
  	        always = true;
  	      }

  	      if (!at) {
  	        return;
  	      }

  	      var beforeRef = Editor.pointRef(editor, at, {
  	        affinity: 'backward'
  	      });
  	      var afterRef;

  	      try {
  	        var _Editor$nodes5 = Editor.nodes(editor, {
  	          at: at,
  	          match: match,
  	          mode: mode,
  	          voids: voids
  	        }),
  	            _Editor$nodes6 = _slicedToArray(_Editor$nodes5, 1),
  	            highest = _Editor$nodes6[0];

  	        if (!highest) {
  	          return;
  	        }

  	        var voidMatch = Editor["void"](editor, {
  	          at: at,
  	          mode: 'highest'
  	        });
  	        var nudge = 0;

  	        if (!voids && voidMatch) {
  	          var _voidMatch = _slicedToArray(voidMatch, 2),
  	              voidNode = _voidMatch[0],
  	              voidPath = _voidMatch[1];

  	          if (Element.isElement(voidNode) && editor.isInline(voidNode)) {
  	            var after = Editor.after(editor, voidPath);

  	            if (!after) {
  	              var text = {
  	                text: ''
  	              };
  	              var afterPath = Path.next(voidPath);
  	              Transforms.insertNodes(editor, text, {
  	                at: afterPath,
  	                voids: voids
  	              });
  	              after = Editor.point(editor, afterPath);
  	            }

  	            at = after;
  	            always = true;
  	          }

  	          var siblingHeight = at.path.length - voidPath.length;
  	          height = siblingHeight + 1;
  	          always = true;
  	        }

  	        afterRef = Editor.pointRef(editor, at);
  	        var depth = at.path.length - height;

  	        var _highest = _slicedToArray(highest, 2),
  	            highestPath = _highest[1];

  	        var lowestPath = at.path.slice(0, depth);
  	        var position = height === 0 ? at.offset : at.path[depth] + nudge;

  	        var _iterator3 = _createForOfIteratorHelper$1(Editor.levels(editor, {
  	          at: lowestPath,
  	          reverse: true,
  	          voids: voids
  	        })),
  	            _step3;

  	        try {
  	          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
  	            var _step3$value = _slicedToArray(_step3.value, 2),
  	                node = _step3$value[0],
  	                _path2 = _step3$value[1];

  	            var split = false;

  	            if (_path2.length < highestPath.length || _path2.length === 0 || !voids && Editor.isVoid(editor, node)) {
  	              break;
  	            }

  	            var _point2 = beforeRef.current;
  	            var isEnd = Editor.isEnd(editor, _point2, _path2);

  	            if (always || !beforeRef || !Editor.isEdge(editor, _point2, _path2)) {
  	              split = true;
  	              var properties = Node.extractProps(node);
  	              editor.apply({
  	                type: 'split_node',
  	                path: _path2,
  	                position: position,
  	                properties: properties
  	              });
  	            }

  	            position = _path2[_path2.length - 1] + (split || isEnd ? 1 : 0);
  	          }
  	        } catch (err) {
  	          _iterator3.e(err);
  	        } finally {
  	          _iterator3.f();
  	        }

  	        if (options.at == null) {
  	          var _point = afterRef.current || Editor.end(editor, []);

  	          Transforms.select(editor, _point);
  	        }
  	      } finally {
  	        var _afterRef;

  	        beforeRef.unref();
  	        (_afterRef = afterRef) === null || _afterRef === void 0 ? void 0 : _afterRef.unref();
  	      }
  	    });
  	  },

  	  /**
  	   * Unset properties on the nodes at a location.
  	   */
  	  unsetNodes: function unsetNodes(editor, props) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  	    if (!Array.isArray(props)) {
  	      props = [props];
  	    }

  	    var obj = {};

  	    var _iterator4 = _createForOfIteratorHelper$1(props),
  	        _step4;

  	    try {
  	      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
  	        var key = _step4.value;
  	        obj[key] = null;
  	      }
  	    } catch (err) {
  	      _iterator4.e(err);
  	    } finally {
  	      _iterator4.f();
  	    }

  	    Transforms.setNodes(editor, obj, options);
  	  },

  	  /**
  	   * Unwrap the nodes at a location from a parent node, splitting the parent if
  	   * necessary to ensure that only the content in the range is unwrapped.
  	   */
  	  unwrapNodes: function unwrapNodes(editor) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    Editor.withoutNormalizing(editor, function () {
  	      var _options$mode8 = options.mode,
  	          mode = _options$mode8 === void 0 ? 'lowest' : _options$mode8,
  	          _options$split2 = options.split,
  	          split = _options$split2 === void 0 ? false : _options$split2,
  	          _options$voids8 = options.voids,
  	          voids = _options$voids8 === void 0 ? false : _options$voids8;
  	      var _options$at7 = options.at,
  	          at = _options$at7 === void 0 ? editor.selection : _options$at7,
  	          match = options.match;

  	      if (!at) {
  	        return;
  	      }

  	      if (match == null) {
  	        match = Path.isPath(at) ? matchPath(editor, at) : function (n) {
  	          return Editor.isBlock(editor, n);
  	        };
  	      }

  	      if (Path.isPath(at)) {
  	        at = Editor.range(editor, at);
  	      }

  	      var rangeRef = Range.isRange(at) ? Editor.rangeRef(editor, at) : null;
  	      var matches = Editor.nodes(editor, {
  	        at: at,
  	        match: match,
  	        mode: mode,
  	        voids: voids
  	      });
  	      var pathRefs = Array.from(matches, function (_ref9) {
  	        var _ref10 = _slicedToArray(_ref9, 2),
  	            p = _ref10[1];

  	        return Editor.pathRef(editor, p);
  	      } // unwrapNode will call liftNode which does not support splitting the node when nested.
  	      // If we do not reverse the order and call it from top to the bottom, it will remove all blocks
  	      // that wrap target node. So we reverse the order.
  	      ).reverse();

  	      var _iterator5 = _createForOfIteratorHelper$1(pathRefs),
  	          _step5;

  	      try {
  	        var _loop = function _loop() {
  	          var pathRef = _step5.value;
  	          var path = pathRef.unref();

  	          var _Editor$node3 = Editor.node(editor, path),
  	              _Editor$node4 = _slicedToArray(_Editor$node3, 1),
  	              node = _Editor$node4[0];

  	          var range = Editor.range(editor, path);

  	          if (split && rangeRef) {
  	            range = Range.intersection(rangeRef.current, range);
  	          }

  	          Transforms.liftNodes(editor, {
  	            at: range,
  	            match: function match(n) {
  	              return Element.isAncestor(node) && node.children.includes(n);
  	            },
  	            voids: voids
  	          });
  	        };

  	        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
  	          _loop();
  	        }
  	      } catch (err) {
  	        _iterator5.e(err);
  	      } finally {
  	        _iterator5.f();
  	      }

  	      if (rangeRef) {
  	        rangeRef.unref();
  	      }
  	    });
  	  },

  	  /**
  	   * Wrap the nodes at a location in a new container node, splitting the edges
  	   * of the range first to ensure that only the content in the range is wrapped.
  	   */
  	  wrapNodes: function wrapNodes(editor, element) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    Editor.withoutNormalizing(editor, function () {
  	      var _options$mode9 = options.mode,
  	          mode = _options$mode9 === void 0 ? 'lowest' : _options$mode9,
  	          _options$split3 = options.split,
  	          split = _options$split3 === void 0 ? false : _options$split3,
  	          _options$voids9 = options.voids,
  	          voids = _options$voids9 === void 0 ? false : _options$voids9;
  	      var match = options.match,
  	          _options$at8 = options.at,
  	          at = _options$at8 === void 0 ? editor.selection : _options$at8;

  	      if (!at) {
  	        return;
  	      }

  	      if (match == null) {
  	        if (Path.isPath(at)) {
  	          match = matchPath(editor, at);
  	        } else if (editor.isInline(element)) {
  	          match = function match(n) {
  	            return Editor.isInline(editor, n) || Text.isText(n);
  	          };
  	        } else {
  	          match = function match(n) {
  	            return Editor.isBlock(editor, n);
  	          };
  	        }
  	      }

  	      if (split && Range.isRange(at)) {
  	        var _Range$edges7 = Range.edges(at),
  	            _Range$edges8 = _slicedToArray(_Range$edges7, 2),
  	            start = _Range$edges8[0],
  	            end = _Range$edges8[1];

  	        var rangeRef = Editor.rangeRef(editor, at, {
  	          affinity: 'inward'
  	        });
  	        Transforms.splitNodes(editor, {
  	          at: end,
  	          match: match,
  	          voids: voids
  	        });
  	        Transforms.splitNodes(editor, {
  	          at: start,
  	          match: match,
  	          voids: voids
  	        });
  	        at = rangeRef.unref();

  	        if (options.at == null) {
  	          Transforms.select(editor, at);
  	        }
  	      }

  	      var roots = Array.from(Editor.nodes(editor, {
  	        at: at,
  	        match: editor.isInline(element) ? function (n) {
  	          return Editor.isBlock(editor, n);
  	        } : function (n) {
  	          return Editor.isEditor(n);
  	        },
  	        mode: 'lowest',
  	        voids: voids
  	      }));

  	      for (var _i4 = 0, _roots = roots; _i4 < _roots.length; _i4++) {
  	        var _roots$_i = _slicedToArray(_roots[_i4], 2),
  	            rootPath = _roots$_i[1];

  	        var a = Range.isRange(at) ? Range.intersection(at, Editor.range(editor, rootPath)) : at;

  	        if (!a) {
  	          continue;
  	        }

  	        var matches = Array.from(Editor.nodes(editor, {
  	          at: a,
  	          match: match,
  	          mode: mode,
  	          voids: voids
  	        }));

  	        if (matches.length > 0) {
  	          var _ret = function () {
  	            var _matches = _slicedToArray(matches, 1),
  	                first = _matches[0];

  	            var last = matches[matches.length - 1];

  	            var _first = _slicedToArray(first, 2),
  	                firstPath = _first[1];

  	            var _last = _slicedToArray(last, 2),
  	                lastPath = _last[1];

  	            if (firstPath.length === 0 && lastPath.length === 0) {
  	              // if there's no matching parent - usually means the node is an editor - don't do anything
  	              return "continue";
  	            }

  	            var commonPath = Path.equals(firstPath, lastPath) ? Path.parent(firstPath) : Path.common(firstPath, lastPath);
  	            var range = Editor.range(editor, firstPath, lastPath);
  	            var commonNodeEntry = Editor.node(editor, commonPath);

  	            var _commonNodeEntry = _slicedToArray(commonNodeEntry, 1),
  	                commonNode = _commonNodeEntry[0];

  	            var depth = commonPath.length + 1;
  	            var wrapperPath = Path.next(lastPath.slice(0, depth));

  	            var wrapper = _objectSpread$2(_objectSpread$2({}, element), {}, {
  	              children: []
  	            });

  	            Transforms.insertNodes(editor, wrapper, {
  	              at: wrapperPath,
  	              voids: voids
  	            });
  	            Transforms.moveNodes(editor, {
  	              at: range,
  	              match: function match(n) {
  	                return Element.isAncestor(commonNode) && commonNode.children.includes(n);
  	              },
  	              to: wrapperPath.concat(0),
  	              voids: voids
  	            });
  	          }();

  	          if (_ret === "continue") continue;
  	        }
  	      }
  	    });
  	  }
  	};

  	var hasSingleChildNest = function hasSingleChildNest(editor, node) {
  	  if (Element.isElement(node)) {
  	    var element = node;

  	    if (Editor.isVoid(editor, node)) {
  	      return true;
  	    } else if (element.children.length === 1) {
  	      return hasSingleChildNest(editor, element.children[0]);
  	    } else {
  	      return false;
  	    }
  	  } else if (Editor.isEditor(node)) {
  	    return false;
  	  } else {
  	    return true;
  	  }
  	};
  	/**
  	 * Convert a range into a point by deleting it's content.
  	 */


  	var deleteRange = function deleteRange(editor, range) {
  	  if (Range.isCollapsed(range)) {
  	    return range.anchor;
  	  } else {
  	    var _Range$edges9 = Range.edges(range),
  	        _Range$edges10 = _slicedToArray(_Range$edges9, 2),
  	        end = _Range$edges10[1];

  	    var pointRef = Editor.pointRef(editor, end);
  	    Transforms["delete"](editor, {
  	      at: range
  	    });
  	    return pointRef.unref();
  	  }
  	};

  	var matchPath = function matchPath(editor, path) {
  	  var _Editor$node5 = Editor.node(editor, path),
  	      _Editor$node6 = _slicedToArray(_Editor$node5, 1),
  	      node = _Editor$node6[0];

  	  return function (n) {
  	    return n === node;
  	  };
  	};

  	function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  	function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  	var SelectionTransforms = {
  	  /**
  	   * Collapse the selection.
  	   */
  	  collapse: function collapse(editor) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    var _options$edge = options.edge,
  	        edge = _options$edge === void 0 ? 'anchor' : _options$edge;
  	    var selection = editor.selection;

  	    if (!selection) {
  	      return;
  	    } else if (edge === 'anchor') {
  	      Transforms.select(editor, selection.anchor);
  	    } else if (edge === 'focus') {
  	      Transforms.select(editor, selection.focus);
  	    } else if (edge === 'start') {
  	      var _Range$edges = Range.edges(selection),
  	          _Range$edges2 = _slicedToArray(_Range$edges, 1),
  	          start = _Range$edges2[0];

  	      Transforms.select(editor, start);
  	    } else if (edge === 'end') {
  	      var _Range$edges3 = Range.edges(selection),
  	          _Range$edges4 = _slicedToArray(_Range$edges3, 2),
  	          end = _Range$edges4[1];

  	      Transforms.select(editor, end);
  	    }
  	  },

  	  /**
  	   * Unset the selection.
  	   */
  	  deselect: function deselect(editor) {
  	    var selection = editor.selection;

  	    if (selection) {
  	      editor.apply({
  	        type: 'set_selection',
  	        properties: selection,
  	        newProperties: null
  	      });
  	    }
  	  },

  	  /**
  	   * Move the selection's point forward or backward.
  	   */
  	  move: function move(editor) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    var selection = editor.selection;
  	    var _options$distance = options.distance,
  	        distance = _options$distance === void 0 ? 1 : _options$distance,
  	        _options$unit = options.unit,
  	        unit = _options$unit === void 0 ? 'character' : _options$unit,
  	        _options$reverse = options.reverse,
  	        reverse = _options$reverse === void 0 ? false : _options$reverse;
  	    var _options$edge2 = options.edge,
  	        edge = _options$edge2 === void 0 ? null : _options$edge2;

  	    if (!selection) {
  	      return;
  	    }

  	    if (edge === 'start') {
  	      edge = Range.isBackward(selection) ? 'focus' : 'anchor';
  	    }

  	    if (edge === 'end') {
  	      edge = Range.isBackward(selection) ? 'anchor' : 'focus';
  	    }

  	    var anchor = selection.anchor,
  	        focus = selection.focus;
  	    var opts = {
  	      distance: distance,
  	      unit: unit
  	    };
  	    var props = {};

  	    if (edge == null || edge === 'anchor') {
  	      var point = reverse ? Editor.before(editor, anchor, opts) : Editor.after(editor, anchor, opts);

  	      if (point) {
  	        props.anchor = point;
  	      }
  	    }

  	    if (edge == null || edge === 'focus') {
  	      var _point = reverse ? Editor.before(editor, focus, opts) : Editor.after(editor, focus, opts);

  	      if (_point) {
  	        props.focus = _point;
  	      }
  	    }

  	    Transforms.setSelection(editor, props);
  	  },

  	  /**
  	   * Set the selection to a new value.
  	   */
  	  select: function select(editor, target) {
  	    var selection = editor.selection;
  	    target = Editor.range(editor, target);

  	    if (selection) {
  	      Transforms.setSelection(editor, target);
  	      return;
  	    }

  	    if (!Range.isRange(target)) {
  	      throw new Error("When setting the selection and the current selection is `null` you must provide at least an `anchor` and `focus`, but you passed: ".concat(Scrubber.stringify(target)));
  	    }

  	    editor.apply({
  	      type: 'set_selection',
  	      properties: selection,
  	      newProperties: target
  	    });
  	  },

  	  /**
  	   * Set new properties on one of the selection's points.
  	   */
  	  setPoint: function setPoint(editor, props) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    var selection = editor.selection;
  	    var _options$edge3 = options.edge,
  	        edge = _options$edge3 === void 0 ? 'both' : _options$edge3;

  	    if (!selection) {
  	      return;
  	    }

  	    if (edge === 'start') {
  	      edge = Range.isBackward(selection) ? 'focus' : 'anchor';
  	    }

  	    if (edge === 'end') {
  	      edge = Range.isBackward(selection) ? 'anchor' : 'focus';
  	    }

  	    var anchor = selection.anchor,
  	        focus = selection.focus;
  	    var point = edge === 'anchor' ? anchor : focus;
  	    Transforms.setSelection(editor, _defineProperty({}, edge === 'anchor' ? 'anchor' : 'focus', _objectSpread$1(_objectSpread$1({}, point), props)));
  	  },

  	  /**
  	   * Set new properties on the selection.
  	   */
  	  setSelection: function setSelection(editor, props) {
  	    var selection = editor.selection;
  	    var oldProps = {};
  	    var newProps = {};

  	    if (!selection) {
  	      return;
  	    }

  	    for (var k in props) {
  	      if (k === 'anchor' && props.anchor != null && !Point.equals(props.anchor, selection.anchor) || k === 'focus' && props.focus != null && !Point.equals(props.focus, selection.focus) || k !== 'anchor' && k !== 'focus' && props[k] !== selection[k]) {
  	        oldProps[k] = selection[k];
  	        newProps[k] = props[k];
  	      }
  	    }

  	    if (Object.keys(oldProps).length > 0) {
  	      editor.apply({
  	        type: 'set_selection',
  	        properties: oldProps,
  	        newProperties: newProps
  	      });
  	    }
  	  }
  	};

  	function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike) { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  	function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  	function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  	var TextTransforms = {
  	  /**
  	   * Delete content in the editor.
  	   */
  	  "delete": function _delete(editor) {
  	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  	    Editor.withoutNormalizing(editor, function () {
  	      var _options$reverse = options.reverse,
  	          reverse = _options$reverse === void 0 ? false : _options$reverse,
  	          _options$unit = options.unit,
  	          unit = _options$unit === void 0 ? 'character' : _options$unit,
  	          _options$distance = options.distance,
  	          distance = _options$distance === void 0 ? 1 : _options$distance,
  	          _options$voids = options.voids,
  	          voids = _options$voids === void 0 ? false : _options$voids;
  	      var _options$at = options.at,
  	          at = _options$at === void 0 ? editor.selection : _options$at,
  	          _options$hanging = options.hanging,
  	          hanging = _options$hanging === void 0 ? false : _options$hanging;

  	      if (!at) {
  	        return;
  	      }

  	      var isCollapsed = false;

  	      if (Range.isRange(at) && Range.isCollapsed(at)) {
  	        isCollapsed = true;
  	        at = at.anchor;
  	      }

  	      if (Point.isPoint(at)) {
  	        var furthestVoid = Editor["void"](editor, {
  	          at: at,
  	          mode: 'highest'
  	        });

  	        if (!voids && furthestVoid) {
  	          var _furthestVoid = _slicedToArray(furthestVoid, 2),
  	              voidPath = _furthestVoid[1];

  	          at = voidPath;
  	        } else {
  	          var opts = {
  	            unit: unit,
  	            distance: distance
  	          };
  	          var target = reverse ? Editor.before(editor, at, opts) || Editor.start(editor, []) : Editor.after(editor, at, opts) || Editor.end(editor, []);
  	          at = {
  	            anchor: at,
  	            focus: target
  	          };
  	          hanging = true;
  	        }
  	      }

  	      if (Path.isPath(at)) {
  	        Transforms.removeNodes(editor, {
  	          at: at,
  	          voids: voids
  	        });
  	        return;
  	      }

  	      if (Range.isCollapsed(at)) {
  	        return;
  	      }

  	      if (!hanging) {
  	        var _Range$edges = Range.edges(at),
  	            _Range$edges2 = _slicedToArray(_Range$edges, 2),
  	            _end = _Range$edges2[1];

  	        var endOfDoc = Editor.end(editor, []);

  	        if (!Point.equals(_end, endOfDoc)) {
  	          at = Editor.unhangRange(editor, at, {
  	            voids: voids
  	          });
  	        }
  	      }

  	      var _Range$edges3 = Range.edges(at),
  	          _Range$edges4 = _slicedToArray(_Range$edges3, 2),
  	          start = _Range$edges4[0],
  	          end = _Range$edges4[1];

  	      var startBlock = Editor.above(editor, {
  	        match: function match(n) {
  	          return Editor.isBlock(editor, n);
  	        },
  	        at: start,
  	        voids: voids
  	      });
  	      var endBlock = Editor.above(editor, {
  	        match: function match(n) {
  	          return Editor.isBlock(editor, n);
  	        },
  	        at: end,
  	        voids: voids
  	      });
  	      var isAcrossBlocks = startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1]);
  	      var isSingleText = Path.equals(start.path, end.path);
  	      var startVoid = voids ? null : Editor["void"](editor, {
  	        at: start,
  	        mode: 'highest'
  	      });
  	      var endVoid = voids ? null : Editor["void"](editor, {
  	        at: end,
  	        mode: 'highest'
  	      }); // If the start or end points are inside an inline void, nudge them out.

  	      if (startVoid) {
  	        var before = Editor.before(editor, start);

  	        if (before && startBlock && Path.isAncestor(startBlock[1], before.path)) {
  	          start = before;
  	        }
  	      }

  	      if (endVoid) {
  	        var after = Editor.after(editor, end);

  	        if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {
  	          end = after;
  	        }
  	      } // Get the highest nodes that are completely inside the range, as well as
  	      // the start and end nodes.


  	      var matches = [];
  	      var lastPath;

  	      var _iterator = _createForOfIteratorHelper(Editor.nodes(editor, {
  	        at: at,
  	        voids: voids
  	      })),
  	          _step;

  	      try {
  	        for (_iterator.s(); !(_step = _iterator.n()).done;) {
  	          var entry = _step.value;

  	          var _entry = _slicedToArray(entry, 2),
  	              _node2 = _entry[0],
  	              _path3 = _entry[1];

  	          if (lastPath && Path.compare(_path3, lastPath) === 0) {
  	            continue;
  	          }

  	          if (!voids && Editor.isVoid(editor, _node2) || !Path.isCommon(_path3, start.path) && !Path.isCommon(_path3, end.path)) {
  	            matches.push(entry);
  	            lastPath = _path3;
  	          }
  	        }
  	      } catch (err) {
  	        _iterator.e(err);
  	      } finally {
  	        _iterator.f();
  	      }

  	      var pathRefs = Array.from(matches, function (_ref) {
  	        var _ref2 = _slicedToArray(_ref, 2),
  	            p = _ref2[1];

  	        return Editor.pathRef(editor, p);
  	      });
  	      var startRef = Editor.pointRef(editor, start);
  	      var endRef = Editor.pointRef(editor, end);
  	      var removedText = '';

  	      if (!isSingleText && !startVoid) {
  	        var _point = startRef.current;

  	        var _Editor$leaf = Editor.leaf(editor, _point),
  	            _Editor$leaf2 = _slicedToArray(_Editor$leaf, 1),
  	            node = _Editor$leaf2[0];

  	        var path = _point.path;
  	        var _start = start,
  	            offset = _start.offset;
  	        var text = node.text.slice(offset);

  	        if (text.length > 0) {
  	          editor.apply({
  	            type: 'remove_text',
  	            path: path,
  	            offset: offset,
  	            text: text
  	          });
  	          removedText = text;
  	        }
  	      }

  	      for (var _i = 0, _pathRefs = pathRefs; _i < _pathRefs.length; _i++) {
  	        var pathRef = _pathRefs[_i];

  	        var _path = pathRef.unref();

  	        Transforms.removeNodes(editor, {
  	          at: _path,
  	          voids: voids
  	        });
  	      }

  	      if (!endVoid) {
  	        var _point2 = endRef.current;

  	        var _Editor$leaf3 = Editor.leaf(editor, _point2),
  	            _Editor$leaf4 = _slicedToArray(_Editor$leaf3, 1),
  	            _node = _Editor$leaf4[0];

  	        var _path2 = _point2.path;

  	        var _offset = isSingleText ? start.offset : 0;

  	        var _text = _node.text.slice(_offset, end.offset);

  	        if (_text.length > 0) {
  	          editor.apply({
  	            type: 'remove_text',
  	            path: _path2,
  	            offset: _offset,
  	            text: _text
  	          });
  	          removedText = _text;
  	        }
  	      }

  	      if (!isSingleText && isAcrossBlocks && endRef.current && startRef.current) {
  	        Transforms.mergeNodes(editor, {
  	          at: endRef.current,
  	          hanging: true,
  	          voids: voids
  	        });
  	      } // For Thai script, deleting N character(s) backward should delete
  	      // N code point(s) instead of an entire grapheme cluster.
  	      // Therefore, the remaining code points should be inserted back.


  	      if (isCollapsed && reverse && unit === 'character' && removedText.length > 1 && removedText.match(/[\u0E00-\u0E7F]+/)) {
  	        Transforms.insertText(editor, removedText.slice(0, removedText.length - distance));
  	      }

  	      var startUnref = startRef.unref();
  	      var endUnref = endRef.unref();
  	      var point = reverse ? startUnref || endUnref : endUnref || startUnref;

  	      if (options.at == null && point) {
  	        Transforms.select(editor, point);
  	      }
  	    });
  	  },

  	  /**
  	   * Insert a fragment at a specific location in the editor.
  	   */
  	  insertFragment: function insertFragment(editor, fragment) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    Editor.withoutNormalizing(editor, function () {
  	      var _options$hanging2 = options.hanging,
  	          hanging = _options$hanging2 === void 0 ? false : _options$hanging2,
  	          _options$voids2 = options.voids,
  	          voids = _options$voids2 === void 0 ? false : _options$voids2;
  	      var _options$at2 = options.at,
  	          at = _options$at2 === void 0 ? editor.selection : _options$at2;

  	      if (!fragment.length) {
  	        return;
  	      }

  	      if (!at) {
  	        return;
  	      } else if (Range.isRange(at)) {
  	        if (!hanging) {
  	          at = Editor.unhangRange(editor, at);
  	        }

  	        if (Range.isCollapsed(at)) {
  	          at = at.anchor;
  	        } else {
  	          var _Range$edges5 = Range.edges(at),
  	              _Range$edges6 = _slicedToArray(_Range$edges5, 2),
  	              end = _Range$edges6[1];

  	          if (!voids && Editor["void"](editor, {
  	            at: end
  	          })) {
  	            return;
  	          }

  	          var pointRef = Editor.pointRef(editor, end);
  	          Transforms["delete"](editor, {
  	            at: at
  	          });
  	          at = pointRef.unref();
  	        }
  	      } else if (Path.isPath(at)) {
  	        at = Editor.start(editor, at);
  	      }

  	      if (!voids && Editor["void"](editor, {
  	        at: at
  	      })) {
  	        return;
  	      } // If the insert point is at the edge of an inline node, move it outside
  	      // instead since it will need to be split otherwise.


  	      var inlineElementMatch = Editor.above(editor, {
  	        at: at,
  	        match: function match(n) {
  	          return Editor.isInline(editor, n);
  	        },
  	        mode: 'highest',
  	        voids: voids
  	      });

  	      if (inlineElementMatch) {
  	        var _inlineElementMatch = _slicedToArray(inlineElementMatch, 2),
  	            _inlinePath = _inlineElementMatch[1];

  	        if (Editor.isEnd(editor, at, _inlinePath)) {
  	          var after = Editor.after(editor, _inlinePath);
  	          at = after;
  	        } else if (Editor.isStart(editor, at, _inlinePath)) {
  	          var before = Editor.before(editor, _inlinePath);
  	          at = before;
  	        }
  	      }

  	      var blockMatch = Editor.above(editor, {
  	        match: function match(n) {
  	          return Editor.isBlock(editor, n);
  	        },
  	        at: at,
  	        voids: voids
  	      });

  	      var _blockMatch = _slicedToArray(blockMatch, 2),
  	          blockPath = _blockMatch[1];

  	      var isBlockStart = Editor.isStart(editor, at, blockPath);
  	      var isBlockEnd = Editor.isEnd(editor, at, blockPath);
  	      var isBlockEmpty = isBlockStart && isBlockEnd;
  	      var mergeStart = !isBlockStart || isBlockStart && isBlockEnd;
  	      var mergeEnd = !isBlockEnd;

  	      var _Node$first = Node.first({
  	        children: fragment
  	      }, []),
  	          _Node$first2 = _slicedToArray(_Node$first, 2),
  	          firstPath = _Node$first2[1];

  	      var _Node$last = Node.last({
  	        children: fragment
  	      }, []),
  	          _Node$last2 = _slicedToArray(_Node$last, 2),
  	          lastPath = _Node$last2[1];

  	      var matches = [];

  	      var matcher = function matcher(_ref3) {
  	        var _ref4 = _slicedToArray(_ref3, 2),
  	            n = _ref4[0],
  	            p = _ref4[1];

  	        var isRoot = p.length === 0;

  	        if (isRoot) {
  	          return false;
  	        }

  	        if (isBlockEmpty) {
  	          return true;
  	        }

  	        if (mergeStart && Path.isAncestor(p, firstPath) && Element.isElement(n) && !editor.isVoid(n) && !editor.isInline(n)) {
  	          return false;
  	        }

  	        if (mergeEnd && Path.isAncestor(p, lastPath) && Element.isElement(n) && !editor.isVoid(n) && !editor.isInline(n)) {
  	          return false;
  	        }

  	        return true;
  	      };

  	      var _iterator2 = _createForOfIteratorHelper(Node.nodes({
  	        children: fragment
  	      }, {
  	        pass: matcher
  	      })),
  	          _step2;

  	      try {
  	        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
  	          var entry = _step2.value;

  	          if (matcher(entry)) {
  	            matches.push(entry);
  	          }
  	        }
  	      } catch (err) {
  	        _iterator2.e(err);
  	      } finally {
  	        _iterator2.f();
  	      }

  	      var starts = [];
  	      var middles = [];
  	      var ends = [];
  	      var starting = true;
  	      var hasBlocks = false;

  	      for (var _i2 = 0, _matches = matches; _i2 < _matches.length; _i2++) {
  	        var _matches$_i = _slicedToArray(_matches[_i2], 1),
  	            node = _matches$_i[0];

  	        if (Element.isElement(node) && !editor.isInline(node)) {
  	          starting = false;
  	          hasBlocks = true;
  	          middles.push(node);
  	        } else if (starting) {
  	          starts.push(node);
  	        } else {
  	          ends.push(node);
  	        }
  	      }

  	      var _Editor$nodes = Editor.nodes(editor, {
  	        at: at,
  	        match: function match(n) {
  	          return Text.isText(n) || Editor.isInline(editor, n);
  	        },
  	        mode: 'highest',
  	        voids: voids
  	      }),
  	          _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),
  	          inlineMatch = _Editor$nodes2[0];

  	      var _inlineMatch = _slicedToArray(inlineMatch, 2),
  	          inlinePath = _inlineMatch[1];

  	      var isInlineStart = Editor.isStart(editor, at, inlinePath);
  	      var isInlineEnd = Editor.isEnd(editor, at, inlinePath);
  	      var middleRef = Editor.pathRef(editor, isBlockEnd && !ends.length ? Path.next(blockPath) : blockPath);
  	      var endRef = Editor.pathRef(editor, isInlineEnd ? Path.next(inlinePath) : inlinePath);
  	      Transforms.splitNodes(editor, {
  	        at: at,
  	        match: function match(n) {
  	          return hasBlocks ? Editor.isBlock(editor, n) : Text.isText(n) || Editor.isInline(editor, n);
  	        },
  	        mode: hasBlocks ? 'lowest' : 'highest',
  	        always: hasBlocks && (!isBlockStart || starts.length > 0) && (!isBlockEnd || ends.length > 0),
  	        voids: voids
  	      });
  	      var startRef = Editor.pathRef(editor, !isInlineStart || isInlineStart && isInlineEnd ? Path.next(inlinePath) : inlinePath);
  	      Transforms.insertNodes(editor, starts, {
  	        at: startRef.current,
  	        match: function match(n) {
  	          return Text.isText(n) || Editor.isInline(editor, n);
  	        },
  	        mode: 'highest',
  	        voids: voids
  	      });

  	      if (isBlockEmpty && !starts.length && middles.length && !ends.length) {
  	        Transforms["delete"](editor, {
  	          at: blockPath,
  	          voids: voids
  	        });
  	      }

  	      Transforms.insertNodes(editor, middles, {
  	        at: middleRef.current,
  	        match: function match(n) {
  	          return Editor.isBlock(editor, n);
  	        },
  	        mode: 'lowest',
  	        voids: voids
  	      });
  	      Transforms.insertNodes(editor, ends, {
  	        at: endRef.current,
  	        match: function match(n) {
  	          return Text.isText(n) || Editor.isInline(editor, n);
  	        },
  	        mode: 'highest',
  	        voids: voids
  	      });

  	      if (!options.at) {
  	        var path;

  	        if (ends.length > 0 && endRef.current) {
  	          path = Path.previous(endRef.current);
  	        } else if (middles.length > 0 && middleRef.current) {
  	          path = Path.previous(middleRef.current);
  	        } else if (startRef.current) {
  	          path = Path.previous(startRef.current);
  	        }

  	        if (path) {
  	          var _end2 = Editor.end(editor, path);

  	          Transforms.select(editor, _end2);
  	        }
  	      }

  	      startRef.unref();
  	      middleRef.unref();
  	      endRef.unref();
  	    });
  	  },

  	  /**
  	   * Insert a string of text in the Editor.
  	   */
  	  insertText: function insertText(editor, text) {
  	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  	    Editor.withoutNormalizing(editor, function () {
  	      var _options$voids3 = options.voids,
  	          voids = _options$voids3 === void 0 ? false : _options$voids3;
  	      var _options$at3 = options.at,
  	          at = _options$at3 === void 0 ? editor.selection : _options$at3;

  	      if (!at) {
  	        return;
  	      }

  	      if (Path.isPath(at)) {
  	        at = Editor.range(editor, at);
  	      }

  	      if (Range.isRange(at)) {
  	        if (Range.isCollapsed(at)) {
  	          at = at.anchor;
  	        } else {
  	          var end = Range.end(at);

  	          if (!voids && Editor["void"](editor, {
  	            at: end
  	          })) {
  	            return;
  	          }

  	          var start = Range.start(at);
  	          var startRef = Editor.pointRef(editor, start);
  	          var endRef = Editor.pointRef(editor, end);
  	          Transforms["delete"](editor, {
  	            at: at,
  	            voids: voids
  	          });
  	          var startPoint = startRef.unref();
  	          var endPoint = endRef.unref();
  	          at = startPoint || endPoint;
  	          Transforms.setSelection(editor, {
  	            anchor: at,
  	            focus: at
  	          });
  	        }
  	      }

  	      if (!voids && Editor["void"](editor, {
  	        at: at
  	      })) {
  	        return;
  	      }

  	      var _at = at,
  	          path = _at.path,
  	          offset = _at.offset;
  	      if (text.length > 0) editor.apply({
  	        type: 'insert_text',
  	        path: path,
  	        offset: offset,
  	        text: text
  	      });
  	    });
  	  }
  	};

  	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
  	var Transforms = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, GeneralTransforms), NodeTransforms), SelectionTransforms), TextTransforms);

  	dist$2.Editor = Editor;
  	dist$2.Element = Element;
  	dist$2.Location = Location;
  	dist$2.Node = Node;
  	dist$2.Operation = Operation;
  	dist$2.Path = Path;
  	dist$2.PathRef = PathRef;
  	dist$2.Point = Point;
  	dist$2.PointRef = PointRef;
  	dist$2.Range = Range;
  	dist$2.RangeRef = RangeRef;
  	dist$2.Scrubber = Scrubber;
  	dist$2.Span = Span;
  	dist$2.Text = Text;
  	dist$2.Transforms = Transforms;
  	dist$2.createEditor = createEditor;
  	
  	return dist$2;
  }

  var distExports$1 = /*@__PURE__*/ requireDist$1();

  var dist = {};

  var hasRequiredDist;

  function requireDist () {
  	if (hasRequiredDist) return dist;
  	hasRequiredDist = 1;

  	var isPlainObject = requireIsPlainObject();
  	var slate = /*@__PURE__*/ requireDist$1();

  	// eslint-disable-next-line no-redeclare
  	var History = {
  	  /**
  	   * Check if a value is a `History` object.
  	   */
  	  isHistory: function isHistory(value) {
  	    return isPlainObject.isPlainObject(value) && Array.isArray(value.redos) && Array.isArray(value.undos) && (value.redos.length === 0 || slate.Operation.isOperationList(value.redos[0].operations)) && (value.undos.length === 0 || slate.Operation.isOperationList(value.undos[0].operations));
  	  }
  	};

  	/**
  	 * Weakmaps for attaching state to the editor.
  	 */
  	var HISTORY = new WeakMap();
  	var SAVING = new WeakMap();
  	var MERGING = new WeakMap();
  	// eslint-disable-next-line no-redeclare
  	var HistoryEditor = {
  	  /**
  	   * Check if a value is a `HistoryEditor` object.
  	   */
  	  isHistoryEditor: function isHistoryEditor(value) {
  	    return History.isHistory(value.history) && slate.Editor.isEditor(value);
  	  },
  	  /**
  	   * Get the merge flag's current value.
  	   */
  	  isMerging: function isMerging(editor) {
  	    return MERGING.get(editor);
  	  },
  	  /**
  	   * Get the saving flag's current value.
  	   */
  	  isSaving: function isSaving(editor) {
  	    return SAVING.get(editor);
  	  },
  	  /**
  	   * Redo to the previous saved state.
  	   */
  	  redo: function redo(editor) {
  	    editor.redo();
  	  },
  	  /**
  	   * Undo to the previous saved state.
  	   */
  	  undo: function undo(editor) {
  	    editor.undo();
  	  },
  	  /**
  	   * Apply a series of changes inside a synchronous `fn`, These operations will
  	   * be merged into the previous history.
  	   */
  	  withMerging: function withMerging(editor, fn) {
  	    var prev = HistoryEditor.isMerging(editor);
  	    MERGING.set(editor, true);
  	    fn();
  	    MERGING.set(editor, prev);
  	  },
  	  /**
  	   * Apply a series of changes inside a synchronous `fn`, without merging any of
  	   * the new operations into previous save point in the history.
  	   */
  	  withoutMerging: function withoutMerging(editor, fn) {
  	    var prev = HistoryEditor.isMerging(editor);
  	    MERGING.set(editor, false);
  	    fn();
  	    MERGING.set(editor, prev);
  	  },
  	  /**
  	   * Apply a series of changes inside a synchronous `fn`, without saving any of
  	   * their operations into the history.
  	   */
  	  withoutSaving: function withoutSaving(editor, fn) {
  	    var prev = HistoryEditor.isSaving(editor);
  	    SAVING.set(editor, false);
  	    fn();
  	    SAVING.set(editor, prev);
  	  }
  	};

  	function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike) { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
  	function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
  	function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
  	/**
  	 * The `withHistory` plugin keeps track of the operation history of a Slate
  	 * editor as operations are applied to it, using undo and redo stacks.
  	 *
  	 * If you are using TypeScript, you must extend Slate's CustomTypes to use
  	 * this plugin.
  	 *
  	 * See https://docs.slatejs.org/concepts/11-typescript to learn how.
  	 */
  	var withHistory = function withHistory(editor) {
  	  var e = editor;
  	  var apply = e.apply;
  	  e.history = {
  	    undos: [],
  	    redos: []
  	  };
  	  e.redo = function () {
  	    var history = e.history;
  	    var redos = history.redos;
  	    if (redos.length > 0) {
  	      var batch = redos[redos.length - 1];
  	      if (batch.selectionBefore) {
  	        slate.Transforms.setSelection(e, batch.selectionBefore);
  	      }
  	      HistoryEditor.withoutSaving(e, function () {
  	        slate.Editor.withoutNormalizing(e, function () {
  	          var _iterator = _createForOfIteratorHelper(batch.operations),
  	            _step;
  	          try {
  	            for (_iterator.s(); !(_step = _iterator.n()).done;) {
  	              var op = _step.value;
  	              e.apply(op);
  	            }
  	          } catch (err) {
  	            _iterator.e(err);
  	          } finally {
  	            _iterator.f();
  	          }
  	        });
  	      });
  	      history.redos.pop();
  	      e.writeHistory('undos', batch);
  	    }
  	  };
  	  e.undo = function () {
  	    var history = e.history;
  	    var undos = history.undos;
  	    if (undos.length > 0) {
  	      var batch = undos[undos.length - 1];
  	      HistoryEditor.withoutSaving(e, function () {
  	        slate.Editor.withoutNormalizing(e, function () {
  	          var inverseOps = batch.operations.map(slate.Operation.inverse).reverse();
  	          var _iterator2 = _createForOfIteratorHelper(inverseOps),
  	            _step2;
  	          try {
  	            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
  	              var op = _step2.value;
  	              e.apply(op);
  	            }
  	          } catch (err) {
  	            _iterator2.e(err);
  	          } finally {
  	            _iterator2.f();
  	          }
  	          if (batch.selectionBefore) {
  	            slate.Transforms.setSelection(e, batch.selectionBefore);
  	          }
  	        });
  	      });
  	      e.writeHistory('redos', batch);
  	      history.undos.pop();
  	    }
  	  };
  	  e.apply = function (op) {
  	    var operations = e.operations,
  	      history = e.history;
  	    var undos = history.undos;
  	    var lastBatch = undos[undos.length - 1];
  	    var lastOp = lastBatch && lastBatch.operations[lastBatch.operations.length - 1];
  	    var save = HistoryEditor.isSaving(e);
  	    var merge = HistoryEditor.isMerging(e);
  	    if (save == null) {
  	      save = shouldSave(op);
  	    }
  	    if (save) {
  	      if (merge == null) {
  	        if (lastBatch == null) {
  	          merge = false;
  	        } else if (operations.length !== 0) {
  	          merge = true;
  	        } else {
  	          merge = shouldMerge(op, lastOp);
  	        }
  	      }
  	      if (lastBatch && merge) {
  	        lastBatch.operations.push(op);
  	      } else {
  	        var batch = {
  	          operations: [op],
  	          selectionBefore: e.selection
  	        };
  	        e.writeHistory('undos', batch);
  	      }
  	      while (undos.length > 100) {
  	        undos.shift();
  	      }
  	      history.redos = [];
  	    }
  	    apply(op);
  	  };
  	  e.writeHistory = function (stack, batch) {
  	    e.history[stack].push(batch);
  	  };
  	  return e;
  	};
  	/**
  	 * Check whether to merge an operation into the previous operation.
  	 */
  	var shouldMerge = function shouldMerge(op, prev) {
  	  if (prev && op.type === 'insert_text' && prev.type === 'insert_text' && op.offset === prev.offset + prev.text.length && slate.Path.equals(op.path, prev.path)) {
  	    return true;
  	  }
  	  if (prev && op.type === 'remove_text' && prev.type === 'remove_text' && op.offset + op.text.length === prev.offset && slate.Path.equals(op.path, prev.path)) {
  	    return true;
  	  }
  	  return false;
  	};
  	/**
  	 * Check whether an operation needs to be saved to the history.
  	 */
  	var shouldSave = function shouldSave(op, prev) {
  	  if (op.type === 'set_selection') {
  	    return false;
  	  }
  	  return true;
  	};

  	dist.HISTORY = HISTORY;
  	dist.History = History;
  	dist.HistoryEditor = HistoryEditor;
  	dist.MERGING = MERGING;
  	dist.SAVING = SAVING;
  	dist.withHistory = withHistory;
  	
  	return dist;
  }

  var distExports = /*@__PURE__*/ requireDist();

  /******************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  /* global Reflect, Promise, SuppressedError, Symbol, Iterator */

  var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
      return extendStatics(d, b);
  };

  function __extends(d, b) {
      if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  var __assign = function() {
      __assign = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
      };
      return __assign.apply(this, arguments);
  };

  function __rest(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  }

  function __awaiter(thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  }

  function __generator(thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
      return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (g && (g = 0, op[0] && (_ = 0)), _) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  }

  function __values(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
          next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
          }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }

  function __read(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      }
      catch (error) { e = { error: error }; }
      finally {
          try {
              if (r && !r.done && (m = i["return"])) m.call(i);
          }
          finally { if (e) throw e.error; }
      }
      return ar;
  }

  function __spreadArray(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
          }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
  }

  function __asyncValues(o) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
      function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
      function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
  }

  typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
  };

  var lodash_clonedeep = {exports: {}};

  /**
   * lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="npm" -o ./`
   * Copyright jQuery Foundation and other contributors <https://jquery.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */
  lodash_clonedeep.exports;

  var hasRequiredLodash_clonedeep;

  function requireLodash_clonedeep () {
  	if (hasRequiredLodash_clonedeep) return lodash_clonedeep.exports;
  	hasRequiredLodash_clonedeep = 1;
  	(function (module, exports) {
  		/** Used as the size to enable large array optimizations. */
  		var LARGE_ARRAY_SIZE = 200;

  		/** Used to stand-in for `undefined` hash values. */
  		var HASH_UNDEFINED = '__lodash_hash_undefined__';

  		/** Used as references for various `Number` constants. */
  		var MAX_SAFE_INTEGER = 9007199254740991;

  		/** `Object#toString` result references. */
  		var argsTag = '[object Arguments]',
  		    arrayTag = '[object Array]',
  		    boolTag = '[object Boolean]',
  		    dateTag = '[object Date]',
  		    errorTag = '[object Error]',
  		    funcTag = '[object Function]',
  		    genTag = '[object GeneratorFunction]',
  		    mapTag = '[object Map]',
  		    numberTag = '[object Number]',
  		    objectTag = '[object Object]',
  		    promiseTag = '[object Promise]',
  		    regexpTag = '[object RegExp]',
  		    setTag = '[object Set]',
  		    stringTag = '[object String]',
  		    symbolTag = '[object Symbol]',
  		    weakMapTag = '[object WeakMap]';

  		var arrayBufferTag = '[object ArrayBuffer]',
  		    dataViewTag = '[object DataView]',
  		    float32Tag = '[object Float32Array]',
  		    float64Tag = '[object Float64Array]',
  		    int8Tag = '[object Int8Array]',
  		    int16Tag = '[object Int16Array]',
  		    int32Tag = '[object Int32Array]',
  		    uint8Tag = '[object Uint8Array]',
  		    uint8ClampedTag = '[object Uint8ClampedArray]',
  		    uint16Tag = '[object Uint16Array]',
  		    uint32Tag = '[object Uint32Array]';

  		/**
  		 * Used to match `RegExp`
  		 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
  		 */
  		var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  		/** Used to match `RegExp` flags from their coerced string values. */
  		var reFlags = /\w*$/;

  		/** Used to detect host constructors (Safari). */
  		var reIsHostCtor = /^\[object .+?Constructor\]$/;

  		/** Used to detect unsigned integer values. */
  		var reIsUint = /^(?:0|[1-9]\d*)$/;

  		/** Used to identify `toStringTag` values supported by `_.clone`. */
  		var cloneableTags = {};
  		cloneableTags[argsTag] = cloneableTags[arrayTag] =
  		cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  		cloneableTags[boolTag] = cloneableTags[dateTag] =
  		cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  		cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  		cloneableTags[int32Tag] = cloneableTags[mapTag] =
  		cloneableTags[numberTag] = cloneableTags[objectTag] =
  		cloneableTags[regexpTag] = cloneableTags[setTag] =
  		cloneableTags[stringTag] = cloneableTags[symbolTag] =
  		cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  		cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  		cloneableTags[errorTag] = cloneableTags[funcTag] =
  		cloneableTags[weakMapTag] = false;

  		/** Detect free variable `global` from Node.js. */
  		var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  		/** Detect free variable `self`. */
  		var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  		/** Used as a reference to the global object. */
  		var root = freeGlobal || freeSelf || Function('return this')();

  		/** Detect free variable `exports`. */
  		var freeExports = exports && !exports.nodeType && exports;

  		/** Detect free variable `module`. */
  		var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  		/** Detect the popular CommonJS extension `module.exports`. */
  		var moduleExports = freeModule && freeModule.exports === freeExports;

  		/**
  		 * Adds the key-value `pair` to `map`.
  		 *
  		 * @private
  		 * @param {Object} map The map to modify.
  		 * @param {Array} pair The key-value pair to add.
  		 * @returns {Object} Returns `map`.
  		 */
  		function addMapEntry(map, pair) {
  		  // Don't return `map.set` because it's not chainable in IE 11.
  		  map.set(pair[0], pair[1]);
  		  return map;
  		}

  		/**
  		 * Adds `value` to `set`.
  		 *
  		 * @private
  		 * @param {Object} set The set to modify.
  		 * @param {*} value The value to add.
  		 * @returns {Object} Returns `set`.
  		 */
  		function addSetEntry(set, value) {
  		  // Don't return `set.add` because it's not chainable in IE 11.
  		  set.add(value);
  		  return set;
  		}

  		/**
  		 * A specialized version of `_.forEach` for arrays without support for
  		 * iteratee shorthands.
  		 *
  		 * @private
  		 * @param {Array} [array] The array to iterate over.
  		 * @param {Function} iteratee The function invoked per iteration.
  		 * @returns {Array} Returns `array`.
  		 */
  		function arrayEach(array, iteratee) {
  		  var index = -1,
  		      length = array ? array.length : 0;

  		  while (++index < length) {
  		    if (iteratee(array[index], index, array) === false) {
  		      break;
  		    }
  		  }
  		  return array;
  		}

  		/**
  		 * Appends the elements of `values` to `array`.
  		 *
  		 * @private
  		 * @param {Array} array The array to modify.
  		 * @param {Array} values The values to append.
  		 * @returns {Array} Returns `array`.
  		 */
  		function arrayPush(array, values) {
  		  var index = -1,
  		      length = values.length,
  		      offset = array.length;

  		  while (++index < length) {
  		    array[offset + index] = values[index];
  		  }
  		  return array;
  		}

  		/**
  		 * A specialized version of `_.reduce` for arrays without support for
  		 * iteratee shorthands.
  		 *
  		 * @private
  		 * @param {Array} [array] The array to iterate over.
  		 * @param {Function} iteratee The function invoked per iteration.
  		 * @param {*} [accumulator] The initial value.
  		 * @param {boolean} [initAccum] Specify using the first element of `array` as
  		 *  the initial value.
  		 * @returns {*} Returns the accumulated value.
  		 */
  		function arrayReduce(array, iteratee, accumulator, initAccum) {
  		  var index = -1,
  		      length = array ? array.length : 0;
  		  while (++index < length) {
  		    accumulator = iteratee(accumulator, array[index], index, array);
  		  }
  		  return accumulator;
  		}

  		/**
  		 * The base implementation of `_.times` without support for iteratee shorthands
  		 * or max array length checks.
  		 *
  		 * @private
  		 * @param {number} n The number of times to invoke `iteratee`.
  		 * @param {Function} iteratee The function invoked per iteration.
  		 * @returns {Array} Returns the array of results.
  		 */
  		function baseTimes(n, iteratee) {
  		  var index = -1,
  		      result = Array(n);

  		  while (++index < n) {
  		    result[index] = iteratee(index);
  		  }
  		  return result;
  		}

  		/**
  		 * Gets the value at `key` of `object`.
  		 *
  		 * @private
  		 * @param {Object} [object] The object to query.
  		 * @param {string} key The key of the property to get.
  		 * @returns {*} Returns the property value.
  		 */
  		function getValue(object, key) {
  		  return object == null ? undefined : object[key];
  		}

  		/**
  		 * Checks if `value` is a host object in IE < 9.
  		 *
  		 * @private
  		 * @param {*} value The value to check.
  		 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
  		 */
  		function isHostObject(value) {
  		  // Many host objects are `Object` objects that can coerce to strings
  		  // despite having improperly defined `toString` methods.
  		  var result = false;
  		  if (value != null && typeof value.toString != 'function') {
  		    try {
  		      result = !!(value + '');
  		    } catch (e) {}
  		  }
  		  return result;
  		}

  		/**
  		 * Converts `map` to its key-value pairs.
  		 *
  		 * @private
  		 * @param {Object} map The map to convert.
  		 * @returns {Array} Returns the key-value pairs.
  		 */
  		function mapToArray(map) {
  		  var index = -1,
  		      result = Array(map.size);

  		  map.forEach(function(value, key) {
  		    result[++index] = [key, value];
  		  });
  		  return result;
  		}

  		/**
  		 * Creates a unary function that invokes `func` with its argument transformed.
  		 *
  		 * @private
  		 * @param {Function} func The function to wrap.
  		 * @param {Function} transform The argument transform.
  		 * @returns {Function} Returns the new function.
  		 */
  		function overArg(func, transform) {
  		  return function(arg) {
  		    return func(transform(arg));
  		  };
  		}

  		/**
  		 * Converts `set` to an array of its values.
  		 *
  		 * @private
  		 * @param {Object} set The set to convert.
  		 * @returns {Array} Returns the values.
  		 */
  		function setToArray(set) {
  		  var index = -1,
  		      result = Array(set.size);

  		  set.forEach(function(value) {
  		    result[++index] = value;
  		  });
  		  return result;
  		}

  		/** Used for built-in method references. */
  		var arrayProto = Array.prototype,
  		    funcProto = Function.prototype,
  		    objectProto = Object.prototype;

  		/** Used to detect overreaching core-js shims. */
  		var coreJsData = root['__core-js_shared__'];

  		/** Used to detect methods masquerading as native. */
  		var maskSrcKey = (function() {
  		  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  		  return uid ? ('Symbol(src)_1.' + uid) : '';
  		}());

  		/** Used to resolve the decompiled source of functions. */
  		var funcToString = funcProto.toString;

  		/** Used to check objects for own properties. */
  		var hasOwnProperty = objectProto.hasOwnProperty;

  		/**
  		 * Used to resolve the
  		 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
  		 * of values.
  		 */
  		var objectToString = objectProto.toString;

  		/** Used to detect if a method is native. */
  		var reIsNative = RegExp('^' +
  		  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  		  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  		);

  		/** Built-in value references. */
  		var Buffer = moduleExports ? root.Buffer : undefined,
  		    Symbol = root.Symbol,
  		    Uint8Array = root.Uint8Array,
  		    getPrototype = overArg(Object.getPrototypeOf, Object),
  		    objectCreate = Object.create,
  		    propertyIsEnumerable = objectProto.propertyIsEnumerable,
  		    splice = arrayProto.splice;

  		/* Built-in method references for those with the same name as other `lodash` methods. */
  		var nativeGetSymbols = Object.getOwnPropertySymbols,
  		    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
  		    nativeKeys = overArg(Object.keys, Object);

  		/* Built-in method references that are verified to be native. */
  		var DataView = getNative(root, 'DataView'),
  		    Map = getNative(root, 'Map'),
  		    Promise = getNative(root, 'Promise'),
  		    Set = getNative(root, 'Set'),
  		    WeakMap = getNative(root, 'WeakMap'),
  		    nativeCreate = getNative(Object, 'create');

  		/** Used to detect maps, sets, and weakmaps. */
  		var dataViewCtorString = toSource(DataView),
  		    mapCtorString = toSource(Map),
  		    promiseCtorString = toSource(Promise),
  		    setCtorString = toSource(Set),
  		    weakMapCtorString = toSource(WeakMap);

  		/** Used to convert symbols to primitives and strings. */
  		var symbolProto = Symbol ? Symbol.prototype : undefined,
  		    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  		/**
  		 * Creates a hash object.
  		 *
  		 * @private
  		 * @constructor
  		 * @param {Array} [entries] The key-value pairs to cache.
  		 */
  		function Hash(entries) {
  		  var index = -1,
  		      length = entries ? entries.length : 0;

  		  this.clear();
  		  while (++index < length) {
  		    var entry = entries[index];
  		    this.set(entry[0], entry[1]);
  		  }
  		}

  		/**
  		 * Removes all key-value entries from the hash.
  		 *
  		 * @private
  		 * @name clear
  		 * @memberOf Hash
  		 */
  		function hashClear() {
  		  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  		}

  		/**
  		 * Removes `key` and its value from the hash.
  		 *
  		 * @private
  		 * @name delete
  		 * @memberOf Hash
  		 * @param {Object} hash The hash to modify.
  		 * @param {string} key The key of the value to remove.
  		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
  		 */
  		function hashDelete(key) {
  		  return this.has(key) && delete this.__data__[key];
  		}

  		/**
  		 * Gets the hash value for `key`.
  		 *
  		 * @private
  		 * @name get
  		 * @memberOf Hash
  		 * @param {string} key The key of the value to get.
  		 * @returns {*} Returns the entry value.
  		 */
  		function hashGet(key) {
  		  var data = this.__data__;
  		  if (nativeCreate) {
  		    var result = data[key];
  		    return result === HASH_UNDEFINED ? undefined : result;
  		  }
  		  return hasOwnProperty.call(data, key) ? data[key] : undefined;
  		}

  		/**
  		 * Checks if a hash value for `key` exists.
  		 *
  		 * @private
  		 * @name has
  		 * @memberOf Hash
  		 * @param {string} key The key of the entry to check.
  		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
  		 */
  		function hashHas(key) {
  		  var data = this.__data__;
  		  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  		}

  		/**
  		 * Sets the hash `key` to `value`.
  		 *
  		 * @private
  		 * @name set
  		 * @memberOf Hash
  		 * @param {string} key The key of the value to set.
  		 * @param {*} value The value to set.
  		 * @returns {Object} Returns the hash instance.
  		 */
  		function hashSet(key, value) {
  		  var data = this.__data__;
  		  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  		  return this;
  		}

  		// Add methods to `Hash`.
  		Hash.prototype.clear = hashClear;
  		Hash.prototype['delete'] = hashDelete;
  		Hash.prototype.get = hashGet;
  		Hash.prototype.has = hashHas;
  		Hash.prototype.set = hashSet;

  		/**
  		 * Creates an list cache object.
  		 *
  		 * @private
  		 * @constructor
  		 * @param {Array} [entries] The key-value pairs to cache.
  		 */
  		function ListCache(entries) {
  		  var index = -1,
  		      length = entries ? entries.length : 0;

  		  this.clear();
  		  while (++index < length) {
  		    var entry = entries[index];
  		    this.set(entry[0], entry[1]);
  		  }
  		}

  		/**
  		 * Removes all key-value entries from the list cache.
  		 *
  		 * @private
  		 * @name clear
  		 * @memberOf ListCache
  		 */
  		function listCacheClear() {
  		  this.__data__ = [];
  		}

  		/**
  		 * Removes `key` and its value from the list cache.
  		 *
  		 * @private
  		 * @name delete
  		 * @memberOf ListCache
  		 * @param {string} key The key of the value to remove.
  		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
  		 */
  		function listCacheDelete(key) {
  		  var data = this.__data__,
  		      index = assocIndexOf(data, key);

  		  if (index < 0) {
  		    return false;
  		  }
  		  var lastIndex = data.length - 1;
  		  if (index == lastIndex) {
  		    data.pop();
  		  } else {
  		    splice.call(data, index, 1);
  		  }
  		  return true;
  		}

  		/**
  		 * Gets the list cache value for `key`.
  		 *
  		 * @private
  		 * @name get
  		 * @memberOf ListCache
  		 * @param {string} key The key of the value to get.
  		 * @returns {*} Returns the entry value.
  		 */
  		function listCacheGet(key) {
  		  var data = this.__data__,
  		      index = assocIndexOf(data, key);

  		  return index < 0 ? undefined : data[index][1];
  		}

  		/**
  		 * Checks if a list cache value for `key` exists.
  		 *
  		 * @private
  		 * @name has
  		 * @memberOf ListCache
  		 * @param {string} key The key of the entry to check.
  		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
  		 */
  		function listCacheHas(key) {
  		  return assocIndexOf(this.__data__, key) > -1;
  		}

  		/**
  		 * Sets the list cache `key` to `value`.
  		 *
  		 * @private
  		 * @name set
  		 * @memberOf ListCache
  		 * @param {string} key The key of the value to set.
  		 * @param {*} value The value to set.
  		 * @returns {Object} Returns the list cache instance.
  		 */
  		function listCacheSet(key, value) {
  		  var data = this.__data__,
  		      index = assocIndexOf(data, key);

  		  if (index < 0) {
  		    data.push([key, value]);
  		  } else {
  		    data[index][1] = value;
  		  }
  		  return this;
  		}

  		// Add methods to `ListCache`.
  		ListCache.prototype.clear = listCacheClear;
  		ListCache.prototype['delete'] = listCacheDelete;
  		ListCache.prototype.get = listCacheGet;
  		ListCache.prototype.has = listCacheHas;
  		ListCache.prototype.set = listCacheSet;

  		/**
  		 * Creates a map cache object to store key-value pairs.
  		 *
  		 * @private
  		 * @constructor
  		 * @param {Array} [entries] The key-value pairs to cache.
  		 */
  		function MapCache(entries) {
  		  var index = -1,
  		      length = entries ? entries.length : 0;

  		  this.clear();
  		  while (++index < length) {
  		    var entry = entries[index];
  		    this.set(entry[0], entry[1]);
  		  }
  		}

  		/**
  		 * Removes all key-value entries from the map.
  		 *
  		 * @private
  		 * @name clear
  		 * @memberOf MapCache
  		 */
  		function mapCacheClear() {
  		  this.__data__ = {
  		    'hash': new Hash,
  		    'map': new (Map || ListCache),
  		    'string': new Hash
  		  };
  		}

  		/**
  		 * Removes `key` and its value from the map.
  		 *
  		 * @private
  		 * @name delete
  		 * @memberOf MapCache
  		 * @param {string} key The key of the value to remove.
  		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
  		 */
  		function mapCacheDelete(key) {
  		  return getMapData(this, key)['delete'](key);
  		}

  		/**
  		 * Gets the map value for `key`.
  		 *
  		 * @private
  		 * @name get
  		 * @memberOf MapCache
  		 * @param {string} key The key of the value to get.
  		 * @returns {*} Returns the entry value.
  		 */
  		function mapCacheGet(key) {
  		  return getMapData(this, key).get(key);
  		}

  		/**
  		 * Checks if a map value for `key` exists.
  		 *
  		 * @private
  		 * @name has
  		 * @memberOf MapCache
  		 * @param {string} key The key of the entry to check.
  		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
  		 */
  		function mapCacheHas(key) {
  		  return getMapData(this, key).has(key);
  		}

  		/**
  		 * Sets the map `key` to `value`.
  		 *
  		 * @private
  		 * @name set
  		 * @memberOf MapCache
  		 * @param {string} key The key of the value to set.
  		 * @param {*} value The value to set.
  		 * @returns {Object} Returns the map cache instance.
  		 */
  		function mapCacheSet(key, value) {
  		  getMapData(this, key).set(key, value);
  		  return this;
  		}

  		// Add methods to `MapCache`.
  		MapCache.prototype.clear = mapCacheClear;
  		MapCache.prototype['delete'] = mapCacheDelete;
  		MapCache.prototype.get = mapCacheGet;
  		MapCache.prototype.has = mapCacheHas;
  		MapCache.prototype.set = mapCacheSet;

  		/**
  		 * Creates a stack cache object to store key-value pairs.
  		 *
  		 * @private
  		 * @constructor
  		 * @param {Array} [entries] The key-value pairs to cache.
  		 */
  		function Stack(entries) {
  		  this.__data__ = new ListCache(entries);
  		}

  		/**
  		 * Removes all key-value entries from the stack.
  		 *
  		 * @private
  		 * @name clear
  		 * @memberOf Stack
  		 */
  		function stackClear() {
  		  this.__data__ = new ListCache;
  		}

  		/**
  		 * Removes `key` and its value from the stack.
  		 *
  		 * @private
  		 * @name delete
  		 * @memberOf Stack
  		 * @param {string} key The key of the value to remove.
  		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
  		 */
  		function stackDelete(key) {
  		  return this.__data__['delete'](key);
  		}

  		/**
  		 * Gets the stack value for `key`.
  		 *
  		 * @private
  		 * @name get
  		 * @memberOf Stack
  		 * @param {string} key The key of the value to get.
  		 * @returns {*} Returns the entry value.
  		 */
  		function stackGet(key) {
  		  return this.__data__.get(key);
  		}

  		/**
  		 * Checks if a stack value for `key` exists.
  		 *
  		 * @private
  		 * @name has
  		 * @memberOf Stack
  		 * @param {string} key The key of the entry to check.
  		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
  		 */
  		function stackHas(key) {
  		  return this.__data__.has(key);
  		}

  		/**
  		 * Sets the stack `key` to `value`.
  		 *
  		 * @private
  		 * @name set
  		 * @memberOf Stack
  		 * @param {string} key The key of the value to set.
  		 * @param {*} value The value to set.
  		 * @returns {Object} Returns the stack cache instance.
  		 */
  		function stackSet(key, value) {
  		  var cache = this.__data__;
  		  if (cache instanceof ListCache) {
  		    var pairs = cache.__data__;
  		    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
  		      pairs.push([key, value]);
  		      return this;
  		    }
  		    cache = this.__data__ = new MapCache(pairs);
  		  }
  		  cache.set(key, value);
  		  return this;
  		}

  		// Add methods to `Stack`.
  		Stack.prototype.clear = stackClear;
  		Stack.prototype['delete'] = stackDelete;
  		Stack.prototype.get = stackGet;
  		Stack.prototype.has = stackHas;
  		Stack.prototype.set = stackSet;

  		/**
  		 * Creates an array of the enumerable property names of the array-like `value`.
  		 *
  		 * @private
  		 * @param {*} value The value to query.
  		 * @param {boolean} inherited Specify returning inherited property names.
  		 * @returns {Array} Returns the array of property names.
  		 */
  		function arrayLikeKeys(value, inherited) {
  		  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  		  // Safari 9 makes `arguments.length` enumerable in strict mode.
  		  var result = (isArray(value) || isArguments(value))
  		    ? baseTimes(value.length, String)
  		    : [];

  		  var length = result.length,
  		      skipIndexes = !!length;

  		  for (var key in value) {
  		    if ((hasOwnProperty.call(value, key)) &&
  		        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
  		      result.push(key);
  		    }
  		  }
  		  return result;
  		}

  		/**
  		 * Assigns `value` to `key` of `object` if the existing value is not equivalent
  		 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
  		 * for equality comparisons.
  		 *
  		 * @private
  		 * @param {Object} object The object to modify.
  		 * @param {string} key The key of the property to assign.
  		 * @param {*} value The value to assign.
  		 */
  		function assignValue(object, key, value) {
  		  var objValue = object[key];
  		  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
  		      (value === undefined && !(key in object))) {
  		    object[key] = value;
  		  }
  		}

  		/**
  		 * Gets the index at which the `key` is found in `array` of key-value pairs.
  		 *
  		 * @private
  		 * @param {Array} array The array to inspect.
  		 * @param {*} key The key to search for.
  		 * @returns {number} Returns the index of the matched value, else `-1`.
  		 */
  		function assocIndexOf(array, key) {
  		  var length = array.length;
  		  while (length--) {
  		    if (eq(array[length][0], key)) {
  		      return length;
  		    }
  		  }
  		  return -1;
  		}

  		/**
  		 * The base implementation of `_.assign` without support for multiple sources
  		 * or `customizer` functions.
  		 *
  		 * @private
  		 * @param {Object} object The destination object.
  		 * @param {Object} source The source object.
  		 * @returns {Object} Returns `object`.
  		 */
  		function baseAssign(object, source) {
  		  return object && copyObject(source, keys(source), object);
  		}

  		/**
  		 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
  		 * traversed objects.
  		 *
  		 * @private
  		 * @param {*} value The value to clone.
  		 * @param {boolean} [isDeep] Specify a deep clone.
  		 * @param {boolean} [isFull] Specify a clone including symbols.
  		 * @param {Function} [customizer] The function to customize cloning.
  		 * @param {string} [key] The key of `value`.
  		 * @param {Object} [object] The parent object of `value`.
  		 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
  		 * @returns {*} Returns the cloned value.
  		 */
  		function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
  		  var result;
  		  if (customizer) {
  		    result = object ? customizer(value, key, object, stack) : customizer(value);
  		  }
  		  if (result !== undefined) {
  		    return result;
  		  }
  		  if (!isObject(value)) {
  		    return value;
  		  }
  		  var isArr = isArray(value);
  		  if (isArr) {
  		    result = initCloneArray(value);
  		    if (!isDeep) {
  		      return copyArray(value, result);
  		    }
  		  } else {
  		    var tag = getTag(value),
  		        isFunc = tag == funcTag || tag == genTag;

  		    if (isBuffer(value)) {
  		      return cloneBuffer(value, isDeep);
  		    }
  		    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
  		      if (isHostObject(value)) {
  		        return object ? value : {};
  		      }
  		      result = initCloneObject(isFunc ? {} : value);
  		      if (!isDeep) {
  		        return copySymbols(value, baseAssign(result, value));
  		      }
  		    } else {
  		      if (!cloneableTags[tag]) {
  		        return object ? value : {};
  		      }
  		      result = initCloneByTag(value, tag, baseClone, isDeep);
  		    }
  		  }
  		  // Check for circular references and return its corresponding clone.
  		  stack || (stack = new Stack);
  		  var stacked = stack.get(value);
  		  if (stacked) {
  		    return stacked;
  		  }
  		  stack.set(value, result);

  		  if (!isArr) {
  		    var props = isFull ? getAllKeys(value) : keys(value);
  		  }
  		  arrayEach(props || value, function(subValue, key) {
  		    if (props) {
  		      key = subValue;
  		      subValue = value[key];
  		    }
  		    // Recursively populate clone (susceptible to call stack limits).
  		    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
  		  });
  		  return result;
  		}

  		/**
  		 * The base implementation of `_.create` without support for assigning
  		 * properties to the created object.
  		 *
  		 * @private
  		 * @param {Object} prototype The object to inherit from.
  		 * @returns {Object} Returns the new object.
  		 */
  		function baseCreate(proto) {
  		  return isObject(proto) ? objectCreate(proto) : {};
  		}

  		/**
  		 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
  		 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
  		 * symbols of `object`.
  		 *
  		 * @private
  		 * @param {Object} object The object to query.
  		 * @param {Function} keysFunc The function to get the keys of `object`.
  		 * @param {Function} symbolsFunc The function to get the symbols of `object`.
  		 * @returns {Array} Returns the array of property names and symbols.
  		 */
  		function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  		  var result = keysFunc(object);
  		  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  		}

  		/**
  		 * The base implementation of `getTag`.
  		 *
  		 * @private
  		 * @param {*} value The value to query.
  		 * @returns {string} Returns the `toStringTag`.
  		 */
  		function baseGetTag(value) {
  		  return objectToString.call(value);
  		}

  		/**
  		 * The base implementation of `_.isNative` without bad shim checks.
  		 *
  		 * @private
  		 * @param {*} value The value to check.
  		 * @returns {boolean} Returns `true` if `value` is a native function,
  		 *  else `false`.
  		 */
  		function baseIsNative(value) {
  		  if (!isObject(value) || isMasked(value)) {
  		    return false;
  		  }
  		  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  		  return pattern.test(toSource(value));
  		}

  		/**
  		 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
  		 *
  		 * @private
  		 * @param {Object} object The object to query.
  		 * @returns {Array} Returns the array of property names.
  		 */
  		function baseKeys(object) {
  		  if (!isPrototype(object)) {
  		    return nativeKeys(object);
  		  }
  		  var result = [];
  		  for (var key in Object(object)) {
  		    if (hasOwnProperty.call(object, key) && key != 'constructor') {
  		      result.push(key);
  		    }
  		  }
  		  return result;
  		}

  		/**
  		 * Creates a clone of  `buffer`.
  		 *
  		 * @private
  		 * @param {Buffer} buffer The buffer to clone.
  		 * @param {boolean} [isDeep] Specify a deep clone.
  		 * @returns {Buffer} Returns the cloned buffer.
  		 */
  		function cloneBuffer(buffer, isDeep) {
  		  if (isDeep) {
  		    return buffer.slice();
  		  }
  		  var result = new buffer.constructor(buffer.length);
  		  buffer.copy(result);
  		  return result;
  		}

  		/**
  		 * Creates a clone of `arrayBuffer`.
  		 *
  		 * @private
  		 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
  		 * @returns {ArrayBuffer} Returns the cloned array buffer.
  		 */
  		function cloneArrayBuffer(arrayBuffer) {
  		  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  		  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  		  return result;
  		}

  		/**
  		 * Creates a clone of `dataView`.
  		 *
  		 * @private
  		 * @param {Object} dataView The data view to clone.
  		 * @param {boolean} [isDeep] Specify a deep clone.
  		 * @returns {Object} Returns the cloned data view.
  		 */
  		function cloneDataView(dataView, isDeep) {
  		  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  		  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  		}

  		/**
  		 * Creates a clone of `map`.
  		 *
  		 * @private
  		 * @param {Object} map The map to clone.
  		 * @param {Function} cloneFunc The function to clone values.
  		 * @param {boolean} [isDeep] Specify a deep clone.
  		 * @returns {Object} Returns the cloned map.
  		 */
  		function cloneMap(map, isDeep, cloneFunc) {
  		  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
  		  return arrayReduce(array, addMapEntry, new map.constructor);
  		}

  		/**
  		 * Creates a clone of `regexp`.
  		 *
  		 * @private
  		 * @param {Object} regexp The regexp to clone.
  		 * @returns {Object} Returns the cloned regexp.
  		 */
  		function cloneRegExp(regexp) {
  		  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  		  result.lastIndex = regexp.lastIndex;
  		  return result;
  		}

  		/**
  		 * Creates a clone of `set`.
  		 *
  		 * @private
  		 * @param {Object} set The set to clone.
  		 * @param {Function} cloneFunc The function to clone values.
  		 * @param {boolean} [isDeep] Specify a deep clone.
  		 * @returns {Object} Returns the cloned set.
  		 */
  		function cloneSet(set, isDeep, cloneFunc) {
  		  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
  		  return arrayReduce(array, addSetEntry, new set.constructor);
  		}

  		/**
  		 * Creates a clone of the `symbol` object.
  		 *
  		 * @private
  		 * @param {Object} symbol The symbol object to clone.
  		 * @returns {Object} Returns the cloned symbol object.
  		 */
  		function cloneSymbol(symbol) {
  		  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  		}

  		/**
  		 * Creates a clone of `typedArray`.
  		 *
  		 * @private
  		 * @param {Object} typedArray The typed array to clone.
  		 * @param {boolean} [isDeep] Specify a deep clone.
  		 * @returns {Object} Returns the cloned typed array.
  		 */
  		function cloneTypedArray(typedArray, isDeep) {
  		  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  		  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  		}

  		/**
  		 * Copies the values of `source` to `array`.
  		 *
  		 * @private
  		 * @param {Array} source The array to copy values from.
  		 * @param {Array} [array=[]] The array to copy values to.
  		 * @returns {Array} Returns `array`.
  		 */
  		function copyArray(source, array) {
  		  var index = -1,
  		      length = source.length;

  		  array || (array = Array(length));
  		  while (++index < length) {
  		    array[index] = source[index];
  		  }
  		  return array;
  		}

  		/**
  		 * Copies properties of `source` to `object`.
  		 *
  		 * @private
  		 * @param {Object} source The object to copy properties from.
  		 * @param {Array} props The property identifiers to copy.
  		 * @param {Object} [object={}] The object to copy properties to.
  		 * @param {Function} [customizer] The function to customize copied values.
  		 * @returns {Object} Returns `object`.
  		 */
  		function copyObject(source, props, object, customizer) {
  		  object || (object = {});

  		  var index = -1,
  		      length = props.length;

  		  while (++index < length) {
  		    var key = props[index];

  		    var newValue = undefined;

  		    assignValue(object, key, newValue === undefined ? source[key] : newValue);
  		  }
  		  return object;
  		}

  		/**
  		 * Copies own symbol properties of `source` to `object`.
  		 *
  		 * @private
  		 * @param {Object} source The object to copy symbols from.
  		 * @param {Object} [object={}] The object to copy symbols to.
  		 * @returns {Object} Returns `object`.
  		 */
  		function copySymbols(source, object) {
  		  return copyObject(source, getSymbols(source), object);
  		}

  		/**
  		 * Creates an array of own enumerable property names and symbols of `object`.
  		 *
  		 * @private
  		 * @param {Object} object The object to query.
  		 * @returns {Array} Returns the array of property names and symbols.
  		 */
  		function getAllKeys(object) {
  		  return baseGetAllKeys(object, keys, getSymbols);
  		}

  		/**
  		 * Gets the data for `map`.
  		 *
  		 * @private
  		 * @param {Object} map The map to query.
  		 * @param {string} key The reference key.
  		 * @returns {*} Returns the map data.
  		 */
  		function getMapData(map, key) {
  		  var data = map.__data__;
  		  return isKeyable(key)
  		    ? data[typeof key == 'string' ? 'string' : 'hash']
  		    : data.map;
  		}

  		/**
  		 * Gets the native function at `key` of `object`.
  		 *
  		 * @private
  		 * @param {Object} object The object to query.
  		 * @param {string} key The key of the method to get.
  		 * @returns {*} Returns the function if it's native, else `undefined`.
  		 */
  		function getNative(object, key) {
  		  var value = getValue(object, key);
  		  return baseIsNative(value) ? value : undefined;
  		}

  		/**
  		 * Creates an array of the own enumerable symbol properties of `object`.
  		 *
  		 * @private
  		 * @param {Object} object The object to query.
  		 * @returns {Array} Returns the array of symbols.
  		 */
  		var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

  		/**
  		 * Gets the `toStringTag` of `value`.
  		 *
  		 * @private
  		 * @param {*} value The value to query.
  		 * @returns {string} Returns the `toStringTag`.
  		 */
  		var getTag = baseGetTag;

  		// Fallback for data views, maps, sets, and weak maps in IE 11,
  		// for data views in Edge < 14, and promises in Node.js.
  		if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
  		    (Map && getTag(new Map) != mapTag) ||
  		    (Promise && getTag(Promise.resolve()) != promiseTag) ||
  		    (Set && getTag(new Set) != setTag) ||
  		    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  		  getTag = function(value) {
  		    var result = objectToString.call(value),
  		        Ctor = result == objectTag ? value.constructor : undefined,
  		        ctorString = Ctor ? toSource(Ctor) : undefined;

  		    if (ctorString) {
  		      switch (ctorString) {
  		        case dataViewCtorString: return dataViewTag;
  		        case mapCtorString: return mapTag;
  		        case promiseCtorString: return promiseTag;
  		        case setCtorString: return setTag;
  		        case weakMapCtorString: return weakMapTag;
  		      }
  		    }
  		    return result;
  		  };
  		}

  		/**
  		 * Initializes an array clone.
  		 *
  		 * @private
  		 * @param {Array} array The array to clone.
  		 * @returns {Array} Returns the initialized clone.
  		 */
  		function initCloneArray(array) {
  		  var length = array.length,
  		      result = array.constructor(length);

  		  // Add properties assigned by `RegExp#exec`.
  		  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
  		    result.index = array.index;
  		    result.input = array.input;
  		  }
  		  return result;
  		}

  		/**
  		 * Initializes an object clone.
  		 *
  		 * @private
  		 * @param {Object} object The object to clone.
  		 * @returns {Object} Returns the initialized clone.
  		 */
  		function initCloneObject(object) {
  		  return (typeof object.constructor == 'function' && !isPrototype(object))
  		    ? baseCreate(getPrototype(object))
  		    : {};
  		}

  		/**
  		 * Initializes an object clone based on its `toStringTag`.
  		 *
  		 * **Note:** This function only supports cloning values with tags of
  		 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
  		 *
  		 * @private
  		 * @param {Object} object The object to clone.
  		 * @param {string} tag The `toStringTag` of the object to clone.
  		 * @param {Function} cloneFunc The function to clone values.
  		 * @param {boolean} [isDeep] Specify a deep clone.
  		 * @returns {Object} Returns the initialized clone.
  		 */
  		function initCloneByTag(object, tag, cloneFunc, isDeep) {
  		  var Ctor = object.constructor;
  		  switch (tag) {
  		    case arrayBufferTag:
  		      return cloneArrayBuffer(object);

  		    case boolTag:
  		    case dateTag:
  		      return new Ctor(+object);

  		    case dataViewTag:
  		      return cloneDataView(object, isDeep);

  		    case float32Tag: case float64Tag:
  		    case int8Tag: case int16Tag: case int32Tag:
  		    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
  		      return cloneTypedArray(object, isDeep);

  		    case mapTag:
  		      return cloneMap(object, isDeep, cloneFunc);

  		    case numberTag:
  		    case stringTag:
  		      return new Ctor(object);

  		    case regexpTag:
  		      return cloneRegExp(object);

  		    case setTag:
  		      return cloneSet(object, isDeep, cloneFunc);

  		    case symbolTag:
  		      return cloneSymbol(object);
  		  }
  		}

  		/**
  		 * Checks if `value` is a valid array-like index.
  		 *
  		 * @private
  		 * @param {*} value The value to check.
  		 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
  		 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
  		 */
  		function isIndex(value, length) {
  		  length = length == null ? MAX_SAFE_INTEGER : length;
  		  return !!length &&
  		    (typeof value == 'number' || reIsUint.test(value)) &&
  		    (value > -1 && value % 1 == 0 && value < length);
  		}

  		/**
  		 * Checks if `value` is suitable for use as unique object key.
  		 *
  		 * @private
  		 * @param {*} value The value to check.
  		 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
  		 */
  		function isKeyable(value) {
  		  var type = typeof value;
  		  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
  		    ? (value !== '__proto__')
  		    : (value === null);
  		}

  		/**
  		 * Checks if `func` has its source masked.
  		 *
  		 * @private
  		 * @param {Function} func The function to check.
  		 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
  		 */
  		function isMasked(func) {
  		  return !!maskSrcKey && (maskSrcKey in func);
  		}

  		/**
  		 * Checks if `value` is likely a prototype object.
  		 *
  		 * @private
  		 * @param {*} value The value to check.
  		 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
  		 */
  		function isPrototype(value) {
  		  var Ctor = value && value.constructor,
  		      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  		  return value === proto;
  		}

  		/**
  		 * Converts `func` to its source code.
  		 *
  		 * @private
  		 * @param {Function} func The function to process.
  		 * @returns {string} Returns the source code.
  		 */
  		function toSource(func) {
  		  if (func != null) {
  		    try {
  		      return funcToString.call(func);
  		    } catch (e) {}
  		    try {
  		      return (func + '');
  		    } catch (e) {}
  		  }
  		  return '';
  		}

  		/**
  		 * This method is like `_.clone` except that it recursively clones `value`.
  		 *
  		 * @static
  		 * @memberOf _
  		 * @since 1.0.0
  		 * @category Lang
  		 * @param {*} value The value to recursively clone.
  		 * @returns {*} Returns the deep cloned value.
  		 * @see _.clone
  		 * @example
  		 *
  		 * var objects = [{ 'a': 1 }, { 'b': 2 }];
  		 *
  		 * var deep = _.cloneDeep(objects);
  		 * console.log(deep[0] === objects[0]);
  		 * // => false
  		 */
  		function cloneDeep(value) {
  		  return baseClone(value, true, true);
  		}

  		/**
  		 * Performs a
  		 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
  		 * comparison between two values to determine if they are equivalent.
  		 *
  		 * @static
  		 * @memberOf _
  		 * @since 4.0.0
  		 * @category Lang
  		 * @param {*} value The value to compare.
  		 * @param {*} other The other value to compare.
  		 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
  		 * @example
  		 *
  		 * var object = { 'a': 1 };
  		 * var other = { 'a': 1 };
  		 *
  		 * _.eq(object, object);
  		 * // => true
  		 *
  		 * _.eq(object, other);
  		 * // => false
  		 *
  		 * _.eq('a', 'a');
  		 * // => true
  		 *
  		 * _.eq('a', Object('a'));
  		 * // => false
  		 *
  		 * _.eq(NaN, NaN);
  		 * // => true
  		 */
  		function eq(value, other) {
  		  return value === other || (value !== value && other !== other);
  		}

  		/**
  		 * Checks if `value` is likely an `arguments` object.
  		 *
  		 * @static
  		 * @memberOf _
  		 * @since 0.1.0
  		 * @category Lang
  		 * @param {*} value The value to check.
  		 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
  		 *  else `false`.
  		 * @example
  		 *
  		 * _.isArguments(function() { return arguments; }());
  		 * // => true
  		 *
  		 * _.isArguments([1, 2, 3]);
  		 * // => false
  		 */
  		function isArguments(value) {
  		  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  		  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
  		    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  		}

  		/**
  		 * Checks if `value` is classified as an `Array` object.
  		 *
  		 * @static
  		 * @memberOf _
  		 * @since 0.1.0
  		 * @category Lang
  		 * @param {*} value The value to check.
  		 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
  		 * @example
  		 *
  		 * _.isArray([1, 2, 3]);
  		 * // => true
  		 *
  		 * _.isArray(document.body.children);
  		 * // => false
  		 *
  		 * _.isArray('abc');
  		 * // => false
  		 *
  		 * _.isArray(_.noop);
  		 * // => false
  		 */
  		var isArray = Array.isArray;

  		/**
  		 * Checks if `value` is array-like. A value is considered array-like if it's
  		 * not a function and has a `value.length` that's an integer greater than or
  		 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
  		 *
  		 * @static
  		 * @memberOf _
  		 * @since 4.0.0
  		 * @category Lang
  		 * @param {*} value The value to check.
  		 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
  		 * @example
  		 *
  		 * _.isArrayLike([1, 2, 3]);
  		 * // => true
  		 *
  		 * _.isArrayLike(document.body.children);
  		 * // => true
  		 *
  		 * _.isArrayLike('abc');
  		 * // => true
  		 *
  		 * _.isArrayLike(_.noop);
  		 * // => false
  		 */
  		function isArrayLike(value) {
  		  return value != null && isLength(value.length) && !isFunction(value);
  		}

  		/**
  		 * This method is like `_.isArrayLike` except that it also checks if `value`
  		 * is an object.
  		 *
  		 * @static
  		 * @memberOf _
  		 * @since 4.0.0
  		 * @category Lang
  		 * @param {*} value The value to check.
  		 * @returns {boolean} Returns `true` if `value` is an array-like object,
  		 *  else `false`.
  		 * @example
  		 *
  		 * _.isArrayLikeObject([1, 2, 3]);
  		 * // => true
  		 *
  		 * _.isArrayLikeObject(document.body.children);
  		 * // => true
  		 *
  		 * _.isArrayLikeObject('abc');
  		 * // => false
  		 *
  		 * _.isArrayLikeObject(_.noop);
  		 * // => false
  		 */
  		function isArrayLikeObject(value) {
  		  return isObjectLike(value) && isArrayLike(value);
  		}

  		/**
  		 * Checks if `value` is a buffer.
  		 *
  		 * @static
  		 * @memberOf _
  		 * @since 4.3.0
  		 * @category Lang
  		 * @param {*} value The value to check.
  		 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
  		 * @example
  		 *
  		 * _.isBuffer(new Buffer(2));
  		 * // => true
  		 *
  		 * _.isBuffer(new Uint8Array(2));
  		 * // => false
  		 */
  		var isBuffer = nativeIsBuffer || stubFalse;

  		/**
  		 * Checks if `value` is classified as a `Function` object.
  		 *
  		 * @static
  		 * @memberOf _
  		 * @since 0.1.0
  		 * @category Lang
  		 * @param {*} value The value to check.
  		 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
  		 * @example
  		 *
  		 * _.isFunction(_);
  		 * // => true
  		 *
  		 * _.isFunction(/abc/);
  		 * // => false
  		 */
  		function isFunction(value) {
  		  // The use of `Object#toString` avoids issues with the `typeof` operator
  		  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  		  var tag = isObject(value) ? objectToString.call(value) : '';
  		  return tag == funcTag || tag == genTag;
  		}

  		/**
  		 * Checks if `value` is a valid array-like length.
  		 *
  		 * **Note:** This method is loosely based on
  		 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
  		 *
  		 * @static
  		 * @memberOf _
  		 * @since 4.0.0
  		 * @category Lang
  		 * @param {*} value The value to check.
  		 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
  		 * @example
  		 *
  		 * _.isLength(3);
  		 * // => true
  		 *
  		 * _.isLength(Number.MIN_VALUE);
  		 * // => false
  		 *
  		 * _.isLength(Infinity);
  		 * // => false
  		 *
  		 * _.isLength('3');
  		 * // => false
  		 */
  		function isLength(value) {
  		  return typeof value == 'number' &&
  		    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  		}

  		/**
  		 * Checks if `value` is the
  		 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
  		 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
  		 *
  		 * @static
  		 * @memberOf _
  		 * @since 0.1.0
  		 * @category Lang
  		 * @param {*} value The value to check.
  		 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
  		 * @example
  		 *
  		 * _.isObject({});
  		 * // => true
  		 *
  		 * _.isObject([1, 2, 3]);
  		 * // => true
  		 *
  		 * _.isObject(_.noop);
  		 * // => true
  		 *
  		 * _.isObject(null);
  		 * // => false
  		 */
  		function isObject(value) {
  		  var type = typeof value;
  		  return !!value && (type == 'object' || type == 'function');
  		}

  		/**
  		 * Checks if `value` is object-like. A value is object-like if it's not `null`
  		 * and has a `typeof` result of "object".
  		 *
  		 * @static
  		 * @memberOf _
  		 * @since 4.0.0
  		 * @category Lang
  		 * @param {*} value The value to check.
  		 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
  		 * @example
  		 *
  		 * _.isObjectLike({});
  		 * // => true
  		 *
  		 * _.isObjectLike([1, 2, 3]);
  		 * // => true
  		 *
  		 * _.isObjectLike(_.noop);
  		 * // => false
  		 *
  		 * _.isObjectLike(null);
  		 * // => false
  		 */
  		function isObjectLike(value) {
  		  return !!value && typeof value == 'object';
  		}

  		/**
  		 * Creates an array of the own enumerable property names of `object`.
  		 *
  		 * **Note:** Non-object values are coerced to objects. See the
  		 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
  		 * for more details.
  		 *
  		 * @static
  		 * @since 0.1.0
  		 * @memberOf _
  		 * @category Object
  		 * @param {Object} object The object to query.
  		 * @returns {Array} Returns the array of property names.
  		 * @example
  		 *
  		 * function Foo() {
  		 *   this.a = 1;
  		 *   this.b = 2;
  		 * }
  		 *
  		 * Foo.prototype.c = 3;
  		 *
  		 * _.keys(new Foo);
  		 * // => ['a', 'b'] (iteration order is not guaranteed)
  		 *
  		 * _.keys('hi');
  		 * // => ['0', '1']
  		 */
  		function keys(object) {
  		  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  		}

  		/**
  		 * This method returns a new empty array.
  		 *
  		 * @static
  		 * @memberOf _
  		 * @since 4.13.0
  		 * @category Util
  		 * @returns {Array} Returns the new empty array.
  		 * @example
  		 *
  		 * var arrays = _.times(2, _.stubArray);
  		 *
  		 * console.log(arrays);
  		 * // => [[], []]
  		 *
  		 * console.log(arrays[0] === arrays[1]);
  		 * // => false
  		 */
  		function stubArray() {
  		  return [];
  		}

  		/**
  		 * This method returns `false`.
  		 *
  		 * @static
  		 * @memberOf _
  		 * @since 4.13.0
  		 * @category Util
  		 * @returns {boolean} Returns `false`.
  		 * @example
  		 *
  		 * _.times(2, _.stubFalse);
  		 * // => [false, false]
  		 */
  		function stubFalse() {
  		  return false;
  		}

  		module.exports = cloneDeep; 
  	} (lodash_clonedeep, lodash_clonedeep.exports));
  	return lodash_clonedeep.exports;
  }

  var lodash_clonedeepExports = requireLodash_clonedeep();
  var clonedeep = /*@__PURE__*/getDefaultExportFromCjs(lodash_clonedeepExports);

  /**
   * lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="npm" -o ./`
   * Copyright jQuery Foundation and other contributors <https://jquery.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */

  var lodash_foreach;
  var hasRequiredLodash_foreach;

  function requireLodash_foreach () {
  	if (hasRequiredLodash_foreach) return lodash_foreach;
  	hasRequiredLodash_foreach = 1;
  	/** Used as references for various `Number` constants. */
  	var MAX_SAFE_INTEGER = 9007199254740991;

  	/** `Object#toString` result references. */
  	var argsTag = '[object Arguments]',
  	    funcTag = '[object Function]',
  	    genTag = '[object GeneratorFunction]';

  	/** Used to detect unsigned integer values. */
  	var reIsUint = /^(?:0|[1-9]\d*)$/;

  	/**
  	 * A specialized version of `_.forEach` for arrays without support for
  	 * iteratee shorthands.
  	 *
  	 * @private
  	 * @param {Array} [array] The array to iterate over.
  	 * @param {Function} iteratee The function invoked per iteration.
  	 * @returns {Array} Returns `array`.
  	 */
  	function arrayEach(array, iteratee) {
  	  var index = -1,
  	      length = array ? array.length : 0;

  	  while (++index < length) {
  	    if (iteratee(array[index], index, array) === false) {
  	      break;
  	    }
  	  }
  	  return array;
  	}

  	/**
  	 * The base implementation of `_.times` without support for iteratee shorthands
  	 * or max array length checks.
  	 *
  	 * @private
  	 * @param {number} n The number of times to invoke `iteratee`.
  	 * @param {Function} iteratee The function invoked per iteration.
  	 * @returns {Array} Returns the array of results.
  	 */
  	function baseTimes(n, iteratee) {
  	  var index = -1,
  	      result = Array(n);

  	  while (++index < n) {
  	    result[index] = iteratee(index);
  	  }
  	  return result;
  	}

  	/**
  	 * Creates a unary function that invokes `func` with its argument transformed.
  	 *
  	 * @private
  	 * @param {Function} func The function to wrap.
  	 * @param {Function} transform The argument transform.
  	 * @returns {Function} Returns the new function.
  	 */
  	function overArg(func, transform) {
  	  return function(arg) {
  	    return func(transform(arg));
  	  };
  	}

  	/** Used for built-in method references. */
  	var objectProto = Object.prototype;

  	/** Used to check objects for own properties. */
  	var hasOwnProperty = objectProto.hasOwnProperty;

  	/**
  	 * Used to resolve the
  	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
  	 * of values.
  	 */
  	var objectToString = objectProto.toString;

  	/** Built-in value references. */
  	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

  	/* Built-in method references for those with the same name as other `lodash` methods. */
  	var nativeKeys = overArg(Object.keys, Object);

  	/**
  	 * Creates an array of the enumerable property names of the array-like `value`.
  	 *
  	 * @private
  	 * @param {*} value The value to query.
  	 * @param {boolean} inherited Specify returning inherited property names.
  	 * @returns {Array} Returns the array of property names.
  	 */
  	function arrayLikeKeys(value, inherited) {
  	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  	  // Safari 9 makes `arguments.length` enumerable in strict mode.
  	  var result = (isArray(value) || isArguments(value))
  	    ? baseTimes(value.length, String)
  	    : [];

  	  var length = result.length,
  	      skipIndexes = !!length;

  	  for (var key in value) {
  	    if ((hasOwnProperty.call(value, key)) &&
  	        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
  	      result.push(key);
  	    }
  	  }
  	  return result;
  	}

  	/**
  	 * The base implementation of `_.forEach` without support for iteratee shorthands.
  	 *
  	 * @private
  	 * @param {Array|Object} collection The collection to iterate over.
  	 * @param {Function} iteratee The function invoked per iteration.
  	 * @returns {Array|Object} Returns `collection`.
  	 */
  	var baseEach = createBaseEach(baseForOwn);

  	/**
  	 * The base implementation of `baseForOwn` which iterates over `object`
  	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
  	 * Iteratee functions may exit iteration early by explicitly returning `false`.
  	 *
  	 * @private
  	 * @param {Object} object The object to iterate over.
  	 * @param {Function} iteratee The function invoked per iteration.
  	 * @param {Function} keysFunc The function to get the keys of `object`.
  	 * @returns {Object} Returns `object`.
  	 */
  	var baseFor = createBaseFor();

  	/**
  	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
  	 *
  	 * @private
  	 * @param {Object} object The object to iterate over.
  	 * @param {Function} iteratee The function invoked per iteration.
  	 * @returns {Object} Returns `object`.
  	 */
  	function baseForOwn(object, iteratee) {
  	  return object && baseFor(object, iteratee, keys);
  	}

  	/**
  	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
  	 *
  	 * @private
  	 * @param {Object} object The object to query.
  	 * @returns {Array} Returns the array of property names.
  	 */
  	function baseKeys(object) {
  	  if (!isPrototype(object)) {
  	    return nativeKeys(object);
  	  }
  	  var result = [];
  	  for (var key in Object(object)) {
  	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
  	      result.push(key);
  	    }
  	  }
  	  return result;
  	}

  	/**
  	 * Creates a `baseEach` or `baseEachRight` function.
  	 *
  	 * @private
  	 * @param {Function} eachFunc The function to iterate over a collection.
  	 * @param {boolean} [fromRight] Specify iterating from right to left.
  	 * @returns {Function} Returns the new base function.
  	 */
  	function createBaseEach(eachFunc, fromRight) {
  	  return function(collection, iteratee) {
  	    if (collection == null) {
  	      return collection;
  	    }
  	    if (!isArrayLike(collection)) {
  	      return eachFunc(collection, iteratee);
  	    }
  	    var length = collection.length,
  	        index = -1,
  	        iterable = Object(collection);

  	    while ((++index < length)) {
  	      if (iteratee(iterable[index], index, iterable) === false) {
  	        break;
  	      }
  	    }
  	    return collection;
  	  };
  	}

  	/**
  	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
  	 *
  	 * @private
  	 * @param {boolean} [fromRight] Specify iterating from right to left.
  	 * @returns {Function} Returns the new base function.
  	 */
  	function createBaseFor(fromRight) {
  	  return function(object, iteratee, keysFunc) {
  	    var index = -1,
  	        iterable = Object(object),
  	        props = keysFunc(object),
  	        length = props.length;

  	    while (length--) {
  	      var key = props[++index];
  	      if (iteratee(iterable[key], key, iterable) === false) {
  	        break;
  	      }
  	    }
  	    return object;
  	  };
  	}

  	/**
  	 * Checks if `value` is a valid array-like index.
  	 *
  	 * @private
  	 * @param {*} value The value to check.
  	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
  	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
  	 */
  	function isIndex(value, length) {
  	  length = length == null ? MAX_SAFE_INTEGER : length;
  	  return !!length &&
  	    (typeof value == 'number' || reIsUint.test(value)) &&
  	    (value > -1 && value % 1 == 0 && value < length);
  	}

  	/**
  	 * Checks if `value` is likely a prototype object.
  	 *
  	 * @private
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
  	 */
  	function isPrototype(value) {
  	  var Ctor = value && value.constructor,
  	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  	  return value === proto;
  	}

  	/**
  	 * Iterates over elements of `collection` and invokes `iteratee` for each element.
  	 * The iteratee is invoked with three arguments: (value, index|key, collection).
  	 * Iteratee functions may exit iteration early by explicitly returning `false`.
  	 *
  	 * **Note:** As with other "Collections" methods, objects with a "length"
  	 * property are iterated like arrays. To avoid this behavior use `_.forIn`
  	 * or `_.forOwn` for object iteration.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @alias each
  	 * @category Collection
  	 * @param {Array|Object} collection The collection to iterate over.
  	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
  	 * @returns {Array|Object} Returns `collection`.
  	 * @see _.forEachRight
  	 * @example
  	 *
  	 * _([1, 2]).forEach(function(value) {
  	 *   console.log(value);
  	 * });
  	 * // => Logs `1` then `2`.
  	 *
  	 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
  	 *   console.log(key);
  	 * });
  	 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
  	 */
  	function forEach(collection, iteratee) {
  	  var func = isArray(collection) ? arrayEach : baseEach;
  	  return func(collection, typeof iteratee == 'function' ? iteratee : identity);
  	}

  	/**
  	 * Checks if `value` is likely an `arguments` object.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
  	 *  else `false`.
  	 * @example
  	 *
  	 * _.isArguments(function() { return arguments; }());
  	 * // => true
  	 *
  	 * _.isArguments([1, 2, 3]);
  	 * // => false
  	 */
  	function isArguments(value) {
  	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
  	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  	}

  	/**
  	 * Checks if `value` is classified as an `Array` object.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
  	 * @example
  	 *
  	 * _.isArray([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isArray(document.body.children);
  	 * // => false
  	 *
  	 * _.isArray('abc');
  	 * // => false
  	 *
  	 * _.isArray(_.noop);
  	 * // => false
  	 */
  	var isArray = Array.isArray;

  	/**
  	 * Checks if `value` is array-like. A value is considered array-like if it's
  	 * not a function and has a `value.length` that's an integer greater than or
  	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
  	 * @example
  	 *
  	 * _.isArrayLike([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isArrayLike(document.body.children);
  	 * // => true
  	 *
  	 * _.isArrayLike('abc');
  	 * // => true
  	 *
  	 * _.isArrayLike(_.noop);
  	 * // => false
  	 */
  	function isArrayLike(value) {
  	  return value != null && isLength(value.length) && !isFunction(value);
  	}

  	/**
  	 * This method is like `_.isArrayLike` except that it also checks if `value`
  	 * is an object.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is an array-like object,
  	 *  else `false`.
  	 * @example
  	 *
  	 * _.isArrayLikeObject([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isArrayLikeObject(document.body.children);
  	 * // => true
  	 *
  	 * _.isArrayLikeObject('abc');
  	 * // => false
  	 *
  	 * _.isArrayLikeObject(_.noop);
  	 * // => false
  	 */
  	function isArrayLikeObject(value) {
  	  return isObjectLike(value) && isArrayLike(value);
  	}

  	/**
  	 * Checks if `value` is classified as a `Function` object.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
  	 * @example
  	 *
  	 * _.isFunction(_);
  	 * // => true
  	 *
  	 * _.isFunction(/abc/);
  	 * // => false
  	 */
  	function isFunction(value) {
  	  // The use of `Object#toString` avoids issues with the `typeof` operator
  	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  	  var tag = isObject(value) ? objectToString.call(value) : '';
  	  return tag == funcTag || tag == genTag;
  	}

  	/**
  	 * Checks if `value` is a valid array-like length.
  	 *
  	 * **Note:** This method is loosely based on
  	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
  	 * @example
  	 *
  	 * _.isLength(3);
  	 * // => true
  	 *
  	 * _.isLength(Number.MIN_VALUE);
  	 * // => false
  	 *
  	 * _.isLength(Infinity);
  	 * // => false
  	 *
  	 * _.isLength('3');
  	 * // => false
  	 */
  	function isLength(value) {
  	  return typeof value == 'number' &&
  	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  	}

  	/**
  	 * Checks if `value` is the
  	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
  	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
  	 * @example
  	 *
  	 * _.isObject({});
  	 * // => true
  	 *
  	 * _.isObject([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isObject(_.noop);
  	 * // => true
  	 *
  	 * _.isObject(null);
  	 * // => false
  	 */
  	function isObject(value) {
  	  var type = typeof value;
  	  return !!value && (type == 'object' || type == 'function');
  	}

  	/**
  	 * Checks if `value` is object-like. A value is object-like if it's not `null`
  	 * and has a `typeof` result of "object".
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
  	 * @example
  	 *
  	 * _.isObjectLike({});
  	 * // => true
  	 *
  	 * _.isObjectLike([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isObjectLike(_.noop);
  	 * // => false
  	 *
  	 * _.isObjectLike(null);
  	 * // => false
  	 */
  	function isObjectLike(value) {
  	  return !!value && typeof value == 'object';
  	}

  	/**
  	 * Creates an array of the own enumerable property names of `object`.
  	 *
  	 * **Note:** Non-object values are coerced to objects. See the
  	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
  	 * for more details.
  	 *
  	 * @static
  	 * @since 0.1.0
  	 * @memberOf _
  	 * @category Object
  	 * @param {Object} object The object to query.
  	 * @returns {Array} Returns the array of property names.
  	 * @example
  	 *
  	 * function Foo() {
  	 *   this.a = 1;
  	 *   this.b = 2;
  	 * }
  	 *
  	 * Foo.prototype.c = 3;
  	 *
  	 * _.keys(new Foo);
  	 * // => ['a', 'b'] (iteration order is not guaranteed)
  	 *
  	 * _.keys('hi');
  	 * // => ['0', '1']
  	 */
  	function keys(object) {
  	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  	}

  	/**
  	 * This method returns the first argument it receives.
  	 *
  	 * @static
  	 * @since 0.1.0
  	 * @memberOf _
  	 * @category Util
  	 * @param {*} value Any value.
  	 * @returns {*} Returns `value`.
  	 * @example
  	 *
  	 * var object = { 'a': 1 };
  	 *
  	 * console.log(_.identity(object) === object);
  	 * // => true
  	 */
  	function identity(value) {
  	  return value;
  	}

  	lodash_foreach = forEach;
  	return lodash_foreach;
  }

  var lodash_foreachExports = requireLodash_foreach();
  var forEach = /*@__PURE__*/getDefaultExportFromCjs(lodash_foreachExports);

  /**
   * @description config register
   * @author wangfupeng
   */
  // 全局的菜单配置
  var GLOBAL_MENU_CONF = {};
  /**
   * 注册全局菜单配置
   * @param key menu key
   * @param config config
   */
  function registerGlobalMenuConf(key, config) {
      if (config == null) {
          return;
      }
      GLOBAL_MENU_CONF[key] = config;
  }

  /**
   * @description editor config
   * @author wangfupeng
   */
  /**
   * 生成编辑器默认配置
   */
  function genEditorConfig(userConfig) {
      if (userConfig === void 0) { userConfig = {}; }
      var defaultMenuConf = clonedeep(GLOBAL_MENU_CONF);
      var newMenuConf = {};
      // 单独处理 menuConf
      var _a = userConfig.MENU_CONF, userMenuConf = _a === void 0 ? {} : _a;
      forEach(defaultMenuConf, function (menuConf, menuKey) {
          // 生成新的 menu config
          newMenuConf[menuKey] = __assign(__assign({}, menuConf), (userMenuConf[menuKey] || {}));
      });
      delete userConfig.MENU_CONF; // 处理完，则删掉 menuConf ，以防下面 merge 时造成干扰
      return __assign({ 
          // 默认配置
          scroll: true, readOnly: false, autoFocus: true, decorate: function () { return []; }, maxLength: 0, MENU_CONF: newMenuConf, hoverbarKeys: {
          // 'link': { menuKeys: ['editLink', 'unLink', 'viewLink'] },
          }, customAlert: function (info, type) {
              window.alert("".concat(type, ":\n").concat(info));
          } }, userConfig);
  }
  /**
   * 生成 toolbar 默认配置
   */
  function genToolbarConfig(userConfig) {
      return __assign({ 
          // 默认配置
          toolbarKeys: [], excludeKeys: [], insertKeys: { index: 0, keys: [] }, modalAppendToBody: false }, (userConfig || {}));
  }

  /**
   * @description config interface
   * @author wangfupeng
   */
  /**
   * EditorEvents 包含所有编辑器的生命周期事件。
   *
   * @property {string} CREATED - 编辑器创建后触发，用于初始化操作。
   * @property {string} DESTROYED - 编辑器销毁时触发，用于清理操作。
   * @property {string} CHANGE - 编辑器内容发生变化时触发，通常用于监听输入或变动。
   * @property {string} SCROLL - 编辑器滚动时触发，用于同步滚动状态或执行相关操作。
   * @property {string} FULLSCREEN - 编辑器进入全屏时触发，通常用于调整布局或容器尺寸。
   * @property {string} UNFULLSCREEN - 编辑器退出全屏时触发，恢复原始布局状态。
   */
  var EditorEvents = {
      CREATED: 'created',
      DESTROYED: 'destroyed',
      CHANGE: 'change',
      SCROLL: 'scroll',
      FULLSCREEN: 'fullscreen',
      UNFULLSCREEN: 'unFullScreen',
  };

  /**
   * @description register menu
   * @author wangfupeng
   */
  // menu item 的工厂函数 - 集合
  var MENU_ITEM_FACTORIES = {};
  /**
   * 注册菜单配置
   * @param registerMenuConf { key, factory, config } ，各个 menu key 不能重复
   * @param customConfig 自定义 menu config
   */
  function registerMenu(registerMenuConf, customConfig) {
      var key = registerMenuConf.key, factory = registerMenuConf.factory, config = registerMenuConf.config;
      // 合并 config
      var newConfig = __assign(__assign({}, config), (customConfig || {}));
      // 注册 menu
      if (MENU_ITEM_FACTORIES[key] != null) {
          throw new Error("Duplicated key '".concat(key, "' in menu items"));
      }
      MENU_ITEM_FACTORIES[key] = factory;
      // 将 config 保存到全局
      registerGlobalMenuConf(key, newConfig);
  }

  /**
   * @description 对象关联关系（部分参考 slate-react weak-maps.ts）
   * @author wangfupeng
   */
  // textarea - editor
  var EDITOR_TO_TEXTAREA = new WeakMap();
  var TEXTAREA_TO_EDITOR = new WeakMap();
  // bar - editor
  var TOOLBAR_TO_EDITOR = new WeakMap();
  var EDITOR_TO_TOOLBAR = new WeakMap();
  var HOVER_BAR_TO_EDITOR = new WeakMap();
  var EDITOR_TO_HOVER_BAR = new WeakMap();
  var BAR_ITEM_TO_EDITOR = new WeakMap();
  var EDITOR_TO_PANEL_AND_MODAL = new WeakMap();
  var PANEL_OR_MODAL_TO_EDITOR = new WeakMap();
  // config
  var EDITOR_TO_CONFIG = new WeakMap();
  // vdom 相关的属性
  var IS_FIRST_PATCH = new WeakMap();
  var TEXTAREA_TO_PATCH_FN = new WeakMap();
  var TEXTAREA_TO_VNODE = new WeakMap();
  var NODE_TO_VNODE = new WeakMap();
  var NODE_TO_HTML = new WeakMap();
  /**
   * Two weak maps that allow us rebuild a path given a node. They are populated
   * at render time such that after a render occurs we can always backtrack.
   */
  var NODE_TO_INDEX = new WeakMap();
  var NODE_TO_PARENT = new WeakMap();
  /**
   * Weak maps that allow us to go between Slate nodes and DOM nodes. These
   * are used to resolve DOM event-related logic into Slate actions.
   */
  var EDITOR_TO_ELEMENT = new WeakMap();
  var ELEMENT_TO_NODE = new WeakMap();
  var KEY_TO_ELEMENT = new WeakMap();
  var NODE_TO_ELEMENT = new WeakMap();
  var NODE_TO_KEY = new WeakMap();
  var EDITOR_TO_WINDOW = new WeakMap();
  /**
   * Weak maps for storing editor-related state.
   */
  var IS_FOCUSED = new WeakMap();
  // 保存 editor -> selection ，用于还原 editor 选区
  var EDITOR_TO_SELECTION$1 = new WeakMap();
  // editor -> eventEmitter 自定义事件
  var EDITOR_TO_EMITTER = new WeakMap();
  // editor 是否可执行粘贴
  var EDITOR_TO_CAN_PASTE = new WeakMap();

  /**
   * @description slate 插件 - config 相关
   * @author wangfupeng
   */
  var withConfig = function (editor) {
      var e = editor;
      e.getAllMenuKeys = function () {
          var arr = [];
          // eslint-disable-next-line guard-for-in
          for (var key in MENU_ITEM_FACTORIES) {
              arr.push(key);
          }
          return arr;
      };
      // 获取 editor 配置信息
      e.getConfig = function () {
          var config = EDITOR_TO_CONFIG.get(e);
          if (config == null) {
              throw new Error('Can not get editor config');
          }
          return config;
      };
      // 获取 menu config
      e.getMenuConfig = function (menuKey) {
          var _a = e.getConfig().MENU_CONF, MENU_CONF = _a === void 0 ? {} : _a;
          return MENU_CONF[menuKey] || {};
      };
      // alert
      e.alert = function (info, type) {
          if (type === void 0) { type = 'info'; }
          var customAlert = e.getConfig().customAlert;
          if (customAlert) {
              customAlert(info, type);
          }
      };
      return e;
  };

  var IGNORE_TAGS = new Set([
      'doctype',
      '!doctype',
      'meta',
      'script',
      'style',
      'link',
      'frame',
      'iframe',
      'title',
      'svg', // TODO 暂时忽略
  ]);

  /**
   * SSR Window 4.0.2
   * Better handling for window object in SSR environment
   * https://github.com/nolimits4web/ssr-window
   *
   * Copyright 2021, Vladimir Kharlampidi
   *
   * Licensed under MIT
   *
   * Released on: December 13, 2021
   */
  /* eslint-disable no-param-reassign */
  function isObject(obj) {
      return (obj !== null &&
          typeof obj === 'object' &&
          'constructor' in obj &&
          obj.constructor === Object);
  }
  function extend(target = {}, src = {}) {
      Object.keys(src).forEach((key) => {
          if (typeof target[key] === 'undefined')
              target[key] = src[key];
          else if (isObject(src[key]) &&
              isObject(target[key]) &&
              Object.keys(src[key]).length > 0) {
              extend(target[key], src[key]);
          }
      });
  }

  const ssrDocument = {
      body: {},
      addEventListener() { },
      removeEventListener() { },
      activeElement: {
          blur() { },
          nodeName: '',
      },
      querySelector() {
          return null;
      },
      querySelectorAll() {
          return [];
      },
      getElementById() {
          return null;
      },
      createEvent() {
          return {
              initEvent() { },
          };
      },
      createElement() {
          return {
              children: [],
              childNodes: [],
              style: {},
              setAttribute() { },
              getElementsByTagName() {
                  return [];
              },
          };
      },
      createElementNS() {
          return {};
      },
      importNode() {
          return null;
      },
      location: {
          hash: '',
          host: '',
          hostname: '',
          href: '',
          origin: '',
          pathname: '',
          protocol: '',
          search: '',
      },
  };
  function getDocument() {
      const doc = typeof document !== 'undefined' ? document : {};
      extend(doc, ssrDocument);
      return doc;
  }

  const ssrWindow = {
      document: ssrDocument,
      navigator: {
          userAgent: '',
      },
      location: {
          hash: '',
          host: '',
          hostname: '',
          href: '',
          origin: '',
          pathname: '',
          protocol: '',
          search: '',
      },
      history: {
          replaceState() { },
          pushState() { },
          go() { },
          back() { },
      },
      CustomEvent: function CustomEvent() {
          return this;
      },
      addEventListener() { },
      removeEventListener() { },
      getComputedStyle() {
          return {
              getPropertyValue() {
                  return '';
              },
          };
      },
      Image() { },
      Date() { },
      screen: {},
      setTimeout() { },
      clearTimeout() { },
      matchMedia() {
          return {};
      },
      requestAnimationFrame(callback) {
          if (typeof setTimeout === 'undefined') {
              callback();
              return null;
          }
          return setTimeout(callback, 0);
      },
      cancelAnimationFrame(id) {
          if (typeof setTimeout === 'undefined') {
              return;
          }
          clearTimeout(id);
      },
  };
  function getWindow() {
      const win = typeof window !== 'undefined' ? window : {};
      extend(win, ssrWindow);
      return win;
  }

  /**
   * Dom7 4.0.6
   * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API
   * https://framework7.io/docs/dom7.html
   *
   * Copyright 2023, Vladimir Kharlampidi
   *
   * Licensed under MIT
   *
   * Released on: February 2, 2023
   */

  /* eslint-disable no-proto */
  function makeReactive(obj) {
    const proto = obj.__proto__;
    Object.defineProperty(obj, '__proto__', {
      get() {
        return proto;
      },

      set(value) {
        proto.__proto__ = value;
      }

    });
  }

  class Dom7 extends Array {
    constructor(items) {
      if (typeof items === 'number') {
        super(items);
      } else {
        super(...(items || []));
        makeReactive(this);
      }
    }

  }

  function arrayFlat(arr = []) {
    const res = [];
    arr.forEach(el => {
      if (Array.isArray(el)) {
        res.push(...arrayFlat(el));
      } else {
        res.push(el);
      }
    });
    return res;
  }
  function arrayFilter(arr, callback) {
    return Array.prototype.filter.call(arr, callback);
  }
  function arrayUnique(arr) {
    const uniqueArray = [];

    for (let i = 0; i < arr.length; i += 1) {
      if (uniqueArray.indexOf(arr[i]) === -1) uniqueArray.push(arr[i]);
    }

    return uniqueArray;
  }
  function toCamelCase(string) {
    return string.toLowerCase().replace(/-(.)/g, (match, group) => group.toUpperCase());
  }

  // eslint-disable-next-line

  function qsa(selector, context) {
    if (typeof selector !== 'string') {
      return [selector];
    }

    const a = [];
    const res = context.querySelectorAll(selector);

    for (let i = 0; i < res.length; i += 1) {
      a.push(res[i]);
    }

    return a;
  }

  function $$1(selector, context) {
    const window = getWindow();
    const document = getDocument();
    let arr = [];

    if (!context && selector instanceof Dom7) {
      return selector;
    }

    if (!selector) {
      return new Dom7(arr);
    }

    if (typeof selector === 'string') {
      const html = selector.trim();

      if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {
        let toCreate = 'div';
        if (html.indexOf('<li') === 0) toCreate = 'ul';
        if (html.indexOf('<tr') === 0) toCreate = 'tbody';
        if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) toCreate = 'tr';
        if (html.indexOf('<tbody') === 0) toCreate = 'table';
        if (html.indexOf('<option') === 0) toCreate = 'select';
        const tempParent = document.createElement(toCreate);
        tempParent.innerHTML = html;

        for (let i = 0; i < tempParent.childNodes.length; i += 1) {
          arr.push(tempParent.childNodes[i]);
        }
      } else {
        arr = qsa(selector.trim(), context || document);
      } // arr = qsa(selector, document);

    } else if (selector.nodeType || selector === window || selector === document) {
      arr.push(selector);
    } else if (Array.isArray(selector)) {
      if (selector instanceof Dom7) return selector;
      arr = selector;
    }

    return new Dom7(arrayUnique(arr));
  }

  $$1.fn = Dom7.prototype;

  // eslint-disable-next-line

  function addClass(...classes) {
    const classNames = arrayFlat(classes.map(c => c.split(' ')));
    this.forEach(el => {
      el.classList.add(...classNames);
    });
    return this;
  }

  function removeClass(...classes) {
    const classNames = arrayFlat(classes.map(c => c.split(' ')));
    this.forEach(el => {
      el.classList.remove(...classNames);
    });
    return this;
  }

  function hasClass(...classes) {
    const classNames = arrayFlat(classes.map(c => c.split(' ')));
    return arrayFilter(this, el => {
      return classNames.filter(className => el.classList.contains(className)).length > 0;
    }).length > 0;
  }

  function attr(attrs, value) {
    if (arguments.length === 1 && typeof attrs === 'string') {
      // Get attr
      if (this[0]) return this[0].getAttribute(attrs);
      return undefined;
    } // Set attrs


    for (let i = 0; i < this.length; i += 1) {
      if (arguments.length === 2) {
        // String
        this[i].setAttribute(attrs, value);
      } else {
        // Object
        for (const attrName in attrs) {
          this[i][attrName] = attrs[attrName];
          this[i].setAttribute(attrName, attrs[attrName]);
        }
      }
    }

    return this;
  }

  function removeAttr(attr) {
    for (let i = 0; i < this.length; i += 1) {
      this[i].removeAttribute(attr);
    }

    return this;
  }

  function data(key, value) {
    let el;

    if (typeof value === 'undefined') {
      el = this[0];
      if (!el) return undefined; // Get value

      if (el.dom7ElementDataStorage && key in el.dom7ElementDataStorage) {
        return el.dom7ElementDataStorage[key];
      }

      const dataKey = el.getAttribute(`data-${key}`);

      if (dataKey) {
        return dataKey;
      }

      return undefined;
    } // Set value


    for (let i = 0; i < this.length; i += 1) {
      el = this[i];
      if (!el.dom7ElementDataStorage) el.dom7ElementDataStorage = {};
      el.dom7ElementDataStorage[key] = value;
    }

    return this;
  }

  function dataset() {
    const el = this[0];
    if (!el) return undefined;
    const dataset = {}; // eslint-disable-line

    if (el.dataset) {
      for (const dataKey in el.dataset) {
        dataset[dataKey] = el.dataset[dataKey];
      }
    } else {
      for (let i = 0; i < el.attributes.length; i += 1) {
        const attr = el.attributes[i];

        if (attr.name.indexOf('data-') >= 0) {
          dataset[toCamelCase(attr.name.split('data-')[1])] = attr.value;
        }
      }
    }

    for (const key in dataset) {
      if (dataset[key] === 'false') dataset[key] = false;else if (dataset[key] === 'true') dataset[key] = true;else if (parseFloat(dataset[key]) === dataset[key] * 1) dataset[key] *= 1;
    }

    return dataset;
  }

  function val(value) {
    if (typeof value === 'undefined') {
      // get value
      const el = this[0];
      if (!el) return undefined;

      if (el.multiple && el.nodeName.toLowerCase() === 'select') {
        const values = [];

        for (let i = 0; i < el.selectedOptions.length; i += 1) {
          values.push(el.selectedOptions[i].value);
        }

        return values;
      }

      return el.value;
    } // set value


    for (let i = 0; i < this.length; i += 1) {
      const el = this[i];

      if (Array.isArray(value) && el.multiple && el.nodeName.toLowerCase() === 'select') {
        for (let j = 0; j < el.options.length; j += 1) {
          el.options[j].selected = value.indexOf(el.options[j].value) >= 0;
        }
      } else {
        el.value = value;
      }
    }

    return this;
  }

  function on(...args) {
    let [eventType, targetSelector, listener, capture] = args;

    if (typeof args[1] === 'function') {
      [eventType, listener, capture] = args;
      targetSelector = undefined;
    }

    if (!capture) capture = false;

    function handleLiveEvent(e) {
      const target = e.target;
      if (!target) return;
      const eventData = e.target.dom7EventData || [];

      if (eventData.indexOf(e) < 0) {
        eventData.unshift(e);
      }

      if ($$1(target).is(targetSelector)) listener.apply(target, eventData);else {
        const parents = $$1(target).parents(); // eslint-disable-line

        for (let k = 0; k < parents.length; k += 1) {
          if ($$1(parents[k]).is(targetSelector)) listener.apply(parents[k], eventData);
        }
      }
    }

    function handleEvent(e) {
      const eventData = e && e.target ? e.target.dom7EventData || [] : [];

      if (eventData.indexOf(e) < 0) {
        eventData.unshift(e);
      }

      listener.apply(this, eventData);
    }

    const events = eventType.split(' ');
    let j;

    for (let i = 0; i < this.length; i += 1) {
      const el = this[i];

      if (!targetSelector) {
        for (j = 0; j < events.length; j += 1) {
          const event = events[j];
          if (!el.dom7Listeners) el.dom7Listeners = {};
          if (!el.dom7Listeners[event]) el.dom7Listeners[event] = [];
          el.dom7Listeners[event].push({
            listener,
            proxyListener: handleEvent
          });
          el.addEventListener(event, handleEvent, capture);
        }
      } else {
        // Live events
        for (j = 0; j < events.length; j += 1) {
          const event = events[j];
          if (!el.dom7LiveListeners) el.dom7LiveListeners = {};
          if (!el.dom7LiveListeners[event]) el.dom7LiveListeners[event] = [];
          el.dom7LiveListeners[event].push({
            listener,
            proxyListener: handleLiveEvent
          });
          el.addEventListener(event, handleLiveEvent, capture);
        }
      }
    }

    return this;
  }

  function off(...args) {
    let [eventType, targetSelector, listener, capture] = args;

    if (typeof args[1] === 'function') {
      [eventType, listener, capture] = args;
      targetSelector = undefined;
    }

    if (!capture) capture = false;
    const events = eventType.split(' ');

    for (let i = 0; i < events.length; i += 1) {
      const event = events[i];

      for (let j = 0; j < this.length; j += 1) {
        const el = this[j];
        let handlers;

        if (!targetSelector && el.dom7Listeners) {
          handlers = el.dom7Listeners[event];
        } else if (targetSelector && el.dom7LiveListeners) {
          handlers = el.dom7LiveListeners[event];
        }

        if (handlers && handlers.length) {
          for (let k = handlers.length - 1; k >= 0; k -= 1) {
            const handler = handlers[k];

            if (listener && handler.listener === listener) {
              el.removeEventListener(event, handler.proxyListener, capture);
              handlers.splice(k, 1);
            } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {
              el.removeEventListener(event, handler.proxyListener, capture);
              handlers.splice(k, 1);
            } else if (!listener) {
              el.removeEventListener(event, handler.proxyListener, capture);
              handlers.splice(k, 1);
            }
          }
        }
      }
    }

    return this;
  }

  function width() {
    const window = getWindow();

    if (this[0] === window) {
      return window.innerWidth;
    }

    if (this.length > 0) {
      return parseFloat(this.css('width'));
    }

    return null;
  }

  function height() {
    const window = getWindow();

    if (this[0] === window) {
      return window.innerHeight;
    }

    if (this.length > 0) {
      return parseFloat(this.css('height'));
    }

    return null;
  }

  function offset() {
    if (this.length > 0) {
      const window = getWindow();
      const document = getDocument();
      const el = this[0];
      const box = el.getBoundingClientRect();
      const body = document.body;
      const clientTop = el.clientTop || body.clientTop || 0;
      const clientLeft = el.clientLeft || body.clientLeft || 0;
      const scrollTop = el === window ? window.scrollY : el.scrollTop;
      const scrollLeft = el === window ? window.scrollX : el.scrollLeft;
      return {
        top: box.top + scrollTop - clientTop,
        left: box.left + scrollLeft - clientLeft
      };
    }

    return null;
  }

  function hide() {
    for (let i = 0; i < this.length; i += 1) {
      this[i].style.display = 'none';
    }

    return this;
  }

  function show() {
    const window = getWindow();

    for (let i = 0; i < this.length; i += 1) {
      const el = this[i];

      if (el.style.display === 'none') {
        el.style.display = '';
      }

      if (window.getComputedStyle(el, null).getPropertyValue('display') === 'none') {
        // Still not visible
        el.style.display = 'block';
      }
    }

    return this;
  }

  function css(props, value) {
    const window = getWindow();
    let i;

    if (arguments.length === 1) {
      if (typeof props === 'string') {
        // .css('width')
        if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(props);
      } else {
        // .css({ width: '100px' })
        for (i = 0; i < this.length; i += 1) {
          for (const prop in props) {
            this[i].style[prop] = props[prop];
          }
        }

        return this;
      }
    }

    if (arguments.length === 2 && typeof props === 'string') {
      // .css('width', '100px')
      for (i = 0; i < this.length; i += 1) {
        this[i].style[props] = value;
      }

      return this;
    }

    return this;
  }

  function each(callback) {
    if (!callback) return this;
    this.forEach((el, index) => {
      callback.apply(el, [el, index]);
    });
    return this;
  }

  function filter(callback) {
    const result = arrayFilter(this, callback);
    return $$1(result);
  }

  function html(html) {
    if (typeof html === 'undefined') {
      return this[0] ? this[0].innerHTML : null;
    }

    for (let i = 0; i < this.length; i += 1) {
      this[i].innerHTML = html;
    }

    return this;
  }

  function text(text) {
    if (typeof text === 'undefined') {
      return this[0] ? this[0].textContent.trim() : null;
    }

    for (let i = 0; i < this.length; i += 1) {
      this[i].textContent = text;
    }

    return this;
  }

  function is$5(selector) {
    const window = getWindow();
    const document = getDocument();
    const el = this[0];
    let compareWith;
    let i;
    if (!el || typeof selector === 'undefined') return false;

    if (typeof selector === 'string') {
      if (el.matches) return el.matches(selector);
      if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);
      if (el.msMatchesSelector) return el.msMatchesSelector(selector);
      compareWith = $$1(selector);

      for (i = 0; i < compareWith.length; i += 1) {
        if (compareWith[i] === el) return true;
      }

      return false;
    }

    if (selector === document) {
      return el === document;
    }

    if (selector === window) {
      return el === window;
    }

    if (selector.nodeType || selector instanceof Dom7) {
      compareWith = selector.nodeType ? [selector] : selector;

      for (i = 0; i < compareWith.length; i += 1) {
        if (compareWith[i] === el) return true;
      }

      return false;
    }

    return false;
  }

  function append(...els) {
    let newChild;
    const document = getDocument();

    for (let k = 0; k < els.length; k += 1) {
      newChild = els[k];

      for (let i = 0; i < this.length; i += 1) {
        if (typeof newChild === 'string') {
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = newChild;

          while (tempDiv.firstChild) {
            this[i].appendChild(tempDiv.firstChild);
          }
        } else if (newChild instanceof Dom7) {
          for (let j = 0; j < newChild.length; j += 1) {
            this[i].appendChild(newChild[j]);
          }
        } else {
          this[i].appendChild(newChild);
        }
      }
    }

    return this;
  }

  function prepend(newChild) {
    const document = getDocument();
    let i;
    let j;

    for (i = 0; i < this.length; i += 1) {
      if (typeof newChild === 'string') {
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = newChild;

        for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {
          this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);
        }
      } else if (newChild instanceof Dom7) {
        for (j = 0; j < newChild.length; j += 1) {
          this[i].insertBefore(newChild[j], this[i].childNodes[0]);
        }
      } else {
        this[i].insertBefore(newChild, this[i].childNodes[0]);
      }
    }

    return this;
  }

  function parent(selector) {
    const parents = []; // eslint-disable-line

    for (let i = 0; i < this.length; i += 1) {
      if (this[i].parentNode !== null) {
        if (selector) {
          if ($$1(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);
        } else {
          parents.push(this[i].parentNode);
        }
      }
    }

    return $$1(parents);
  }

  function parents(selector) {
    const parents = []; // eslint-disable-line

    for (let i = 0; i < this.length; i += 1) {
      let parent = this[i].parentNode; // eslint-disable-line

      while (parent) {
        if (selector) {
          if ($$1(parent).is(selector)) parents.push(parent);
        } else {
          parents.push(parent);
        }

        parent = parent.parentNode;
      }
    }

    return $$1(parents);
  }

  function find(selector) {
    const foundElements = [];

    for (let i = 0; i < this.length; i += 1) {
      const found = this[i].querySelectorAll(selector);

      for (let j = 0; j < found.length; j += 1) {
        foundElements.push(found[j]);
      }
    }

    return $$1(foundElements);
  }

  function children(selector) {
    const children = []; // eslint-disable-line

    for (let i = 0; i < this.length; i += 1) {
      const childNodes = this[i].children;

      for (let j = 0; j < childNodes.length; j += 1) {
        if (!selector || $$1(childNodes[j]).is(selector)) {
          children.push(childNodes[j]);
        }
      }
    }

    return $$1(children);
  }

  function remove() {
    for (let i = 0; i < this.length; i += 1) {
      if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);
    }

    return this;
  }

  function empty() {
    for (let i = 0; i < this.length; i += 1) {
      const el = this[i];

      if (el.nodeType === 1) {
        for (let j = 0; j < el.childNodes.length; j += 1) {
          if (el.childNodes[j].parentNode) {
            el.childNodes[j].parentNode.removeChild(el.childNodes[j]);
          }
        }

        el.textContent = '';
      }
    }

    return this;
  }

  const noTrigger = 'resize scroll'.split(' ');

  function shortcut(name) {
    function eventHandler(...args) {
      if (typeof args[0] === 'undefined') {
        for (let i = 0; i < this.length; i += 1) {
          if (noTrigger.indexOf(name) < 0) {
            if (name in this[i]) this[i][name]();else {
              $$1(this[i]).trigger(name);
            }
          }
        }

        return this;
      }

      return this.on(name, ...args);
    }

    return eventHandler;
  }

  const click = shortcut('click');
  const focus = shortcut('focus');

  /**
   * List of HTML void tag names.
   *
   * @type {Array<string>}
   */
  const htmlVoidElements = [
    'area',
    'base',
    'basefont',
    'bgsound',
    'br',
    'col',
    'command',
    'embed',
    'frame',
    'hr',
    'image',
    'img',
    'input',
    'keygen',
    'link',
    'meta',
    'param',
    'source',
    'track',
    'wbr'
  ];

  const urlAlphabet =
    'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict';

  /* @ts-self-types="./index.d.ts" */
  let nanoid = (size = 21) => {
    let id = '';
    let bytes = crypto.getRandomValues(new Uint8Array((size |= 0)));
    while (size--) {
      id += urlAlphabet[bytes[size] & 63];
    }
    return id
  };

  /**
   * @description 工具函数
   * @author wangfupeng
   */
  function promiseResolveThen(fn) {
      Promise.resolve().then(fn);
  }
  /**
   * 追加 url query 参数
   * @param url url
   * @param data data
   */
  function addQueryToUrl(url, data) {
      var _a = __read(url.split('#'), 2), urlWithoutHash = _a[0], hash = _a[1];
      // 拼接 query string
      var queryArr = [];
      forEach(data, function (val, key) {
          queryArr.push("".concat(key, "=").concat(val));
      });
      var queryStr = queryArr.join('&');
      // 拼接到 url
      if (urlWithoutHash.indexOf('?') > 0) {
          // 已有 query
          urlWithoutHash = "".concat(urlWithoutHash, "&").concat(queryStr);
      }
      else {
          // 没有 query
          urlWithoutHash = "".concat(urlWithoutHash, "?").concat(queryStr);
      }
      // 返回拼接好的 url
      if (hash) {
          return "".concat(urlWithoutHash, "#").concat(hash);
      }
      else {
          return urlWithoutHash;
      }
  }
  /**
   * 替换 html 特殊字符，如 > 替换为 &gt;
   * @param str html str
   */
  function replaceHtmlSpecialSymbols(str) {
      return (str
          /**
           * 遇到两个空格时才替换，一个空格不替换
           * 两个英文单词之间有一个空格，就不用替换，否则无法默认换行 issue #4403
           */
          .replace(/ {2}/g, ' &nbsp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/®/g, '&reg;')
          .replace(/©/g, '&copy;')
          .replace(/™/g, '&trade;'));
  }
  /**
   *【反转】替换 html 特殊字符，如 &gt; 替换为 >
   * @param str html str
   */
  function deReplaceHtmlSpecialSymbols(str) {
      return str
          .replace(/&nbsp;/g, ' ')
          .replace(/&lt;/g, '<')
          .replace(/&gt;/g, '>')
          .replace(/&reg;/g, '®')
          .replace(/&copy;/g, '©')
          .replace(/&trade;/g, '™')
          .replace(/&quot;/g, '"');
  }
  var toString = function (val) { return Object.prototype.toString.call(val); };

  /**
   * @description DOM 操作 part1 - DOM7 文档 https://framework7.io/docs/dom7.html
   * @author wangfupeng
   */
  if (css) {
      $$1.fn.css = css;
  }
  if (append) {
      $$1.fn.append = append;
  }
  if (addClass) {
      $$1.fn.addClass = addClass;
  }
  if (removeClass) {
      $$1.fn.removeClass = removeClass;
  }
  if (hasClass) {
      $$1.fn.hasClass = hasClass;
  }
  if (on) {
      $$1.fn.on = on;
  }
  if (focus) {
      $$1.fn.focus = focus;
  }
  if (attr) {
      $$1.fn.attr = attr;
  }
  if (removeAttr) {
      $$1.fn.removeAttr = removeAttr;
  }
  if (hide) {
      $$1.fn.hide = hide;
  }
  if (show) {
      $$1.fn.show = show;
  }
  // if (scrollTop) $.fn.scrollTop = scrollTop
  // if (scrollLeft) $.fn.scrollLeft = scrollLeft
  if (offset) {
      $$1.fn.offset = offset;
  }
  if (width) {
      $$1.fn.width = width;
  }
  if (height) {
      $$1.fn.height = height;
  }
  if (parent) {
      $$1.fn.parent = parent;
  }
  if (parents) {
      $$1.fn.parents = parents;
  }
  if (is$5) {
      $$1.fn.is = is$5;
  }
  if (dataset) {
      $$1.fn.dataset = dataset;
  }
  if (val) {
      $$1.fn.val = val;
  }
  if (text) {
      $$1.fn.text = text;
  }
  if (html) {
      $$1.fn.html = html;
  }
  if (children) {
      $$1.fn.children = children;
  }
  if (remove) {
      $$1.fn.remove = remove;
  }
  if (find) {
      $$1.fn.find = find;
  }
  if (each) {
      $$1.fn.each = each;
  }
  if (empty) {
      $$1.fn.empty = empty;
  }
  var NodeType;
  (function (NodeType) {
      NodeType[NodeType["ELEMENT_NODE"] = 1] = "ELEMENT_NODE";
      NodeType[NodeType["TEXT_NODE"] = 3] = "TEXT_NODE";
      NodeType[NodeType["CDATA_SECTION_NODE"] = 4] = "CDATA_SECTION_NODE";
      NodeType[NodeType["PROCESSING_INSTRUCTION_NODE"] = 7] = "PROCESSING_INSTRUCTION_NODE";
      NodeType[NodeType["COMMENT_NODE"] = 8] = "COMMENT_NODE";
      NodeType[NodeType["DOCUMENT_NODE"] = 9] = "DOCUMENT_NODE";
      NodeType[NodeType["DOCUMENT_TYPE_NODE"] = 10] = "DOCUMENT_TYPE_NODE";
      NodeType[NodeType["DOCUMENT_FRAGMENT_NODE"] = 11] = "DOCUMENT_FRAGMENT_NODE";
  })(NodeType || (NodeType = {}));
  var isDocument = function (value) {
      return toString(value) === '[object HTMLDocument]';
  };
  var isShadowRoot = function (value) {
      return toString(value) === '[object ShadowRoot]';
  };
  var isDataTransfer = function (value) {
      return toString(value) === '[object DataTransfer]';
  };
  var HTML_ELEMENT_STR_REG_EXP = /\[object HTML([A-Z][a-z]*)*Element\]/;
  var isUnprocessedListElement = function (el) {
      return 'matches' in el && /^[ou]l$/i.test(el.tagName) && !el.hasAttribute('data-w-e-type');
  };
  var isHTMLElememt = function (value) {
      return HTML_ELEMENT_STR_REG_EXP.test(toString(value));
  };
  /**
   * Returns the host window of a DOM node
   */
  var getDefaultView = function (value) {
      return (value && value.ownerDocument && value.ownerDocument.defaultView) || null;
  };
  /**
   * Check if a value is a DOM node.
   */
  var isDOMNode = function (value) {
      return value != null && typeof value.nodeType === 'number';
  };
  /**
   * Check if a DOM node is a comment node.
   */
  var isDOMComment = function (value) {
      return isDOMNode(value) && value.nodeType === NodeType.COMMENT_NODE;
  };
  /**
   * Check if a DOM node is an element node.
   */
  var isDOMElement = function (value) {
      return isDOMNode(value) && value.nodeType === NodeType.ELEMENT_NODE;
  };
  /**
   * Check if a value is a DOM selection.
   */
  var isDOMSelection = function (value) {
      return toString(value) === '[object Selection]';
  };
  /**
   * Check if a DOM node is an element node.
   */
  var isDOMText = function (value) {
      return isDOMNode(value) && value.nodeType === NodeType.TEXT_NODE;
  };
  /**
   * Checks whether a paste event is a plaintext-only event.
   */
  var isPlainTextOnlyPaste = function (event) {
      return (event.clipboardData
          && event.clipboardData.getData('text/plain') !== ''
          && event.clipboardData.types.length === 1);
  };
  /**
   * Normalize a DOM point so that it always refers to a text node.
   */
  var normalizeDOMPoint = function (domPoint) {
      var _a;
      var _b = __read(domPoint, 2), node = _b[0], offset = _b[1];
      // If it's an element node, its offset refers to the index of its children
      // including comment nodes, so try to find the right text child node.
      if (isDOMElement(node) && node.childNodes.length) {
          var isLast = offset === node.childNodes.length;
          var index = isLast ? offset - 1 : offset;
          // eslint-disable-next-line @typescript-eslint/no-use-before-define
          _a = __read(getEditableChildAndIndex(node, index, isLast ? 'backward' : 'forward'), 2), node = _a[0], index = _a[1];
          // If the editable child found is in front of input offset, we instead seek to its end
          // 如果编辑区域的内容被发现在输入光标位置前面，也就是光标位置不正常，则修正光标的位置到结尾
          isLast = index < offset;
          // If the node has children, traverse until we have a leaf node. Leaf nodes
          // can be either text nodes, or other void DOM nodes.
          while (isDOMElement(node) && node.childNodes.length) {
              var i = isLast ? node.childNodes.length - 1 : 0;
              // eslint-disable-next-line @typescript-eslint/no-use-before-define
              node = getEditableChild(node, i, isLast ? 'backward' : 'forward');
          }
          // Determine the new offset inside the text node.
          offset = isLast && node.textContent != null ? node.textContent.length : 0;
      }
      // Return the node and offset.
      return [node, offset];
  };
  /**
   * Determines wether the active element is nested within a shadowRoot
   */
  var hasShadowRoot = function () {
      return !!(window.document.activeElement && window.document.activeElement.shadowRoot);
  };
  /**
   * Get the element with the specified id
   */
  var getElementById = function (id) {
      var _a, _b, _c;
      return ((_a = (window && window.document.getElementById(id))) !== null && _a !== void 0 ? _a : ((window && ((_c = (_b = window.document.activeElement) === null || _b === void 0 ? void 0 : _b.shadowRoot) === null || _c === void 0 ? void 0 : _c.getElementById(id))) || null));
  };
  /**
   * Get the nearest editable child and index at `index` in a `parent`, preferring `direction`.
   */
  var getEditableChildAndIndex = function (parent, index, direction) {
      var childNodes = parent.childNodes;
      var child = childNodes[index];
      var i = index;
      var triedForward = false;
      var triedBackward = false;
      // While the child is a comment node, or an element node with no children,
      // keep iterating to find a sibling non-void, non-comment node.
      while (isDOMComment(child)
          || (isDOMElement(child) && child.childNodes.length === 0)
          || (isDOMElement(child) && child.getAttribute('contenteditable') === 'false')) {
          if (triedForward && triedBackward) {
              break;
          }
          if (i >= childNodes.length) {
              triedForward = true;
              i = index - 1;
              direction = 'backward';
              continue;
          }
          if (i < 0) {
              triedBackward = true;
              i = index + 1;
              direction = 'forward';
              continue;
          }
          child = childNodes[i];
          index = i;
          i += direction === 'forward' ? 1 : -1;
      }
      return [child, index];
  };
  /**
   * Get the nearest editable child at `index` in a `parent`, preferring
   * `direction`.
   */
  var getEditableChild = function (parent, index, direction) {
      var _a = __read(getEditableChildAndIndex(parent, index, direction), 1), child = _a[0];
      return child;
  };
  /**
   * Get a plaintext representation of the content of a node, accounting for block
   * elements which get a newline appended.
   *
   * The domNode must be attached to the DOM.
   */
  var getPlainText = function (domNode) {
      var e_1, _a;
      var text = '';
      if (isDOMText(domNode) && domNode.nodeValue) {
          return domNode.nodeValue;
      }
      if (isDOMElement(domNode)) {
          try {
              for (var _b = __values(Array.from(domNode.childNodes)), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var childNode = _c.value;
                  text += getPlainText(childNode);
              }
          }
          catch (e_1_1) { e_1 = { error: e_1_1 }; }
          finally {
              try {
                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
              }
              finally { if (e_1) throw e_1.error; }
          }
          var display = getComputedStyle(domNode).getPropertyValue('display');
          if (display === 'block'
              || display === 'list'
              || display === 'table-row'
              || domNode.tagName === 'BR') {
              text += '\n';
          }
      }
      return text;
  };
  /**
   * 在下级节点中找到第一个 void elem
   * @param elem elem
   */
  function getFirstVoidChild(elem) {
      // 深度优先遍历
      var stack = [];
      stack.push(elem);
      var num = 0;
      // 开始遍历
      while (stack.length > 0) {
          var curElem = stack.pop();
          if (curElem == null) {
              break;
          }
          num += 1;
          if (num > 10000) {
              break;
          }
          var nodeName = curElem.nodeName, nodeType = curElem.nodeType;
          if (nodeType === NodeType.ELEMENT_NODE) {
              var name_1 = nodeName.toLowerCase();
              if (htmlVoidElements.includes(name_1)
                  // 补充一些
                  || name_1 === 'iframe'
                  || name_1 === 'video') {
                  return curElem; // 得到 void elem 并返回
              }
              // 继续遍历子节点
              var children = curElem.children || [];
              var length_1 = children.length;
              if (length_1) {
                  for (var i = length_1 - 1; i >= 0; i -= 1) {
                      // 注意，需要**逆序**追加自节点
                      stack.push(children[i]);
                  }
              }
          }
      }
      // 未找到结果，返回 null
      return null;
  }
  /**
   * 遍历一个 elem 内所有的 text node ，执行函数
   * @param elem elem
   * @param handler handler
   */
  function walkTextNodes(elem, handler) {
      // void elem 内部的 text 不处理
      if (isHTMLElememt(elem) && elem.dataset.slateVoid === 'true') {
          return;
      }
      // eslint-disable-next-line no-cond-assign
      for (var nodes = elem.childNodes, i = nodes.length; i -= 1;) {
          var node = nodes[i];
          var nodeType = node.nodeType;
          if (isDOMText(node)) {
              // 匹配到 text node ，执行函数
              handler(node, elem);
          }
          else if ([NodeType.ELEMENT_NODE, NodeType.DOCUMENT_NODE, NodeType.DOCUMENT_FRAGMENT_NODE].includes(nodeType)) {
              // 继续遍历子节点
              walkTextNodes(node, handler);
          }
      }
  }
  /**
   * 获取 tagName lower-case
   * @param $elem $elem
   */
  function getTagName$4($elem) {
      if ($elem.length === 0) {
          return '';
      }
      var elem = $elem[0];
      if (elem.nodeType !== NodeType.ELEMENT_NODE) {
          return '';
      }
      return elem.tagName.toLowerCase();
  }

  /**
   * @description parse-html helper fns
   * @author wangfupeng
   */
  var REPLACE_SPACE_160_REG = new RegExp(String.fromCharCode(160), 'g');
  /**
   * 把 charCode 160 的空格（`&nbsp` 转换的），替换为 charCode 32 的空格（JS 默认的）
   * @param str str
   * @returns str
   */
  function replaceSpace160(str) {
      var res = str.replace(REPLACE_SPACE_160_REG, ' ');
      return res;
  }

  /**
   * @description parse html
   * @author wangfupeng
   */
  // 常见的 text tag
  var TEXT_TAGS = [
      'span',
      'b',
      'strong',
      'i',
      'em',
      's',
      'strike',
      'u',
      'font',
      'sub',
      'sup',
  ];
  var PRE_PARSE_HTML_CONF_LIST = [];
  /**
   * 注册 pre-parse html 配置
   * @param conf pre-parse html conf
   */
  function registerPreParseHtmlConf(conf) {
      PRE_PARSE_HTML_CONF_LIST.push(conf);
  }
  var PARSE_STYLE_HTML_FN_LIST = [];
  /**
   * 注册 parseStyleHtml 函数
   * @param fn parse style html 的函数
   */
  function registerParseStyleHtmlHandler(fn) {
      PARSE_STYLE_HTML_FN_LIST.push(fn);
  }
  var PARSE_ELEM_HTML_CONF = {};
  function registerParseElemHtmlConf(conf) {
      var selector = conf.selector, parseElemHtml = conf.parseElemHtml;
      PARSE_ELEM_HTML_CONF[selector] = parseElemHtml;
  }

  /**
   * @description parse elem html
   * @author wangfupeng
   */
  /**
   * 往 children 最后一个 item（如果是 text node） 插入文字
   * @param children children
   * @param str str
   * @returns 是否插入成功
   */
  function tryInsertTextToChildrenLastItem(children, str) {
      var len = children.length;
      if (len) {
          var lastItem = children[len - 1];
          if (distExports$1.Text.isText(lastItem)) {
              var keys = Object.keys(lastItem);
              if (keys.length === 1 && keys[0] === 'text') {
                  // lastItem 必须是纯文本，没有 marks
                  lastItem.text += str;
                  return true;
              }
          }
      }
      return false;
  }
  /**
   * 生成 slate node children
   * @param $elem $elem
   * @param editor editor
   */
  function genChildren($elem, editor) {
      var children = [];
      // void node（ html 中编辑的，如 video 的 html 中会有 data-w-e-is-void 属性 ），不需要生成 children
      var isVoid = $elem.attr('data-w-e-is-void') != null;
      if (isVoid) {
          return children;
      }
      var childNodes = $elem[0].childNodes;
      // 处理空行（只有一个 child ，是 <br>）
      if (childNodes.length === 1) {
          if (childNodes[0].nodeName === 'BR') {
              children.push({ text: '' });
              return children; // 直接返回
          }
      }
      // 遍历 DOM 子节点，生成 slate elem node children
      childNodes.forEach(function (child) {
          if (isDOMElement(child)) {
              // <br> ，则往 children 最后一个元素（如果是 text ）追加 `\n`
              if (child.nodeName === 'BR') {
                  // 尝试把 text 插入到最后一个 children
                  var res = tryInsertTextToChildrenLastItem(children, '\n');
                  if (!res) {
                      // 若插入失败，则新建 item
                      children.push({ text: '\n' });
                  }
                  return;
              }
              // 其他 elem
              var $child = $$1(child);
              var parsedRes = parseElemHtml($child, editor);
              if (Array.isArray(parsedRes)) {
                  parsedRes.forEach(function (el) { return children.push(el); });
              }
              else {
                  children.push(parsedRes);
              }
              return;
          }
          if (isDOMText(child)) {
              // text
              var text = child.textContent || '';
              if (text.trim() === '' && text.indexOf('\n') >= 0) {
                  // 有换行，但无实际内容
                  return;
              }
              if (text) {
                  // 把 charCode 160 的空格（`&nbsp` 转换的），替换为 charCode 32 的空格（JS 默认的）
                  text = replaceSpace160(text);
                  // 尝试把 text 插入到最后一个 children
                  var res = tryInsertTextToChildrenLastItem(children, text);
                  if (!res) {
                      // 若插入失败，则新建 item
                      children.push({ text: text });
                  }
              }
          }
      });
      return children;
  }
  /**
   * 默认的 parseElemHtml ，直接转换为 paragraph
   * @param elem elem
   * @param children children
   */
  function defaultParser$1(elem, _children, _editor) {
      return {
          type: 'paragraph',
          children: [{ text: $$1(elem).text().replace(/\s+/gm, ' ') }],
      };
  }
  /**
   * 获取当前 html 元素的 parseElemHtml 函数
   * @param $elem $elem
   */
  function getParser$1($elem) {
      for (var selector in PARSE_ELEM_HTML_CONF) {
          if ($elem[0].matches(selector)) {
              return PARSE_ELEM_HTML_CONF[selector];
          }
      }
      return defaultParser$1;
  }
  /**
   * 处理普通 DOM elem html ，非 span font 等文本 elem
   * @param $elem $elem
   * @param editor editor
   * @returns slate element
   */
  function parseCommonElemHtml($elem, editor) {
      var children = genChildren($elem, editor);
      // parse
      var parser = getParser$1($elem);
      var parsedRes = parser($elem[0], children, editor);
      if (!Array.isArray(parsedRes)) {
          parsedRes = [parsedRes];
      } // 临时处理为数组
      parsedRes.forEach(function (elem) {
          var isVoid = distExports$1.Editor.isVoid(editor, elem);
          if (!isVoid) {
              // 非 void ，如果没有 children ，则取纯文本
              if (children.length === 0) {
                  elem.children = [{ text: $elem.text().replace(/\s+/gm, ' ') }];
              }
              // 处理 style
              PARSE_STYLE_HTML_FN_LIST.forEach(function (fn) {
                  elem = fn($elem[0], elem, editor);
              });
          }
      });
      return parsedRes;
  }

  /**
   * @description parse text html
   * @author wangfupeng
   */
  /**
   * 处理 text elem ，如 <span> <strong> <em> 等（并不是 DOM Text Node）
   * @param $text $text
   * @param editor editor
   * @returns slate text
   */
  function parseTextElemHtml($text, editor) {
      if ($text.parents('pre').length === 0) {
          // 不在 <pre> 内部
          // 1. 替换无用空格、换行； 2. 将 <br> 替换为 `\n`
          $text[0].innerHTML = $text[0].innerHTML.replace(/\s+/gm, ' ').replace(/<br>/g, '\n');
      }
      // 用 textContent ，不能用 .text() 。后者无法识别 text 开头和末尾的 &nbsp;
      var text = $text[0].textContent || '';
      // 【翻转】替换 html 特殊字符，如 &lt; 替换为 <
      text = deReplaceHtmlSpecialSymbols(text);
      // 把 charCode 160 的空格（`&nbsp` 转换的），替换为 charCode 32 的空格（JS 默认的）
      text = replaceSpace160(text);
      // 生成 text node
      var textNode = { text: text };
      // 处理 style
      PARSE_STYLE_HTML_FN_LIST.forEach(function (fn) {
          textNode = fn($text[0], textNode, editor);
      });
      return textNode;
  }
  function parseTextElemHtmlToStyle($text, editor) {
      var textNode = { text: '' };
      // 处理 style
      PARSE_STYLE_HTML_FN_LIST.forEach(function (fn) {
          textNode = fn($text[0], textNode, editor);
      });
      return textNode;
  }

  /**
   * @description parse node html
   * @author wangfupeng
   */
  function parseChildNode($childElem, parentStyle, editor) {
      var childNode = $childElem[0];
      if (isDOMElement(childNode)) {
          // eslint-disable-next-line @typescript-eslint/no-use-before-define
          var elem = parseElemHtml($childElem, editor);
          return Array.isArray(elem)
              ? elem.map(function (v) { return (__assign(__assign({}, parentStyle), v)); })
              : [__assign(__assign({}, parentStyle), elem)];
      }
      if (isDOMComment(childNode)) {
          return null;
      } // 过滤掉注释节点
      var text = isDOMText(childNode)
          ? { text: childNode.textContent || '' }
          : parseTextElemHtml($childElem, editor);
      return [__assign(__assign({}, parentStyle), text)];
  }
  /**
   * 处理 DOM Elem html
   * @param $elem $elem
   * @param editor editor
   * @returns slate Descendant
   */
  function parseElemHtml($elem, editor) {
      // pre-parse
      PRE_PARSE_HTML_CONF_LIST.forEach(function (conf) {
          var selector = conf.selector, preParseHtml = conf.preParseHtml;
          if ($elem[0].matches(selector)) {
              $elem = $$1(preParseHtml($elem[0]));
          }
      });
      var tagName = getTagName$4($elem);
      // <span> 判断有没有 data-w-e-type 属性。有则是 elem ，没有则是 text
      if (tagName === 'span') {
          if ($elem.attr('data-w-e-type')) {
              return parseCommonElemHtml($elem, editor);
          }
          if ($elem[0].childNodes.length > 1) {
              var childNodes = $elem[0].childNodes;
              var parentStyle_1 = parseTextElemHtmlToStyle($$1($elem[0]), editor);
              return Array.from(childNodes).flatMap(function (child) {
                  var parsed = parseChildNode($$1(child), parentStyle_1, editor);
                  return parsed || [];
              });
          }
          return parseTextElemHtml($elem, editor);
      }
      // <code> 特殊处理
      if (tagName === 'code') {
          var parentTagName = getTagName$4($elem.parent());
          if (parentTagName === 'pre') {
              // <code> 在 <pre> 内，则是 elem
              return parseCommonElemHtml($elem, editor);
          }
          // <code> 不在 <pre> 内，则是 text
          return parseTextElemHtml($elem, editor);
      }
      // 非 <code> ，正常处理
      if (TEXT_TAGS.includes(tagName)) {
          if ($elem[0].childNodes.length > 0 && $elem[0].childNodes[0].nodeType !== 3) {
              var childNodes = $elem[0].childNodes;
              return __assign(__assign({}, parseElemHtml($$1(childNodes[0]), editor)), parseTextElemHtml($elem, editor));
          }
          // text node
          return parseTextElemHtml($elem, editor);
      }
      // elem node
      return parseCommonElemHtml($elem, editor);
  }

  /**
   * @description create helper
   * @author wangfupeng
   */
  function isRepeatedCreate(editor, attrKey, selector) {
      // @ts-ignore
      var $elem = $$1(selector);
      if ($elem.attr(attrKey)) {
          return true; // 有属性，说明已经创建过
      }
      // 至此，说明未创建过，则记录
      $elem.attr(attrKey, 'true');
      // 销毁时删除属性
      editor.on(EditorEvents.DESTROYED, function () {
          $elem.removeAttr(attrKey);
      });
      return false;
  }
  /**
   * 检查是否重复创建 textarea
   */
  function isRepeatedCreateTextarea(editor, selector) {
      return isRepeatedCreate(editor, 'data-w-e-textarea', selector);
  }
  /**
   * 检查是否重复创建 toolbar
   */
  function isRepeatedCreateToolbar(editor, selector) {
      return isRepeatedCreate(editor, 'data-w-e-toolbar', selector);
  }
  /**
   * 生成默认 content
   */
  function genDefaultContent() {
      return [
          {
              type: 'paragraph',
              children: [{ text: '' }],
          },
      ];
  }
  /**
   * html 字符串 -> content
   * @param editor editor
   * @param html html 字符串
   */
  function htmlToContent(editor, html) {
      if (html === void 0) { html = ''; }
      var res = [];
      // 空白内容
      if (html === '') {
          html = '<p><br></p>';
      }
      // 非 HTML 格式，文本格式，用 <p> 包裹
      if (html.indexOf('<') !== 0) {
          html = html
              .split(/\n/)
              .map(function (line) { return "<p>".concat(line, "</p>"); })
              .join('');
      }
      var $content = $$1("<div>".concat(html, "</div>"));
      var list = Array.from($content.children());
      list.forEach(function (child) {
          var $child = $$1(child);
          var parsedRes = parseElemHtml($child, editor);
          if (Array.isArray(parsedRes)) {
              parsedRes.forEach(function (el) { return res.push(el); });
          }
          else {
              res.push(parsedRes);
          }
      });
      return res;
  }
  /**
   * 初始化内容（要在 config 和 plugins 后面）
   */
  function initializeContent(editor, options) {
      var html = options.html, content = options.content;
      // 初始化内容（要在 config 和 plugins 后面）
      if (html != null) {
          // 传入 html ，转换为 JSON content
          editor.children = htmlToContent(editor, html);
      }
      if (content && content.length) {
          editor.children = content; // 传入 JSON content
      }
      if (editor.children.length === 0) {
          editor.children = genDefaultContent(); // 默认内容
      }
  }

  /**
   * @description formats helper
   * @author wangfupeng
   */
  function genElemId$1(type, id) {
      return "w-e-element-".concat(type, "-").concat(id);
  }
  function genTextId(id) {
      return "w-e-text-".concat(id);
  }

  /**
   * @description to-html entry
   * @author wangfupeng
   */
  var STYLE_TO_HTML_FN_LIST = [];
  /**
   * 注册 toHtml 处理文本样式的函数
   * @param fn 处理 toHtml 文本样式的函数
   */
  function registerStyleToHtmlHandler(fn) {
      STYLE_TO_HTML_FN_LIST.push(fn);
  }
  // 注册 element->html 配置
  var ELEM_TO_HTML_CONF = {};
  /**
   * 注册 elem to html 函数
   * @param conf { type, elemToHtml } ，type 即 node.type
   */
  function registerElemToHtmlConf(conf) {
      var type = conf.type, elemToHtml = conf.elemToHtml;
      var key = type || '';
      // key 如果重复了，就后者覆盖前者
      ELEM_TO_HTML_CONF[key] = elemToHtml;
  }

  /**
   * @description elem -> html
   * @author wangfupeng
   */
  /**
   * 默认的 toHtml 函数
   * @param elemNode elem node
   * @param childrenHtml children html
   * @param editor editor
   */
  function defaultParser(elemNode, childrenHtml, editor) {
      var isInline = editor.isInline(elemNode);
      var tag = isInline ? 'span' : 'div';
      return "<".concat(tag, ">").concat(childrenHtml, "</").concat(tag, ">");
  }
  /**
   * 根据 type 获取 toHtml 函数
   * @param type node.type
   */
  function getParser(type) {
      var fn = ELEM_TO_HTML_CONF[type];
      return fn || defaultParser;
  }
  function elemToHtml$1(elemNode, editor) {
      var _a = elemNode.type, type = _a === void 0 ? '' : _a, _b = elemNode.children, children = _b === void 0 ? [] : _b;
      var isVoid = distExports$1.Editor.isVoid(editor, elemNode);
      // 计算 children html
      var childrenHtml = '';
      if (!isVoid) {
          // 非 void node
          childrenHtml = children.map(function (child) { return node2html(child, editor); }).join('');
      }
      // 生成 html
      var toHtmlFn = getParser(type);
      var res = toHtmlFn(elemNode, childrenHtml, editor);
      var elemHtml = '';
      if (typeof res === 'string')
          elemHtml = res;
      else
          elemHtml = res.html || '';
      // 添加样式（如 text-align line-height 等）
      if (!isVoid) {
          STYLE_TO_HTML_FN_LIST.forEach(function (fn) { return (elemHtml = fn(elemNode, elemHtml)); });
      }
      // 直接返回 html 字符串
      if (typeof res === 'string')
          return elemHtml;
      // 解析 prefix suffix （如 list-item）
      var _c = res.prefix, prefix = _c === void 0 ? '' : _c, _d = res.suffix, suffix = _d === void 0 ? '' : _d;
      if (prefix)
          elemHtml = prefix + elemHtml;
      if (suffix)
          elemHtml = elemHtml + suffix;
      return elemHtml;
  }

  /**
   * lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="npm" -o ./`
   * Copyright jQuery Foundation and other contributors <https://jquery.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */

  var lodash_toarray;
  var hasRequiredLodash_toarray;

  function requireLodash_toarray () {
  	if (hasRequiredLodash_toarray) return lodash_toarray;
  	hasRequiredLodash_toarray = 1;
  	/** Used as references for various `Number` constants. */
  	var MAX_SAFE_INTEGER = 9007199254740991;

  	/** `Object#toString` result references. */
  	var argsTag = '[object Arguments]',
  	    funcTag = '[object Function]',
  	    genTag = '[object GeneratorFunction]',
  	    mapTag = '[object Map]',
  	    objectTag = '[object Object]',
  	    promiseTag = '[object Promise]',
  	    setTag = '[object Set]',
  	    stringTag = '[object String]',
  	    weakMapTag = '[object WeakMap]';

  	var dataViewTag = '[object DataView]';

  	/**
  	 * Used to match `RegExp`
  	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
  	 */
  	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  	/** Used to detect host constructors (Safari). */
  	var reIsHostCtor = /^\[object .+?Constructor\]$/;

  	/** Used to detect unsigned integer values. */
  	var reIsUint = /^(?:0|[1-9]\d*)$/;

  	/** Used to compose unicode character classes. */
  	var rsAstralRange = '\\ud800-\\udfff',
  	    rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
  	    rsComboSymbolsRange = '\\u20d0-\\u20f0',
  	    rsVarRange = '\\ufe0e\\ufe0f';

  	/** Used to compose unicode capture groups. */
  	var rsAstral = '[' + rsAstralRange + ']',
  	    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
  	    rsFitz = '\\ud83c[\\udffb-\\udfff]',
  	    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
  	    rsNonAstral = '[^' + rsAstralRange + ']',
  	    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
  	    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
  	    rsZWJ = '\\u200d';

  	/** Used to compose unicode regexes. */
  	var reOptMod = rsModifier + '?',
  	    rsOptVar = '[' + rsVarRange + ']?',
  	    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
  	    rsSeq = rsOptVar + reOptMod + rsOptJoin,
  	    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  	/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  	var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  	/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  	var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

  	/** Detect free variable `global` from Node.js. */
  	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  	/** Detect free variable `self`. */
  	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  	/** Used as a reference to the global object. */
  	var root = freeGlobal || freeSelf || Function('return this')();

  	/**
  	 * A specialized version of `_.map` for arrays without support for iteratee
  	 * shorthands.
  	 *
  	 * @private
  	 * @param {Array} [array] The array to iterate over.
  	 * @param {Function} iteratee The function invoked per iteration.
  	 * @returns {Array} Returns the new mapped array.
  	 */
  	function arrayMap(array, iteratee) {
  	  var index = -1,
  	      length = array ? array.length : 0,
  	      result = Array(length);

  	  while (++index < length) {
  	    result[index] = iteratee(array[index], index, array);
  	  }
  	  return result;
  	}

  	/**
  	 * Converts an ASCII `string` to an array.
  	 *
  	 * @private
  	 * @param {string} string The string to convert.
  	 * @returns {Array} Returns the converted array.
  	 */
  	function asciiToArray(string) {
  	  return string.split('');
  	}

  	/**
  	 * The base implementation of `_.times` without support for iteratee shorthands
  	 * or max array length checks.
  	 *
  	 * @private
  	 * @param {number} n The number of times to invoke `iteratee`.
  	 * @param {Function} iteratee The function invoked per iteration.
  	 * @returns {Array} Returns the array of results.
  	 */
  	function baseTimes(n, iteratee) {
  	  var index = -1,
  	      result = Array(n);

  	  while (++index < n) {
  	    result[index] = iteratee(index);
  	  }
  	  return result;
  	}

  	/**
  	 * The base implementation of `_.values` and `_.valuesIn` which creates an
  	 * array of `object` property values corresponding to the property names
  	 * of `props`.
  	 *
  	 * @private
  	 * @param {Object} object The object to query.
  	 * @param {Array} props The property names to get values for.
  	 * @returns {Object} Returns the array of property values.
  	 */
  	function baseValues(object, props) {
  	  return arrayMap(props, function(key) {
  	    return object[key];
  	  });
  	}

  	/**
  	 * Gets the value at `key` of `object`.
  	 *
  	 * @private
  	 * @param {Object} [object] The object to query.
  	 * @param {string} key The key of the property to get.
  	 * @returns {*} Returns the property value.
  	 */
  	function getValue(object, key) {
  	  return object == null ? undefined : object[key];
  	}

  	/**
  	 * Checks if `string` contains Unicode symbols.
  	 *
  	 * @private
  	 * @param {string} string The string to inspect.
  	 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
  	 */
  	function hasUnicode(string) {
  	  return reHasUnicode.test(string);
  	}

  	/**
  	 * Checks if `value` is a host object in IE < 9.
  	 *
  	 * @private
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
  	 */
  	function isHostObject(value) {
  	  // Many host objects are `Object` objects that can coerce to strings
  	  // despite having improperly defined `toString` methods.
  	  var result = false;
  	  if (value != null && typeof value.toString != 'function') {
  	    try {
  	      result = !!(value + '');
  	    } catch (e) {}
  	  }
  	  return result;
  	}

  	/**
  	 * Converts `iterator` to an array.
  	 *
  	 * @private
  	 * @param {Object} iterator The iterator to convert.
  	 * @returns {Array} Returns the converted array.
  	 */
  	function iteratorToArray(iterator) {
  	  var data,
  	      result = [];

  	  while (!(data = iterator.next()).done) {
  	    result.push(data.value);
  	  }
  	  return result;
  	}

  	/**
  	 * Converts `map` to its key-value pairs.
  	 *
  	 * @private
  	 * @param {Object} map The map to convert.
  	 * @returns {Array} Returns the key-value pairs.
  	 */
  	function mapToArray(map) {
  	  var index = -1,
  	      result = Array(map.size);

  	  map.forEach(function(value, key) {
  	    result[++index] = [key, value];
  	  });
  	  return result;
  	}

  	/**
  	 * Creates a unary function that invokes `func` with its argument transformed.
  	 *
  	 * @private
  	 * @param {Function} func The function to wrap.
  	 * @param {Function} transform The argument transform.
  	 * @returns {Function} Returns the new function.
  	 */
  	function overArg(func, transform) {
  	  return function(arg) {
  	    return func(transform(arg));
  	  };
  	}

  	/**
  	 * Converts `set` to an array of its values.
  	 *
  	 * @private
  	 * @param {Object} set The set to convert.
  	 * @returns {Array} Returns the values.
  	 */
  	function setToArray(set) {
  	  var index = -1,
  	      result = Array(set.size);

  	  set.forEach(function(value) {
  	    result[++index] = value;
  	  });
  	  return result;
  	}

  	/**
  	 * Converts `string` to an array.
  	 *
  	 * @private
  	 * @param {string} string The string to convert.
  	 * @returns {Array} Returns the converted array.
  	 */
  	function stringToArray(string) {
  	  return hasUnicode(string)
  	    ? unicodeToArray(string)
  	    : asciiToArray(string);
  	}

  	/**
  	 * Converts a Unicode `string` to an array.
  	 *
  	 * @private
  	 * @param {string} string The string to convert.
  	 * @returns {Array} Returns the converted array.
  	 */
  	function unicodeToArray(string) {
  	  return string.match(reUnicode) || [];
  	}

  	/** Used for built-in method references. */
  	var funcProto = Function.prototype,
  	    objectProto = Object.prototype;

  	/** Used to detect overreaching core-js shims. */
  	var coreJsData = root['__core-js_shared__'];

  	/** Used to detect methods masquerading as native. */
  	var maskSrcKey = (function() {
  	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  	  return uid ? ('Symbol(src)_1.' + uid) : '';
  	}());

  	/** Used to resolve the decompiled source of functions. */
  	var funcToString = funcProto.toString;

  	/** Used to check objects for own properties. */
  	var hasOwnProperty = objectProto.hasOwnProperty;

  	/**
  	 * Used to resolve the
  	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
  	 * of values.
  	 */
  	var objectToString = objectProto.toString;

  	/** Used to detect if a method is native. */
  	var reIsNative = RegExp('^' +
  	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  	);

  	/** Built-in value references. */
  	var Symbol = root.Symbol,
  	    iteratorSymbol = Symbol ? Symbol.iterator : undefined,
  	    propertyIsEnumerable = objectProto.propertyIsEnumerable;

  	/* Built-in method references for those with the same name as other `lodash` methods. */
  	var nativeKeys = overArg(Object.keys, Object);

  	/* Built-in method references that are verified to be native. */
  	var DataView = getNative(root, 'DataView'),
  	    Map = getNative(root, 'Map'),
  	    Promise = getNative(root, 'Promise'),
  	    Set = getNative(root, 'Set'),
  	    WeakMap = getNative(root, 'WeakMap');

  	/** Used to detect maps, sets, and weakmaps. */
  	var dataViewCtorString = toSource(DataView),
  	    mapCtorString = toSource(Map),
  	    promiseCtorString = toSource(Promise),
  	    setCtorString = toSource(Set),
  	    weakMapCtorString = toSource(WeakMap);

  	/**
  	 * Creates an array of the enumerable property names of the array-like `value`.
  	 *
  	 * @private
  	 * @param {*} value The value to query.
  	 * @param {boolean} inherited Specify returning inherited property names.
  	 * @returns {Array} Returns the array of property names.
  	 */
  	function arrayLikeKeys(value, inherited) {
  	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  	  // Safari 9 makes `arguments.length` enumerable in strict mode.
  	  var result = (isArray(value) || isArguments(value))
  	    ? baseTimes(value.length, String)
  	    : [];

  	  var length = result.length,
  	      skipIndexes = !!length;

  	  for (var key in value) {
  	    if ((hasOwnProperty.call(value, key)) &&
  	        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
  	      result.push(key);
  	    }
  	  }
  	  return result;
  	}

  	/**
  	 * The base implementation of `getTag`.
  	 *
  	 * @private
  	 * @param {*} value The value to query.
  	 * @returns {string} Returns the `toStringTag`.
  	 */
  	function baseGetTag(value) {
  	  return objectToString.call(value);
  	}

  	/**
  	 * The base implementation of `_.isNative` without bad shim checks.
  	 *
  	 * @private
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a native function,
  	 *  else `false`.
  	 */
  	function baseIsNative(value) {
  	  if (!isObject(value) || isMasked(value)) {
  	    return false;
  	  }
  	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  	  return pattern.test(toSource(value));
  	}

  	/**
  	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
  	 *
  	 * @private
  	 * @param {Object} object The object to query.
  	 * @returns {Array} Returns the array of property names.
  	 */
  	function baseKeys(object) {
  	  if (!isPrototype(object)) {
  	    return nativeKeys(object);
  	  }
  	  var result = [];
  	  for (var key in Object(object)) {
  	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
  	      result.push(key);
  	    }
  	  }
  	  return result;
  	}

  	/**
  	 * Copies the values of `source` to `array`.
  	 *
  	 * @private
  	 * @param {Array} source The array to copy values from.
  	 * @param {Array} [array=[]] The array to copy values to.
  	 * @returns {Array} Returns `array`.
  	 */
  	function copyArray(source, array) {
  	  var index = -1,
  	      length = source.length;

  	  array || (array = Array(length));
  	  while (++index < length) {
  	    array[index] = source[index];
  	  }
  	  return array;
  	}

  	/**
  	 * Gets the native function at `key` of `object`.
  	 *
  	 * @private
  	 * @param {Object} object The object to query.
  	 * @param {string} key The key of the method to get.
  	 * @returns {*} Returns the function if it's native, else `undefined`.
  	 */
  	function getNative(object, key) {
  	  var value = getValue(object, key);
  	  return baseIsNative(value) ? value : undefined;
  	}

  	/**
  	 * Gets the `toStringTag` of `value`.
  	 *
  	 * @private
  	 * @param {*} value The value to query.
  	 * @returns {string} Returns the `toStringTag`.
  	 */
  	var getTag = baseGetTag;

  	// Fallback for data views, maps, sets, and weak maps in IE 11,
  	// for data views in Edge < 14, and promises in Node.js.
  	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
  	    (Map && getTag(new Map) != mapTag) ||
  	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
  	    (Set && getTag(new Set) != setTag) ||
  	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  	  getTag = function(value) {
  	    var result = objectToString.call(value),
  	        Ctor = result == objectTag ? value.constructor : undefined,
  	        ctorString = Ctor ? toSource(Ctor) : undefined;

  	    if (ctorString) {
  	      switch (ctorString) {
  	        case dataViewCtorString: return dataViewTag;
  	        case mapCtorString: return mapTag;
  	        case promiseCtorString: return promiseTag;
  	        case setCtorString: return setTag;
  	        case weakMapCtorString: return weakMapTag;
  	      }
  	    }
  	    return result;
  	  };
  	}

  	/**
  	 * Checks if `value` is a valid array-like index.
  	 *
  	 * @private
  	 * @param {*} value The value to check.
  	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
  	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
  	 */
  	function isIndex(value, length) {
  	  length = length == null ? MAX_SAFE_INTEGER : length;
  	  return !!length &&
  	    (typeof value == 'number' || reIsUint.test(value)) &&
  	    (value > -1 && value % 1 == 0 && value < length);
  	}

  	/**
  	 * Checks if `func` has its source masked.
  	 *
  	 * @private
  	 * @param {Function} func The function to check.
  	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
  	 */
  	function isMasked(func) {
  	  return !!maskSrcKey && (maskSrcKey in func);
  	}

  	/**
  	 * Checks if `value` is likely a prototype object.
  	 *
  	 * @private
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
  	 */
  	function isPrototype(value) {
  	  var Ctor = value && value.constructor,
  	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  	  return value === proto;
  	}

  	/**
  	 * Converts `func` to its source code.
  	 *
  	 * @private
  	 * @param {Function} func The function to process.
  	 * @returns {string} Returns the source code.
  	 */
  	function toSource(func) {
  	  if (func != null) {
  	    try {
  	      return funcToString.call(func);
  	    } catch (e) {}
  	    try {
  	      return (func + '');
  	    } catch (e) {}
  	  }
  	  return '';
  	}

  	/**
  	 * Checks if `value` is likely an `arguments` object.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
  	 *  else `false`.
  	 * @example
  	 *
  	 * _.isArguments(function() { return arguments; }());
  	 * // => true
  	 *
  	 * _.isArguments([1, 2, 3]);
  	 * // => false
  	 */
  	function isArguments(value) {
  	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
  	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  	}

  	/**
  	 * Checks if `value` is classified as an `Array` object.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
  	 * @example
  	 *
  	 * _.isArray([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isArray(document.body.children);
  	 * // => false
  	 *
  	 * _.isArray('abc');
  	 * // => false
  	 *
  	 * _.isArray(_.noop);
  	 * // => false
  	 */
  	var isArray = Array.isArray;

  	/**
  	 * Checks if `value` is array-like. A value is considered array-like if it's
  	 * not a function and has a `value.length` that's an integer greater than or
  	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
  	 * @example
  	 *
  	 * _.isArrayLike([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isArrayLike(document.body.children);
  	 * // => true
  	 *
  	 * _.isArrayLike('abc');
  	 * // => true
  	 *
  	 * _.isArrayLike(_.noop);
  	 * // => false
  	 */
  	function isArrayLike(value) {
  	  return value != null && isLength(value.length) && !isFunction(value);
  	}

  	/**
  	 * This method is like `_.isArrayLike` except that it also checks if `value`
  	 * is an object.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is an array-like object,
  	 *  else `false`.
  	 * @example
  	 *
  	 * _.isArrayLikeObject([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isArrayLikeObject(document.body.children);
  	 * // => true
  	 *
  	 * _.isArrayLikeObject('abc');
  	 * // => false
  	 *
  	 * _.isArrayLikeObject(_.noop);
  	 * // => false
  	 */
  	function isArrayLikeObject(value) {
  	  return isObjectLike(value) && isArrayLike(value);
  	}

  	/**
  	 * Checks if `value` is classified as a `Function` object.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
  	 * @example
  	 *
  	 * _.isFunction(_);
  	 * // => true
  	 *
  	 * _.isFunction(/abc/);
  	 * // => false
  	 */
  	function isFunction(value) {
  	  // The use of `Object#toString` avoids issues with the `typeof` operator
  	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  	  var tag = isObject(value) ? objectToString.call(value) : '';
  	  return tag == funcTag || tag == genTag;
  	}

  	/**
  	 * Checks if `value` is a valid array-like length.
  	 *
  	 * **Note:** This method is loosely based on
  	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
  	 * @example
  	 *
  	 * _.isLength(3);
  	 * // => true
  	 *
  	 * _.isLength(Number.MIN_VALUE);
  	 * // => false
  	 *
  	 * _.isLength(Infinity);
  	 * // => false
  	 *
  	 * _.isLength('3');
  	 * // => false
  	 */
  	function isLength(value) {
  	  return typeof value == 'number' &&
  	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  	}

  	/**
  	 * Checks if `value` is the
  	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
  	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
  	 * @example
  	 *
  	 * _.isObject({});
  	 * // => true
  	 *
  	 * _.isObject([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isObject(_.noop);
  	 * // => true
  	 *
  	 * _.isObject(null);
  	 * // => false
  	 */
  	function isObject(value) {
  	  var type = typeof value;
  	  return !!value && (type == 'object' || type == 'function');
  	}

  	/**
  	 * Checks if `value` is object-like. A value is object-like if it's not `null`
  	 * and has a `typeof` result of "object".
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
  	 * @example
  	 *
  	 * _.isObjectLike({});
  	 * // => true
  	 *
  	 * _.isObjectLike([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isObjectLike(_.noop);
  	 * // => false
  	 *
  	 * _.isObjectLike(null);
  	 * // => false
  	 */
  	function isObjectLike(value) {
  	  return !!value && typeof value == 'object';
  	}

  	/**
  	 * Checks if `value` is classified as a `String` primitive or object.
  	 *
  	 * @static
  	 * @since 0.1.0
  	 * @memberOf _
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
  	 * @example
  	 *
  	 * _.isString('abc');
  	 * // => true
  	 *
  	 * _.isString(1);
  	 * // => false
  	 */
  	function isString(value) {
  	  return typeof value == 'string' ||
  	    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
  	}

  	/**
  	 * Converts `value` to an array.
  	 *
  	 * @static
  	 * @since 0.1.0
  	 * @memberOf _
  	 * @category Lang
  	 * @param {*} value The value to convert.
  	 * @returns {Array} Returns the converted array.
  	 * @example
  	 *
  	 * _.toArray({ 'a': 1, 'b': 2 });
  	 * // => [1, 2]
  	 *
  	 * _.toArray('abc');
  	 * // => ['a', 'b', 'c']
  	 *
  	 * _.toArray(1);
  	 * // => []
  	 *
  	 * _.toArray(null);
  	 * // => []
  	 */
  	function toArray(value) {
  	  if (!value) {
  	    return [];
  	  }
  	  if (isArrayLike(value)) {
  	    return isString(value) ? stringToArray(value) : copyArray(value);
  	  }
  	  if (iteratorSymbol && value[iteratorSymbol]) {
  	    return iteratorToArray(value[iteratorSymbol]());
  	  }
  	  var tag = getTag(value),
  	      func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

  	  return func(value);
  	}

  	/**
  	 * Creates an array of the own enumerable property names of `object`.
  	 *
  	 * **Note:** Non-object values are coerced to objects. See the
  	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
  	 * for more details.
  	 *
  	 * @static
  	 * @since 0.1.0
  	 * @memberOf _
  	 * @category Object
  	 * @param {Object} object The object to query.
  	 * @returns {Array} Returns the array of property names.
  	 * @example
  	 *
  	 * function Foo() {
  	 *   this.a = 1;
  	 *   this.b = 2;
  	 * }
  	 *
  	 * Foo.prototype.c = 3;
  	 *
  	 * _.keys(new Foo);
  	 * // => ['a', 'b'] (iteration order is not guaranteed)
  	 *
  	 * _.keys('hi');
  	 * // => ['0', '1']
  	 */
  	function keys(object) {
  	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  	}

  	/**
  	 * Creates an array of the own enumerable string keyed property values of `object`.
  	 *
  	 * **Note:** Non-object values are coerced to objects.
  	 *
  	 * @static
  	 * @since 0.1.0
  	 * @memberOf _
  	 * @category Object
  	 * @param {Object} object The object to query.
  	 * @returns {Array} Returns the array of property values.
  	 * @example
  	 *
  	 * function Foo() {
  	 *   this.a = 1;
  	 *   this.b = 2;
  	 * }
  	 *
  	 * Foo.prototype.c = 3;
  	 *
  	 * _.values(new Foo);
  	 * // => [1, 2] (iteration order is not guaranteed)
  	 *
  	 * _.values('hi');
  	 * // => ['h', 'i']
  	 */
  	function values(object) {
  	  return object ? baseValues(object, keys(object)) : [];
  	}

  	lodash_toarray = toArray;
  	return lodash_toarray;
  }

  var lodash_toarrayExports = requireLodash_toarray();
  var toArray = /*@__PURE__*/getDefaultExportFromCjs(lodash_toarrayExports);

  /**
   * An auto-incrementing identifier for keys.
   */
  var n$2 = 0;
  /**
   * A class that keeps track of a key string. We use a full class here because we
   * want to be able to use them as keys in `WeakMap` objects.
   */
  var Key = /** @class */ (function () {
      function Key() {
          this.id = "".concat(n$2++);
      }
      return Key;
  }());

  /**
   * @description 通过 UA 判断浏览器
   * @author wangfupeng
   */
  var IS_APPLE = typeof navigator !== 'undefined' && /Mac OS X/.test(navigator.userAgent);
  var IS_FIREFOX = typeof navigator !== 'undefined' && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);
  var IS_SAFARI = typeof navigator !== 'undefined' && /^((?!chrome|android).)*safari/i.test(navigator.userAgent); // eslint-disable-line
  // "modern" Edge was released at 79.x
  var IS_EDGE_LEGACY = typeof navigator !== 'undefined' &&
      /Edge?\/(?:[0-6][0-9]|[0-7][0-8])(?:\.)/i.test(navigator.userAgent);
  // Native beforeInput events don't work well with react on Chrome 75 and older, Chrome 76+ can use beforeInput
  var IS_CHROME_LEGACY = typeof navigator !== 'undefined' &&
      /Chrome?\/(?:[0-7][0-5]|[0-6][0-9])(?:\.)/i.test(navigator.userAgent);
  var IS_CHROME = typeof navigator !== 'undefined' && /Chrome/i.test(navigator.userAgent);
  // @ts-ignore 判断浏览器是否支持 beforeinput 事件 https://www.caniuse.com/?search=beforeinput
  // COMPAT: Firefox/Edge Legacy don't support the `beforeinput` event
  // Chrome Legacy doesn't support `beforeinput` correctly
  var HAS_BEFORE_INPUT_SUPPORT = !IS_CHROME_LEGACY &&
      !IS_EDGE_LEGACY &&
      // globalThis is undefined in older browsers
      typeof globalThis !== 'undefined' &&
      globalThis.InputEvent &&
      // @ts-ignore The `getTargetRanges` property isn't recognized.
      typeof globalThis.InputEvent.prototype.getTargetRanges === 'function';

  /**
   * @description 扩展 slate Editor（参考 slate-react react-editor.ts ）
   * @author wangfupeng
   */
  /**
   * 自定义全局 command
   */
  var DomEditor = {
      /**
       * Return the host window of the current editor.
       */
      getWindow: function (editor) {
          var window = EDITOR_TO_WINDOW.get(editor);
          if (!window) {
              throw new Error('Unable to find a host window element for this editor');
          }
          return window;
      },
      /**
       * Find a key for a Slate node.
       * key 即一个累加不重复的 id ，每一个 slate node 都对对应一个 key ，意思相当于 node.id
       */
      findKey: function (editor, node) {
          var key = NODE_TO_KEY.get(node);
          // 如果没绑定，就立马新建一个 key 来绑定
          if (!key) {
              key = new Key();
              NODE_TO_KEY.set(node, key);
          }
          return key;
      },
      setNewKey: function (node) {
          var key = new Key();
          NODE_TO_KEY.set(node, key);
      },
      /**
       * Find the path of Slate node.
       * path 是一个数组，代表 slate node 的位置 https://docs.slatejs.org/concepts/03-locations#path
       */
      findPath: function (editor, node) {
          var path = [];
          var child = node;
          // eslint-disable-next-line
          while (true) {
              var parent_1 = NODE_TO_PARENT.get(child);
              if (parent_1 == null) {
                  if (distExports$1.Editor.isEditor(child)) {
                      // 已到达最顶层，返回 patch
                      return path;
                  }
                  break;
              }
              // 获取该节点在父节点中的 index
              var i = NODE_TO_INDEX.get(child);
              if (i == null) {
                  break;
              }
              // 拼接 patch
              path.unshift(i);
              // 继续向上递归
              child = parent_1;
          }
          throw new Error("Unable to find the path for Slate node: ".concat(JSON.stringify(node)));
      },
      /**
       * Find the DOM node that implements DocumentOrShadowRoot for the editor.
       */
      findDocumentOrShadowRoot: function (editor) {
          if (editor.isDestroyed) {
              return window.document;
          }
          var el = DomEditor.toDOMNode(editor, editor);
          var root = el.getRootNode();
          if ((isDocument(root) || isShadowRoot(root)) && Reflect.get(root, 'getSelection') != null) {
              return root;
          }
          return el.ownerDocument;
      },
      /**
       * 获取父节点
       * @param editor editor
       * @param node cur node
       */
      getParentNode: function (editor, node) {
          return NODE_TO_PARENT.get(node) || null;
      },
      /**
       * 获取当前节点的所有父节点
       * @param editor editor
       * @param node cur node
       */
      getParentsNodes: function (editor, node) {
          var nodes = [];
          var curNode = node;
          while (curNode !== editor && curNode != null) {
              var parentNode = DomEditor.getParentNode(editor, curNode);
              if (parentNode == null) {
                  break;
              }
              else {
                  nodes.push(parentNode);
                  curNode = parentNode;
              }
          }
          return nodes;
      },
      /**
       * 获取当前节点对应的顶级节点
       * @param editor editor
       * @param curNode cur node
       */
      getTopNode: function (editor, curNode) {
          var path = DomEditor.findPath(editor, curNode);
          var topPath = [path[0]];
          return distExports$1.Node.get(editor, topPath);
      },
      /**
       * Find the native DOM element from a Slate node or editor.
       */
      toDOMNode: function (editor, node) {
          var domNode;
          var isEditor = distExports$1.Editor.isEditor(node);
          if (isEditor) {
              domNode = EDITOR_TO_ELEMENT.get(editor);
          }
          else {
              var key = DomEditor.findKey(editor, node);
              domNode = KEY_TO_ELEMENT.get(key);
          }
          if (!domNode) {
              throw new Error("Cannot resolve a DOM node from Slate node: ".concat(JSON.stringify(node)));
          }
          return domNode;
      },
      /**
       * Check if a DOM node is within the editor.
       */
      hasDOMNode: function (editor, target, options) {
          if (options === void 0) { options = {}; }
          var _a = options.editable, editable = _a === void 0 ? false : _a;
          var editorEl = DomEditor.toDOMNode(editor, editor);
          var targetEl;
          // COMPAT: In Firefox, reading `target.nodeType` will throw an error if
          // target is originating from an internal "restricted" element (e.g. a
          // stepper arrow on a number input). (2018/05/04)
          // https://github.com/ianstormtaylor/slate/issues/1819
          try {
              targetEl = (isDOMElement(target) ? target : target.parentElement);
          }
          catch (err) {
              if (err instanceof Error
                  && !err.message.includes('Permission denied to access property "nodeType"')) {
                  throw err;
              }
          }
          if (!targetEl) {
              return false;
          }
          return (
          // 祖先节点中包括 data-slate-editor 属性，即 textarea
          (targetEl.closest('[data-slate-editor]') === editorEl
              // 通过参数 editable 控制开启是否验证是可编辑元素或零宽字符
              // 补全 data-slate-string 可参考本文代码
              // （data-slate-zero-width、data-slate-string）判断一起出现，唯独此处欠缺，补全
              && (!editable
                  || targetEl.isContentEditable
                  || !!targetEl.getAttribute('data-slate-zero-width')))
              || !!targetEl.getAttribute('data-slate-string'));
      },
      /**
       * Find a native DOM range from a Slate `range`.
       *
       * Notice: the returned range will always be ordinal regardless of the direction of Slate `range` due to DOM API limit.
       *
       * there is no way to create a reverse DOM Range using Range.setStart/setEnd
       * according to https://dom.spec.whatwg.org/#concept-range-bp-set.
       */
      toDOMRange: function (editor, range) {
          var anchor = range.anchor, focus = range.focus;
          var isBackward = distExports$1.Range.isBackward(range);
          var domAnchor = DomEditor.toDOMPoint(editor, anchor);
          var domFocus = distExports$1.Range.isCollapsed(range) ? domAnchor : DomEditor.toDOMPoint(editor, focus);
          var window = DomEditor.getWindow(editor);
          var domRange = window.document.createRange();
          var _a = __read(isBackward ? domFocus : domAnchor, 2), startNode = _a[0], startOffset = _a[1];
          var _b = __read(isBackward ? domAnchor : domFocus, 2), endNode = _b[0], endOffset = _b[1];
          // A slate Point at zero-width Leaf always has an offset of 0 but a native DOM selection at
          // zero-width node has an offset of 1 so we have to check if we are in a zero-width node and
          // adjust the offset accordingly.
          var startEl = (isDOMElement(startNode) ? startNode : startNode.parentElement);
          var isStartAtZeroWidth = !!startEl.getAttribute('data-slate-zero-width');
          var endEl = (isDOMElement(endNode) ? endNode : endNode.parentElement);
          var isEndAtZeroWidth = !!endEl.getAttribute('data-slate-zero-width');
          domRange.setStart(startNode, isStartAtZeroWidth ? 1 : startOffset);
          domRange.setEnd(endNode, isEndAtZeroWidth ? 1 : endOffset);
          return domRange;
      },
      /**
       * Find a native DOM selection point from a Slate point.
       */
      toDOMPoint: function (editor, point) {
          var e_1, _a;
          var _b = __read(distExports$1.Editor.node(editor, point.path), 1), node = _b[0];
          var el = DomEditor.toDOMNode(editor, node);
          var domPoint;
          // If we're inside a void node, force the offset to 0, otherwise the zero
          // width spacing character will result in an incorrect offset of 1
          if (distExports$1.Editor.void(editor, { at: point })) {
              // void 节点，offset 必须为 0
              point = { path: point.path, offset: 0 };
          }
          // For each leaf, we need to isolate its content, which means filtering
          // to its direct text and zero-width spans. (We have to filter out any
          // other siblings that may have been rendered alongside them.)
          var selector = '[data-slate-string], [data-slate-zero-width]';
          var texts = Array.from(el.querySelectorAll(selector));
          var start = 0;
          try {
              for (var texts_1 = __values(texts), texts_1_1 = texts_1.next(); !texts_1_1.done; texts_1_1 = texts_1.next()) {
                  var text = texts_1_1.value;
                  var domNode = text.childNodes[0];
                  if (domNode == null || domNode.textContent == null) {
                      continue;
                  }
                  var length_1 = domNode.textContent.length;
                  var attr = text.getAttribute('data-slate-length');
                  var trueLength = attr == null ? length_1 : parseInt(attr, 10);
                  var end = start + trueLength;
                  if (point.offset <= end) {
                      var offset = Math.min(length_1, Math.max(0, point.offset - start));
                      domPoint = [domNode, offset];
                      break;
                  }
                  start = end;
              }
          }
          catch (e_1_1) { e_1 = { error: e_1_1 }; }
          finally {
              try {
                  if (texts_1_1 && !texts_1_1.done && (_a = texts_1.return)) _a.call(texts_1);
              }
              finally { if (e_1) throw e_1.error; }
          }
          if (!domPoint) {
              throw new Error("Cannot resolve a DOM point from Slate point: ".concat(JSON.stringify(point)));
          }
          return domPoint;
      },
      /**
       * Find a Slate node from a native DOM `element`.
       */
      toSlateNode: function (editor, domNode) {
          var domEl = isDOMElement(domNode) ? domNode : domNode.parentElement;
          if (domEl && !domEl.hasAttribute('data-slate-node')) {
              domEl = domEl.closest('[data-slate-node]');
          }
          var node = domEl ? ELEMENT_TO_NODE.get(domEl) : null;
          if (!node) {
              throw new Error("Cannot resolve a Slate node from DOM node: ".concat(domEl));
          }
          return node;
      },
      /**
       * Get the target range from a DOM `event`.
       */
      findEventRange: function (editor, event) {
          if ('nativeEvent' in event) {
              // 兼容 react 的合成事件，DOM 事件中没什么用
              event = event.nativeEvent;
          }
          var x = event.clientX, y = event.clientY, target = event.target;
          if (x == null || y == null) {
              throw new Error("Cannot resolve a Slate range from a DOM event: ".concat(event));
          }
          var node = DomEditor.toSlateNode(editor, event.target);
          var path = DomEditor.findPath(editor, node);
          // If the drop target is inside a void node, move it into either the
          // next or previous node, depending on which side the `x` and `y`
          // coordinates are closest to.
          if (distExports$1.Editor.isVoid(editor, node)) {
              var rect = target.getBoundingClientRect();
              var isPrev = editor.isInline(node)
                  ? x - rect.left < rect.left + rect.width - x
                  : y - rect.top < rect.top + rect.height - y;
              var edge = distExports$1.Editor.point(editor, path, {
                  edge: isPrev ? 'start' : 'end',
              });
              var point = isPrev ? distExports$1.Editor.before(editor, edge) : distExports$1.Editor.after(editor, edge);
              if (point) {
                  var range_1 = distExports$1.Editor.range(editor, point);
                  return range_1;
              }
          }
          // Else resolve a range from the caret position where the drop occured.
          var domRange;
          var document = this.getWindow(editor).document;
          // COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2016/07/25)
          if (document.caretRangeFromPoint) {
              domRange = document.caretRangeFromPoint(x, y);
          }
          else {
              var position = document.caretPositionFromPoint(x, y);
              if (position) {
                  domRange = document.createRange();
                  domRange.setStart(position.offsetNode, position.offset);
                  domRange.setEnd(position.offsetNode, position.offset);
              }
          }
          if (!domRange) {
              throw new Error("Cannot resolve a Slate range from a DOM event: ".concat(event));
          }
          // Resolve a Slate range from the DOM range.
          var range = DomEditor.toSlateRange(editor, domRange, {
              exactMatch: false,
              suppressThrow: false,
          });
          return range;
      },
      /**
       * Find a Slate range from a DOM range or selection.
       */
      toSlateRange: function (editor, domRange, options) {
          var exactMatch = options.exactMatch, suppressThrow = options.suppressThrow;
          var el = isDOMSelection(domRange) ? domRange.anchorNode : domRange.startContainer;
          var anchorNode;
          var anchorOffset;
          var focusNode;
          var focusOffset;
          var isCollapsed;
          if (el) {
              if (isDOMSelection(domRange)) {
                  anchorNode = domRange.anchorNode;
                  anchorOffset = domRange.anchorOffset;
                  focusNode = domRange.focusNode;
                  focusOffset = domRange.focusOffset;
                  // COMPAT: There's a bug in chrome that always returns `true` for
                  // `isCollapsed` for a Selection that comes from a ShadowRoot.
                  // (2020/08/08)
                  // https://bugs.chromium.org/p/chromium/issues/detail?id=447523
                  if (IS_CHROME && hasShadowRoot()) {
                      isCollapsed = domRange.anchorNode === domRange.focusNode
                          && domRange.anchorOffset === domRange.focusOffset;
                  }
                  else {
                      isCollapsed = domRange.isCollapsed;
                  }
              }
              else {
                  anchorNode = domRange.startContainer;
                  anchorOffset = domRange.startOffset;
                  focusNode = domRange.endContainer;
                  focusOffset = domRange.endOffset;
                  isCollapsed = domRange.collapsed;
              }
          }
          if (anchorNode == null || focusNode == null || anchorOffset == null || focusOffset == null) {
              throw new Error("Cannot resolve a Slate range from DOM range: ".concat(domRange));
          }
          var anchor = DomEditor.toSlatePoint(editor, [anchorNode, anchorOffset], {
              exactMatch: exactMatch,
              suppressThrow: suppressThrow,
          });
          if (!anchor) {
              return null;
          }
          var focus = isCollapsed
              ? anchor
              : DomEditor.toSlatePoint(editor, [focusNode, focusOffset], { exactMatch: exactMatch, suppressThrow: suppressThrow });
          if (!focus) {
              return null;
          }
          // return { anchor, focus } as unknown as T extends true ? Range | null : Range
          var range = { anchor: anchor, focus: focus };
          // if the selection is a hanging range that ends in a void
          // and the DOM focus is an Element
          // (meaning that the selection ends before the element)
          // unhang the range to avoid mistakenly including the void
          if (distExports$1.Range.isExpanded(range)
              && distExports$1.Range.isForward(range)
              && isDOMElement(focusNode)
              && distExports$1.Editor.void(editor, { at: range.focus, mode: 'highest' })) {
              range = distExports$1.Editor.unhangRange(editor, range, { voids: true });
          }
          return range;
      },
      /**
       * Find a Slate point from a DOM selection's `domNode` and `domOffset`.
       */
      toSlatePoint: function (editor, domPoint, options) {
          var _a;
          var exactMatch = options.exactMatch, suppressThrow = options.suppressThrow;
          var _b = __read(exactMatch ? domPoint : normalizeDOMPoint(domPoint), 2), nearestNode = _b[0], nearestOffset = _b[1];
          var parentNode = nearestNode.parentNode;
          var textNode = null;
          var offset = 0;
          if (parentNode) {
              var voidNode = parentNode.closest('[data-slate-void="true"]');
              var leafNode = parentNode.closest('[data-slate-leaf]');
              var domNode = null;
              // Calculate how far into the text node the `nearestNode` is, so that we
              // can determine what the offset relative to the text node is.
              var window_1 = DomEditor.getWindow(editor);
              if (leafNode && window_1.document.createRange) {
                  textNode = leafNode.closest('[data-slate-node="text"]');
                  var range = window_1.document.createRange();
                  range.setStart(textNode, 0);
                  range.setEnd(nearestNode, nearestOffset);
                  var contents = range.cloneContents();
                  var removals = __spreadArray(__spreadArray([], __read(toArray(contents.querySelectorAll('[data-slate-zero-width]'))), false), __read(toArray(contents.querySelectorAll('[contenteditable=false]'))), false);
                  removals.forEach(function (el) {
                      el.parentNode.removeChild(el);
                  });
                  // COMPAT: Edge has a bug where Range.prototype.toString() will
                  // convert \n into \r\n. The bug causes a loop when slate-react
                  // attempts to reposition its cursor to match the native position. Use
                  // textContent.length instead.
                  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10291116/
                  offset = contents.textContent.length;
                  domNode = textNode;
              }
              else if (voidNode) {
                  // For void nodes, the element with the offset key will be a cousin, not an
                  // ancestor, so find it by going down from the nearest void parent.
                  leafNode = voidNode.querySelector('[data-slate-leaf]');
                  // COMPAT: In read-only editors the leaf is not rendered.
                  if (!leafNode) {
                      offset = 1;
                  }
                  else {
                      textNode = leafNode.closest('[data-slate-node="text"]');
                      domNode = leafNode;
                      offset = domNode.textContent.length;
                      domNode.querySelectorAll('[data-slate-zero-width]').forEach(function (el) {
                          offset -= el.textContent.length;
                      });
                  }
              }
              if (domNode
                  && offset === domNode.textContent.length
                  // COMPAT: If the parent node is a Slate zero-width space, editor is
                  // because the text node should have no characters. However, during IME
                  // composition the ASCII characters will be prepended to the zero-width
                  // space, so subtract 1 from the offset to account for the zero-width
                  // space character.
                  && (parentNode.hasAttribute('data-slate-zero-width')
                      // COMPAT: In Firefox, `range.cloneContents()` returns an extra trailing '\n'
                      // when the document ends with a new-line character. This results in the offset
                      // length being off by one, so we need to subtract one to account for this.
                      || (IS_FIREFOX && ((_a = domNode.textContent) === null || _a === void 0 ? void 0 : _a.endsWith('\n'))))) {
                  offset -= 1;
              }
          }
          if (!textNode) {
              if (suppressThrow) {
                  return null;
              }
              throw new Error("Cannot resolve a Slate point from DOM point: ".concat(domPoint));
          }
          // COMPAT: If someone is clicking from one Slate editor into another,
          // the select event fires twice, once for the old editor's `element`
          // first, and then afterwards for the correct `element`. (2017/03/03)
          var slateNode = DomEditor.toSlateNode(editor, textNode);
          var path = DomEditor.findPath(editor, slateNode);
          return { path: path, offset: offset };
      },
      hasRange: function (editor, range) {
          var anchor = range.anchor, focus = range.focus;
          return distExports$1.Editor.hasPath(editor, anchor.path) && distExports$1.Editor.hasPath(editor, focus.path);
      },
      getNodeType: function (node) {
          if (distExports$1.Element.isElement(node)) {
              return node.type;
          }
          return '';
      },
      checkNodeType: function (node, type) {
          return this.getNodeType(node) === type;
      },
      getNodesStr: function (nodes) {
          return nodes.map(function (node) { return distExports$1.Node.string(node); }).join('');
      },
      getSelectedElems: function (editor) {
          var e_2, _a;
          var elems = [];
          var nodeEntries = distExports$1.Editor.nodes(editor, { universal: true });
          try {
              for (var nodeEntries_1 = __values(nodeEntries), nodeEntries_1_1 = nodeEntries_1.next(); !nodeEntries_1_1.done; nodeEntries_1_1 = nodeEntries_1.next()) {
                  var nodeEntry = nodeEntries_1_1.value;
                  var _b = __read(nodeEntry, 1), node = _b[0];
                  if (distExports$1.Element.isElement(node)) {
                      elems.push(node);
                  }
              }
          }
          catch (e_2_1) { e_2 = { error: e_2_1 }; }
          finally {
              try {
                  if (nodeEntries_1_1 && !nodeEntries_1_1.done && (_a = nodeEntries_1.return)) _a.call(nodeEntries_1);
              }
              finally { if (e_2) throw e_2.error; }
          }
          return elems;
      },
      getSelectedNodeByType: function (editor, type) {
          var _this = this;
          var _a = __read(distExports$1.Editor.nodes(editor, {
              match: function (n) { return _this.checkNodeType(n, type); },
              universal: true,
          }), 1), nodeEntry = _a[0];
          if (nodeEntry == null) {
              return null;
          }
          return nodeEntry[0];
      },
      getSelectedTextNode: function (editor) {
          var _a = __read(distExports$1.Editor.nodes(editor, {
              match: function (n) { return distExports$1.Text.isText(n); },
              universal: true,
          }), 1), nodeEntry = _a[0];
          if (nodeEntry == null) {
              return null;
          }
          return nodeEntry[0];
      },
      isNodeSelected: function (editor, node) {
          var _a = __read(distExports$1.Editor.nodes(editor, {
              match: function (n) { return n === node; },
              universal: true,
          }), 1), nodeEntry = _a[0];
          if (nodeEntry == null) {
              return false;
          }
          var _b = __read(nodeEntry, 1), n = _b[0];
          if (n === node) {
              return true;
          }
          return false;
      },
      isSelectionAtLineEnd: function (editor, path) {
          var selection = editor.selection;
          if (!selection) {
              return false;
          }
          var isAtLineEnd = distExports$1.Editor.isEnd(editor, selection.anchor, path) || distExports$1.Editor.isEnd(editor, selection.focus, path);
          return isAtLineEnd;
      },
      // 获取 textarea 实例
      getTextarea: function (editor) {
          var textarea = EDITOR_TO_TEXTAREA.get(editor);
          if (textarea == null) {
              throw new Error('Cannot find textarea instance by editor');
          }
          return textarea;
      },
      // 获取 toolbar 实例
      getToolbar: function (editor) {
          return EDITOR_TO_TOOLBAR.get(editor) || null;
      },
      // 获取 hoverbar 实例
      getHoverbar: function (editor) {
          return EDITOR_TO_HOVER_BAR.get(editor) || null;
      },
      // 格式化 editor content
      normalizeContent: function (editor) {
          editor.children.forEach(function (node, index) {
              editor.normalizeNode([node, [index]]);
          });
      },
      /**
       * 获取：距离触发 maxLength，还可以插入多少字符
       * @param editor editor
       */
      getLeftLengthOfMaxLength: function (editor) {
          var _a = editor.getConfig(), maxLength = _a.maxLength, onMaxLength = _a.onMaxLength;
          // 未设置 maxLength ，则返回 number 最大值
          if (typeof maxLength !== 'number' || maxLength <= 0) {
              return Infinity;
          }
          var editorText = editor.getText().replace(/\r|\n|(\r\n)|(\n\r)/g, ''); // 去掉换行
          var curLength = editorText.length;
          var leftLength = maxLength - curLength;
          if (leftLength <= 0) {
              // 触发 maxLength 限制，不再继续插入文字
              if (onMaxLength) {
                  onMaxLength(editor);
              }
          }
          return leftLength;
      },
      // 清理暴露的 text 节点（拼音输入时经常出现）
      cleanExposedTexNodeInSelectionBlock: function (editor) {
          var e_3, _a, e_4, _b;
          // 有时候全选删除新增的文本节点可能不在段落内，因此遍历textArea删除掉
          var $textArea = DomEditor.getTextarea(editor).$textArea;
          var childNodes = $textArea === null || $textArea === void 0 ? void 0 : $textArea[0].childNodes;
          if (childNodes) {
              try {
                  for (var _c = __values(Array.from(childNodes)), _d = _c.next(); !_d.done; _d = _c.next()) {
                      var node = _d.value;
                      if (isDOMText(node)) {
                          node.remove();
                      }
                      else {
                          break;
                      }
                  }
              }
              catch (e_3_1) { e_3 = { error: e_3_1 }; }
              finally {
                  try {
                      if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                  }
                  finally { if (e_3) throw e_3.error; }
              }
          }
          var nodeEntries = distExports$1.Editor.nodes(editor, {
              match: function (n) {
                  if (distExports$1.Element.isElement(n)) {
                      if (!editor.isInline(n)) {
                          // 匹配 block element
                          return true;
                      }
                  }
                  return false;
              },
              universal: true,
          });
          try {
              for (var nodeEntries_2 = __values(nodeEntries), nodeEntries_2_1 = nodeEntries_2.next(); !nodeEntries_2_1.done; nodeEntries_2_1 = nodeEntries_2.next()) {
                  var nodeEntry = nodeEntries_2_1.value;
                  if (nodeEntry != null) {
                      var n = nodeEntry[0];
                      var elem = DomEditor.toDOMNode(editor, n);
                      // 只遍历 elem 范围，考虑性能
                      walkTextNodes(elem, function (textNode, parent) {
                          var $parent = $$1(parent);
                          if ($parent.attr('data-slate-string')) {
                              return; // 正常的 text
                          }
                          if ($parent.attr('data-slate-zero-width')) {
                              return; // 正常的 text
                          }
                          if ($parent.attr('data-w-e-reserve')) {
                              return; // 故意保留的节点
                          }
                          // 暴露的 text node ，删除
                          parent.removeChild(textNode);
                      });
                  }
              }
          }
          catch (e_4_1) { e_4 = { error: e_4_1 }; }
          finally {
              try {
                  if (nodeEntries_2_1 && !nodeEntries_2_1.done && (_b = nodeEntries_2.return)) _b.call(nodeEntries_2);
              }
              finally { if (e_4) throw e_4.error; }
          }
      },
      /**
       * 是否是编辑器里最后一个元素
       * @param editor editor
       * @param node node
       */
      isLastNode: function (editor, node) {
          var editorChildren = editor.children || [];
          var editorChildrenLength = editorChildren.length;
          return editorChildren[editorChildrenLength - 1] === node;
      },
      /**
       * 生成空白 paragraph
       */
      genEmptyParagraph: function () {
          return { type: 'paragraph', children: [{ text: '' }] };
      },
      /**
       * 是否选中了 void node
       * @param editor editor
       */
      isSelectedVoidNode: function (editor) {
          var e_5, _a;
          var voidNodes = distExports$1.Editor.nodes(editor, {
              match: function (n) { return editor.isVoid(n); },
          });
          var len = 0;
          try {
              for (var voidNodes_1 = __values(voidNodes), voidNodes_1_1 = voidNodes_1.next(); !voidNodes_1_1.done; voidNodes_1_1 = voidNodes_1.next()) {
                  var n = voidNodes_1_1.value;
                  if (n) {
                      len += 1;
                  }
              }
          }
          catch (e_5_1) { e_5 = { error: e_5_1 }; }
          finally {
              try {
                  if (voidNodes_1_1 && !voidNodes_1_1.done && (_a = voidNodes_1.return)) _a.call(voidNodes_1);
              }
              finally { if (e_5) throw e_5.error; }
          }
          return len > 0;
      },
      /**
       * 选区是否在一个空行
       * @param editor editor
       */
      isSelectedEmptyParagraph: function (editor) {
          var selection = editor.selection;
          if (selection == null) {
              return false;
          }
          if (distExports$1.Range.isExpanded(selection)) {
              return false;
          }
          var selectedNode = DomEditor.getSelectedNodeByType(editor, 'paragraph');
          if (selectedNode === null) {
              return false;
          }
          var children = selectedNode.children;
          if (children.length !== 1) {
              return false;
          }
          var text = children[0].text;
          if (text === '') {
              return true;
          }
      },
      /**
       * 当前 path 指向的 node ，是否是空的（无内容）
       * @param editor editor
       * @param path path
       */
      isEmptyPath: function (editor, path) {
          var entry = distExports$1.Editor.node(editor, path);
          if (entry == null) {
              return false;
          }
          var _a = __read(entry, 1), node = _a[0];
          var children = node.children;
          if (children.length === 1) {
              var text = children[0].text;
              if (text === '') {
                  return true;
              } // 内容为空
          }
          return false;
      },
  };

  /**
   * @description text -> html
   * @author wangfupeng
   */
  function textToHtml(textNode, editor) {
      var text = textNode.text;
      if (text == null) {
          throw new Error("Current node is not slate Text ".concat(JSON.stringify(textNode)));
      }
      var textHtml = text;
      // 替换 html 特殊字符
      textHtml = replaceHtmlSpecialSymbols(textHtml);
      // 替换 \n 为 <br> （一定要在替换特殊字符之后）
      var parents = DomEditor.getParentsNodes(editor, textNode);
      var hasPre = parents.some(function (p) { return DomEditor.getNodeType(p) === 'pre'; }); // 上级节点中，是否存在 <pre>
      // 在 <pre> 标签不替换，其他都替换
      if (!hasPre) {
          textHtml = textHtml.replace(/\n\r|\r\n|\r|\n/g, '<br>');
      }
      // 在 <pre> 内部，&nbsp; 替换为空格
      if (hasPre) {
          textHtml = textHtml.replace(/&nbsp;/g, ' ');
      }
      // 处理空字符串
      if (textHtml === '') {
          var parentNode = DomEditor.getParentNode(null, textNode);
          if (parentNode && parentNode.children.length === 0) {
              // textNode 是唯一的子节点，则改为 <br>
              textHtml = '<br>';
          }
          else {
              // 其他情况的 空字符串 ，直接返回
              return textHtml;
          }
      }
      // 增加文本样式，如 color bgColor
      STYLE_TO_HTML_FN_LIST.forEach(function (fn) { return (textHtml = fn(textNode, textHtml)); });
      return textHtml;
  }

  /**
   * @description node -> html
   * @author wangfupeng
   */
  function node2html(node, editor) {
      if (distExports$1.Element.isElement(node)) {
          // elem node
          return elemToHtml$1(node, editor);
      }
      else {
          // text node
          return textToHtml(node, editor);
      }
  }

  /**
   * @description Utilities for single-line deletion
   */
  var doRectsIntersect = function (rect, compareRect) {
      var middle = (compareRect.top + compareRect.bottom) / 2;
      return rect.top <= middle && rect.bottom >= middle;
  };
  var areRangesSameLine = function (editor, range1, range2) {
      var rect1 = DomEditor.toDOMRange(editor, range1).getBoundingClientRect();
      var rect2 = DomEditor.toDOMRange(editor, range2).getBoundingClientRect();
      return doRectsIntersect(rect1, rect2) && doRectsIntersect(rect2, rect1);
  };
  /**
   * A helper utility that returns the end portion of a `Range`
   * which is located on a single line.
   *
   * @param {Editor} editor The editor object to compare against
   * @param {Range} parentRange The parent range to compare against
   * @returns {Range} A valid portion of the parentRange which is one a single line
   */
  var findCurrentLineRange = function (editor, parentRange) {
      var parentRangeBoundary = distExports$1.Editor.range(editor, distExports$1.Range.end(parentRange));
      var positions = Array.from(distExports$1.Editor.positions(editor, { at: parentRange }));
      var left = 0;
      var right = positions.length;
      var middle = Math.floor(right / 2);
      if (areRangesSameLine(editor, distExports$1.Editor.range(editor, positions[left]), parentRangeBoundary)) {
          return distExports$1.Editor.range(editor, positions[left], parentRangeBoundary);
      }
      if (positions.length < 2) {
          return distExports$1.Editor.range(editor, positions[positions.length - 1], parentRangeBoundary);
      }
      while (middle !== positions.length && middle !== left) {
          if (areRangesSameLine(editor, distExports$1.Editor.range(editor, positions[middle]), parentRangeBoundary)) {
              right = middle;
          }
          else {
              left = middle;
          }
          middle = Math.floor((left + right) / 2);
      }
      return distExports$1.Editor.range(editor, positions[right], parentRangeBoundary);
  };

  /**
   * @description slate 插件 - content
   * @author wangfupeng
   */
  var getMatches = function (e, path) {
      var e_1, _a;
      var matches = [];
      try {
          for (var _b = __values(distExports$1.Editor.levels(e, { at: path })), _c = _b.next(); !_c.done; _c = _b.next()) {
              var _d = __read(_c.value, 2), n = _d[0], p = _d[1];
              var key = DomEditor.findKey(e, n);
              matches.push([p, key]);
          }
      }
      catch (e_1_1) { e_1 = { error: e_1_1 }; }
      finally {
          try {
              if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
          }
          finally { if (e_1) throw e_1.error; }
      }
      return matches;
  };
  /**
   * 把 elem 插入到编辑器
   * @param editor editor
   * @param elem slate elem
   */
  function insertElemToEditor(editor, elem) {
      if (editor.isInline(elem)) {
          // inline elem 直接插入
          editor.insertNode(elem);
          // link 特殊处理，否则后面插入的文字全都在 a 里面 issue#4573
          if (elem.type === 'link') {
              editor.insertFragment([{ text: '' }]);
          }
      }
      else {
          // block elem ，另起一行插入 —— 重要
          distExports$1.Transforms.insertNodes(editor, elem, { mode: 'highest' });
      }
  }
  var withContent = function (editor) {
      var e = editor;
      var onChange = e.onChange, insertText = e.insertText, apply = e.apply, deleteBackward = e.deleteBackward;
      e.insertText = function (text) {
          var readOnly = e.getConfig().readOnly;
          if (readOnly) {
              return;
          }
          insertText(text);
      };
      // 重写 apply 方法，参考 slate 最新版本的实现
      e.apply = function (op) {
          var e_2, _a;
          var _b, _c, _d, _e, _f, _g;
          var matches = [];
          switch (op.type) {
              case 'insert_text':
              case 'remove_text':
              case 'set_node':
              case 'split_node': {
                  matches.push.apply(matches, __spreadArray([], __read(getMatches(e, op.path)), false));
                  break;
              }
              case 'insert_node':
              case 'remove_node': {
                  matches.push.apply(matches, __spreadArray([], __read(getMatches(e, distExports$1.Path.parent(op.path))), false));
                  break;
              }
              case 'merge_node': {
                  var prevPath = distExports$1.Path.previous(op.path);
                  matches.push.apply(matches, __spreadArray([], __read(getMatches(e, prevPath)), false));
                  break;
              }
              case 'move_node': {
                  var commonPath = distExports$1.Path.common(distExports$1.Path.parent(op.path), distExports$1.Path.parent(op.newPath));
                  matches.push.apply(matches, __spreadArray([], __read(getMatches(e, commonPath)), false));
                  break;
              }
              case 'set_selection': {
                  if ((_c = (_b = op.newProperties) === null || _b === void 0 ? void 0 : _b.focus) === null || _c === void 0 ? void 0 : _c.path) {
                      matches.push.apply(matches, __spreadArray([], __read(getMatches(e, (_e = (_d = op.newProperties) === null || _d === void 0 ? void 0 : _d.focus) === null || _e === void 0 ? void 0 : _e.path)), false));
                      matches.push.apply(matches, __spreadArray([], __read(getMatches(e, (_g = (_f = op.properties) === null || _f === void 0 ? void 0 : _f.focus) === null || _g === void 0 ? void 0 : _g.path)), false));
                  }
                  break;
              }
          }
          // 执行原本的 apply
          apply(op);
          try {
              // 更新 node 和 key 的映射
              for (var matches_1 = __values(matches), matches_1_1 = matches_1.next(); !matches_1_1.done; matches_1_1 = matches_1.next()) {
                  var _h = __read(matches_1_1.value, 2), path = _h[0], key = _h[1];
                  var _j = __read(distExports$1.Editor.node(e, path), 1), node = _j[0];
                  NODE_TO_KEY.set(node, key);
                  // 删除node对应的 vnode 和 html
                  if ('type' in node) {
                      if (NODE_TO_VNODE.has(node)) {
                          NODE_TO_VNODE.delete(node);
                      }
                      if (NODE_TO_HTML.has(node)) {
                          NODE_TO_HTML.delete(node);
                      }
                  }
              }
          }
          catch (e_2_1) { e_2 = { error: e_2_1 }; }
          finally {
              try {
                  if (matches_1_1 && !matches_1_1.done && (_a = matches_1.return)) _a.call(matches_1);
              }
              finally { if (e_2) throw e_2.error; }
          }
      };
      // 重写 deleteBackward，参考 slate 最新版本的实现
      e.deleteBackward = function (unit) {
          if (unit !== 'line') {
              return deleteBackward(unit);
          }
          if (editor.selection && distExports$1.Range.isCollapsed(editor.selection)) {
              var parentBlockEntry = distExports$1.Editor.above(editor, {
                  match: function (n) { return distExports$1.Editor.isBlock(editor, n); },
                  at: editor.selection,
              });
              if (parentBlockEntry) {
                  var _a = __read(parentBlockEntry, 2), parentBlockPath = _a[1];
                  var parentElementRange = distExports$1.Editor.range(editor, parentBlockPath, editor.selection.anchor);
                  var currentLineRange = findCurrentLineRange(e, parentElementRange);
                  if (!distExports$1.Range.isCollapsed(currentLineRange)) {
                      distExports$1.Transforms.delete(editor, { at: currentLineRange });
                  }
              }
          }
      };
      // 重写 onchange API
      e.onChange = function () {
          // 记录当前选区
          var selection = e.selection;
          if (selection != null) {
              EDITOR_TO_SELECTION$1.set(e, selection);
          }
          // 触发配置的 change 事件
          e.emit('change');
          onChange();
      };
      // tab
      e.handleTab = function () {
          e.insertText('    ');
      };
      // 获取 html （去掉了格式化 2021.12.10）
      e.getHtml = function () {
          var _a = e.children, children = _a === void 0 ? [] : _a;
          var _b = e.getConfig().skipCacheTypes, skipCacheTypes = _b === void 0 ? ['list-item'] : _b;
          var html = children.map(function (child) {
              var nodeType = DomEditor.getNodeType(child);
              // 如果节点类型在跳过缓存列表中，不使用缓存
              if (skipCacheTypes.includes(nodeType)) {
                  return node2html(child, e);
              }
              // 尝试从缓存中获取
              var cached = NODE_TO_HTML.get(child);
              if (cached) {
                  return cached;
              }
              // 生成新的HTML并缓存
              var htmlStr = node2html(child, e);
              NODE_TO_HTML.set(child, htmlStr);
              return htmlStr;
          }).join('');
          return html;
      };
      // 获取 text
      e.getText = function () {
          var _a = e.children, children = _a === void 0 ? [] : _a;
          return children.map(function (child) { return distExports$1.Node.string(child); }).join('\n');
      };
      // 获取选区文字
      e.getSelectionText = function () {
          var selection = e.selection;
          if (selection == null) {
              return '';
          }
          return distExports$1.Editor.string(editor, selection);
      };
      // 根据 type 获取 elems
      e.getElemsByType = function (type, isPrefix) {
          var e_3, _a;
          if (isPrefix === void 0) { isPrefix = false; }
          var elems = [];
          // 获取 editor 所有 nodes
          var nodeEntries = distExports$1.Editor.nodes(e, {
              at: [],
              universal: true,
          });
          try {
              for (var nodeEntries_1 = __values(nodeEntries), nodeEntries_1_1 = nodeEntries_1.next(); !nodeEntries_1_1.done; nodeEntries_1_1 = nodeEntries_1.next()) {
                  var nodeEntry = nodeEntries_1_1.value;
                  var _b = __read(nodeEntry, 1), node = _b[0];
                  if (distExports$1.Element.isElement(node)) {
                      // 判断 type （前缀 or 全等）
                      var flag = isPrefix ? node.type.indexOf(type) >= 0 : node.type === type;
                      if (flag) {
                          var key = DomEditor.findKey(e, node);
                          var id = genElemId$1(node.type, key.id);
                          // node + id
                          elems.push(__assign(__assign({}, node), { id: id }));
                      }
                  }
              }
          }
          catch (e_3_1) { e_3 = { error: e_3_1 }; }
          finally {
              try {
                  if (nodeEntries_1_1 && !nodeEntries_1_1.done && (_a = nodeEntries_1.return)) _a.call(nodeEntries_1);
              }
              finally { if (e_3) throw e_3.error; }
          }
          return elems;
      };
      // 根据 type 前缀，获取 elems
      e.getElemsByTypePrefix = function (typePrefix) {
          return e.getElemsByType(typePrefix, true);
      };
      /**
       * 判断 editor 是否为空（只有一个空 paragraph）
       */
      e.isEmpty = function () {
          var _a = e.children, children = _a === void 0 ? [] : _a;
          if (children.length > 1) {
              return false;
          } // >1 个顶级节点
          var firstNode = children[0];
          if (firstNode == null) {
              return true;
          } // editor.children 空数组
          if (!distExports$1.Element.isElement(firstNode) || firstNode.type !== 'paragraph') {
              return false;
          }
          var _b = firstNode.children, texts = _b === void 0 ? [] : _b;
          if (texts.length > 1) {
              return false;
          } // >1 text node
          var t = texts[0];
          return t == null || (distExports$1.Text.isText(t) && t.text === ''); // 无 text 节点 or 只有一个 text 且是空字符串
      };
      /**
       * 清空内容
       */
      e.clear = function () {
          var initialEditorValue = [
              {
                  type: 'paragraph',
                  children: [{ text: '' }],
              },
          ];
          distExports$1.Transforms.delete(e, {
              at: {
                  anchor: distExports$1.Editor.start(e, []),
                  focus: distExports$1.Editor.end(e, []),
              },
          });
          if (e.children.length === 0) {
              distExports$1.Transforms.insertNodes(e, initialEditorValue);
          }
      };
      e.getParentNode = function (node) {
          return DomEditor.getParentNode(e, node);
      };
      /**
       * 插入 html （不保证语义完全正确），用于粘贴
       * @param html html string
       * @param isRecursive 是否递归调用（内部使用，使用者不要传参）
       */
      e.dangerouslyInsertHtml = function (html, isRecursive) {
          if (html === void 0) { html = ''; }
          if (isRecursive === void 0) { isRecursive = false; }
          if (!html) {
              return;
          }
          // ------------- 把 html 转换为 DOM nodes -------------
          var div = document.createElement('div');
          div.innerHTML = html;
          var domNodes = Array.from(div.childNodes);
          // 过滤一下，只保留 elem 和 text ，并却掉一些无用标签（如 style script 等）
          domNodes = domNodes.filter(function (n) {
              var nodeName = n.nodeName;
              // Text Node
              if (isDOMText(n)) {
                  return true;
              }
              // Element Node
              if (isDOMElement(n)) {
                  // 过滤掉忽略的 tag
                  if (IGNORE_TAGS.has(nodeName.toLowerCase())) {
                      return false;
                  }
                  return true;
              }
              return false;
          });
          if (domNodes.length === 0) {
              return;
          }
          // ------------- 把 DOM nodes 转换为 slate nodes ，并插入到编辑器 -------------
          var selection = e.selection;
          if (selection == null) {
              return;
          }
          var curEmptyParagraphPath = null;
          // 是否当前选中了一个空 p （如果是，后面会删掉）
          // 递归调用时不判断
          if (DomEditor.isSelectedEmptyParagraph(e) && !isRecursive) {
              var focus_1 = selection.focus;
              curEmptyParagraphPath = [focus_1.path[0]]; // 只记录顶级 path 即可
          }
          div.setAttribute('hidden', 'true');
          document.body.appendChild(div);
          var insertedElemNum = 0; // 记录插入 elem 的数量 ( textNode 不算 )
          domNodes.forEach(function (n, index) {
              var nodeName = n.nodeName, _a = n.textContent, textContent = _a === void 0 ? '' : _a;
              // ------ Text node ------
              if (isDOMText(n)) {
                  if (!textContent || !textContent.trim()) {
                      return;
                  } // 无内容的 Text
                  // 插入文本
                  // 【注意】insertNode 和 insertText 有区别：后者会继承光标处的文本样式（如加粗）；前者会加入纯文本，无样式；
                  e.insertNode({ text: textContent });
                  return;
              }
              // ------ Element Node ------
              if (nodeName === 'BR') {
                  e.insertText('\n'); // 换行
                  return;
              }
              // 判断当前的 el 是否是可识别的 tag
              var el = n;
              var isParseMatch = false;
              if (TEXT_TAGS.includes(nodeName.toLowerCase())) {
                  // text elem，如 <span>
                  isParseMatch = true;
              }
              else {
                  for (var selector in PARSE_ELEM_HTML_CONF) {
                      if (el.matches(selector)) {
                          // 普通 elem，如 <p> <a> 等（非 text elem）
                          isParseMatch = true;
                          break;
                      }
                  }
              }
              // 匹配上了，则生成 slate elem 并插入
              if (isParseMatch) {
                  // 生成并插入
                  var $el = $$1(el);
                  var parsedRes = parseElemHtml($el, e);
                  if (Array.isArray(parsedRes)) {
                      parsedRes.forEach(function (parsedEl) { return insertElemToEditor(e, parsedEl); });
                      insertedElemNum += 1; // 记录数量
                  }
                  else {
                      insertElemToEditor(e, parsedRes);
                      insertedElemNum += 1; // 记录数量
                  }
                  // 如果当前选中 void node ，则选区移动一下
                  if (DomEditor.isSelectedVoidNode(e)) {
                      e.move(1);
                  }
                  return;
              }
              // 没有匹配上（如 div ）
              var display = window.getComputedStyle(el).display;
              if (!DomEditor.isSelectedEmptyParagraph(e)) {
                  // 当前不是空行，且 非 inline - 则换行
                  if (display.indexOf('inline') < 0) {
                      if (index >= 1) {
                          var prevEl = domNodes[index - 1];
                          // 如果是 list 列表需要多插入一个回车,模拟双回车删除空 list
                          if (isUnprocessedListElement(prevEl)) {
                              e.insertBreak();
                          }
                      }
                      e.insertBreak();
                  }
              }
              e.dangerouslyInsertHtml(el.innerHTML, true); // 继续插入子内容
          });
          // 删除第一个空行
          if (insertedElemNum && curEmptyParagraphPath) {
              if (DomEditor.isEmptyPath(e, curEmptyParagraphPath)) {
                  distExports$1.Transforms.removeNodes(e, { at: curEmptyParagraphPath });
              }
          }
          div.remove(); // 粘贴完了，移除 div
      };
      /**
       * 重置 HTML 内容
       * @param html html string
       */
      e.setHtml = function (html) {
          if (html === void 0) { html = ''; }
          // 记录编辑器当前状态
          var isEditorDisabled = e.isDisabled();
          var isEditorFocused = e.isFocused();
          var editorSelectionStr = JSON.stringify(e.selection);
          // 删除当前内容
          e.enable();
          e.focus();
          // 需要标准的{anchor:xxx, focus: xxxx} 否则无法通过slate history的检查
          // 使用 e.select([]) e.selectAll() 生成的location不是标准的{anchor: xxxx, focus: xxx}形式
          // https://github.com/wangeditor-team/wangeditor/issues/4754
          e.clear();
          // 设置新内容
          var newContent = htmlToContent(e, html == null ? '' : html);
          distExports$1.Transforms.insertFragment(e, newContent);
          // 恢复编辑器状态和选区
          if (!isEditorFocused) {
              e.deselect();
              e.blur();
          }
          if (isEditorDisabled) {
              e.deselect();
              e.disable();
          }
          if (e.isFocused()) {
              try {
                  e.select(JSON.parse(editorSelectionStr)); // 选中原来的位置
              }
              catch (ex) {
                  e.select(distExports$1.Editor.start(e, [])); // 选中开始
              }
          }
      };
      return e;
  };

  /**
   * @description slate 插件 - dom 相关
   * @author wangfupeng
   */
  var ID$1 = 1;
  /**
   * `withDOM` adds DOM specific behaviors to the editor.
   */
  var withDOM = function (editor) {
      var e = editor;
      e.id = "wangEditor-".concat(ID$1++);
      e.isDestroyed = false;
      e.isFullScreen = false;
      // focus
      e.focus = function (isEnd) {
          var el = DomEditor.toDOMNode(e, e);
          el.focus({ preventScroll: true });
          IS_FOCUSED.set(e, true);
          // 恢复选区
          if (isEnd) {
              // 选区定位到结尾
              var end = distExports$1.Editor.end(e, []);
              distExports$1.Transforms.select(e, end);
          }
          else {
              var selection = EDITOR_TO_SELECTION$1.get(e);
              if (selection) {
                  distExports$1.Transforms.select(e, selection); // 选区定位到之前的位置
              }
              else {
                  distExports$1.Transforms.select(e, distExports$1.Editor.start(e, [])); // 选区定位到开始
              }
          }
      };
      // isFocused
      e.isFocused = function () {
          return !!IS_FOCUSED.get(e);
      };
      // blur
      e.blur = function () {
          var el = DomEditor.toDOMNode(e, e);
          el.blur();
          // 手动执行一次光标 deselect, 触发 onchange 回调，改变 Toolbar 的状态
          distExports$1.Transforms.deselect(e);
          IS_FOCUSED.set(e, false);
      };
      // 手动更新视图
      e.updateView = function () {
          var textarea = DomEditor.getTextarea(e);
          textarea.changeViewState();
          var toolbar = DomEditor.getToolbar(e);
          toolbar && toolbar.changeToolbarState();
          var hoverbar = DomEditor.getHoverbar(e);
          hoverbar && hoverbar.changeHoverbarState();
      };
      // destroy
      e.destroy = function () {
          // 销毁相关实例（会销毁 DOM）
          if (e.isDestroyed) {
              return;
          }
          // fix https://github.com/wangeditor-next/wangeditor-next-v5/issues/457
          var textarea = DomEditor.getTextarea(e);
          textarea.destroy();
          EDITOR_TO_TEXTAREA.delete(e);
          TEXTAREA_TO_EDITOR.delete(textarea);
          var toolbar = DomEditor.getToolbar(e);
          if (toolbar) {
              toolbar.destroy();
              EDITOR_TO_TOOLBAR.delete(e);
              TOOLBAR_TO_EDITOR.delete(toolbar);
          }
          var hoverbar = DomEditor.getHoverbar(e);
          if (hoverbar) {
              hoverbar.destroy();
              EDITOR_TO_HOVER_BAR.delete(e);
              HOVER_BAR_TO_EDITOR.delete(hoverbar);
          }
          // 修改属性
          e.isDestroyed = true;
          // 触发自定义事件
          e.emit('destroyed');
      };
      // scroll to elem
      e.scrollToElem = function (id) {
          var scroll = e.getConfig().scroll;
          if (!scroll) {
              // 没有设置编辑区域滚动，则不能用
              var info = '编辑器禁用了 scroll ，编辑器内容无法滚动，请自行实现该功能';
              info += '\nYou has disabled editor scroll, please do this yourself';
              console.warn(info);
              return;
          }
          var $elem = $$1("#".concat(id));
          if ($elem.length === 0) {
              return;
          }
          // $elem 不在 editor DOM 范围之内
          var elem = $elem[0];
          if (!DomEditor.hasDOMNode(e, elem)) {
              var info = "Element (found by id is '".concat(id, "') is not in editor DOM");
              info += "\n \u901A\u8FC7 id '".concat(id, "' \u627E\u5230\u7684 element \u4E0D\u5728 editor DOM \u4E4B\u5185");
              console.error(info, elem);
              return;
          }
          var textarea = DomEditor.getTextarea(e);
          var $textAreaContainer = textarea.$textAreaContainer, $scroll = textarea.$scroll;
          var elemTop = $elem.offset().top;
          var containerTop = $textAreaContainer.offset().top;
          // 滚动到指定元素
          $scroll[0].scrollBy({ top: elemTop - containerTop, behavior: 'smooth' });
      };
      // showProgressBar
      e.showProgressBar = function (progress) {
          // progress 值范围： 0 - 100
          if (progress < 1) {
              return;
          }
          // 显示进度条
          var textarea = DomEditor.getTextarea(e);
          textarea.changeProgress(progress);
      };
      // 隐藏 panel 或 modal
      e.hidePanelOrModal = function () {
          var set = EDITOR_TO_PANEL_AND_MODAL.get(e);
          if (set == null) {
              return;
          }
          set.forEach(function (panelOrModal) { return panelOrModal.hide(); });
      };
      e.enable = function () {
          var config = e.getConfig();
          config.readOnly = false;
          // 更新视图
          e.updateView();
      };
      e.disable = function () {
          var config = e.getConfig();
          config.readOnly = true;
          // 更新视图
          e.updateView();
      };
      e.isDisabled = function () {
          var config = e.getConfig();
          return config.readOnly;
      };
      e.toDOMNode = function (node) {
          return DomEditor.toDOMNode(e, node);
      };
      e.fullScreen = function () {
          if (e.isFullScreen) {
              return;
          }
          var $toolbarBox = null;
          var toolbar = DomEditor.getToolbar(e);
          if (toolbar) {
              $toolbarBox = toolbar.$box;
          }
          var textarea = DomEditor.getTextarea(e);
          var $textAreaBox = textarea.$box;
          var $parent = $textAreaBox.parent();
          if ($toolbarBox && $toolbarBox.parent()[0] !== $parent[0]) {
              // toolbar DOM 父节点，和 editor DOM 父节点不一致，则不能设置全屏
              var info = 'Can not set full screen, cause toolbar DOM parent is not equal to textarea DOM parent';
              info += '\n不能设置全屏，因为 toolbar DOM 父节点和 textarea DOM 父节点不一致';
              throw new Error(info);
          }
          // 设置全屏
          $parent.addClass('w-e-full-screen-container');
          // 设置 z-index
          var curZIndex = $parent.css('z-index');
          $parent.attr('data-z-index', curZIndex.toString());
          // 记录属性
          e.isFullScreen = true;
          // 触发自定义事件
          e.emit('fullScreen');
      };
      e.unFullScreen = function () {
          if (!e.isFullScreen) {
              return;
          }
          var textarea = DomEditor.getTextarea(e);
          var $textAreaBox = textarea.$box;
          var $parent = $textAreaBox.parent();
          // 解决#issue175, 编辑器取消全屏 - element dialog组件会被隐藏
          setTimeout(function () {
              // 取消全屏
              $parent.removeClass('w-e-full-screen-container');
              // 记录属性
              e.isFullScreen = false;
              // 触发自定义事件
              e.emit('unFullScreen');
          }, 200);
      };
      /**
       * 获取编辑区域 DOM 容器
       */
      e.getEditableContainer = function () {
          var textarea = DomEditor.getTextarea(e);
          return textarea.$textAreaContainer[0];
      };
      return e;
  };

  var eventEmitter = {exports: {}};

  var d$1 = {exports: {}};

  var is$4;
  var hasRequiredIs$4;

  function requireIs$4 () {
  	if (hasRequiredIs$4) return is$4;
  	hasRequiredIs$4 = 1;

  	// ES3 safe
  	var _undefined = void 0;

  	is$4 = function (value) { return value !== _undefined && value !== null; };
  	return is$4;
  }

  var is$3;
  var hasRequiredIs$3;

  function requireIs$3 () {
  	if (hasRequiredIs$3) return is$3;
  	hasRequiredIs$3 = 1;

  	var isValue = requireIs$4();

  	// prettier-ignore
  	var possibleTypes = { "object": true, "function": true, "undefined": true /* document.all */ };

  	is$3 = function (value) {
  		if (!isValue(value)) return false;
  		return hasOwnProperty.call(possibleTypes, typeof value);
  	};
  	return is$3;
  }

  var is$2;
  var hasRequiredIs$2;

  function requireIs$2 () {
  	if (hasRequiredIs$2) return is$2;
  	hasRequiredIs$2 = 1;

  	var isObject = requireIs$3();

  	is$2 = function (value) {
  		if (!isObject(value)) return false;
  		try {
  			if (!value.constructor) return false;
  			return value.constructor.prototype === value;
  		} catch (error) {
  			return false;
  		}
  	};
  	return is$2;
  }

  var is$1;
  var hasRequiredIs$1;

  function requireIs$1 () {
  	if (hasRequiredIs$1) return is$1;
  	hasRequiredIs$1 = 1;

  	var isPrototype = requireIs$2();

  	is$1 = function (value) {
  		if (typeof value !== "function") return false;

  		if (!hasOwnProperty.call(value, "length")) return false;

  		try {
  			if (typeof value.length !== "number") return false;
  			if (typeof value.call !== "function") return false;
  			if (typeof value.apply !== "function") return false;
  		} catch (error) {
  			return false;
  		}

  		return !isPrototype(value);
  	};
  	return is$1;
  }

  var is;
  var hasRequiredIs;

  function requireIs () {
  	if (hasRequiredIs) return is;
  	hasRequiredIs = 1;

  	var isFunction = requireIs$1();

  	var classRe = /^\s*class[\s{/}]/, functionToString = Function.prototype.toString;

  	is = function (value) {
  		if (!isFunction(value)) return false;
  		if (classRe.test(functionToString.call(value))) return false;
  		return true;
  	};
  	return is;
  }

  var isImplemented$2;
  var hasRequiredIsImplemented$2;

  function requireIsImplemented$2 () {
  	if (hasRequiredIsImplemented$2) return isImplemented$2;
  	hasRequiredIsImplemented$2 = 1;

  	isImplemented$2 = function () {
  		var assign = Object.assign, obj;
  		if (typeof assign !== "function") return false;
  		obj = { foo: "raz" };
  		assign(obj, { bar: "dwa" }, { trzy: "trzy" });
  		return obj.foo + obj.bar + obj.trzy === "razdwatrzy";
  	};
  	return isImplemented$2;
  }

  var isImplemented$1;
  var hasRequiredIsImplemented$1;

  function requireIsImplemented$1 () {
  	if (hasRequiredIsImplemented$1) return isImplemented$1;
  	hasRequiredIsImplemented$1 = 1;

  	isImplemented$1 = function () {
  		try {
  			Object.keys("primitive");
  			return true;
  		} catch (e) {
  			return false;
  		}
  	};
  	return isImplemented$1;
  }

  var noop$1;
  var hasRequiredNoop;

  function requireNoop () {
  	if (hasRequiredNoop) return noop$1;
  	hasRequiredNoop = 1;

  	// eslint-disable-next-line no-empty-function
  	noop$1 = function () {};
  	return noop$1;
  }

  var isValue;
  var hasRequiredIsValue;

  function requireIsValue () {
  	if (hasRequiredIsValue) return isValue;
  	hasRequiredIsValue = 1;

  	var _undefined = requireNoop()(); // Support ES3 engines

  	isValue = function (val) { return val !== _undefined && val !== null; };
  	return isValue;
  }

  var shim$2;
  var hasRequiredShim$2;

  function requireShim$2 () {
  	if (hasRequiredShim$2) return shim$2;
  	hasRequiredShim$2 = 1;

  	var isValue = requireIsValue();

  	var keys = Object.keys;

  	shim$2 = function (object) { return keys(isValue(object) ? Object(object) : object); };
  	return shim$2;
  }

  var keys;
  var hasRequiredKeys;

  function requireKeys () {
  	if (hasRequiredKeys) return keys;
  	hasRequiredKeys = 1;

  	keys = requireIsImplemented$1()() ? Object.keys : requireShim$2();
  	return keys;
  }

  var validValue;
  var hasRequiredValidValue;

  function requireValidValue () {
  	if (hasRequiredValidValue) return validValue;
  	hasRequiredValidValue = 1;

  	var isValue = requireIsValue();

  	validValue = function (value) {
  		if (!isValue(value)) throw new TypeError("Cannot use null or undefined");
  		return value;
  	};
  	return validValue;
  }

  var shim$1;
  var hasRequiredShim$1;

  function requireShim$1 () {
  	if (hasRequiredShim$1) return shim$1;
  	hasRequiredShim$1 = 1;

  	var keys  = requireKeys()
  	  , value = requireValidValue()
  	  , max   = Math.max;

  	shim$1 = function (dest, src /*, …srcn*/) {
  		var error, i, length = max(arguments.length, 2), assign;
  		dest = Object(value(dest));
  		assign = function (key) {
  			try {
  				dest[key] = src[key];
  			} catch (e) {
  				if (!error) error = e;
  			}
  		};
  		for (i = 1; i < length; ++i) {
  			src = arguments[i];
  			keys(src).forEach(assign);
  		}
  		if (error !== undefined) throw error;
  		return dest;
  	};
  	return shim$1;
  }

  var assign;
  var hasRequiredAssign;

  function requireAssign () {
  	if (hasRequiredAssign) return assign;
  	hasRequiredAssign = 1;

  	assign = requireIsImplemented$2()() ? Object.assign : requireShim$1();
  	return assign;
  }

  var normalizeOptions;
  var hasRequiredNormalizeOptions;

  function requireNormalizeOptions () {
  	if (hasRequiredNormalizeOptions) return normalizeOptions;
  	hasRequiredNormalizeOptions = 1;

  	var isValue = requireIsValue();

  	var forEach = Array.prototype.forEach, create = Object.create;

  	var process = function (src, obj) {
  		var key;
  		for (key in src) obj[key] = src[key];
  	};

  	// eslint-disable-next-line no-unused-vars
  	normalizeOptions = function (opts1 /*, …options*/) {
  		var result = create(null);
  		forEach.call(arguments, function (options) {
  			if (!isValue(options)) return;
  			process(Object(options), result);
  		});
  		return result;
  	};
  	return normalizeOptions;
  }

  var isImplemented;
  var hasRequiredIsImplemented;

  function requireIsImplemented () {
  	if (hasRequiredIsImplemented) return isImplemented;
  	hasRequiredIsImplemented = 1;

  	var str = "razdwatrzy";

  	isImplemented = function () {
  		if (typeof str.contains !== "function") return false;
  		return str.contains("dwa") === true && str.contains("foo") === false;
  	};
  	return isImplemented;
  }

  var shim;
  var hasRequiredShim;

  function requireShim () {
  	if (hasRequiredShim) return shim;
  	hasRequiredShim = 1;

  	var indexOf = String.prototype.indexOf;

  	shim = function (searchString /*, position*/) {
  		return indexOf.call(this, searchString, arguments[1]) > -1;
  	};
  	return shim;
  }

  var contains;
  var hasRequiredContains;

  function requireContains () {
  	if (hasRequiredContains) return contains;
  	hasRequiredContains = 1;

  	contains = requireIsImplemented()() ? String.prototype.contains : requireShim();
  	return contains;
  }

  var hasRequiredD;

  function requireD () {
  	if (hasRequiredD) return d$1.exports;
  	hasRequiredD = 1;

  	var isValue         = requireIs$4()
  	  , isPlainFunction = requireIs()
  	  , assign          = requireAssign()
  	  , normalizeOpts   = requireNormalizeOptions()
  	  , contains        = requireContains();

  	var d = (d$1.exports = function (dscr, value/*, options*/) {
  		var c, e, w, options, desc;
  		if (arguments.length < 2 || typeof dscr !== "string") {
  			options = value;
  			value = dscr;
  			dscr = null;
  		} else {
  			options = arguments[2];
  		}
  		if (isValue(dscr)) {
  			c = contains.call(dscr, "c");
  			e = contains.call(dscr, "e");
  			w = contains.call(dscr, "w");
  		} else {
  			c = w = true;
  			e = false;
  		}

  		desc = { value: value, configurable: c, enumerable: e, writable: w };
  		return !options ? desc : assign(normalizeOpts(options), desc);
  	});

  	d.gs = function (dscr, get, set/*, options*/) {
  		var c, e, options, desc;
  		if (typeof dscr !== "string") {
  			options = set;
  			set = get;
  			get = dscr;
  			dscr = null;
  		} else {
  			options = arguments[3];
  		}
  		if (!isValue(get)) {
  			get = undefined;
  		} else if (!isPlainFunction(get)) {
  			options = get;
  			get = set = undefined;
  		} else if (!isValue(set)) {
  			set = undefined;
  		} else if (!isPlainFunction(set)) {
  			options = set;
  			set = undefined;
  		}
  		if (isValue(dscr)) {
  			c = contains.call(dscr, "c");
  			e = contains.call(dscr, "e");
  		} else {
  			c = true;
  			e = false;
  		}

  		desc = { get: get, set: set, configurable: c, enumerable: e };
  		return !options ? desc : assign(normalizeOpts(options), desc);
  	};
  	return d$1.exports;
  }

  var validCallable;
  var hasRequiredValidCallable;

  function requireValidCallable () {
  	if (hasRequiredValidCallable) return validCallable;
  	hasRequiredValidCallable = 1;

  	validCallable = function (fn) {
  		if (typeof fn !== "function") throw new TypeError(fn + " is not a function");
  		return fn;
  	};
  	return validCallable;
  }

  var hasRequiredEventEmitter;

  function requireEventEmitter () {
  	if (hasRequiredEventEmitter) return eventEmitter.exports;
  	hasRequiredEventEmitter = 1;
  	(function (module, exports) {

  		var d        = requireD()
  		  , callable = requireValidCallable()

  		  , apply = Function.prototype.apply, call = Function.prototype.call
  		  , create = Object.create, defineProperty = Object.defineProperty
  		  , defineProperties = Object.defineProperties
  		  , hasOwnProperty = Object.prototype.hasOwnProperty
  		  , descriptor = { configurable: true, enumerable: false, writable: true }

  		  , on, once, off, emit, methods, descriptors, base;

  		on = function (type, listener) {
  			var data;

  			callable(listener);

  			if (!hasOwnProperty.call(this, '__ee__')) {
  				data = descriptor.value = create(null);
  				defineProperty(this, '__ee__', descriptor);
  				descriptor.value = null;
  			} else {
  				data = this.__ee__;
  			}
  			if (!data[type]) data[type] = listener;
  			else if (typeof data[type] === 'object') data[type].push(listener);
  			else data[type] = [data[type], listener];

  			return this;
  		};

  		once = function (type, listener) {
  			var once, self;

  			callable(listener);
  			self = this;
  			on.call(this, type, once = function () {
  				off.call(self, type, once);
  				apply.call(listener, this, arguments);
  			});

  			once.__eeOnceListener__ = listener;
  			return this;
  		};

  		off = function (type, listener) {
  			var data, listeners, candidate, i;

  			callable(listener);

  			if (!hasOwnProperty.call(this, '__ee__')) return this;
  			data = this.__ee__;
  			if (!data[type]) return this;
  			listeners = data[type];

  			if (typeof listeners === 'object') {
  				for (i = 0; (candidate = listeners[i]); ++i) {
  					if ((candidate === listener) ||
  							(candidate.__eeOnceListener__ === listener)) {
  						if (listeners.length === 2) data[type] = listeners[i ? 0 : 1];
  						else listeners.splice(i, 1);
  					}
  				}
  			} else {
  				if ((listeners === listener) ||
  						(listeners.__eeOnceListener__ === listener)) {
  					delete data[type];
  				}
  			}

  			return this;
  		};

  		emit = function (type) {
  			var i, l, listener, listeners, args;

  			if (!hasOwnProperty.call(this, '__ee__')) return;
  			listeners = this.__ee__[type];
  			if (!listeners) return;

  			if (typeof listeners === 'object') {
  				l = arguments.length;
  				args = new Array(l - 1);
  				for (i = 1; i < l; ++i) args[i - 1] = arguments[i];

  				listeners = listeners.slice();
  				for (i = 0; (listener = listeners[i]); ++i) {
  					apply.call(listener, this, args);
  				}
  			} else {
  				switch (arguments.length) {
  				case 1:
  					call.call(listeners, this);
  					break;
  				case 2:
  					call.call(listeners, this, arguments[1]);
  					break;
  				case 3:
  					call.call(listeners, this, arguments[1], arguments[2]);
  					break;
  				default:
  					l = arguments.length;
  					args = new Array(l - 1);
  					for (i = 1; i < l; ++i) {
  						args[i - 1] = arguments[i];
  					}
  					apply.call(listeners, this, args);
  				}
  			}
  		};

  		methods = {
  			on: on,
  			once: once,
  			off: off,
  			emit: emit
  		};

  		descriptors = {
  			on: d(on),
  			once: d(once),
  			off: d(off),
  			emit: d(emit)
  		};

  		base = defineProperties({}, descriptors);

  		module.exports = exports = function (o) {
  			return (o == null) ? create(base) : defineProperties(Object(o), descriptors);
  		};
  		exports.methods = methods; 
  	} (eventEmitter, eventEmitter.exports));
  	return eventEmitter.exports;
  }

  var eventEmitterExports = requireEventEmitter();
  var ee = /*@__PURE__*/getDefaultExportFromCjs(eventEmitterExports);

  /**
   * @description 自定义事件 插件
   * @author wangfupeng
   */
  /**
   * 获取 editor 的 emitter 实例
   * @param editor editor
   */
  function getEmitter(editor) {
      var emitter = EDITOR_TO_EMITTER.get(editor);
      if (emitter == null) {
          emitter = ee();
          EDITOR_TO_EMITTER.set(editor, emitter);
      }
      return emitter;
  }
  // 记录下当前 editor 的 destroy listeners
  var EDITOR_TO_DESTROY_LISTENERS = new WeakMap();
  function recordDestroyListeners(editor, fn) {
      var listeners = EDITOR_TO_DESTROY_LISTENERS.get(editor);
      if (listeners == null) {
          listeners = new Set();
          EDITOR_TO_DESTROY_LISTENERS.set(editor, listeners);
      }
      listeners.add(fn);
  }
  function getDestroyListeners(editor) {
      return EDITOR_TO_DESTROY_LISTENERS.get(editor) || new Set();
  }
  function clearDestroyListeners(editor) {
      EDITOR_TO_DESTROY_LISTENERS.set(editor, new Set());
  }
  var withEmitter = function (editor) {
      var e = editor;
      // 自定义事件
      e.on = function (type, listener) {
          var emitter = getEmitter(e);
          // 绑定事件
          emitter.on(type, listener);
          // destroyed 事件需要记录下来，以便最后统一 off 掉
          if (type === 'destroyed')
              recordDestroyListeners(e, listener);
          // editor 销毁时，取消绑定 - 重要
          if (type !== 'destroyed') {
              var fn = function () { return emitter.off(type, listener); };
              emitter.on('destroyed', fn);
              recordDestroyListeners(e, fn); // 记录下来
          }
      };
      e.once = function (type, listener) {
          var emitter = getEmitter(e);
          emitter.once(type, listener);
      };
      e.off = function (type, listener) {
          var emitter = getEmitter(e);
          emitter.off(type, listener);
      };
      e.emit = function (type) {
          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              args[_i - 1] = arguments[_i];
          }
          var emitter = getEmitter(e);
          emitter.emit.apply(emitter, __spreadArray([type], __read(args), false));
          // editor 销毁时，off 掉 destroyed listeners
          if (type === 'destroyed') {
              var listeners = getDestroyListeners(e);
              listeners.forEach(function (fn) { return emitter.off('destroyed', fn); });
              clearDestroyListeners(e); // 清空 destroyed listeners
          }
      };
      return e;
  };

  /**
   * @description slate 插件 - event data 相关
   * @author wangfupeng
   */
  var withEventData = function (editor) {
      var e = editor;
      e.setFragmentData = function (data) {
          var selection = e.selection;
          if (!selection) {
              return;
          }
          // 获取开始、结束两个 point { path, offset }
          var _a = __read(distExports$1.Range.edges(selection), 2), start = _a[0], end = _a[1];
          // Editor.void - Match a void node in the current branch of the editor.
          var startVoid = distExports$1.Editor.void(e, { at: start.path });
          var endVoid = distExports$1.Editor.void(e, { at: end.path });
          if (distExports$1.Range.isCollapsed(selection) && !startVoid) {
              return;
          }
          // Create a fake selection so that we can add a Base64-encoded copy of the
          // fragment to the HTML, to decode on future pastes.
          var domRange = DomEditor.toDOMRange(e, selection);
          var contents = domRange.cloneContents();
          var attach = contents.childNodes[0];
          // Make sure attach is non-empty, since empty nodes will not get copied.
          contents.childNodes.forEach(function (node) {
              if (node.textContent && node.textContent.trim() !== '') {
                  attach = node;
              }
          });
          // COMPAT: If the end node is a void node, we need to move the end of the
          // range from the void node's spacer span, to the end of the void node's
          // content, since the spacer is before void's content in the DOM.
          if (endVoid) {
              var _b = __read(endVoid, 1), voidNode = _b[0];
              var r = domRange.cloneRange();
              var domNode = DomEditor.toDOMNode(e, voidNode);
              r.setEndAfter(domNode);
              contents = r.cloneContents();
          }
          // COMPAT: If the start node is a void node, we need to attach the encoded
          // fragment to the void node's content node instead of the spacer, because
          // attaching it to empty `<div>/<span>` nodes will end up having it erased by
          // most browsers. (2018/04/27)
          if (startVoid) {
              attach = contents.querySelector('[data-slate-spacer]');
          }
          // Remove any zero-width space spans from the cloned DOM so that they don't
          // show up elsewhere when pasted.
          Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(function (zw) {
              var isNewline = zw.getAttribute('data-slate-zero-width') === 'n';
              zw.textContent = isNewline ? '\n' : '';
          });
          // Set a `data-slate-fragment` attribute on a non-empty node, so it shows up
          // in the HTML, and can be used for intra-Slate pasting. If it's a text
          // node, wrap it in a `<span>` so we have something to set an attribute on.
          if (isDOMText(attach)) {
              var span = attach.ownerDocument.createElement('span');
              // COMPAT: In Chrome and Safari, if we don't add the `white-space` style
              // then leading and trailing spaces will be ignored. (2017/09/21)
              span.style.whiteSpace = 'pre';
              span.appendChild(attach);
              contents.appendChild(span);
              attach = span;
          }
          var fragment = e.getFragment();
          var string = JSON.stringify(fragment);
          var encoded = window.btoa(encodeURIComponent(string));
          attach.setAttribute('data-slate-fragment', encoded);
          data.setData('application/x-slate-fragment', encoded);
          // Add the content to a <div> so that we can get its inner HTML.
          var div = contents.ownerDocument.createElement('div');
          div.appendChild(contents);
          div.setAttribute('hidden', 'true');
          contents.ownerDocument.body.appendChild(div);
          data.setData('text/html', div.innerHTML);
          data.setData('text/plain', getPlainText(div));
          contents.ownerDocument.body.removeChild(div);
          return data;
      };
      e.insertData = function (data) {
          var e_1, _a;
          var fragment = data.getData('application/x-slate-fragment');
          // 只有从编辑器中内复制的内容，才会获取 fragment，从其他地方粘贴到编辑器中，不会获取 fragment
          if (fragment) {
              var decoded = decodeURIComponent(window.atob(fragment));
              var parsed = JSON.parse(decoded);
              e.insertFragment(parsed);
              return;
          }
          var text = data.getData('text/plain');
          var html = data.getData('text/html');
          // const rtf = data.getData('text/rtf')
          if (html) {
              e.dangerouslyInsertHtml(html);
              return;
          }
          if (text) {
              var lines = text.split(/\n\r|\r\n|\r|\n/);
              var split = false;
              try {
                  for (var lines_1 = __values(lines), lines_1_1 = lines_1.next(); !lines_1_1.done; lines_1_1 = lines_1.next()) {
                      var line = lines_1_1.value;
                      var leftLength = DomEditor.getLeftLengthOfMaxLength(e);
                      // 当设置了 maxLength 且剩余 length 为0时，不插入任何字符
                      if (split && leftLength > 0) {
                          distExports$1.Transforms.splitNodes(e, { always: true });
                      }
                      e.insertText(line);
                      split = true;
                  }
              }
              catch (e_1_1) { e_1 = { error: e_1_1 }; }
              finally {
                  try {
                      if (lines_1_1 && !lines_1_1.done && (_a = lines_1.return)) _a.call(lines_1);
                  }
                  finally { if (e_1) throw e_1.error; }
              }
          }
      };
      return e;
  };

  /**
   * @description slate 插件 - maxLength
   * @author wangfupeng
   */
  // 【注意】拼音输入时 maxLength 限制在 CompositionEnd 事件中处理
  var withMaxLength = function (editor) {
      var e = editor;
      var insertText = e.insertText, insertNode = e.insertNode, insertFragment = e.insertFragment, dangerouslyInsertHtml = e.dangerouslyInsertHtml;
      // 处理 text
      e.insertText = function (text) {
          var maxLength = e.getConfig().maxLength;
          if (!maxLength) {
              insertText(text);
              return;
          }
          var leftLength = DomEditor.getLeftLengthOfMaxLength(e);
          if (leftLength <= 0) {
              // 已经触发 maxLength ，不再输入文字
              return;
          }
          if (leftLength < text.length) {
              // 剩余长度小于 text 长度，则截取 text
              insertText(text.slice(0, leftLength));
              return;
          }
          insertText(text);
      };
      // 处理 node
      e.insertNode = function (node) {
          var maxLength = e.getConfig().maxLength;
          if (!maxLength) {
              insertNode(node);
              return;
          }
          var leftLength = DomEditor.getLeftLengthOfMaxLength(e);
          if (leftLength <= 0) {
              // 已经触发 maxLength ，不再插入
              return;
          }
          var text = distExports$1.Node.string(node);
          if (leftLength < text.length) {
              // 剩余长度，不够 node text 长度，不再插入
              return;
          }
          insertNode(node);
      };
      // 处理 fragment
      e.insertFragment = function (fragment) {
          var maxLength = e.getConfig().maxLength;
          if (!maxLength) {
              // 无 maxLength
              insertFragment(fragment);
              return;
          }
          // 有 maxLength ，则分别插入 node
          if (fragment.length > 0) {
              var firstNode = fragment[0];
              var leftLength = DomEditor.getLeftLengthOfMaxLength(e);
              var firstNodeTextLength = distExports$1.Node.string(firstNode).length;
              // 第一个或只有一个 node 时，使用 insertFragment ，防止换行
              if (leftLength < firstNodeTextLength) {
                  // 已经触发 maxLength ，不再插入
                  return;
              }
              insertFragment([firstNode]);
              // 从第二个节点开始，使用 e.insertNode
              for (var i = 1; i < fragment.length; i += 1) {
                  e.insertNode(fragment[i]);
              }
          }
      };
      e.dangerouslyInsertHtml = function (html, isRecursive) {
          if (html === void 0) { html = ''; }
          if (isRecursive === void 0) { isRecursive = false; }
          if (!html) {
              return;
          }
          var maxLength = e.getConfig().maxLength;
          if (!maxLength) {
              // 无 maxLength
              dangerouslyInsertHtml(html, isRecursive);
              return;
          }
          var leftLength = DomEditor.getLeftLengthOfMaxLength(e);
          if (leftLength <= 0) {
              // 已经触发 maxLength ，不再输入文字
              return;
          }
          // ------------- 把 html 转换为 DOM nodes -------------
          var div = document.createElement('div');
          div.innerHTML = html;
          var text = Array.from(div.childNodes).reduce(function (acc, node) {
              var nodeName = node.nodeName;
              if (!node) {
                  return acc;
              }
              // Text Node
              if (isDOMText(node)) {
                  return acc + (node.textContent || '');
              }
              // Element Node
              if (isDOMElement(node)) {
                  // 过滤掉忽略的 tag
                  if (IGNORE_TAGS.has(nodeName.toLowerCase())) {
                      return acc;
                  }
                  return acc + (node.textContent || '');
              }
              return acc;
          }, '');
          if (leftLength < text.length) {
              return;
          }
          dangerouslyInsertHtml(html, isRecursive);
      };
      return e; // 返回 editor 实例
  };

  /**
   * @description menu position helpers
   * @author wangfupeng
   */
  /**
   * 获取 textContainer 尺寸和定位
   * @param editor editor
   */
  function getTextContainerRect(editor) {
      var textarea = DomEditor.getTextarea(editor);
      // 获取 textareaContainer
      var $textareaContainer = textarea.$textAreaContainer;
      var width = $textareaContainer.width();
      var height = $textareaContainer.height();
      var _a = $textareaContainer.offset(), top = _a.top, left = _a.left;
      return {
          top: top,
          left: left,
          width: width,
          height: height,
      };
  }
  /**
   * 根据选区，计算定位（用于 modal hoverbar）
   * @param editor editor
   */
  function getPositionBySelection(editor) {
      // 默认情况下 { top: 0, left: 0 }
      var defaultStyle = { top: '0', left: '0' };
      var selection = editor.selection;
      if (selection == null) {
          return defaultStyle;
      } // 默认 position
      // 获取 textContainer rect
      var containerRect = getTextContainerRect(editor);
      if (containerRect == null) {
          return defaultStyle;
      } // 默认 position
      var containerTop = containerRect.top, containerLeft = containerRect.left, containerWidth = containerRect.width, containerHeight = containerRect.height;
      // 获取当前选区的 rect
      var range = DomEditor.toDOMRange(editor, selection);
      var rects = range.getClientRects();
      var rangeRect = rects ? rects[0] : null;
      if (rangeRect == null) {
          return defaultStyle;
      } // 默认 position
      var rangeTop = rangeRect.top, rangeLeft = rangeRect.left;
      // 存储计算结构
      var positionStyle = {};
      // 获取 选区 top left 和 container top left 的差值（< 0 则使用 0）
      var relativeTop = rangeTop - containerTop;
      var relativeLeft = rangeLeft - containerLeft;
      // 判断水平位置： modal/bar 显示在选区左侧，还是右侧？
      if (relativeLeft > containerWidth / 2) {
          // 选区 left 大于 containerWidth/2 （选区在 container 的右侧），则 modal/bar 显示在选区左侧
          var r = containerWidth - relativeLeft;
          positionStyle.right = "".concat(r + 5, "px"); // 5px 间隔
      }
      else {
          // 否则（选区在 container 的左侧），modal/bar 显示在选区右侧
          positionStyle.left = "".concat(relativeLeft + 5, "px"); // 5px 间隔
      }
      // 判断垂直的位置： modal/bar 显示在选区上面，还是下面？
      if (relativeTop > containerHeight / 2) {
          // 选区 top  > containerHeight/2 （选区在 container 的下半部分），则 modal/bar 显示在选区的上面
          var b = containerHeight - relativeTop;
          positionStyle.bottom = "".concat(b + 5, "px"); // 5px 间隔
      }
      else {
          // 否则（选区在 container 的上半部分），则 modal/bar 显示在选区的下面
          var lastRect = rects[rects.length - 1];
          var t = lastRect.top - containerTop + lastRect.height;
          if (t < 0) {
              t = 0;
          }
          positionStyle.top = "".concat(t + 5, "px"); // 5px 间隔
      }
      return positionStyle;
  }
  /**
   * 根据 node ，计算定位（用于 modal hoverbar）
   * @param editor editor
   * @param node slate node
   * @param type 'modal'/'bar'
   */
  function getPositionByNode(editor, node, type) {
      if (type === void 0) { type = 'modal'; }
      // 默认情况下 { top: 0, left: 0 }
      var defaultStyle = { top: '0', left: '0' };
      var selection = editor.selection;
      if (selection == null) {
          return defaultStyle;
      } // 默认 position
      // 根据 node 获取 elem
      var isVoidElem = distExports$1.Element.isElement(node) && editor.isVoid(node);
      var isInlineElem = distExports$1.Element.isElement(node) && editor.isInline(node);
      var elem = NODE_TO_ELEMENT.get(node);
      if (elem == null) {
          return defaultStyle;
      } // 默认 position
      var _a = elem.getBoundingClientRect(), elemTop = _a.top, 
      // eslint-disable-next-line prefer-const
      elemLeft = _a.left, elemHeight = _a.height, 
      // eslint-disable-next-line prefer-const
      elemWidth = _a.width;
      if (isVoidElem) {
          // void node ，重新计算 top 和 height
          var voidElem = getFirstVoidChild(elem);
          if (voidElem != null) {
              var _b = voidElem.getBoundingClientRect(), top_1 = _b.top, height = _b.height;
              elemTop = top_1;
              elemHeight = height;
          }
      }
      // 获取 textContainer rect
      var containerRect = getTextContainerRect(editor);
      if (containerRect == null) {
          return defaultStyle;
      } // 默认 position
      var containerTop = containerRect.top, containerLeft = containerRect.left, containerWidth = containerRect.width, containerHeight = containerRect.height;
      // 存储计算结构
      var positionStyle = {};
      // 获取 elem top left 和 container top left 的差值（< 0 则使用 0）
      var relativeTop = elemTop - containerTop;
      var relativeLeft = elemLeft - containerLeft;
      if (type === 'bar') {
          // bar - 1. left 对齐 elem.left ；2. 尽量显示在 elem 上方
          positionStyle.left = "".concat(relativeLeft, "px");
          if (relativeTop > 40) {
              // top > 40 则显示在上方
              positionStyle.bottom = "".concat(containerHeight - relativeTop + 5, "px"); // 5px 间隙
          }
          else {
              // 否则，显示在下方
              positionStyle.top = "".concat(relativeTop + elemHeight + 5, "px"); // 5px 间隙
          }
          return positionStyle;
      }
      if (type === 'modal') {
          // modal - 1. top 和 elem 需要计算，尽量不遮挡 elem
          // 水平
          if (!isVoidElem) {
              // 非 void node - left 和 elem left 对齐
              positionStyle.left = "".concat(relativeLeft, "px");
          }
          else if (isInlineElem) {
              // inline void node 需要计算
              if (relativeLeft > (containerWidth - elemWidth) / 2) {
                  // elem 在 container 的右侧，则 modal 显示在 elem 左侧
                  positionStyle.right = "".concat(containerWidth - relativeLeft + 5, "px");
              }
              else {
                  // 否则 elem 在 container 左侧，则 modal 显示在 elem 右侧
                  positionStyle.left = "".concat(relativeLeft + elemWidth + 5, "px");
              }
          }
          else {
              // block void node 水平靠左即可
              positionStyle.left = '20px';
          }
          // 垂直
          if (isVoidElem) {
              // void node - top 和 elem top 对齐
              var t = relativeTop;
              if (t < 0) {
                  t = 0;
              } // top 不能小于 0
              positionStyle.top = "".concat(t, "px");
              // 非 void node ，计算 top
          }
          else if (relativeTop > (containerHeight - elemHeight) / 2) {
              // elem 在 container 的下半部分，则 modal 显示在 elem 上方
              positionStyle.bottom = "".concat(containerHeight - relativeTop + 5, "px");
          }
          else {
              // elem 在 container 的上半部分，则 modal 显示在 elem 下方
              var t = relativeTop + elemHeight;
              if (t < 0) {
                  t = 0;
              }
              positionStyle.top = "".concat(t + 5, "px");
          }
          return positionStyle;
      }
      throw new Error("type '".concat(type, "' is invalid"));
  }
  /**
   * 异步修正 position ，不能超出 textContainer 边界
   * @param editor editor
   * @param $positionElem modal/bar
   */
  function correctPosition(editor, $positionElem) {
      // 异步，否则 DOM 尚未渲染
      promiseResolveThen(function () {
          // 获取 textContainer rect
          var containerRect = getTextContainerRect(editor);
          if (containerRect == null) {
              return;
          }
          var containerTop = containerRect.top, containerLeft = containerRect.left, containerWidth = containerRect.width, containerHeight = containerRect.height;
          // 获取 modal bar 的 rect
          var _a = $positionElem.offset(), positionElemTop = _a.top, positionElemLeft = _a.left;
          var positionElemWidth = $positionElem.width();
          var positionElemHeight = $positionElem.height();
          var relativeTop = positionElemTop - containerTop;
          var relativeLeft = positionElemLeft - containerLeft;
          // 获取 modal bar 设置的 style
          var styleStr = $positionElem.attr('style');
          if (styleStr.indexOf('top') >= 0) {
              // 设置了 top ，则有可能超过 textContainer 的下边界
              var d = relativeTop + positionElemHeight - containerHeight;
              if (d > 0) {
                  // 已超过 textContainer 的下边界，则上移
                  var curTopStr = $positionElem.css('top');
                  var curTop = parseInt(curTopStr.toString(), 10);
                  var newTop = curTop - d;
                  if (newTop < 0) {
                      newTop = 0;
                  } // 不能超过 textContainer 上边界
                  $positionElem.css('top', "".concat(newTop, "px"));
              }
          }
          if (styleStr.indexOf('bottom') >= 0) {
              // 设置了 bottom ，则有可能超过 textContainer 的上边界
              if (positionElemTop < 0) {
                  // 已超出了上边界
                  var curBottomStr = $positionElem.css('bottom');
                  var curBottom = parseInt(curBottomStr.toString(), 10);
                  var newBottom = curBottom - Math.abs(positionElemTop); // 保证上边界和 textContainer 对齐即可，下边界不管
                  $positionElem.css('bottom', "".concat(newBottom, "px"));
              }
          }
          if (styleStr.indexOf('left') >= 0) {
              // 设置了 left ，则有可能超过 textContainer 的右边界
              var d = relativeLeft + positionElemWidth - containerWidth;
              if (d > 0) {
                  // 已超过 textContainer 的右边界，需左移
                  var curLeftStr = $positionElem.css('left');
                  var curLeft = parseInt(curLeftStr.toString(), 10);
                  var newLeft = curLeft - d;
                  if (newLeft < 0) {
                      newLeft = 0;
                  } // 不能超过 textContainer 左边界
                  $positionElem.css('left', "".concat(newLeft, "px"));
              }
          }
          if (styleStr.indexOf('right') >= 0) {
              // 设置了 right ，则有可能超过 textContainer 的左边界
              if (positionElemLeft < 0) {
                  // 已超出了左边界
                  var curRightStr = $positionElem.css('right');
                  var curRight = parseInt(curRightStr.toString(), 10);
                  var newRight = curRight - Math.abs(positionElemLeft); // 保证左边界和 textContainer 对齐即可，右边界不管
                  $positionElem.css('right', "".concat(newRight, "px"));
              }
          }
      });
  }

  /**
   * @description slate 插件 - selection 相关
   * @author wangfupeng
   */
  var withSelection$1 = function (editor) {
      var e = editor;
      // 选中
      e.select = function (at) {
          distExports$1.Transforms.select(e, at);
      };
      // 取消选中
      e.deselect = function () {
          var selection = e.selection;
          var root = DomEditor.findDocumentOrShadowRoot(e);
          var domSelection = root.getSelection();
          if (domSelection && domSelection.rangeCount > 0) {
              domSelection.removeAllRanges();
          }
          if (selection) {
              distExports$1.Transforms.deselect(editor);
          }
      };
      // 移动光标
      e.move = function (distance, reverse) {
          if (reverse === void 0) { reverse = false; }
          if (!distance)
              return;
          if (distance < 0)
              return;
          distExports$1.Transforms.move(editor, {
              distance: distance,
              unit: 'character',
              reverse: reverse,
          });
      };
      // 反向移动光标
      e.moveReverse = function (distance) {
          e.move(distance, true);
      };
      /**
       * 还原选区
       */
      e.restoreSelection = function () {
          var selection = EDITOR_TO_SELECTION$1.get(e);
          if (selection == null)
              return;
          e.focus();
          distExports$1.Transforms.select(e, selection);
      };
      /**
       * 获取选区的 position
       */
      e.getSelectionPosition = function () {
          return getPositionBySelection(e);
      };
      /**
       * 获取 node 的 position
       */
      e.getNodePosition = function (node) {
          return getPositionByNode(e, node);
      };
      /**
       * 是否全选
       */
      e.isSelectedAll = function () {
          var selection = e.selection;
          if (selection == null)
              return false;
          var _a = __read(distExports$1.Range.edges(selection), 2), start1 = _a[0], end1 = _a[1]; // 获取当前选取的开始、结束 point
          var _b = __read(distExports$1.Editor.edges(e, []), 2), start2 = _b[0], end2 = _b[1]; // 获取编辑器全部的开始、结束 point
          if (distExports$1.Point.equals(start1, start2) && distExports$1.Point.equals(end1, end2)) {
              return true;
          }
          return false;
      };
      /**
       * 全选
       */
      e.selectAll = function () {
          var start = distExports$1.Editor.start(e, []);
          var end = distExports$1.Editor.end(e, []);
          distExports$1.Transforms.select(e, {
              anchor: start,
              focus: end,
          });
      };
      return e;
  };

  /**
   * lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="npm" -o ./`
   * Copyright jQuery Foundation and other contributors <https://jquery.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */

  var lodash_debounce;
  var hasRequiredLodash_debounce;

  function requireLodash_debounce () {
  	if (hasRequiredLodash_debounce) return lodash_debounce;
  	hasRequiredLodash_debounce = 1;
  	/** Used as the `TypeError` message for "Functions" methods. */
  	var FUNC_ERROR_TEXT = 'Expected a function';

  	/** Used as references for various `Number` constants. */
  	var NAN = 0 / 0;

  	/** `Object#toString` result references. */
  	var symbolTag = '[object Symbol]';

  	/** Used to match leading and trailing whitespace. */
  	var reTrim = /^\s+|\s+$/g;

  	/** Used to detect bad signed hexadecimal string values. */
  	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  	/** Used to detect binary string values. */
  	var reIsBinary = /^0b[01]+$/i;

  	/** Used to detect octal string values. */
  	var reIsOctal = /^0o[0-7]+$/i;

  	/** Built-in method references without a dependency on `root`. */
  	var freeParseInt = parseInt;

  	/** Detect free variable `global` from Node.js. */
  	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  	/** Detect free variable `self`. */
  	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  	/** Used as a reference to the global object. */
  	var root = freeGlobal || freeSelf || Function('return this')();

  	/** Used for built-in method references. */
  	var objectProto = Object.prototype;

  	/**
  	 * Used to resolve the
  	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
  	 * of values.
  	 */
  	var objectToString = objectProto.toString;

  	/* Built-in method references for those with the same name as other `lodash` methods. */
  	var nativeMax = Math.max,
  	    nativeMin = Math.min;

  	/**
  	 * Gets the timestamp of the number of milliseconds that have elapsed since
  	 * the Unix epoch (1 January 1970 00:00:00 UTC).
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 2.4.0
  	 * @category Date
  	 * @returns {number} Returns the timestamp.
  	 * @example
  	 *
  	 * _.defer(function(stamp) {
  	 *   console.log(_.now() - stamp);
  	 * }, _.now());
  	 * // => Logs the number of milliseconds it took for the deferred invocation.
  	 */
  	var now = function() {
  	  return root.Date.now();
  	};

  	/**
  	 * Creates a debounced function that delays invoking `func` until after `wait`
  	 * milliseconds have elapsed since the last time the debounced function was
  	 * invoked. The debounced function comes with a `cancel` method to cancel
  	 * delayed `func` invocations and a `flush` method to immediately invoke them.
  	 * Provide `options` to indicate whether `func` should be invoked on the
  	 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
  	 * with the last arguments provided to the debounced function. Subsequent
  	 * calls to the debounced function return the result of the last `func`
  	 * invocation.
  	 *
  	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
  	 * invoked on the trailing edge of the timeout only if the debounced function
  	 * is invoked more than once during the `wait` timeout.
  	 *
  	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
  	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
  	 *
  	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
  	 * for details over the differences between `_.debounce` and `_.throttle`.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Function
  	 * @param {Function} func The function to debounce.
  	 * @param {number} [wait=0] The number of milliseconds to delay.
  	 * @param {Object} [options={}] The options object.
  	 * @param {boolean} [options.leading=false]
  	 *  Specify invoking on the leading edge of the timeout.
  	 * @param {number} [options.maxWait]
  	 *  The maximum time `func` is allowed to be delayed before it's invoked.
  	 * @param {boolean} [options.trailing=true]
  	 *  Specify invoking on the trailing edge of the timeout.
  	 * @returns {Function} Returns the new debounced function.
  	 * @example
  	 *
  	 * // Avoid costly calculations while the window size is in flux.
  	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
  	 *
  	 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
  	 * jQuery(element).on('click', _.debounce(sendMail, 300, {
  	 *   'leading': true,
  	 *   'trailing': false
  	 * }));
  	 *
  	 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
  	 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
  	 * var source = new EventSource('/stream');
  	 * jQuery(source).on('message', debounced);
  	 *
  	 * // Cancel the trailing debounced invocation.
  	 * jQuery(window).on('popstate', debounced.cancel);
  	 */
  	function debounce(func, wait, options) {
  	  var lastArgs,
  	      lastThis,
  	      maxWait,
  	      result,
  	      timerId,
  	      lastCallTime,
  	      lastInvokeTime = 0,
  	      leading = false,
  	      maxing = false,
  	      trailing = true;

  	  if (typeof func != 'function') {
  	    throw new TypeError(FUNC_ERROR_TEXT);
  	  }
  	  wait = toNumber(wait) || 0;
  	  if (isObject(options)) {
  	    leading = !!options.leading;
  	    maxing = 'maxWait' in options;
  	    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
  	    trailing = 'trailing' in options ? !!options.trailing : trailing;
  	  }

  	  function invokeFunc(time) {
  	    var args = lastArgs,
  	        thisArg = lastThis;

  	    lastArgs = lastThis = undefined;
  	    lastInvokeTime = time;
  	    result = func.apply(thisArg, args);
  	    return result;
  	  }

  	  function leadingEdge(time) {
  	    // Reset any `maxWait` timer.
  	    lastInvokeTime = time;
  	    // Start the timer for the trailing edge.
  	    timerId = setTimeout(timerExpired, wait);
  	    // Invoke the leading edge.
  	    return leading ? invokeFunc(time) : result;
  	  }

  	  function remainingWait(time) {
  	    var timeSinceLastCall = time - lastCallTime,
  	        timeSinceLastInvoke = time - lastInvokeTime,
  	        result = wait - timeSinceLastCall;

  	    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
  	  }

  	  function shouldInvoke(time) {
  	    var timeSinceLastCall = time - lastCallTime,
  	        timeSinceLastInvoke = time - lastInvokeTime;

  	    // Either this is the first call, activity has stopped and we're at the
  	    // trailing edge, the system time has gone backwards and we're treating
  	    // it as the trailing edge, or we've hit the `maxWait` limit.
  	    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
  	      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  	  }

  	  function timerExpired() {
  	    var time = now();
  	    if (shouldInvoke(time)) {
  	      return trailingEdge(time);
  	    }
  	    // Restart the timer.
  	    timerId = setTimeout(timerExpired, remainingWait(time));
  	  }

  	  function trailingEdge(time) {
  	    timerId = undefined;

  	    // Only invoke if we have `lastArgs` which means `func` has been
  	    // debounced at least once.
  	    if (trailing && lastArgs) {
  	      return invokeFunc(time);
  	    }
  	    lastArgs = lastThis = undefined;
  	    return result;
  	  }

  	  function cancel() {
  	    if (timerId !== undefined) {
  	      clearTimeout(timerId);
  	    }
  	    lastInvokeTime = 0;
  	    lastArgs = lastCallTime = lastThis = timerId = undefined;
  	  }

  	  function flush() {
  	    return timerId === undefined ? result : trailingEdge(now());
  	  }

  	  function debounced() {
  	    var time = now(),
  	        isInvoking = shouldInvoke(time);

  	    lastArgs = arguments;
  	    lastThis = this;
  	    lastCallTime = time;

  	    if (isInvoking) {
  	      if (timerId === undefined) {
  	        return leadingEdge(lastCallTime);
  	      }
  	      if (maxing) {
  	        // Handle invocations in a tight loop.
  	        timerId = setTimeout(timerExpired, wait);
  	        return invokeFunc(lastCallTime);
  	      }
  	    }
  	    if (timerId === undefined) {
  	      timerId = setTimeout(timerExpired, wait);
  	    }
  	    return result;
  	  }
  	  debounced.cancel = cancel;
  	  debounced.flush = flush;
  	  return debounced;
  	}

  	/**
  	 * Checks if `value` is the
  	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
  	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
  	 * @example
  	 *
  	 * _.isObject({});
  	 * // => true
  	 *
  	 * _.isObject([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isObject(_.noop);
  	 * // => true
  	 *
  	 * _.isObject(null);
  	 * // => false
  	 */
  	function isObject(value) {
  	  var type = typeof value;
  	  return !!value && (type == 'object' || type == 'function');
  	}

  	/**
  	 * Checks if `value` is object-like. A value is object-like if it's not `null`
  	 * and has a `typeof` result of "object".
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
  	 * @example
  	 *
  	 * _.isObjectLike({});
  	 * // => true
  	 *
  	 * _.isObjectLike([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isObjectLike(_.noop);
  	 * // => false
  	 *
  	 * _.isObjectLike(null);
  	 * // => false
  	 */
  	function isObjectLike(value) {
  	  return !!value && typeof value == 'object';
  	}

  	/**
  	 * Checks if `value` is classified as a `Symbol` primitive or object.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
  	 * @example
  	 *
  	 * _.isSymbol(Symbol.iterator);
  	 * // => true
  	 *
  	 * _.isSymbol('abc');
  	 * // => false
  	 */
  	function isSymbol(value) {
  	  return typeof value == 'symbol' ||
  	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
  	}

  	/**
  	 * Converts `value` to a number.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to process.
  	 * @returns {number} Returns the number.
  	 * @example
  	 *
  	 * _.toNumber(3.2);
  	 * // => 3.2
  	 *
  	 * _.toNumber(Number.MIN_VALUE);
  	 * // => 5e-324
  	 *
  	 * _.toNumber(Infinity);
  	 * // => Infinity
  	 *
  	 * _.toNumber('3.2');
  	 * // => 3.2
  	 */
  	function toNumber(value) {
  	  if (typeof value == 'number') {
  	    return value;
  	  }
  	  if (isSymbol(value)) {
  	    return NAN;
  	  }
  	  if (isObject(value)) {
  	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
  	    value = isObject(other) ? (other + '') : other;
  	  }
  	  if (typeof value != 'string') {
  	    return value === 0 ? value : +value;
  	  }
  	  value = value.replace(reTrim, '');
  	  var isBinary = reIsBinary.test(value);
  	  return (isBinary || reIsOctal.test(value))
  	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
  	    : (reIsBadHex.test(value) ? NAN : +value);
  	}

  	lodash_debounce = debounce;
  	return lodash_debounce;
  }

  var lodash_debounceExports = requireLodash_debounce();
  var debounce = /*@__PURE__*/getDefaultExportFromCjs(lodash_debounceExports);

  const isString = obj => typeof obj === 'string';
  const defer = () => {
    let res;
    let rej;
    const promise = new Promise((resolve, reject) => {
      res = resolve;
      rej = reject;
    });
    promise.resolve = res;
    promise.reject = rej;
    return promise;
  };
  const makeString = object => {
    if (object == null) return '';
    return '' + object;
  };
  const copy = (a, s, t) => {
    a.forEach(m => {
      if (s[m]) t[m] = s[m];
    });
  };
  const lastOfPathSeparatorRegExp = /###/g;
  const cleanKey = key => key && key.indexOf('###') > -1 ? key.replace(lastOfPathSeparatorRegExp, '.') : key;
  const canNotTraverseDeeper = object => !object || isString(object);
  const getLastOfPath = (object, path, Empty) => {
    const stack = !isString(path) ? path : path.split('.');
    let stackIndex = 0;
    while (stackIndex < stack.length - 1) {
      if (canNotTraverseDeeper(object)) return {};
      const key = cleanKey(stack[stackIndex]);
      if (!object[key] && Empty) object[key] = new Empty();
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        object = object[key];
      } else {
        object = {};
      }
      ++stackIndex;
    }
    if (canNotTraverseDeeper(object)) return {};
    return {
      obj: object,
      k: cleanKey(stack[stackIndex])
    };
  };
  const setPath = (object, path, newValue) => {
    const {
      obj,
      k
    } = getLastOfPath(object, path, Object);
    if (obj !== undefined || path.length === 1) {
      obj[k] = newValue;
      return;
    }
    let e = path[path.length - 1];
    let p = path.slice(0, path.length - 1);
    let last = getLastOfPath(object, p, Object);
    while (last.obj === undefined && p.length) {
      e = `${p[p.length - 1]}.${e}`;
      p = p.slice(0, p.length - 1);
      last = getLastOfPath(object, p, Object);
      if (last && last.obj && typeof last.obj[`${last.k}.${e}`] !== 'undefined') {
        last.obj = undefined;
      }
    }
    last.obj[`${last.k}.${e}`] = newValue;
  };
  const pushPath = (object, path, newValue, concat) => {
    const {
      obj,
      k
    } = getLastOfPath(object, path, Object);
    obj[k] = obj[k] || [];
    obj[k].push(newValue);
  };
  const getPath = (object, path) => {
    const {
      obj,
      k
    } = getLastOfPath(object, path);
    if (!obj) return undefined;
    return obj[k];
  };
  const getPathWithDefaults = (data, defaultData, key) => {
    const value = getPath(data, key);
    if (value !== undefined) {
      return value;
    }
    return getPath(defaultData, key);
  };
  const deepExtend = (target, source, overwrite) => {
    for (const prop in source) {
      if (prop !== '__proto__' && prop !== 'constructor') {
        if (prop in target) {
          if (isString(target[prop]) || target[prop] instanceof String || isString(source[prop]) || source[prop] instanceof String) {
            if (overwrite) target[prop] = source[prop];
          } else {
            deepExtend(target[prop], source[prop], overwrite);
          }
        } else {
          target[prop] = source[prop];
        }
      }
    }
    return target;
  };
  const regexEscape = str => str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
  var _entityMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '/': '&#x2F;'
  };
  const escape = data => {
    if (isString(data)) {
      return data.replace(/[&<>"'\/]/g, s => _entityMap[s]);
    }
    return data;
  };
  class RegExpCache {
    constructor(capacity) {
      this.capacity = capacity;
      this.regExpMap = new Map();
      this.regExpQueue = [];
    }
    getRegExp(pattern) {
      const regExpFromCache = this.regExpMap.get(pattern);
      if (regExpFromCache !== undefined) {
        return regExpFromCache;
      }
      const regExpNew = new RegExp(pattern);
      if (this.regExpQueue.length === this.capacity) {
        this.regExpMap.delete(this.regExpQueue.shift());
      }
      this.regExpMap.set(pattern, regExpNew);
      this.regExpQueue.push(pattern);
      return regExpNew;
    }
  }
  const chars = [' ', ',', '?', '!', ';'];
  const looksLikeObjectPathRegExpCache = new RegExpCache(20);
  const looksLikeObjectPath = (key, nsSeparator, keySeparator) => {
    nsSeparator = nsSeparator || '';
    keySeparator = keySeparator || '';
    const possibleChars = chars.filter(c => nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0);
    if (possibleChars.length === 0) return true;
    const r = looksLikeObjectPathRegExpCache.getRegExp(`(${possibleChars.map(c => c === '?' ? '\\?' : c).join('|')})`);
    let matched = !r.test(key);
    if (!matched) {
      const ki = key.indexOf(keySeparator);
      if (ki > 0 && !r.test(key.substring(0, ki))) {
        matched = true;
      }
    }
    return matched;
  };
  const deepFind = function (obj, path) {
    let keySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';
    if (!obj) return undefined;
    if (obj[path]) return obj[path];
    const tokens = path.split(keySeparator);
    let current = obj;
    for (let i = 0; i < tokens.length;) {
      if (!current || typeof current !== 'object') {
        return undefined;
      }
      let next;
      let nextPath = '';
      for (let j = i; j < tokens.length; ++j) {
        if (j !== i) {
          nextPath += keySeparator;
        }
        nextPath += tokens[j];
        next = current[nextPath];
        if (next !== undefined) {
          if (['string', 'number', 'boolean'].indexOf(typeof next) > -1 && j < tokens.length - 1) {
            continue;
          }
          i += j - i + 1;
          break;
        }
      }
      current = next;
    }
    return current;
  };
  const getCleanedCode = code => code && code.replace('_', '-');

  const consoleLogger = {
    type: 'logger',
    log(args) {
      this.output('log', args);
    },
    warn(args) {
      this.output('warn', args);
    },
    error(args) {
      this.output('error', args);
    },
    output(type, args) {
      if (console && console[type]) console[type].apply(console, args);
    }
  };
  class Logger {
    constructor(concreteLogger) {
      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.init(concreteLogger, options);
    }
    init(concreteLogger) {
      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.prefix = options.prefix || 'i18next:';
      this.logger = concreteLogger || consoleLogger;
      this.options = options;
      this.debug = options.debug;
    }
    log() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return this.forward(args, 'log', '', true);
    }
    warn() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return this.forward(args, 'warn', '', true);
    }
    error() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return this.forward(args, 'error', '');
    }
    deprecate() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);
    }
    forward(args, lvl, prefix, debugOnly) {
      if (debugOnly && !this.debug) return null;
      if (isString(args[0])) args[0] = `${prefix}${this.prefix} ${args[0]}`;
      return this.logger[lvl](args);
    }
    create(moduleName) {
      return new Logger(this.logger, {
        ...{
          prefix: `${this.prefix}:${moduleName}:`
        },
        ...this.options
      });
    }
    clone(options) {
      options = options || this.options;
      options.prefix = options.prefix || this.prefix;
      return new Logger(this.logger, options);
    }
  }
  var baseLogger = new Logger();

  class EventEmitter {
    constructor() {
      this.observers = {};
    }
    on(events, listener) {
      events.split(' ').forEach(event => {
        if (!this.observers[event]) this.observers[event] = new Map();
        const numListeners = this.observers[event].get(listener) || 0;
        this.observers[event].set(listener, numListeners + 1);
      });
      return this;
    }
    off(event, listener) {
      if (!this.observers[event]) return;
      if (!listener) {
        delete this.observers[event];
        return;
      }
      this.observers[event].delete(listener);
    }
    emit(event) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (this.observers[event]) {
        const cloned = Array.from(this.observers[event].entries());
        cloned.forEach(_ref => {
          let [observer, numTimesAdded] = _ref;
          for (let i = 0; i < numTimesAdded; i++) {
            observer(...args);
          }
        });
      }
      if (this.observers['*']) {
        const cloned = Array.from(this.observers['*'].entries());
        cloned.forEach(_ref2 => {
          let [observer, numTimesAdded] = _ref2;
          for (let i = 0; i < numTimesAdded; i++) {
            observer.apply(observer, [event, ...args]);
          }
        });
      }
    }
  }

  class ResourceStore extends EventEmitter {
    constructor(data) {
      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        ns: ['translation'],
        defaultNS: 'translation'
      };
      super();
      this.data = data || {};
      this.options = options;
      if (this.options.keySeparator === undefined) {
        this.options.keySeparator = '.';
      }
      if (this.options.ignoreJSONStructure === undefined) {
        this.options.ignoreJSONStructure = true;
      }
    }
    addNamespaces(ns) {
      if (this.options.ns.indexOf(ns) < 0) {
        this.options.ns.push(ns);
      }
    }
    removeNamespaces(ns) {
      const index = this.options.ns.indexOf(ns);
      if (index > -1) {
        this.options.ns.splice(index, 1);
      }
    }
    getResource(lng, ns, key) {
      let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
      const ignoreJSONStructure = options.ignoreJSONStructure !== undefined ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
      let path;
      if (lng.indexOf('.') > -1) {
        path = lng.split('.');
      } else {
        path = [lng, ns];
        if (key) {
          if (Array.isArray(key)) {
            path.push(...key);
          } else if (isString(key) && keySeparator) {
            path.push(...key.split(keySeparator));
          } else {
            path.push(key);
          }
        }
      }
      const result = getPath(this.data, path);
      if (!result && !ns && !key && lng.indexOf('.') > -1) {
        lng = path[0];
        ns = path[1];
        key = path.slice(2).join('.');
      }
      if (result || !ignoreJSONStructure || !isString(key)) return result;
      return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
    }
    addResource(lng, ns, key, value) {
      let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
        silent: false
      };
      const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
      let path = [lng, ns];
      if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);
      if (lng.indexOf('.') > -1) {
        path = lng.split('.');
        value = ns;
        ns = path[1];
      }
      this.addNamespaces(ns);
      setPath(this.data, path, value);
      if (!options.silent) this.emit('added', lng, ns, key, value);
    }
    addResources(lng, ns, resources) {
      let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
        silent: false
      };
      for (const m in resources) {
        if (isString(resources[m]) || Array.isArray(resources[m])) this.addResource(lng, ns, m, resources[m], {
          silent: true
        });
      }
      if (!options.silent) this.emit('added', lng, ns, resources);
    }
    addResourceBundle(lng, ns, resources, deep, overwrite) {
      let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {
        silent: false,
        skipCopy: false
      };
      let path = [lng, ns];
      if (lng.indexOf('.') > -1) {
        path = lng.split('.');
        deep = resources;
        resources = ns;
        ns = path[1];
      }
      this.addNamespaces(ns);
      let pack = getPath(this.data, path) || {};
      if (!options.skipCopy) resources = JSON.parse(JSON.stringify(resources));
      if (deep) {
        deepExtend(pack, resources, overwrite);
      } else {
        pack = {
          ...pack,
          ...resources
        };
      }
      setPath(this.data, path, pack);
      if (!options.silent) this.emit('added', lng, ns, resources);
    }
    removeResourceBundle(lng, ns) {
      if (this.hasResourceBundle(lng, ns)) {
        delete this.data[lng][ns];
      }
      this.removeNamespaces(ns);
      this.emit('removed', lng, ns);
    }
    hasResourceBundle(lng, ns) {
      return this.getResource(lng, ns) !== undefined;
    }
    getResourceBundle(lng, ns) {
      if (!ns) ns = this.options.defaultNS;
      if (this.options.compatibilityAPI === 'v1') return {
        ...{},
        ...this.getResource(lng, ns)
      };
      return this.getResource(lng, ns);
    }
    getDataByLanguage(lng) {
      return this.data[lng];
    }
    hasLanguageSomeTranslations(lng) {
      const data = this.getDataByLanguage(lng);
      const n = data && Object.keys(data) || [];
      return !!n.find(v => data[v] && Object.keys(data[v]).length > 0);
    }
    toJSON() {
      return this.data;
    }
  }

  var postProcessor = {
    processors: {},
    addPostProcessor(module) {
      this.processors[module.name] = module;
    },
    handle(processors, value, key, options, translator) {
      processors.forEach(processor => {
        if (this.processors[processor]) value = this.processors[processor].process(value, key, options, translator);
      });
      return value;
    }
  };

  const checkedLoadedFor = {};
  class Translator extends EventEmitter {
    constructor(services) {
      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      super();
      copy(['resourceStore', 'languageUtils', 'pluralResolver', 'interpolator', 'backendConnector', 'i18nFormat', 'utils'], services, this);
      this.options = options;
      if (this.options.keySeparator === undefined) {
        this.options.keySeparator = '.';
      }
      this.logger = baseLogger.create('translator');
    }
    changeLanguage(lng) {
      if (lng) this.language = lng;
    }
    exists(key) {
      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        interpolation: {}
      };
      if (key === undefined || key === null) {
        return false;
      }
      const resolved = this.resolve(key, options);
      return resolved && resolved.res !== undefined;
    }
    extractFromKey(key, options) {
      let nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;
      if (nsSeparator === undefined) nsSeparator = ':';
      const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
      let namespaces = options.ns || this.options.defaultNS || [];
      const wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
      const seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
      if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
        const m = key.match(this.interpolator.nestingRegexp);
        if (m && m.length > 0) {
          return {
            key,
            namespaces: isString(namespaces) ? [namespaces] : namespaces
          };
        }
        const parts = key.split(nsSeparator);
        if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
        key = parts.join(keySeparator);
      }
      return {
        key,
        namespaces: isString(namespaces) ? [namespaces] : namespaces
      };
    }
    translate(keys, options, lastKey) {
      if (typeof options !== 'object' && this.options.overloadTranslationOptionHandler) {
        options = this.options.overloadTranslationOptionHandler(arguments);
      }
      if (typeof options === 'object') options = {
        ...options
      };
      if (!options) options = {};
      if (keys === undefined || keys === null) return '';
      if (!Array.isArray(keys)) keys = [String(keys)];
      const returnDetails = options.returnDetails !== undefined ? options.returnDetails : this.options.returnDetails;
      const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
      const {
        key,
        namespaces
      } = this.extractFromKey(keys[keys.length - 1], options);
      const namespace = namespaces[namespaces.length - 1];
      const lng = options.lng || this.language;
      const appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
      if (lng && lng.toLowerCase() === 'cimode') {
        if (appendNamespaceToCIMode) {
          const nsSeparator = options.nsSeparator || this.options.nsSeparator;
          if (returnDetails) {
            return {
              res: `${namespace}${nsSeparator}${key}`,
              usedKey: key,
              exactUsedKey: key,
              usedLng: lng,
              usedNS: namespace,
              usedParams: this.getUsedParamsDetails(options)
            };
          }
          return `${namespace}${nsSeparator}${key}`;
        }
        if (returnDetails) {
          return {
            res: key,
            usedKey: key,
            exactUsedKey: key,
            usedLng: lng,
            usedNS: namespace,
            usedParams: this.getUsedParamsDetails(options)
          };
        }
        return key;
      }
      const resolved = this.resolve(keys, options);
      let res = resolved && resolved.res;
      const resUsedKey = resolved && resolved.usedKey || key;
      const resExactUsedKey = resolved && resolved.exactUsedKey || key;
      const resType = Object.prototype.toString.apply(res);
      const noObject = ['[object Number]', '[object Function]', '[object RegExp]'];
      const joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;
      const handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
      const handleAsObject = !isString(res) && typeof res !== 'boolean' && typeof res !== 'number';
      if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(isString(joinArrays) && Array.isArray(res))) {
        if (!options.returnObjects && !this.options.returnObjects) {
          if (!this.options.returnedObjectHandler) {
            this.logger.warn('accessing an object - but returnObjects options is not enabled!');
          }
          const r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, {
            ...options,
            ns: namespaces
          }) : `key '${key} (${this.language})' returned an object instead of string.`;
          if (returnDetails) {
            resolved.res = r;
            resolved.usedParams = this.getUsedParamsDetails(options);
            return resolved;
          }
          return r;
        }
        if (keySeparator) {
          const resTypeIsArray = Array.isArray(res);
          const copy = resTypeIsArray ? [] : {};
          const newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
          for (const m in res) {
            if (Object.prototype.hasOwnProperty.call(res, m)) {
              const deepKey = `${newKeyToUse}${keySeparator}${m}`;
              copy[m] = this.translate(deepKey, {
                ...options,
                ...{
                  joinArrays: false,
                  ns: namespaces
                }
              });
              if (copy[m] === deepKey) copy[m] = res[m];
            }
          }
          res = copy;
        }
      } else if (handleAsObjectInI18nFormat && isString(joinArrays) && Array.isArray(res)) {
        res = res.join(joinArrays);
        if (res) res = this.extendTranslation(res, keys, options, lastKey);
      } else {
        let usedDefault = false;
        let usedKey = false;
        const needsPluralHandling = options.count !== undefined && !isString(options.count);
        const hasDefaultValue = Translator.hasDefaultValue(options);
        const defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : '';
        const defaultValueSuffixOrdinalFallback = options.ordinal && needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, {
          ordinal: false
        }) : '';
        const needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && this.pluralResolver.shouldUseIntlApi();
        const defaultValue = needsZeroSuffixLookup && options[`defaultValue${this.options.pluralSeparator}zero`] || options[`defaultValue${defaultValueSuffix}`] || options[`defaultValue${defaultValueSuffixOrdinalFallback}`] || options.defaultValue;
        if (!this.isValidLookup(res) && hasDefaultValue) {
          usedDefault = true;
          res = defaultValue;
        }
        if (!this.isValidLookup(res)) {
          usedKey = true;
          res = key;
        }
        const missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
        const resForMissing = missingKeyNoValueFallbackToKey && usedKey ? undefined : res;
        const updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
        if (usedKey || usedDefault || updateMissing) {
          this.logger.log(updateMissing ? 'updateKey' : 'missingKey', lng, namespace, key, updateMissing ? defaultValue : res);
          if (keySeparator) {
            const fk = this.resolve(key, {
              ...options,
              keySeparator: false
            });
            if (fk && fk.res) this.logger.warn('Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.');
          }
          let lngs = [];
          const fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
          if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) {
            for (let i = 0; i < fallbackLngs.length; i++) {
              lngs.push(fallbackLngs[i]);
            }
          } else if (this.options.saveMissingTo === 'all') {
            lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
          } else {
            lngs.push(options.lng || this.language);
          }
          const send = (l, k, specificDefaultValue) => {
            const defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
            if (this.options.missingKeyHandler) {
              this.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options);
            } else if (this.backendConnector && this.backendConnector.saveMissing) {
              this.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options);
            }
            this.emit('missingKey', l, namespace, k, res);
          };
          if (this.options.saveMissing) {
            if (this.options.saveMissingPlurals && needsPluralHandling) {
              lngs.forEach(language => {
                const suffixes = this.pluralResolver.getSuffixes(language, options);
                if (needsZeroSuffixLookup && options[`defaultValue${this.options.pluralSeparator}zero`] && suffixes.indexOf(`${this.options.pluralSeparator}zero`) < 0) {
                  suffixes.push(`${this.options.pluralSeparator}zero`);
                }
                suffixes.forEach(suffix => {
                  send([language], key + suffix, options[`defaultValue${suffix}`] || defaultValue);
                });
              });
            } else {
              send(lngs, key, defaultValue);
            }
          }
        }
        res = this.extendTranslation(res, keys, options, resolved, lastKey);
        if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = `${namespace}:${key}`;
        if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
          if (this.options.compatibilityAPI !== 'v1') {
            res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${namespace}:${key}` : key, usedDefault ? res : undefined);
          } else {
            res = this.options.parseMissingKeyHandler(res);
          }
        }
      }
      if (returnDetails) {
        resolved.res = res;
        resolved.usedParams = this.getUsedParamsDetails(options);
        return resolved;
      }
      return res;
    }
    extendTranslation(res, key, options, resolved, lastKey) {
      var _this = this;
      if (this.i18nFormat && this.i18nFormat.parse) {
        res = this.i18nFormat.parse(res, {
          ...this.options.interpolation.defaultVariables,
          ...options
        }, options.lng || this.language || resolved.usedLng, resolved.usedNS, resolved.usedKey, {
          resolved
        });
      } else if (!options.skipInterpolation) {
        if (options.interpolation) this.interpolator.init({
          ...options,
          ...{
            interpolation: {
              ...this.options.interpolation,
              ...options.interpolation
            }
          }
        });
        const skipOnVariables = isString(res) && (options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
        let nestBef;
        if (skipOnVariables) {
          const nb = res.match(this.interpolator.nestingRegexp);
          nestBef = nb && nb.length;
        }
        let data = options.replace && !isString(options.replace) ? options.replace : options;
        if (this.options.interpolation.defaultVariables) data = {
          ...this.options.interpolation.defaultVariables,
          ...data
        };
        res = this.interpolator.interpolate(res, data, options.lng || this.language || resolved.usedLng, options);
        if (skipOnVariables) {
          const na = res.match(this.interpolator.nestingRegexp);
          const nestAft = na && na.length;
          if (nestBef < nestAft) options.nest = false;
        }
        if (!options.lng && this.options.compatibilityAPI !== 'v1' && resolved && resolved.res) options.lng = this.language || resolved.usedLng;
        if (options.nest !== false) res = this.interpolator.nest(res, function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (lastKey && lastKey[0] === args[0] && !options.context) {
            _this.logger.warn(`It seems you are nesting recursively key: ${args[0]} in key: ${key[0]}`);
            return null;
          }
          return _this.translate(...args, key);
        }, options);
        if (options.interpolation) this.interpolator.reset();
      }
      const postProcess = options.postProcess || this.options.postProcess;
      const postProcessorNames = isString(postProcess) ? [postProcess] : postProcess;
      if (res !== undefined && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
        res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? {
          i18nResolved: {
            ...resolved,
            usedParams: this.getUsedParamsDetails(options)
          },
          ...options
        } : options, this);
      }
      return res;
    }
    resolve(keys) {
      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      let found;
      let usedKey;
      let exactUsedKey;
      let usedLng;
      let usedNS;
      if (isString(keys)) keys = [keys];
      keys.forEach(k => {
        if (this.isValidLookup(found)) return;
        const extracted = this.extractFromKey(k, options);
        const key = extracted.key;
        usedKey = key;
        let namespaces = extracted.namespaces;
        if (this.options.fallbackNS) namespaces = namespaces.concat(this.options.fallbackNS);
        const needsPluralHandling = options.count !== undefined && !isString(options.count);
        const needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && this.pluralResolver.shouldUseIntlApi();
        const needsContextHandling = options.context !== undefined && (isString(options.context) || typeof options.context === 'number') && options.context !== '';
        const codes = options.lngs ? options.lngs : this.languageUtils.toResolveHierarchy(options.lng || this.language, options.fallbackLng);
        namespaces.forEach(ns => {
          if (this.isValidLookup(found)) return;
          usedNS = ns;
          if (!checkedLoadedFor[`${codes[0]}-${ns}`] && this.utils && this.utils.hasLoadedNamespace && !this.utils.hasLoadedNamespace(usedNS)) {
            checkedLoadedFor[`${codes[0]}-${ns}`] = true;
            this.logger.warn(`key "${usedKey}" for languages "${codes.join(', ')}" won't get resolved as namespace "${usedNS}" was not yet loaded`, 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
          }
          codes.forEach(code => {
            if (this.isValidLookup(found)) return;
            usedLng = code;
            const finalKeys = [key];
            if (this.i18nFormat && this.i18nFormat.addLookupKeys) {
              this.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
            } else {
              let pluralSuffix;
              if (needsPluralHandling) pluralSuffix = this.pluralResolver.getSuffix(code, options.count, options);
              const zeroSuffix = `${this.options.pluralSeparator}zero`;
              const ordinalPrefix = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;
              if (needsPluralHandling) {
                finalKeys.push(key + pluralSuffix);
                if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                  finalKeys.push(key + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
                }
                if (needsZeroSuffixLookup) {
                  finalKeys.push(key + zeroSuffix);
                }
              }
              if (needsContextHandling) {
                const contextKey = `${key}${this.options.contextSeparator}${options.context}`;
                finalKeys.push(contextKey);
                if (needsPluralHandling) {
                  finalKeys.push(contextKey + pluralSuffix);
                  if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                    finalKeys.push(contextKey + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
                  }
                  if (needsZeroSuffixLookup) {
                    finalKeys.push(contextKey + zeroSuffix);
                  }
                }
              }
            }
            let possibleKey;
            while (possibleKey = finalKeys.pop()) {
              if (!this.isValidLookup(found)) {
                exactUsedKey = possibleKey;
                found = this.getResource(code, ns, possibleKey, options);
              }
            }
          });
        });
      });
      return {
        res: found,
        usedKey,
        exactUsedKey,
        usedLng,
        usedNS
      };
    }
    isValidLookup(res) {
      return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === '');
    }
    getResource(code, ns, key) {
      let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);
      return this.resourceStore.getResource(code, ns, key, options);
    }
    getUsedParamsDetails() {
      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      const optionsKeys = ['defaultValue', 'ordinal', 'context', 'replace', 'lng', 'lngs', 'fallbackLng', 'ns', 'keySeparator', 'nsSeparator', 'returnObjects', 'returnDetails', 'joinArrays', 'postProcess', 'interpolation'];
      const useOptionsReplaceForData = options.replace && !isString(options.replace);
      let data = useOptionsReplaceForData ? options.replace : options;
      if (useOptionsReplaceForData && typeof options.count !== 'undefined') {
        data.count = options.count;
      }
      if (this.options.interpolation.defaultVariables) {
        data = {
          ...this.options.interpolation.defaultVariables,
          ...data
        };
      }
      if (!useOptionsReplaceForData) {
        data = {
          ...data
        };
        for (const key of optionsKeys) {
          delete data[key];
        }
      }
      return data;
    }
    static hasDefaultValue(options) {
      const prefix = 'defaultValue';
      for (const option in options) {
        if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && undefined !== options[option]) {
          return true;
        }
      }
      return false;
    }
  }

  const capitalize = string => string.charAt(0).toUpperCase() + string.slice(1);
  class LanguageUtil {
    constructor(options) {
      this.options = options;
      this.supportedLngs = this.options.supportedLngs || false;
      this.logger = baseLogger.create('languageUtils');
    }
    getScriptPartFromCode(code) {
      code = getCleanedCode(code);
      if (!code || code.indexOf('-') < 0) return null;
      const p = code.split('-');
      if (p.length === 2) return null;
      p.pop();
      if (p[p.length - 1].toLowerCase() === 'x') return null;
      return this.formatLanguageCode(p.join('-'));
    }
    getLanguagePartFromCode(code) {
      code = getCleanedCode(code);
      if (!code || code.indexOf('-') < 0) return code;
      const p = code.split('-');
      return this.formatLanguageCode(p[0]);
    }
    formatLanguageCode(code) {
      if (isString(code) && code.indexOf('-') > -1) {
        if (typeof Intl !== 'undefined' && typeof Intl.getCanonicalLocales !== 'undefined') {
          try {
            let formattedCode = Intl.getCanonicalLocales(code)[0];
            if (formattedCode && this.options.lowerCaseLng) {
              formattedCode = formattedCode.toLowerCase();
            }
            if (formattedCode) return formattedCode;
          } catch (e) {}
        }
        const specialCases = ['hans', 'hant', 'latn', 'cyrl', 'cans', 'mong', 'arab'];
        let p = code.split('-');
        if (this.options.lowerCaseLng) {
          p = p.map(part => part.toLowerCase());
        } else if (p.length === 2) {
          p[0] = p[0].toLowerCase();
          p[1] = p[1].toUpperCase();
          if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
        } else if (p.length === 3) {
          p[0] = p[0].toLowerCase();
          if (p[1].length === 2) p[1] = p[1].toUpperCase();
          if (p[0] !== 'sgn' && p[2].length === 2) p[2] = p[2].toUpperCase();
          if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
          if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());
        }
        return p.join('-');
      }
      return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
    }
    isSupportedCode(code) {
      if (this.options.load === 'languageOnly' || this.options.nonExplicitSupportedLngs) {
        code = this.getLanguagePartFromCode(code);
      }
      return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
    }
    getBestMatchFromCodes(codes) {
      if (!codes) return null;
      let found;
      codes.forEach(code => {
        if (found) return;
        const cleanedLng = this.formatLanguageCode(code);
        if (!this.options.supportedLngs || this.isSupportedCode(cleanedLng)) found = cleanedLng;
      });
      if (!found && this.options.supportedLngs) {
        codes.forEach(code => {
          if (found) return;
          const lngOnly = this.getLanguagePartFromCode(code);
          if (this.isSupportedCode(lngOnly)) return found = lngOnly;
          found = this.options.supportedLngs.find(supportedLng => {
            if (supportedLng === lngOnly) return supportedLng;
            if (supportedLng.indexOf('-') < 0 && lngOnly.indexOf('-') < 0) return;
            if (supportedLng.indexOf('-') > 0 && lngOnly.indexOf('-') < 0 && supportedLng.substring(0, supportedLng.indexOf('-')) === lngOnly) return supportedLng;
            if (supportedLng.indexOf(lngOnly) === 0 && lngOnly.length > 1) return supportedLng;
          });
        });
      }
      if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
      return found;
    }
    getFallbackCodes(fallbacks, code) {
      if (!fallbacks) return [];
      if (typeof fallbacks === 'function') fallbacks = fallbacks(code);
      if (isString(fallbacks)) fallbacks = [fallbacks];
      if (Array.isArray(fallbacks)) return fallbacks;
      if (!code) return fallbacks.default || [];
      let found = fallbacks[code];
      if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
      if (!found) found = fallbacks[this.formatLanguageCode(code)];
      if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
      if (!found) found = fallbacks.default;
      return found || [];
    }
    toResolveHierarchy(code, fallbackCode) {
      const fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
      const codes = [];
      const addCode = c => {
        if (!c) return;
        if (this.isSupportedCode(c)) {
          codes.push(c);
        } else {
          this.logger.warn(`rejecting language code not found in supportedLngs: ${c}`);
        }
      };
      if (isString(code) && (code.indexOf('-') > -1 || code.indexOf('_') > -1)) {
        if (this.options.load !== 'languageOnly') addCode(this.formatLanguageCode(code));
        if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly') addCode(this.getScriptPartFromCode(code));
        if (this.options.load !== 'currentOnly') addCode(this.getLanguagePartFromCode(code));
      } else if (isString(code)) {
        addCode(this.formatLanguageCode(code));
      }
      fallbackCodes.forEach(fc => {
        if (codes.indexOf(fc) < 0) addCode(this.formatLanguageCode(fc));
      });
      return codes;
    }
  }

  let sets = [{
    lngs: ['ach', 'ak', 'am', 'arn', 'br', 'fil', 'gun', 'ln', 'mfe', 'mg', 'mi', 'oc', 'pt', 'pt-BR', 'tg', 'tl', 'ti', 'tr', 'uz', 'wa'],
    nr: [1, 2],
    fc: 1
  }, {
    lngs: ['af', 'an', 'ast', 'az', 'bg', 'bn', 'ca', 'da', 'de', 'dev', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fi', 'fo', 'fur', 'fy', 'gl', 'gu', 'ha', 'hi', 'hu', 'hy', 'ia', 'it', 'kk', 'kn', 'ku', 'lb', 'mai', 'ml', 'mn', 'mr', 'nah', 'nap', 'nb', 'ne', 'nl', 'nn', 'no', 'nso', 'pa', 'pap', 'pms', 'ps', 'pt-PT', 'rm', 'sco', 'se', 'si', 'so', 'son', 'sq', 'sv', 'sw', 'ta', 'te', 'tk', 'ur', 'yo'],
    nr: [1, 2],
    fc: 2
  }, {
    lngs: ['ay', 'bo', 'cgg', 'fa', 'ht', 'id', 'ja', 'jbo', 'ka', 'km', 'ko', 'ky', 'lo', 'ms', 'sah', 'su', 'th', 'tt', 'ug', 'vi', 'wo', 'zh'],
    nr: [1],
    fc: 3
  }, {
    lngs: ['be', 'bs', 'cnr', 'dz', 'hr', 'ru', 'sr', 'uk'],
    nr: [1, 2, 5],
    fc: 4
  }, {
    lngs: ['ar'],
    nr: [0, 1, 2, 3, 11, 100],
    fc: 5
  }, {
    lngs: ['cs', 'sk'],
    nr: [1, 2, 5],
    fc: 6
  }, {
    lngs: ['csb', 'pl'],
    nr: [1, 2, 5],
    fc: 7
  }, {
    lngs: ['cy'],
    nr: [1, 2, 3, 8],
    fc: 8
  }, {
    lngs: ['fr'],
    nr: [1, 2],
    fc: 9
  }, {
    lngs: ['ga'],
    nr: [1, 2, 3, 7, 11],
    fc: 10
  }, {
    lngs: ['gd'],
    nr: [1, 2, 3, 20],
    fc: 11
  }, {
    lngs: ['is'],
    nr: [1, 2],
    fc: 12
  }, {
    lngs: ['jv'],
    nr: [0, 1],
    fc: 13
  }, {
    lngs: ['kw'],
    nr: [1, 2, 3, 4],
    fc: 14
  }, {
    lngs: ['lt'],
    nr: [1, 2, 10],
    fc: 15
  }, {
    lngs: ['lv'],
    nr: [1, 2, 0],
    fc: 16
  }, {
    lngs: ['mk'],
    nr: [1, 2],
    fc: 17
  }, {
    lngs: ['mnk'],
    nr: [0, 1, 2],
    fc: 18
  }, {
    lngs: ['mt'],
    nr: [1, 2, 11, 20],
    fc: 19
  }, {
    lngs: ['or'],
    nr: [2, 1],
    fc: 2
  }, {
    lngs: ['ro'],
    nr: [1, 2, 20],
    fc: 20
  }, {
    lngs: ['sl'],
    nr: [5, 1, 2, 3],
    fc: 21
  }, {
    lngs: ['he', 'iw'],
    nr: [1, 2, 20, 21],
    fc: 22
  }];
  let _rulesPluralsTypes = {
    1: n => Number(n > 1),
    2: n => Number(n != 1),
    3: n => 0,
    4: n => Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2),
    5: n => Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5),
    6: n => Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2),
    7: n => Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2),
    8: n => Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3),
    9: n => Number(n >= 2),
    10: n => Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4),
    11: n => Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3),
    12: n => Number(n % 10 != 1 || n % 100 == 11),
    13: n => Number(n !== 0),
    14: n => Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3),
    15: n => Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2),
    16: n => Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2),
    17: n => Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1),
    18: n => Number(n == 0 ? 0 : n == 1 ? 1 : 2),
    19: n => Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3),
    20: n => Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2),
    21: n => Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0),
    22: n => Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3)
  };
  const nonIntlVersions = ['v1', 'v2', 'v3'];
  const intlVersions = ['v4'];
  const suffixesOrder = {
    zero: 0,
    one: 1,
    two: 2,
    few: 3,
    many: 4,
    other: 5
  };
  const createRules = () => {
    const rules = {};
    sets.forEach(set => {
      set.lngs.forEach(l => {
        rules[l] = {
          numbers: set.nr,
          plurals: _rulesPluralsTypes[set.fc]
        };
      });
    });
    return rules;
  };
  class PluralResolver {
    constructor(languageUtils) {
      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.languageUtils = languageUtils;
      this.options = options;
      this.logger = baseLogger.create('pluralResolver');
      if ((!this.options.compatibilityJSON || intlVersions.includes(this.options.compatibilityJSON)) && (typeof Intl === 'undefined' || !Intl.PluralRules)) {
        this.options.compatibilityJSON = 'v3';
        this.logger.error('Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.');
      }
      this.rules = createRules();
      this.pluralRulesCache = {};
    }
    addRule(lng, obj) {
      this.rules[lng] = obj;
    }
    clearCache() {
      this.pluralRulesCache = {};
    }
    getRule(code) {
      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (this.shouldUseIntlApi()) {
        const cleanedCode = getCleanedCode(code === 'dev' ? 'en' : code);
        const type = options.ordinal ? 'ordinal' : 'cardinal';
        const cacheKey = JSON.stringify({
          cleanedCode,
          type
        });
        if (cacheKey in this.pluralRulesCache) {
          return this.pluralRulesCache[cacheKey];
        }
        let rule;
        try {
          rule = new Intl.PluralRules(cleanedCode, {
            type
          });
        } catch (err) {
          if (!code.match(/-|_/)) return;
          const lngPart = this.languageUtils.getLanguagePartFromCode(code);
          rule = this.getRule(lngPart, options);
        }
        this.pluralRulesCache[cacheKey] = rule;
        return rule;
      }
      return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
    }
    needsPlural(code) {
      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      const rule = this.getRule(code, options);
      if (this.shouldUseIntlApi()) {
        return rule && rule.resolvedOptions().pluralCategories.length > 1;
      }
      return rule && rule.numbers.length > 1;
    }
    getPluralFormsOfKey(code, key) {
      let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this.getSuffixes(code, options).map(suffix => `${key}${suffix}`);
    }
    getSuffixes(code) {
      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      const rule = this.getRule(code, options);
      if (!rule) {
        return [];
      }
      if (this.shouldUseIntlApi()) {
        return rule.resolvedOptions().pluralCategories.sort((pluralCategory1, pluralCategory2) => suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2]).map(pluralCategory => `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : ''}${pluralCategory}`);
      }
      return rule.numbers.map(number => this.getSuffix(code, number, options));
    }
    getSuffix(code, count) {
      let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      const rule = this.getRule(code, options);
      if (rule) {
        if (this.shouldUseIntlApi()) {
          return `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : ''}${rule.select(count)}`;
        }
        return this.getSuffixRetroCompatible(rule, count);
      }
      this.logger.warn(`no plural rule found for: ${code}`);
      return '';
    }
    getSuffixRetroCompatible(rule, count) {
      const idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
      let suffix = rule.numbers[idx];
      if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
        if (suffix === 2) {
          suffix = 'plural';
        } else if (suffix === 1) {
          suffix = '';
        }
      }
      const returnSuffix = () => this.options.prepend && suffix.toString() ? this.options.prepend + suffix.toString() : suffix.toString();
      if (this.options.compatibilityJSON === 'v1') {
        if (suffix === 1) return '';
        if (typeof suffix === 'number') return `_plural_${suffix.toString()}`;
        return returnSuffix();
      } else if (this.options.compatibilityJSON === 'v2') {
        return returnSuffix();
      } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
        return returnSuffix();
      }
      return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
    }
    shouldUseIntlApi() {
      return !nonIntlVersions.includes(this.options.compatibilityJSON);
    }
  }

  const deepFindWithDefaults = function (data, defaultData, key) {
    let keySeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '.';
    let ignoreJSONStructure = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
    let path = getPathWithDefaults(data, defaultData, key);
    if (!path && ignoreJSONStructure && isString(key)) {
      path = deepFind(data, key, keySeparator);
      if (path === undefined) path = deepFind(defaultData, key, keySeparator);
    }
    return path;
  };
  const regexSafe = val => val.replace(/\$/g, '$$$$');
  class Interpolator {
    constructor() {
      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.logger = baseLogger.create('interpolator');
      this.options = options;
      this.format = options.interpolation && options.interpolation.format || (value => value);
      this.init(options);
    }
    init() {
      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (!options.interpolation) options.interpolation = {
        escapeValue: true
      };
      const {
        escape: escape$1,
        escapeValue,
        useRawValueToEscape,
        prefix,
        prefixEscaped,
        suffix,
        suffixEscaped,
        formatSeparator,
        unescapeSuffix,
        unescapePrefix,
        nestingPrefix,
        nestingPrefixEscaped,
        nestingSuffix,
        nestingSuffixEscaped,
        nestingOptionsSeparator,
        maxReplaces,
        alwaysFormat
      } = options.interpolation;
      this.escape = escape$1 !== undefined ? escape$1 : escape;
      this.escapeValue = escapeValue !== undefined ? escapeValue : true;
      this.useRawValueToEscape = useRawValueToEscape !== undefined ? useRawValueToEscape : false;
      this.prefix = prefix ? regexEscape(prefix) : prefixEscaped || '{{';
      this.suffix = suffix ? regexEscape(suffix) : suffixEscaped || '}}';
      this.formatSeparator = formatSeparator || ',';
      this.unescapePrefix = unescapeSuffix ? '' : unescapePrefix || '-';
      this.unescapeSuffix = this.unescapePrefix ? '' : unescapeSuffix || '';
      this.nestingPrefix = nestingPrefix ? regexEscape(nestingPrefix) : nestingPrefixEscaped || regexEscape('$t(');
      this.nestingSuffix = nestingSuffix ? regexEscape(nestingSuffix) : nestingSuffixEscaped || regexEscape(')');
      this.nestingOptionsSeparator = nestingOptionsSeparator || ',';
      this.maxReplaces = maxReplaces || 1000;
      this.alwaysFormat = alwaysFormat !== undefined ? alwaysFormat : false;
      this.resetRegExp();
    }
    reset() {
      if (this.options) this.init(this.options);
    }
    resetRegExp() {
      const getOrResetRegExp = (existingRegExp, pattern) => {
        if (existingRegExp && existingRegExp.source === pattern) {
          existingRegExp.lastIndex = 0;
          return existingRegExp;
        }
        return new RegExp(pattern, 'g');
      };
      this.regexp = getOrResetRegExp(this.regexp, `${this.prefix}(.+?)${this.suffix}`);
      this.regexpUnescape = getOrResetRegExp(this.regexpUnescape, `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`);
      this.nestingRegexp = getOrResetRegExp(this.nestingRegexp, `${this.nestingPrefix}(.+?)${this.nestingSuffix}`);
    }
    interpolate(str, data, lng, options) {
      let match;
      let value;
      let replaces;
      const defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
      const handleFormat = key => {
        if (key.indexOf(this.formatSeparator) < 0) {
          const path = deepFindWithDefaults(data, defaultData, key, this.options.keySeparator, this.options.ignoreJSONStructure);
          return this.alwaysFormat ? this.format(path, undefined, lng, {
            ...options,
            ...data,
            interpolationkey: key
          }) : path;
        }
        const p = key.split(this.formatSeparator);
        const k = p.shift().trim();
        const f = p.join(this.formatSeparator).trim();
        return this.format(deepFindWithDefaults(data, defaultData, k, this.options.keySeparator, this.options.ignoreJSONStructure), f, lng, {
          ...options,
          ...data,
          interpolationkey: k
        });
      };
      this.resetRegExp();
      const missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
      const skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
      const todos = [{
        regex: this.regexpUnescape,
        safeValue: val => regexSafe(val)
      }, {
        regex: this.regexp,
        safeValue: val => this.escapeValue ? regexSafe(this.escape(val)) : regexSafe(val)
      }];
      todos.forEach(todo => {
        replaces = 0;
        while (match = todo.regex.exec(str)) {
          const matchedVar = match[1].trim();
          value = handleFormat(matchedVar);
          if (value === undefined) {
            if (typeof missingInterpolationHandler === 'function') {
              const temp = missingInterpolationHandler(str, match, options);
              value = isString(temp) ? temp : '';
            } else if (options && Object.prototype.hasOwnProperty.call(options, matchedVar)) {
              value = '';
            } else if (skipOnVariables) {
              value = match[0];
              continue;
            } else {
              this.logger.warn(`missed to pass in variable ${matchedVar} for interpolating ${str}`);
              value = '';
            }
          } else if (!isString(value) && !this.useRawValueToEscape) {
            value = makeString(value);
          }
          const safeValue = todo.safeValue(value);
          str = str.replace(match[0], safeValue);
          if (skipOnVariables) {
            todo.regex.lastIndex += value.length;
            todo.regex.lastIndex -= match[0].length;
          } else {
            todo.regex.lastIndex = 0;
          }
          replaces++;
          if (replaces >= this.maxReplaces) {
            break;
          }
        }
      });
      return str;
    }
    nest(str, fc) {
      let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      let match;
      let value;
      let clonedOptions;
      const handleHasOptions = (key, inheritedOptions) => {
        const sep = this.nestingOptionsSeparator;
        if (key.indexOf(sep) < 0) return key;
        const c = key.split(new RegExp(`${sep}[ ]*{`));
        let optionsString = `{${c[1]}`;
        key = c[0];
        optionsString = this.interpolate(optionsString, clonedOptions);
        const matchedSingleQuotes = optionsString.match(/'/g);
        const matchedDoubleQuotes = optionsString.match(/"/g);
        if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
          optionsString = optionsString.replace(/'/g, '"');
        }
        try {
          clonedOptions = JSON.parse(optionsString);
          if (inheritedOptions) clonedOptions = {
            ...inheritedOptions,
            ...clonedOptions
          };
        } catch (e) {
          this.logger.warn(`failed parsing options string in nesting for key ${key}`, e);
          return `${key}${sep}${optionsString}`;
        }
        if (clonedOptions.defaultValue && clonedOptions.defaultValue.indexOf(this.prefix) > -1) delete clonedOptions.defaultValue;
        return key;
      };
      while (match = this.nestingRegexp.exec(str)) {
        let formatters = [];
        clonedOptions = {
          ...options
        };
        clonedOptions = clonedOptions.replace && !isString(clonedOptions.replace) ? clonedOptions.replace : clonedOptions;
        clonedOptions.applyPostProcessor = false;
        delete clonedOptions.defaultValue;
        let doReduce = false;
        if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
          const r = match[1].split(this.formatSeparator).map(elem => elem.trim());
          match[1] = r.shift();
          formatters = r;
          doReduce = true;
        }
        value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
        if (value && match[0] === str && !isString(value)) return value;
        if (!isString(value)) value = makeString(value);
        if (!value) {
          this.logger.warn(`missed to resolve ${match[1]} for nesting ${str}`);
          value = '';
        }
        if (doReduce) {
          value = formatters.reduce((v, f) => this.format(v, f, options.lng, {
            ...options,
            interpolationkey: match[1].trim()
          }), value.trim());
        }
        str = str.replace(match[0], value);
        this.regexp.lastIndex = 0;
      }
      return str;
    }
  }

  const parseFormatStr = formatStr => {
    let formatName = formatStr.toLowerCase().trim();
    const formatOptions = {};
    if (formatStr.indexOf('(') > -1) {
      const p = formatStr.split('(');
      formatName = p[0].toLowerCase().trim();
      const optStr = p[1].substring(0, p[1].length - 1);
      if (formatName === 'currency' && optStr.indexOf(':') < 0) {
        if (!formatOptions.currency) formatOptions.currency = optStr.trim();
      } else if (formatName === 'relativetime' && optStr.indexOf(':') < 0) {
        if (!formatOptions.range) formatOptions.range = optStr.trim();
      } else {
        const opts = optStr.split(';');
        opts.forEach(opt => {
          if (opt) {
            const [key, ...rest] = opt.split(':');
            const val = rest.join(':').trim().replace(/^'+|'+$/g, '');
            const trimmedKey = key.trim();
            if (!formatOptions[trimmedKey]) formatOptions[trimmedKey] = val;
            if (val === 'false') formatOptions[trimmedKey] = false;
            if (val === 'true') formatOptions[trimmedKey] = true;
            if (!isNaN(val)) formatOptions[trimmedKey] = parseInt(val, 10);
          }
        });
      }
    }
    return {
      formatName,
      formatOptions
    };
  };
  const createCachedFormatter = fn => {
    const cache = {};
    return (val, lng, options) => {
      let optForCache = options;
      if (options && options.interpolationkey && options.formatParams && options.formatParams[options.interpolationkey] && options[options.interpolationkey]) {
        optForCache = {
          ...optForCache,
          [options.interpolationkey]: undefined
        };
      }
      const key = lng + JSON.stringify(optForCache);
      let formatter = cache[key];
      if (!formatter) {
        formatter = fn(getCleanedCode(lng), options);
        cache[key] = formatter;
      }
      return formatter(val);
    };
  };
  class Formatter {
    constructor() {
      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.logger = baseLogger.create('formatter');
      this.options = options;
      this.formats = {
        number: createCachedFormatter((lng, opt) => {
          const formatter = new Intl.NumberFormat(lng, {
            ...opt
          });
          return val => formatter.format(val);
        }),
        currency: createCachedFormatter((lng, opt) => {
          const formatter = new Intl.NumberFormat(lng, {
            ...opt,
            style: 'currency'
          });
          return val => formatter.format(val);
        }),
        datetime: createCachedFormatter((lng, opt) => {
          const formatter = new Intl.DateTimeFormat(lng, {
            ...opt
          });
          return val => formatter.format(val);
        }),
        relativetime: createCachedFormatter((lng, opt) => {
          const formatter = new Intl.RelativeTimeFormat(lng, {
            ...opt
          });
          return val => formatter.format(val, opt.range || 'day');
        }),
        list: createCachedFormatter((lng, opt) => {
          const formatter = new Intl.ListFormat(lng, {
            ...opt
          });
          return val => formatter.format(val);
        })
      };
      this.init(options);
    }
    init(services) {
      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        interpolation: {}
      };
      this.formatSeparator = options.interpolation.formatSeparator || ',';
    }
    add(name, fc) {
      this.formats[name.toLowerCase().trim()] = fc;
    }
    addCached(name, fc) {
      this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);
    }
    format(value, format, lng) {
      let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      const formats = format.split(this.formatSeparator);
      if (formats.length > 1 && formats[0].indexOf('(') > 1 && formats[0].indexOf(')') < 0 && formats.find(f => f.indexOf(')') > -1)) {
        const lastIndex = formats.findIndex(f => f.indexOf(')') > -1);
        formats[0] = [formats[0], ...formats.splice(1, lastIndex)].join(this.formatSeparator);
      }
      const result = formats.reduce((mem, f) => {
        const {
          formatName,
          formatOptions
        } = parseFormatStr(f);
        if (this.formats[formatName]) {
          let formatted = mem;
          try {
            const valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};
            const l = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;
            formatted = this.formats[formatName](mem, l, {
              ...formatOptions,
              ...options,
              ...valOptions
            });
          } catch (error) {
            this.logger.warn(error);
          }
          return formatted;
        } else {
          this.logger.warn(`there was no format function for ${formatName}`);
        }
        return mem;
      }, value);
      return result;
    }
  }

  const removePending = (q, name) => {
    if (q.pending[name] !== undefined) {
      delete q.pending[name];
      q.pendingCount--;
    }
  };
  class Connector extends EventEmitter {
    constructor(backend, store, services) {
      let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      super();
      this.backend = backend;
      this.store = store;
      this.services = services;
      this.languageUtils = services.languageUtils;
      this.options = options;
      this.logger = baseLogger.create('backendConnector');
      this.waitingReads = [];
      this.maxParallelReads = options.maxParallelReads || 10;
      this.readingCalls = 0;
      this.maxRetries = options.maxRetries >= 0 ? options.maxRetries : 5;
      this.retryTimeout = options.retryTimeout >= 1 ? options.retryTimeout : 350;
      this.state = {};
      this.queue = [];
      if (this.backend && this.backend.init) {
        this.backend.init(services, options.backend, options);
      }
    }
    queueLoad(languages, namespaces, options, callback) {
      const toLoad = {};
      const pending = {};
      const toLoadLanguages = {};
      const toLoadNamespaces = {};
      languages.forEach(lng => {
        let hasAllNamespaces = true;
        namespaces.forEach(ns => {
          const name = `${lng}|${ns}`;
          if (!options.reload && this.store.hasResourceBundle(lng, ns)) {
            this.state[name] = 2;
          } else if (this.state[name] < 0) ; else if (this.state[name] === 1) {
            if (pending[name] === undefined) pending[name] = true;
          } else {
            this.state[name] = 1;
            hasAllNamespaces = false;
            if (pending[name] === undefined) pending[name] = true;
            if (toLoad[name] === undefined) toLoad[name] = true;
            if (toLoadNamespaces[ns] === undefined) toLoadNamespaces[ns] = true;
          }
        });
        if (!hasAllNamespaces) toLoadLanguages[lng] = true;
      });
      if (Object.keys(toLoad).length || Object.keys(pending).length) {
        this.queue.push({
          pending,
          pendingCount: Object.keys(pending).length,
          loaded: {},
          errors: [],
          callback
        });
      }
      return {
        toLoad: Object.keys(toLoad),
        pending: Object.keys(pending),
        toLoadLanguages: Object.keys(toLoadLanguages),
        toLoadNamespaces: Object.keys(toLoadNamespaces)
      };
    }
    loaded(name, err, data) {
      const s = name.split('|');
      const lng = s[0];
      const ns = s[1];
      if (err) this.emit('failedLoading', lng, ns, err);
      if (!err && data) {
        this.store.addResourceBundle(lng, ns, data, undefined, undefined, {
          skipCopy: true
        });
      }
      this.state[name] = err ? -1 : 2;
      if (err && data) this.state[name] = 0;
      const loaded = {};
      this.queue.forEach(q => {
        pushPath(q.loaded, [lng], ns);
        removePending(q, name);
        if (err) q.errors.push(err);
        if (q.pendingCount === 0 && !q.done) {
          Object.keys(q.loaded).forEach(l => {
            if (!loaded[l]) loaded[l] = {};
            const loadedKeys = q.loaded[l];
            if (loadedKeys.length) {
              loadedKeys.forEach(n => {
                if (loaded[l][n] === undefined) loaded[l][n] = true;
              });
            }
          });
          q.done = true;
          if (q.errors.length) {
            q.callback(q.errors);
          } else {
            q.callback();
          }
        }
      });
      this.emit('loaded', loaded);
      this.queue = this.queue.filter(q => !q.done);
    }
    read(lng, ns, fcName) {
      let tried = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      let wait = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.retryTimeout;
      let callback = arguments.length > 5 ? arguments[5] : undefined;
      if (!lng.length) return callback(null, {});
      if (this.readingCalls >= this.maxParallelReads) {
        this.waitingReads.push({
          lng,
          ns,
          fcName,
          tried,
          wait,
          callback
        });
        return;
      }
      this.readingCalls++;
      const resolver = (err, data) => {
        this.readingCalls--;
        if (this.waitingReads.length > 0) {
          const next = this.waitingReads.shift();
          this.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
        }
        if (err && data && tried < this.maxRetries) {
          setTimeout(() => {
            this.read.call(this, lng, ns, fcName, tried + 1, wait * 2, callback);
          }, wait);
          return;
        }
        callback(err, data);
      };
      const fc = this.backend[fcName].bind(this.backend);
      if (fc.length === 2) {
        try {
          const r = fc(lng, ns);
          if (r && typeof r.then === 'function') {
            r.then(data => resolver(null, data)).catch(resolver);
          } else {
            resolver(null, r);
          }
        } catch (err) {
          resolver(err);
        }
        return;
      }
      return fc(lng, ns, resolver);
    }
    prepareLoading(languages, namespaces) {
      let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      let callback = arguments.length > 3 ? arguments[3] : undefined;
      if (!this.backend) {
        this.logger.warn('No backend was added via i18next.use. Will not load resources.');
        return callback && callback();
      }
      if (isString(languages)) languages = this.languageUtils.toResolveHierarchy(languages);
      if (isString(namespaces)) namespaces = [namespaces];
      const toLoad = this.queueLoad(languages, namespaces, options, callback);
      if (!toLoad.toLoad.length) {
        if (!toLoad.pending.length) callback();
        return null;
      }
      toLoad.toLoad.forEach(name => {
        this.loadOne(name);
      });
    }
    load(languages, namespaces, callback) {
      this.prepareLoading(languages, namespaces, {}, callback);
    }
    reload(languages, namespaces, callback) {
      this.prepareLoading(languages, namespaces, {
        reload: true
      }, callback);
    }
    loadOne(name) {
      let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      const s = name.split('|');
      const lng = s[0];
      const ns = s[1];
      this.read(lng, ns, 'read', undefined, undefined, (err, data) => {
        if (err) this.logger.warn(`${prefix}loading namespace ${ns} for language ${lng} failed`, err);
        if (!err && data) this.logger.log(`${prefix}loaded namespace ${ns} for language ${lng}`, data);
        this.loaded(name, err, data);
      });
    }
    saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
      let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
      let clb = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : () => {};
      if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
        this.logger.warn(`did not save key "${key}" as the namespace "${namespace}" was not yet loaded`, 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
        return;
      }
      if (key === undefined || key === null || key === '') return;
      if (this.backend && this.backend.create) {
        const opts = {
          ...options,
          isUpdate
        };
        const fc = this.backend.create.bind(this.backend);
        if (fc.length < 6) {
          try {
            let r;
            if (fc.length === 5) {
              r = fc(languages, namespace, key, fallbackValue, opts);
            } else {
              r = fc(languages, namespace, key, fallbackValue);
            }
            if (r && typeof r.then === 'function') {
              r.then(data => clb(null, data)).catch(clb);
            } else {
              clb(null, r);
            }
          } catch (err) {
            clb(err);
          }
        } else {
          fc(languages, namespace, key, fallbackValue, clb, opts);
        }
      }
      if (!languages || !languages[0]) return;
      this.store.addResource(languages[0], namespace, key, fallbackValue);
    }
  }

  const get = () => ({
    debug: false,
    initImmediate: true,
    ns: ['translation'],
    defaultNS: ['translation'],
    fallbackLng: ['dev'],
    fallbackNS: false,
    supportedLngs: false,
    nonExplicitSupportedLngs: false,
    load: 'all',
    preload: false,
    simplifyPluralSuffix: true,
    keySeparator: '.',
    nsSeparator: ':',
    pluralSeparator: '_',
    contextSeparator: '_',
    partialBundledLanguages: false,
    saveMissing: false,
    updateMissing: false,
    saveMissingTo: 'fallback',
    saveMissingPlurals: true,
    missingKeyHandler: false,
    missingInterpolationHandler: false,
    postProcess: false,
    postProcessPassResolved: false,
    returnNull: false,
    returnEmptyString: true,
    returnObjects: false,
    joinArrays: false,
    returnedObjectHandler: false,
    parseMissingKeyHandler: false,
    appendNamespaceToMissingKey: false,
    appendNamespaceToCIMode: false,
    overloadTranslationOptionHandler: args => {
      let ret = {};
      if (typeof args[1] === 'object') ret = args[1];
      if (isString(args[1])) ret.defaultValue = args[1];
      if (isString(args[2])) ret.tDescription = args[2];
      if (typeof args[2] === 'object' || typeof args[3] === 'object') {
        const options = args[3] || args[2];
        Object.keys(options).forEach(key => {
          ret[key] = options[key];
        });
      }
      return ret;
    },
    interpolation: {
      escapeValue: true,
      format: value => value,
      prefix: '{{',
      suffix: '}}',
      formatSeparator: ',',
      unescapePrefix: '-',
      nestingPrefix: '$t(',
      nestingSuffix: ')',
      nestingOptionsSeparator: ',',
      maxReplaces: 1000,
      skipOnVariables: true
    }
  });
  const transformOptions = options => {
    if (isString(options.ns)) options.ns = [options.ns];
    if (isString(options.fallbackLng)) options.fallbackLng = [options.fallbackLng];
    if (isString(options.fallbackNS)) options.fallbackNS = [options.fallbackNS];
    if (options.supportedLngs && options.supportedLngs.indexOf('cimode') < 0) {
      options.supportedLngs = options.supportedLngs.concat(['cimode']);
    }
    return options;
  };

  const noop = () => {};
  const bindMemberFunctions = inst => {
    const mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
    mems.forEach(mem => {
      if (typeof inst[mem] === 'function') {
        inst[mem] = inst[mem].bind(inst);
      }
    });
  };
  class I18n extends EventEmitter {
    constructor() {
      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      let callback = arguments.length > 1 ? arguments[1] : undefined;
      super();
      this.options = transformOptions(options);
      this.services = {};
      this.logger = baseLogger;
      this.modules = {
        external: []
      };
      bindMemberFunctions(this);
      if (callback && !this.isInitialized && !options.isClone) {
        if (!this.options.initImmediate) {
          this.init(options, callback);
          return this;
        }
        setTimeout(() => {
          this.init(options, callback);
        }, 0);
      }
    }
    init() {
      var _this = this;
      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      let callback = arguments.length > 1 ? arguments[1] : undefined;
      this.isInitializing = true;
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      if (!options.defaultNS && options.defaultNS !== false && options.ns) {
        if (isString(options.ns)) {
          options.defaultNS = options.ns;
        } else if (options.ns.indexOf('translation') < 0) {
          options.defaultNS = options.ns[0];
        }
      }
      const defOpts = get();
      this.options = {
        ...defOpts,
        ...this.options,
        ...transformOptions(options)
      };
      if (this.options.compatibilityAPI !== 'v1') {
        this.options.interpolation = {
          ...defOpts.interpolation,
          ...this.options.interpolation
        };
      }
      if (options.keySeparator !== undefined) {
        this.options.userDefinedKeySeparator = options.keySeparator;
      }
      if (options.nsSeparator !== undefined) {
        this.options.userDefinedNsSeparator = options.nsSeparator;
      }
      const createClassOnDemand = ClassOrObject => {
        if (!ClassOrObject) return null;
        if (typeof ClassOrObject === 'function') return new ClassOrObject();
        return ClassOrObject;
      };
      if (!this.options.isClone) {
        if (this.modules.logger) {
          baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
        } else {
          baseLogger.init(null, this.options);
        }
        let formatter;
        if (this.modules.formatter) {
          formatter = this.modules.formatter;
        } else if (typeof Intl !== 'undefined') {
          formatter = Formatter;
        }
        const lu = new LanguageUtil(this.options);
        this.store = new ResourceStore(this.options.resources, this.options);
        const s = this.services;
        s.logger = baseLogger;
        s.resourceStore = this.store;
        s.languageUtils = lu;
        s.pluralResolver = new PluralResolver(lu, {
          prepend: this.options.pluralSeparator,
          compatibilityJSON: this.options.compatibilityJSON,
          simplifyPluralSuffix: this.options.simplifyPluralSuffix
        });
        if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
          s.formatter = createClassOnDemand(formatter);
          s.formatter.init(s, this.options);
          this.options.interpolation.format = s.formatter.format.bind(s.formatter);
        }
        s.interpolator = new Interpolator(this.options);
        s.utils = {
          hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
        };
        s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
        s.backendConnector.on('*', function (event) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          _this.emit(event, ...args);
        });
        if (this.modules.languageDetector) {
          s.languageDetector = createClassOnDemand(this.modules.languageDetector);
          if (s.languageDetector.init) s.languageDetector.init(s, this.options.detection, this.options);
        }
        if (this.modules.i18nFormat) {
          s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
          if (s.i18nFormat.init) s.i18nFormat.init(this);
        }
        this.translator = new Translator(this.services, this.options);
        this.translator.on('*', function (event) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          _this.emit(event, ...args);
        });
        this.modules.external.forEach(m => {
          if (m.init) m.init(this);
        });
      }
      this.format = this.options.interpolation.format;
      if (!callback) callback = noop;
      if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
        const codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
        if (codes.length > 0 && codes[0] !== 'dev') this.options.lng = codes[0];
      }
      if (!this.services.languageDetector && !this.options.lng) {
        this.logger.warn('init: no languageDetector is used and no lng is defined');
      }
      const storeApi = ['getResource', 'hasResourceBundle', 'getResourceBundle', 'getDataByLanguage'];
      storeApi.forEach(fcName => {
        this[fcName] = function () {
          return _this.store[fcName](...arguments);
        };
      });
      const storeApiChained = ['addResource', 'addResources', 'addResourceBundle', 'removeResourceBundle'];
      storeApiChained.forEach(fcName => {
        this[fcName] = function () {
          _this.store[fcName](...arguments);
          return _this;
        };
      });
      const deferred = defer();
      const load = () => {
        const finish = (err, t) => {
          this.isInitializing = false;
          if (this.isInitialized && !this.initializedStoreOnce) this.logger.warn('init: i18next is already initialized. You should call init just once!');
          this.isInitialized = true;
          if (!this.options.isClone) this.logger.log('initialized', this.options);
          this.emit('initialized', this.options);
          deferred.resolve(t);
          callback(err, t);
        };
        if (this.languages && this.options.compatibilityAPI !== 'v1' && !this.isInitialized) return finish(null, this.t.bind(this));
        this.changeLanguage(this.options.lng, finish);
      };
      if (this.options.resources || !this.options.initImmediate) {
        load();
      } else {
        setTimeout(load, 0);
      }
      return deferred;
    }
    loadResources(language) {
      let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
      let usedCallback = callback;
      const usedLng = isString(language) ? language : this.language;
      if (typeof language === 'function') usedCallback = language;
      if (!this.options.resources || this.options.partialBundledLanguages) {
        if (usedLng && usedLng.toLowerCase() === 'cimode' && (!this.options.preload || this.options.preload.length === 0)) return usedCallback();
        const toLoad = [];
        const append = lng => {
          if (!lng) return;
          if (lng === 'cimode') return;
          const lngs = this.services.languageUtils.toResolveHierarchy(lng);
          lngs.forEach(l => {
            if (l === 'cimode') return;
            if (toLoad.indexOf(l) < 0) toLoad.push(l);
          });
        };
        if (!usedLng) {
          const fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
          fallbacks.forEach(l => append(l));
        } else {
          append(usedLng);
        }
        if (this.options.preload) {
          this.options.preload.forEach(l => append(l));
        }
        this.services.backendConnector.load(toLoad, this.options.ns, e => {
          if (!e && !this.resolvedLanguage && this.language) this.setResolvedLanguage(this.language);
          usedCallback(e);
        });
      } else {
        usedCallback(null);
      }
    }
    reloadResources(lngs, ns, callback) {
      const deferred = defer();
      if (typeof lngs === 'function') {
        callback = lngs;
        lngs = undefined;
      }
      if (typeof ns === 'function') {
        callback = ns;
        ns = undefined;
      }
      if (!lngs) lngs = this.languages;
      if (!ns) ns = this.options.ns;
      if (!callback) callback = noop;
      this.services.backendConnector.reload(lngs, ns, err => {
        deferred.resolve();
        callback(err);
      });
      return deferred;
    }
    use(module) {
      if (!module) throw new Error('You are passing an undefined module! Please check the object you are passing to i18next.use()');
      if (!module.type) throw new Error('You are passing a wrong module! Please check the object you are passing to i18next.use()');
      if (module.type === 'backend') {
        this.modules.backend = module;
      }
      if (module.type === 'logger' || module.log && module.warn && module.error) {
        this.modules.logger = module;
      }
      if (module.type === 'languageDetector') {
        this.modules.languageDetector = module;
      }
      if (module.type === 'i18nFormat') {
        this.modules.i18nFormat = module;
      }
      if (module.type === 'postProcessor') {
        postProcessor.addPostProcessor(module);
      }
      if (module.type === 'formatter') {
        this.modules.formatter = module;
      }
      if (module.type === '3rdParty') {
        this.modules.external.push(module);
      }
      return this;
    }
    setResolvedLanguage(l) {
      if (!l || !this.languages) return;
      if (['cimode', 'dev'].indexOf(l) > -1) return;
      for (let li = 0; li < this.languages.length; li++) {
        const lngInLngs = this.languages[li];
        if (['cimode', 'dev'].indexOf(lngInLngs) > -1) continue;
        if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
          this.resolvedLanguage = lngInLngs;
          break;
        }
      }
    }
    changeLanguage(lng, callback) {
      var _this2 = this;
      this.isLanguageChangingTo = lng;
      const deferred = defer();
      this.emit('languageChanging', lng);
      const setLngProps = l => {
        this.language = l;
        this.languages = this.services.languageUtils.toResolveHierarchy(l);
        this.resolvedLanguage = undefined;
        this.setResolvedLanguage(l);
      };
      const done = (err, l) => {
        if (l) {
          setLngProps(l);
          this.translator.changeLanguage(l);
          this.isLanguageChangingTo = undefined;
          this.emit('languageChanged', l);
          this.logger.log('languageChanged', l);
        } else {
          this.isLanguageChangingTo = undefined;
        }
        deferred.resolve(function () {
          return _this2.t(...arguments);
        });
        if (callback) callback(err, function () {
          return _this2.t(...arguments);
        });
      };
      const setLng = lngs => {
        if (!lng && !lngs && this.services.languageDetector) lngs = [];
        const l = isString(lngs) ? lngs : this.services.languageUtils.getBestMatchFromCodes(lngs);
        if (l) {
          if (!this.language) {
            setLngProps(l);
          }
          if (!this.translator.language) this.translator.changeLanguage(l);
          if (this.services.languageDetector && this.services.languageDetector.cacheUserLanguage) this.services.languageDetector.cacheUserLanguage(l);
        }
        this.loadResources(l, err => {
          done(err, l);
        });
      };
      if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
        setLng(this.services.languageDetector.detect());
      } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
        if (this.services.languageDetector.detect.length === 0) {
          this.services.languageDetector.detect().then(setLng);
        } else {
          this.services.languageDetector.detect(setLng);
        }
      } else {
        setLng(lng);
      }
      return deferred;
    }
    getFixedT(lng, ns, keyPrefix) {
      var _this3 = this;
      const fixedT = function (key, opts) {
        let options;
        if (typeof opts !== 'object') {
          for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
            rest[_key3 - 2] = arguments[_key3];
          }
          options = _this3.options.overloadTranslationOptionHandler([key, opts].concat(rest));
        } else {
          options = {
            ...opts
          };
        }
        options.lng = options.lng || fixedT.lng;
        options.lngs = options.lngs || fixedT.lngs;
        options.ns = options.ns || fixedT.ns;
        if (options.keyPrefix !== '') options.keyPrefix = options.keyPrefix || keyPrefix || fixedT.keyPrefix;
        const keySeparator = _this3.options.keySeparator || '.';
        let resultKey;
        if (options.keyPrefix && Array.isArray(key)) {
          resultKey = key.map(k => `${options.keyPrefix}${keySeparator}${k}`);
        } else {
          resultKey = options.keyPrefix ? `${options.keyPrefix}${keySeparator}${key}` : key;
        }
        return _this3.t(resultKey, options);
      };
      if (isString(lng)) {
        fixedT.lng = lng;
      } else {
        fixedT.lngs = lng;
      }
      fixedT.ns = ns;
      fixedT.keyPrefix = keyPrefix;
      return fixedT;
    }
    t() {
      return this.translator && this.translator.translate(...arguments);
    }
    exists() {
      return this.translator && this.translator.exists(...arguments);
    }
    setDefaultNamespace(ns) {
      this.options.defaultNS = ns;
    }
    hasLoadedNamespace(ns) {
      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (!this.isInitialized) {
        this.logger.warn('hasLoadedNamespace: i18next was not initialized', this.languages);
        return false;
      }
      if (!this.languages || !this.languages.length) {
        this.logger.warn('hasLoadedNamespace: i18n.languages were undefined or empty', this.languages);
        return false;
      }
      const lng = options.lng || this.resolvedLanguage || this.languages[0];
      const fallbackLng = this.options ? this.options.fallbackLng : false;
      const lastLng = this.languages[this.languages.length - 1];
      if (lng.toLowerCase() === 'cimode') return true;
      const loadNotPending = (l, n) => {
        const loadState = this.services.backendConnector.state[`${l}|${n}`];
        return loadState === -1 || loadState === 0 || loadState === 2;
      };
      if (options.precheck) {
        const preResult = options.precheck(this, loadNotPending);
        if (preResult !== undefined) return preResult;
      }
      if (this.hasResourceBundle(lng, ns)) return true;
      if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;
      if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
      return false;
    }
    loadNamespaces(ns, callback) {
      const deferred = defer();
      if (!this.options.ns) {
        if (callback) callback();
        return Promise.resolve();
      }
      if (isString(ns)) ns = [ns];
      ns.forEach(n => {
        if (this.options.ns.indexOf(n) < 0) this.options.ns.push(n);
      });
      this.loadResources(err => {
        deferred.resolve();
        if (callback) callback(err);
      });
      return deferred;
    }
    loadLanguages(lngs, callback) {
      const deferred = defer();
      if (isString(lngs)) lngs = [lngs];
      const preloaded = this.options.preload || [];
      const newLngs = lngs.filter(lng => preloaded.indexOf(lng) < 0 && this.services.languageUtils.isSupportedCode(lng));
      if (!newLngs.length) {
        if (callback) callback();
        return Promise.resolve();
      }
      this.options.preload = preloaded.concat(newLngs);
      this.loadResources(err => {
        deferred.resolve();
        if (callback) callback(err);
      });
      return deferred;
    }
    dir(lng) {
      if (!lng) lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
      if (!lng) return 'rtl';
      const rtlLngs = ['ar', 'shu', 'sqr', 'ssh', 'xaa', 'yhd', 'yud', 'aao', 'abh', 'abv', 'acm', 'acq', 'acw', 'acx', 'acy', 'adf', 'ads', 'aeb', 'aec', 'afb', 'ajp', 'apc', 'apd', 'arb', 'arq', 'ars', 'ary', 'arz', 'auz', 'avl', 'ayh', 'ayl', 'ayn', 'ayp', 'bbz', 'pga', 'he', 'iw', 'ps', 'pbt', 'pbu', 'pst', 'prp', 'prd', 'ug', 'ur', 'ydd', 'yds', 'yih', 'ji', 'yi', 'hbo', 'men', 'xmn', 'fa', 'jpr', 'peo', 'pes', 'prs', 'dv', 'sam', 'ckb'];
      const languageUtils = this.services && this.services.languageUtils || new LanguageUtil(get());
      return rtlLngs.indexOf(languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf('-arab') > 1 ? 'rtl' : 'ltr';
    }
    static createInstance() {
      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      let callback = arguments.length > 1 ? arguments[1] : undefined;
      return new I18n(options, callback);
    }
    cloneInstance() {
      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
      const forkResourceStore = options.forkResourceStore;
      if (forkResourceStore) delete options.forkResourceStore;
      const mergedOptions = {
        ...this.options,
        ...options,
        ...{
          isClone: true
        }
      };
      const clone = new I18n(mergedOptions);
      if (options.debug !== undefined || options.prefix !== undefined) {
        clone.logger = clone.logger.clone(options);
      }
      const membersToCopy = ['store', 'services', 'language'];
      membersToCopy.forEach(m => {
        clone[m] = this[m];
      });
      clone.services = {
        ...this.services
      };
      clone.services.utils = {
        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
      };
      if (forkResourceStore) {
        clone.store = new ResourceStore(this.store.data, mergedOptions);
        clone.services.resourceStore = clone.store;
      }
      clone.translator = new Translator(clone.services, mergedOptions);
      clone.translator.on('*', function (event) {
        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          args[_key4 - 1] = arguments[_key4];
        }
        clone.emit(event, ...args);
      });
      clone.init(mergedOptions, callback);
      clone.translator.options = mergedOptions;
      clone.translator.backendConnector.services.utils = {
        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
      };
      return clone;
    }
    toJSON() {
      return {
        options: this.options,
        store: this.store,
        language: this.language,
        languages: this.languages,
        resolvedLanguage: this.resolvedLanguage
      };
    }
  }
  const instance = I18n.createInstance();
  instance.createInstance = I18n.createInstance;

  instance.createInstance;
  instance.dir;
  instance.init;
  instance.loadResources;
  instance.reloadResources;
  instance.use;
  instance.changeLanguage;
  instance.getFixedT;
  instance.t;
  instance.exists;
  instance.setDefaultNamespace;
  instance.hasLoadedNamespace;
  instance.loadNamespaces;
  instance.loadLanguages;

  /**
   * @description i18n entry
   * @author wangfupeng
   */
  // i18n nameSpace
  var NS = 'translation';
  instance.init({
      lng: 'zh-CN',
      // debug: true,
      resources: {}, // 资源为空，随后添加
  });
  /**
   * 添加多语言配置
   * @param lng 语言
   * @param resources 多语言配置
   */
  function i18nAddResources(lng, resources) {
      instance.addResourceBundle(lng, NS, resources, true, true);
  }
  /**
   * 设置语言
   * @param lng 语言
   */
  function i18nChangeLanguage(lng) {
      instance.changeLanguage(lng);
  }
  /**
   * 获取多语言配置
   * @param lng lang
   */
  function i18nGetResources(lng) {
      return instance.getResourceBundle(lng, NS);
  }
  /**
   * 监听语言变更
   * @param callback
   * @returns
   */
  function i18nListenLanguage(callback) {
      instance.on('languageChanged', callback);
      return function () { return instance.off('languageChanged', callback); };
  }
  /**
   * 翻译
   */
  var t$2 = instance.t.bind(instance);

  /**
   * @description svg tag
   * @author wangfupeng
   */
  /**
   * 【注意】svg 字符串的长度 ，否则会导致代码体积过大
   * 尽量选择 https://www.iconfont.cn/collections/detail?spm=a313x.7781069.0.da5a778a4&cid=20293
   * 找不到再从 iconfont.com 搜索
   */
  // 对号
  var SVG_CHECK_MARK = '<svg viewBox="0 0 1446 1024"><path d="M574.116299 786.736392 1238.811249 48.517862C1272.390222 11.224635 1329.414799 7.827718 1366.75664 41.450462 1403.840015 74.840484 1406.731043 132.084741 1373.10189 169.433699L655.118888 966.834607C653.072421 969.716875 650.835807 972.514337 648.407938 975.210759 615.017957 1012.29409 558.292155 1015.652019 521.195664 982.250188L72.778218 578.493306C35.910826 545.297758 32.859041 488.584019 66.481825 451.242134 99.871807 414.158803 156.597563 410.800834 193.694055 444.202665L574.116299 786.736392Z"></path></svg>';
  // 向下的箭头
  var SVG_DOWN_ARROW = '<svg viewBox="0 0 1024 1024"><path d="M498.7 655.8l-197.6-268c-8.1-10.9-0.3-26.4 13.3-26.4h395.2c13.6 0 21.4 15.4 13.3 26.4l-197.6 268c-6.6 9-20 9-26.6 0z"></path></svg>';
  // 关闭
  var SVG_CLOSE = '<svg viewBox="0 0 1024 1024"><path d="M1024 896.1024l-128 128L512 640 128 1024 0 896 384 512 0 128 128 0 512 384 896.1024 0l128 128L640 512z"></path></svg>';

  /**
   * @description menu helpers
   * @author wangfupeng
   */
  /**
   * 清理 svg 的样式
   * @param $elem svg elem
   */
  function clearSvgStyle($elem) {
      if (!$elem.removeAttr)
          return;
      $elem.removeAttr('width');
      $elem.removeAttr('height');
      $elem.removeAttr('fill');
      $elem.removeAttr('class');
      $elem.removeAttr('t');
      $elem.removeAttr('p-id');
      var children = $elem.children();
      if (children.length) {
          clearSvgStyle(children);
      }
  }
  /**
   * 向下箭头 icon svg
   */
  function gen$downArrow() {
      var $downArrow = $$1(SVG_DOWN_ARROW);
      return $downArrow;
  }
  /**
   * bar item 分割线
   */
  function gen$barItemDivider() {
      return $$1('<div class="w-e-bar-divider"></div>');
  }

  /**
   * @description tooltip 功能
   * @author wangfupeng
   */
  function addTooltip($button, iconSvg, title, hotkey, inGroup) {
      if (hotkey === void 0) { hotkey = ''; }
      if (inGroup === void 0) { inGroup = false; }
      if (!iconSvg) {
          // 没有 icon 直接显示 title ，不用 tooltip
          return;
      }
      if (hotkey) {
          var fnKey = IS_APPLE ? 'cmd' : 'ctrl'; // mac OS 转换为 cmd ，windows 转换为 ctrl
          hotkey = hotkey.replace('mod', fnKey);
      }
      if (inGroup) {
          // in groupButton ，tooltip 只显示 快捷键
          if (hotkey) {
              $button.attr('data-tooltip', hotkey);
              $button.addClass('w-e-menu-tooltip-v5');
              $button.addClass('tooltip-right'); // tooltip 显示在右侧
          }
      }
      else {
          // 非 in groupButton ，正常实现 tooltip
          var tooltip = hotkey ? "".concat(title, "\n").concat(hotkey) : title;
          $button.attr('data-tooltip', tooltip);
          $button.addClass('w-e-menu-tooltip-v5');
      }
  }

  /**
   * @description base button class
   * @author wangfupeng
   */
  var BaseButton = /** @class */ (function () {
      function BaseButton(key, menu, inGroup) {
          if (inGroup === void 0) { inGroup = false; }
          var _this = this;
          this.$elem = $$1("<div class=\"w-e-bar-item\"></div>");
          this.$button = $$1("<button type=\"button\"></button>");
          this.disabled = false;
          this.menu = menu;
          // 验证 tag
          var tag = menu.tag, width = menu.width;
          if (tag !== 'button')
              throw new Error("Invalid tag '".concat(tag, "', expected 'button'"));
          // ----------------- 初始化 dom -----------------
          var title = menu.title, _a = menu.hotkey, hotkey = _a === void 0 ? '' : _a, _b = menu.iconSvg, iconSvg = _b === void 0 ? '' : _b;
          var $button = this.$button;
          if (iconSvg) {
              var $svg = $$1(iconSvg);
              clearSvgStyle($svg); // 清理 svg 样式（扩展的菜单，svg 是不可控的，所以要清理一下）
              $button.append($svg);
          }
          else {
              // 无 icon 则显示 title
              $button.text(title);
          }
          addTooltip($button, iconSvg, title, hotkey, inGroup); // 设置 tooltip
          if (inGroup && iconSvg) {
              // in groupButton（且有 icon），显示 menu title
              // 如果没有 icon ，上面已添加 title ，不用重复添加
              $button.append($$1("<span class=\"title\">".concat(title, "</span>")));
          }
          if (width) {
              $button.css('width', "".concat(width, "px"));
          }
          $button.attr('data-menu-key', key); // menu key
          this.$elem.append($button);
          // ----------------- 异步绑定事件 -----------------
          promiseResolveThen(function () { return _this.init(); });
      }
      BaseButton.prototype.init = function () {
          var _this = this;
          // 设置 button 属性
          this.setActive();
          this.setDisabled();
          // button click
          this.$button.on('click', function (e) {
              e.preventDefault();
              var editor = getEditorInstance(_this);
              editor.hidePanelOrModal(); // 隐藏当前的各种 panel
              if (_this.disabled)
                  return;
              _this.exec(); // 执行 menu.exec
              _this.onButtonClick(); // 执行其他的逻辑
          });
      };
      /**
       * 执行 menu.exec
       */
      BaseButton.prototype.exec = function () {
          var editor = getEditorInstance(this);
          var menu = this.menu;
          var value = menu.getValue(editor);
          this.setIcon();
          this.setTooltip();
          menu.exec(editor, value);
      };
      BaseButton.prototype.setActive = function () {
          var editor = getEditorInstance(this);
          var $button = this.$button;
          var active = this.menu.isActive(editor);
          var className = 'active';
          if (active) {
              // 设置为 active
              $button.addClass(className);
          }
          else {
              // 取消 active
              $button.removeClass(className);
          }
      };
      BaseButton.prototype.setDisabled = function () {
          var editor = getEditorInstance(this);
          var $button = this.$button;
          var disabled = this.menu.isDisabled(editor);
          if (editor.selection == null || editor.isDisabled()) {
              // 未选中，或者 readOnly ，强行设置为 disabled
              disabled = true;
          }
          // 永远 enable
          if (this.menu.alwaysEnable)
              disabled = false;
          var className = 'disabled';
          if (disabled) {
              // 设置为 disabled
              $button.addClass(className);
          }
          else {
              // 取消 disabled
              $button.removeClass(className);
          }
          this.disabled = disabled; // 记录下来
      };
      BaseButton.prototype.setIcon = function () {
          var editor = getEditorInstance(this);
          var $button = this.$button;
          if (!this.menu.getIcon)
              return;
          var iconSvg = this.menu.getIcon(editor);
          if (iconSvg) {
              $button.find('svg').remove();
              var $svg = $$1(iconSvg);
              clearSvgStyle($svg);
              $button.append($svg);
          }
      };
      BaseButton.prototype.setTooltip = function () {
          var editor = getEditorInstance(this);
          var $button = this.$button;
          if (!this.menu.getTitle)
              return;
          var title = this.menu.getTitle(editor);
          var iconSvg = this.menu.iconSvg;
          if (title && iconSvg) {
              addTooltip($button, iconSvg, title);
          }
      };
      BaseButton.prototype.changeMenuState = function () {
          this.setActive();
          this.setDisabled();
      };
      return BaseButton;
  }());

  /**
   * @description button class
   * @author wangfupeng
   */
  var SimpleButton = /** @class */ (function (_super) {
      __extends(SimpleButton, _super);
      function SimpleButton(key, menu, inGroup) {
          if (inGroup === void 0) { inGroup = false; }
          return _super.call(this, key, menu, inGroup) || this;
      }
      SimpleButton.prototype.onButtonClick = function () {
          // menu.exec 已经在 BaseButton 实现了
          // 所以，此处不用做任何逻辑
      };
      return SimpleButton;
  }(BaseButton));

  /**
   * @description panel modal baseClass
   * @author wangfupeng
   */
  var PanelAndModal = /** @class */ (function () {
      function PanelAndModal(editor) {
          this.isShow = false;
          this.showTime = 0; // 显示时的时间戳
          this.record(editor);
      }
      /**
       * 记录下来，以便隐藏，API editor.hidePanelOrModal
       */
      PanelAndModal.prototype.record = function (editor) {
          var set = EDITOR_TO_PANEL_AND_MODAL.get(editor);
          if (set == null) {
              set = new Set();
              EDITOR_TO_PANEL_AND_MODAL.set(editor, set);
          }
          set.add(this);
          PANEL_OR_MODAL_TO_EDITOR.set(this, editor);
      };
      PanelAndModal.prototype.renderContent = function (contentElem) {
          var $elem = this.$elem;
          $elem.empty(); // 先清空，再填充内容
          $elem.append(contentElem);
          // 添加自己额外的 elem
          var $selfElem = this.genSelfElem();
          if ($selfElem) {
              $elem.append($selfElem);
          }
      };
      PanelAndModal.prototype.appendTo = function ($menuElem) {
          var $elem = this.$elem;
          $menuElem.append($elem);
      };
      PanelAndModal.prototype.show = function () {
          if (this.isShow)
              return;
          this.showTime = Date.now();
          var $elem = this.$elem;
          $elem.show();
          this.isShow = true;
          // 触发事件
          var editor = PANEL_OR_MODAL_TO_EDITOR.get(this);
          if (editor)
              editor.emit('modalOrPanelShow', this);
      };
      PanelAndModal.prototype.hide = function () {
          if (!this.isShow)
              return;
          var now = Date.now();
          if (now - this.showTime < 200) {
              // 刚显示的，不要立刻隐藏（避免频繁触发 show/hide ）
              return;
          }
          var $elem = this.$elem;
          $elem.hide();
          this.isShow = false;
          // 触发事件
          var editor = PANEL_OR_MODAL_TO_EDITOR.get(this);
          if (editor)
              editor.emit('modalOrPanelHide');
      };
      return PanelAndModal;
  }());

  /**
   * @description dropPanel class
   * @author wangfupeng
   */
  var DropPanel = /** @class */ (function (_super) {
      __extends(DropPanel, _super);
      function DropPanel(editor) {
          var _this = _super.call(this, editor) || this;
          _this.type = 'dropPanel';
          _this.$elem = $$1("<div class=\"w-e-drop-panel\"></div>");
          return _this;
      }
      DropPanel.prototype.genSelfElem = function () {
          return null;
      };
      return DropPanel;
  }(PanelAndModal));

  /**
   * @description dropPanel button class
   * @author wangfupeng
   */
  var DropPanelButton = /** @class */ (function (_super) {
      __extends(DropPanelButton, _super);
      function DropPanelButton(key, menu, inGroup) {
          if (inGroup === void 0) { inGroup = false; }
          var _this = _super.call(this, key, menu, inGroup) || this;
          _this.dropPanel = null;
          _this.menu = menu;
          if (menu.showDropPanel) {
              var $arrow = gen$downArrow();
              _this.$button.append($arrow);
          }
          return _this;
      }
      // button 点击之后
      DropPanelButton.prototype.onButtonClick = function () {
          if (this.menu.showDropPanel) {
              this.handleDropPanel();
          }
      };
      // 显示/隐藏 dropPanel
      DropPanelButton.prototype.handleDropPanel = function () {
          var menu = this.menu;
          if (menu.getPanelContentElem == null)
              return;
          var editor = getEditorInstance(this);
          if (this.dropPanel == null) {
              // 初次创建
              var dropPanel_1 = new DropPanel(editor);
              var contentElem = menu.getPanelContentElem(editor);
              dropPanel_1.renderContent(contentElem);
              dropPanel_1.appendTo(this.$elem);
              dropPanel_1.show();
              // 记录下来，防止重复创建
              this.dropPanel = dropPanel_1;
          }
          else {
              // 不是初次创建
              var dropPanel_2 = this.dropPanel;
              if (dropPanel_2.isShow) {
                  // 当前处于显示状态，则隐藏
                  dropPanel_2.hide();
              }
              else {
                  // 当前未处于显示状态，则重新渲染内容 ，并显示
                  var contentElem = menu.getPanelContentElem(editor);
                  dropPanel_2.renderContent(contentElem);
                  dropPanel_2.show();
              }
          }
          // 判断 dropPanel 的位置：在菜单右侧/左侧
          var dropPanel = this.dropPanel;
          if (dropPanel.isShow) {
              var $menu = this.$elem;
              var left = $menu.offset().left; // 菜单元素 left
              var $toolbar = $menu.parents('.w-e-bar');
              var toolbarLeft = $toolbar.offset().left; // toolbar left
              var toolbarWidth = $toolbar.width(); // toolbar width
              var halfToolbarWidth = toolbarWidth / 2; // toolbar width 的 1/2
              if (left - toolbarLeft >= halfToolbarWidth) {
                  // 菜单在 toolbar 的右半部分，则 dropPanel 要显示在菜单左侧
                  dropPanel.$elem.css({
                      left: 'none',
                      right: '0',
                  });
              }
              else {
                  // 菜单在 toolbar 左半部分，则 dropPanel 显示在菜单右侧
                  dropPanel.$elem.css({
                      left: '0',
                      right: 'none',
                  });
              }
          }
      };
      return DropPanelButton;
  }(BaseButton));

  /**
   * @description modal class
   * @author wangfupeng
   */
  var Modal = /** @class */ (function (_super) {
      __extends(Modal, _super);
      function Modal(editor, width) {
          if (width === void 0) { width = 0; }
          var _this = _super.call(this, editor) || this;
          _this.type = 'modal';
          _this.$elem = $$1("<div class=\"w-e-modal\"></div>");
          _this.width = 0;
          if (width)
              _this.width = width;
          var $elem = _this.$elem;
          // mousedown 阻止冒泡，因为在 $textContainer 通过 mousedown 隐藏 panel & modal
          $elem.on('click', function (e) { return e.stopPropagation(); });
          // esc 关闭 modal
          $elem.on('keyup', function (e) {
              var event = e;
              if (event.code === 'Escape') {
                  _this.hide();
                  editor.restoreSelection(); // 还原选区
              }
          });
          return _this;
      }
      /**
       * 生成要添加到 modal $elem 的元素
       * 【注意】不要直接 append 到 modal $elem ，因为它每次都会清空 html('')
       */
      Modal.prototype.genSelfElem = function () {
          var _this = this;
          // 关闭按钮
          var $closeButton = $$1("<span class=\"btn-close\">".concat(SVG_CLOSE, "</span>"));
          var editor = PANEL_OR_MODAL_TO_EDITOR.get(this);
          $closeButton.on('click', function () {
              _this.hide();
              editor === null || editor === void 0 ? void 0 : editor.restoreSelection();
          });
          return $closeButton;
      };
      Modal.prototype.setStyle = function (positionStyle) {
          var _a = this, width = _a.width, $elem = _a.$elem;
          $elem.attr('style', ''); // 先清空 style ，再重新设置
          if (width)
              $elem.css('width', "".concat(width, "px"));
          $elem.css(positionStyle);
      };
      return Modal;
  }(PanelAndModal));
  // ---------------------------------- 分割线 ----------------------------------
  /**
   * 生成 modal input elems
   * @param labelText label text
   * @param inputId input dom id
   * @param placeholder input placeholder
   * @returns [$container, $input]
   */
  function genModalInputElems(labelText, inputId, placeholder) {
      var $container = $$1('<label class="babel-container"></label>');
      $container.append("<span>".concat(labelText, "</span>"));
      var $input = $$1("<input type=\"text\" id=\"".concat(inputId, "\" placeholder=\"").concat(placeholder || '', "\">"));
      $container.append($input);
      return [$container[0], $input[0]];
  }
  /**
   * 生成 modal textarea elems
   * @param labelText label text
   * @param textareaId input dom id
   * @param placeholder input placeholder
   * @returns [$container, $textarea]
   */
  function genModalTextareaElems(labelText, textareaId, placeholder) {
      var $container = $$1('<label class="babel-container"></label>');
      $container.append("<span>".concat(labelText, "</span>"));
      var $textarea = $$1("<textarea type=\"text\" id=\"".concat(textareaId, "\" placeholder=\"").concat(placeholder || '', "\"></textarea>"));
      $container.append($textarea);
      return [$container[0], $textarea[0]];
  }
  /**
   * 生成 modal button elems
   * @param buttonId button dom id
   * @param buttonText button text
   * @returns [ $container, $button ]
   */
  function genModalButtonElems(buttonId, buttonText) {
      var $buttonContainer = $$1('<div class="button-container"></div>');
      var $button = $$1("<button type=\"button\" id=\"".concat(buttonId, "\">").concat(buttonText, "</button>"));
      $buttonContainer.append($button);
      return [$buttonContainer[0], $button[0]];
  }

  /**
   * @description modal button class
   * @author wangfupeng
   */
  var ModalButton = /** @class */ (function (_super) {
      __extends(ModalButton, _super);
      function ModalButton(key, menu, inGroup) {
          if (inGroup === void 0) { inGroup = false; }
          var _this = _super.call(this, key, menu, inGroup) || this;
          _this.$body = $$1('body');
          _this.modal = null;
          _this.menu = menu;
          return _this;
      }
      ModalButton.prototype.onButtonClick = function () {
          if (this.menu.showModal) {
              this.handleModal();
          }
      };
      /**
       * 获取 modal 定位
       */
      ModalButton.prototype.getPosition = function () {
          var editor = getEditorInstance(this);
          var positionNode = this.menu.getModalPositionNode(editor);
          if (distExports$1.Element.isElement(positionNode)) {
              // elem node ，按 node 定位
              return getPositionByNode(editor, positionNode, 'modal');
          }
          // 其他情况（如 positionNode == null 或是 text node）则按选区定位
          return getPositionBySelection(editor);
      };
      // 显示/隐藏 modal
      ModalButton.prototype.handleModal = function () {
          var editor = getEditorInstance(this);
          var menu = this.menu;
          if (this.modal == null) {
              // 初次创建
              var modal = new Modal(editor, menu.modalWidth);
              this.renderAndShowModal(modal, true);
              // 记录下来，防止重复创建
              this.modal = modal;
          }
          else {
              // 不是初次创建
              var modal = this.modal;
              if (modal.isShow) {
                  // 当前处于显示状态，则隐藏
                  modal.hide();
              }
              else {
                  // 当前未处于显示状态，则重新渲染内容 ，并显示
                  this.renderAndShowModal(modal, false);
              }
          }
      };
      /**
       * 渲染并显示 modal
       * @param modal modal
       * @param firstTime 是否第一次显示 modal
       */
      ModalButton.prototype.renderAndShowModal = function (modal, firstTime) {
          if (firstTime === void 0) { firstTime = false; }
          var editor = getEditorInstance(this);
          var menu = this.menu;
          if (menu.getModalContentElem == null)
              return;
          var textarea = DomEditor.getTextarea(editor);
          var toolbar = DomEditor.getToolbar(editor);
          var modalAppendToBody = ((toolbar === null || toolbar === void 0 ? void 0 : toolbar.getConfig()) || {}).modalAppendToBody;
          var contentElem = menu.getModalContentElem(editor);
          modal.renderContent(contentElem);
          if (modalAppendToBody) {
              // appendTo body 时，用户自己设置 modal 定位
              modal.setStyle({ left: '0', right: '0' });
          }
          else {
              // 计算并设置 modal position
              var positionStyle = this.getPosition();
              modal.setStyle(positionStyle);
          }
          if (firstTime) {
              if (modalAppendToBody) {
                  modal.appendTo(this.$body);
              }
              else {
                  modal.appendTo(textarea.$textAreaContainer);
              }
          }
          modal.show();
          if (!modalAppendToBody) {
              // 修正 modal 定位，避免超出 textContainer 边界（ appendTo body 则不用设置，用户自己设置 ）
              correctPosition(editor, modal.$elem);
          }
          // 让 editor 失焦，否则点击 modal 触发 onChange 会导致 modal 隐藏
          setTimeout(function () {
              editor.blur();
          });
      };
      return ModalButton;
  }(BaseButton));

  /**
   * @description SelectList class
   * @author wangfupeng
   */
  // “对号”icon
  function gen$SelectedIcon() {
      return $$1(SVG_CHECK_MARK);
  }
  var SelectList = /** @class */ (function (_super) {
      __extends(SelectList, _super);
      function SelectList(editor, width) {
          var _this = _super.call(this, editor) || this;
          _this.type = 'selectList';
          _this.$elem = $$1('<div class="w-e-select-list"></div>');
          if (width) {
              _this.$elem.css('width', "".concat(width, "px"));
          }
          _this.$elem.on('click', function (e) {
              // selectList 如有滚动条，可能会点击拖拽，参考 https://github.com/wangeditor-next/wangeditor-next-v5/issues/325
              // 此时需要阻止冒泡，因为在 $container.on('mousedown', () => editor.hidePanelOrModal()) ，$container 就是 `.w-e-text-container`
              e.stopPropagation();
          });
          return _this;
      }
      /**
       * 渲染 list
       * @param options select options
       */
      SelectList.prototype.renderList = function (options) {
          var $elem = this.$elem;
          $elem.empty(); // 先清空内容，再重新渲染
          var $list = $$1('<ul></ul>');
          options.forEach(function (opt) {
              var value = opt.value, text = opt.text, selected = opt.selected, styleForRenderMenuList = opt.styleForRenderMenuList;
              var $li = $$1("<li data-value=\"".concat(value, "\"></li>")); // 【注意】必须用 <li> 必须用 data-value！！！
              if (styleForRenderMenuList) {
                  $li.css(styleForRenderMenuList);
              }
              if (selected) {
                  var $selectedIcon = gen$SelectedIcon();
                  $li.append($selectedIcon);
                  $li.addClass('selected');
              }
              $li.append($$1("<span data-value=\"".concat(value, "\">").concat(text, "</span>")));
              $li.attr('title', text);
              $list.append($li);
          });
          $elem.append($list);
      };
      SelectList.prototype.genSelfElem = function () {
          return null;
      };
      return SelectList;
  }(PanelAndModal));

  /**
   * @description select
   * @author wangfupeng
   */
  // 根据 option value 获取 text
  function getOptionText(options, value) {
      var length = options.length;
      var text = '';
      for (var i = 0; i < length; i++) {
          var opt = options[i];
          if (opt.value === value) {
              text = opt.text;
              break;
          }
      }
      return text;
  }
  var BarItemSelect = /** @class */ (function () {
      function BarItemSelect(key, menu, inGroup) {
          if (inGroup === void 0) { inGroup = false; }
          var _this = this;
          this.$elem = $$1("<div class=\"w-e-bar-item\"></div>");
          this.$button = $$1("<button type=\"button\" class=\"select-button\"></button>");
          this.disabled = false;
          this.selectList = null;
          // 验证 tag
          var tag = menu.tag, title = menu.title, width = menu.width, _a = menu.iconSvg, iconSvg = _a === void 0 ? '' : _a, _b = menu.hotkey, hotkey = _b === void 0 ? '' : _b;
          if (tag !== 'select')
              throw new Error("Invalid tag '".concat(tag, "', expected 'select'"));
          // 初始化 dom
          var $button = this.$button;
          if (width) {
              $button.css('width', "".concat(width, "px"));
          }
          $button.attr('data-menu-key', key); // menu key
          addTooltip($button, iconSvg, title, hotkey, inGroup); // 设置 tooltip
          this.$elem.append($button);
          this.menu = menu;
          // 异步绑定事件
          promiseResolveThen(function () { return _this.init(); });
      }
      BarItemSelect.prototype.init = function () {
          var _this = this;
          // 设置 select 属性
          this.setSelectedValue();
          // select button click
          this.$button.on('click', function (e) {
              e.preventDefault();
              var editor = getEditorInstance(_this);
              editor.hidePanelOrModal(); // 隐藏当前的各种 panel
              _this.trigger();
          });
      };
      BarItemSelect.prototype.trigger = function () {
          var _this = this;
          var editor = getEditorInstance(this);
          if (editor.isDisabled())
              return;
          if (this.disabled)
              return;
          var menu = this.menu;
          // 显示下拉列表
          if (this.selectList == null) {
              // 初次创建，渲染 list 并显示
              this.selectList = new SelectList(editor, menu.selectPanelWidth);
              var selectList = this.selectList;
              var options = menu.getOptions(editor);
              selectList.renderList(options);
              selectList.appendTo(this.$elem);
              selectList.show();
              // 初次创建，绑定事件
              selectList.$elem.on('click', 'li', function (e) {
                  var target = e.target;
                  if (target == null)
                      return;
                  e.preventDefault();
                  var $li = $$1(target);
                  var val = $li.attr('data-value');
                  _this.onChange(val);
              });
          }
          else {
              // 不是初次创建
              var selectList = this.selectList;
              if (selectList.isShow) {
                  // 当前处于显示状态，则隐藏
                  selectList.hide();
              }
              else {
                  // 当前未处于显示状态，则重新渲染 list ，并显示
                  var options = menu.getOptions(editor); // 每次都要重新获取 options ，因为选中项可能会变化
                  selectList.renderList(options);
                  selectList.show();
              }
          }
      };
      BarItemSelect.prototype.onChange = function (value) {
          var editor = getEditorInstance(this);
          var menu = this.menu;
          menu.exec && menu.exec(editor, value);
      };
      BarItemSelect.prototype.setSelectedValue = function () {
          var editor = getEditorInstance(this);
          var menu = this.menu;
          var value = menu.getValue(editor);
          var options = menu.getOptions(editor);
          var optText = getOptionText(options, value.toString());
          var $button = this.$button;
          var $downArrow = gen$downArrow(); // 向下的箭头图标
          $button.empty();
          $button.text(optText);
          $button.append($downArrow);
      };
      BarItemSelect.prototype.setDisabled = function () {
          var editor = getEditorInstance(this);
          var menu = this.menu;
          var disabled = menu.isDisabled(editor);
          var $button = this.$button;
          if (editor.selection == null || editor.isDisabled()) {
              // 未选中，或者 readOnly ，强行设置为 disabled
              disabled = true;
          }
          var className = 'disabled';
          if (disabled) {
              // 设置为 disabled
              $button.addClass(className);
          }
          else {
              // 取消 disabled
              $button.removeClass(className);
          }
          this.disabled = disabled; // 记录下来
      };
      BarItemSelect.prototype.changeMenuState = function () {
          this.setSelectedValue();
          this.setDisabled();
      };
      return BarItemSelect;
  }());

  /**
   * @description group button class
   * @author wangfupeng
   */
  var GroupButton = /** @class */ (function () {
      function GroupButton(menu) {
          this.$elem = $$1("<div class=\"w-e-bar-item w-e-bar-item-group\"></div>");
          this.$container = $$1('<div class="w-e-bar-item-menus-container"></div>');
          this.$button = $$1("<button type=\"button\"></button>");
          var key = menu.key, iconSvg = menu.iconSvg, title = menu.title /*, menuKeys = [] */;
          var _a = this, $elem = _a.$elem, $button = _a.$button;
          // button
          if (iconSvg) {
              var $svg = $$1(iconSvg);
              clearSvgStyle($svg); // 清理 svg 样式（扩展的菜单，svg 是不可控的，所以要清理一下）
              $button.append($svg);
          }
          else {
              // 无 icon 则显示 title
              $button.text(title);
          }
          $button.attr('data-menu-key', key); // menu key
          var $arrow = gen$downArrow();
          $button.append($arrow);
          $elem.append($button);
          // menu container
          var $container = this.$container;
          $elem.append($container);
          // 监听 container 内容变化，以判断 $button 是否应该禁用
          var observer = this.createObserver();
          this.observe(observer);
      }
      GroupButton.prototype.appendBarItem = function (barItem) {
          var $elem = barItem.$elem;
          this.$container.append($elem);
      };
      GroupButton.prototype.observe = function (observer) {
          var $container = this.$container;
          observer.observe($container[0], { childList: true, subtree: true, attributes: true });
      };
      GroupButton.prototype.createObserver = function () {
          var _this = this;
          var _a = this, $container = _a.$container, $button = _a.$button;
          var observer = new MutationObserver(function () {
              // 找出 container 下所有的 button
              var $buttons = $container.find('button');
              var buttonsLength = $buttons.length;
              if (buttonsLength === 0)
                  return;
              // 找出所有 disabled 的 button
              var disabledButtonsLength = 0;
              $buttons.each(function (btn) {
                  var $btn = $$1(btn);
                  if ($btn.hasClass('disabled')) {
                      disabledButtonsLength++;
                  }
              });
              // 判断 group button 是否应该被禁用
              observer.disconnect();
              if (disabledButtonsLength === buttonsLength) {
                  // 如果 container 所有的 button 都已经 disabled ，则当前的 GroupButton 也需要 disabled
                  $button.addClass('disabled');
              }
              else {
                  // 否则，取消当前的 GroupButton disabled
                  $button.removeClass('disabled');
              }
              _this.observe(observer);
          });
          return observer;
      };
      return GroupButton;
  }());

  /**
   * @description bar item
   * @author wangfupeng
   */
  // menu -> barItem
  var MENU_TO_BAR_ITEM = new WeakMap();
  function getEditorInstance(item) {
      var editor = BAR_ITEM_TO_EDITOR.get(item);
      if (editor == null)
          throw new Error('Can not get editor instance');
      return editor;
  }
  /**
   * 创建 bar button/select
   * @param key menu key
   * @param menu menu
   * @param inGroup 在 groupButton 中
   */
  function createBarItem(key, menu, inGroup) {
      if (inGroup === void 0) { inGroup = false; }
      // 尝试从缓存获取
      var barItem = MENU_TO_BAR_ITEM.get(menu);
      if (barItem)
          return barItem;
      // 缓存没有则创建
      var tag = menu.tag;
      if (tag === 'button') {
          // @ts-ignore
          var showDropPanel = menu.showDropPanel, showModal = menu.showModal;
          if (showDropPanel) {
              barItem = new DropPanelButton(key, menu, inGroup);
          }
          else if (showModal) {
              barItem = new ModalButton(key, menu, inGroup);
          }
          else {
              barItem = new SimpleButton(key, menu, inGroup);
          }
      }
      if (tag === 'select') {
          barItem = new BarItemSelect(key, menu, inGroup);
      }
      if (barItem == null)
          throw new Error("Invalid tag in menu ".concat(JSON.stringify(menu)));
      // 记录缓存
      MENU_TO_BAR_ITEM.set(menu, barItem);
      return barItem;
  }
  function createBarItemGroup(menu) {
      return new GroupButton(menu);
  }

  /**
   * @description hover bar class
   * @author wangfupeng
   */
  /**
   * 是否选中了 text （用于 text hoverbarKeys）
   * @param editor editor
   * @param n node
   */
  function isSelectedText(editor, n) {
      var selection = editor.selection;
      if (selection == null) {
          return false;
      } // 无选区
      if (distExports$1.Range.isCollapsed(selection)) {
          return false;
      } // 未选中文字，选区的是折叠的
      var selectedElems = DomEditor.getSelectedElems(editor);
      var notMatch = selectedElems.some(function (elem) {
          if (editor.isVoid(elem)) {
              return true;
          }
          var type = elem.type;
          if (['pre', 'code', 'table'].includes(type)) {
              return true;
          }
          return false;
      });
      if (notMatch) {
          return false;
      }
      if (distExports$1.Text.isText(n)) {
          return true;
      } // 匹配 text node
      return false;
  }
  var HoverBar = /** @class */ (function () {
      function HoverBar() {
          var _this = this;
          this.$elem = $$1('<div class="w-e-bar w-e-bar-hidden w-e-hover-bar"></div>');
          this.menus = {};
          this.hoverbarItems = [];
          this.prevSelectedNode = null; // 上一次选中的 node
          this.isShow = false;
          this.lngListen = function () { };
          /**
           * editor onChange 时触发（涉及 DOM 操作，加防抖）
           */
          this.changeHoverbarState = debounce(function () {
              // 获取选中的 node ，以及对应的 menu keys
              var isShow = _this.isShow;
              var _a = _this.getSelectedNodeAndMenuKeys() || {}, _b = _a.node, node = _b === void 0 ? null : _b, _c = _a.menuKeys, menuKeys = _c === void 0 ? [] : _c;
              var editor = _this.getEditorInstance();
              if (node != null) {
                  _this.changeItemsState(); // 更新菜单状态
              }
              if (node && distExports$1.Element.isElement(node)) {
                  // 选中了 elem node（不可以是 text node）
                  if (isShow) {
                      // hoverbar 当前已显示
                      var samePath = _this.isSamePath(node, _this.prevSelectedNode);
                      var isBlock = distExports$1.Editor.isBlock(editor, node);
                      if (!isBlock && samePath) {
                          // 不是块元素且和之前选中的 node path 相同 —— 满足这些条件，即终止
                          return;
                      }
                  }
              }
              // 选择了新的 node（或选区是 null），先隐藏
              _this.hideAndClean();
              if (node != null) {
                  // 选中了新的 node
                  _this.registerItems(menuKeys);
                  _this.setPosition(node);
                  _this.show();
              }
              // 最后，重新记录 prevSelectedNode ，重要
              _this.prevSelectedNode = node;
          }, 200);
          // 异步，否则获取不到 DOM 和 editor
          promiseResolveThen(function () {
              var editor = _this.getEditorInstance();
              // 将 elem 渲染为 DOM
              var $elem = _this.$elem;
              // @ts-ignore
              $elem.on('mousedown', function (e) { return e.preventDefault(); }, { passive: false }); // 防止点击失焦
              var textarea = DomEditor.getTextarea(editor);
              textarea.$textAreaContainer.append($elem);
              // 绑定 editor onchange
              editor.on(EditorEvents.CHANGE, _this.changeHoverbarState);
              // 滚动时隐藏
              var hideAndClean = _this.hideAndClean.bind(_this);
              editor.on(EditorEvents.SCROLL, hideAndClean);
              // fullScreen 时隐藏
              editor.on(EditorEvents.FULLSCREEN, hideAndClean);
              editor.on(EditorEvents.UNFULLSCREEN, hideAndClean);
          });
          // 监听语言变更
          this.lngListen = i18nListenLanguage(function () {
              // 清空menu缓存
              _this.menus = {};
              // 切换语言直接关闭
              _this.hideAndClean();
              // xxx
              var editor = _this.getEditorInstance();
              editor.deselect();
          });
      }
      HoverBar.prototype.getMenus = function () {
          return this.menus;
      };
      HoverBar.prototype.hideAndClean = function () {
          var $elem = this.$elem;
          $elem.removeClass('w-e-bar-show').addClass('w-e-bar-hidden');
          // 及时先清空内容，否则影响下次
          this.hoverbarItems = [];
          $elem.empty();
          this.isShow = false;
      };
      /**
       * 判断 hoverbar 是否在网页下部？
       * 如果是，SelectList 和 DropPanel 要显示在 hoverbar 上面
       */
      HoverBar.prototype.checkPositionBottom = function () {
          var $elem = this.$elem;
          var isBottom = false;
          var innerHeight = typeof window !== 'undefined' ? window.innerHeight : null;
          var minDistance = 360; // 距离底部最小 360px
          if (innerHeight && innerHeight >= minDistance) {
              var bottom = $elem[0].getBoundingClientRect().bottom;
              if (innerHeight - bottom < minDistance) {
                  // hoverbar 距离底部不足 360
                  isBottom = true;
              }
          }
          if (isBottom) {
              $elem.addClass('w-e-bar-bottom');
          }
          else {
              $elem.removeClass('w-e-bar-bottom');
          }
      };
      HoverBar.prototype.show = function () {
          this.$elem.removeClass('w-e-bar-hidden').addClass('w-e-bar-show');
          this.isShow = true;
          // 判断 hoverbar 是否在网页下部
          this.checkPositionBottom();
      };
      HoverBar.prototype.changeItemsState = function () {
          var _this = this;
          promiseResolveThen(function () {
              _this.hoverbarItems.forEach(function (item) {
                  item.changeMenuState();
              });
          });
      };
      HoverBar.prototype.registerItems = function (menuKeys) {
          var _this = this;
          var $elem = this.$elem;
          menuKeys.forEach(function (key) {
              if (key === '|') {
                  // 分割线
                  var $divider = gen$barItemDivider();
                  $elem.append($divider);
                  return;
              }
              // 正常菜单
              _this.registerSingleItem(key);
          });
      };
      // 注册单个 bar item
      HoverBar.prototype.registerSingleItem = function (key) {
          var editor = this.getEditorInstance();
          // 尝试从缓存中获取
          var menus = this.menus;
          var menu = menus[key];
          if (menu == null) {
              // 缓存获取失败，则重新创建
              var factory = MENU_ITEM_FACTORIES[key];
              if (factory == null) {
                  throw new Error("Not found menu item factory by key '".concat(key, "'"));
              }
              if (typeof factory !== 'function') {
                  throw new Error("Menu item factory (key='".concat(key, "') is not a function"));
              }
              // 创建 barItem 并记录缓存
              menu = factory();
              menus[key] = menu;
          }
          // 替换 icon svg
          var menuConf = editor.getMenuConfig(key);
          if (menuConf && menuConf.iconSvg !== undefined) {
              menu.iconSvg = menuConf.iconSvg;
          }
          var barItem = createBarItem(key, menu);
          this.hoverbarItems.push(barItem);
          // 保存 barItem 和 editor 的关系
          BAR_ITEM_TO_EDITOR.set(barItem, editor);
          // 添加 DOM
          var $elem = this.$elem;
          $elem.append(barItem.$elem);
      };
      HoverBar.prototype.setPosition = function (node) {
          var editor = this.getEditorInstance();
          var $elem = this.$elem;
          $elem.attr('style', ''); // 先清空 style ，再重新设置
          if (distExports$1.Element.isElement(node)) {
              // 根据 elem node 定位
              var positionStyle = getPositionByNode(editor, node, 'bar');
              $elem.css(positionStyle);
              correctPosition(editor, $elem); // 修正 position 避免超出 textContainer 边界
              return;
          }
          if (distExports$1.Text.isText(node)) {
              // text node ，根据选区定位
              var positionStyle = getPositionBySelection(editor);
              $elem.css(positionStyle);
              correctPosition(editor, $elem); // 修正 position 避免超出 textContainer 边界
              return;
          }
          // 其他情况，非 elem 非 text ，不处理
          throw new Error('hoverbar.setPosition error, current selected node is not elem nor text');
      };
      /**
       * 获取选中的 node ，以及对应的 menu keys
       */
      HoverBar.prototype.getSelectedNodeAndMenuKeys = function () {
          var editor = this.getEditorInstance();
          if (editor.selection == null) {
              return null;
          }
          // 获取 hover bar 配置
          var keysConf = this.getHoverbarKeysConf();
          // 开始匹配
          var matchNode = null;
          var matchMenuKeys = [];
          var _loop_1 = function (elemType) {
              var conf = keysConf[elemType];
              var match = conf.match, _a = conf.menuKeys, menuKeys = _a === void 0 ? [] : _a;
              // 定义了 match 则用 match 。未定义 match 则用 elemType
              var matchFn = match || (function (_editor, n) { return DomEditor.checkNodeType(n, elemType); });
              var _b = __read(distExports$1.Editor.nodes(editor, {
                  match: function (n) { return matchFn(editor, n); },
                  universal: true,
              }), 1), nodeEntry = _b[0];
              // 匹配成功（找到第一个就停止，不再继续找了）
              if (nodeEntry != null) {
                  matchNode = nodeEntry[0];
                  matchMenuKeys = menuKeys;
                  return "break";
              }
          };
          // eslint-disable-next-line guard-for-in
          for (var elemType in keysConf) {
              var state_1 = _loop_1(elemType);
              if (state_1 === "break")
                  break;
          }
          // 未匹配成功
          if (matchNode == null || matchMenuKeys.length === 0) {
              return null;
          }
          // 匹配成功
          return {
              node: matchNode,
              menuKeys: matchMenuKeys,
          };
      };
      HoverBar.prototype.getEditorInstance = function () {
          var editor = HOVER_BAR_TO_EDITOR.get(this);
          if (editor == null) {
              throw new Error('Can not get editor instance');
          }
          return editor;
      };
      HoverBar.prototype.getHoverbarKeysConf = function () {
          var editor = this.getEditorInstance();
          var _a = editor.getConfig().hoverbarKeys, hoverbarKeys = _a === void 0 ? {} : _a;
          var textHoverbarKeys = hoverbarKeys.text;
          if (textHoverbarKeys && textHoverbarKeys.match == null) {
              // 对 text hoverbarKeys 增加 match 函数（否则无法判断是否选中了 text）
              textHoverbarKeys.match = isSelectedText;
          }
          return hoverbarKeys;
      };
      /**
       * 检查两个 node 是否 path 相等
       */
      HoverBar.prototype.isSamePath = function (node1, node2) {
          if (node1 == null || node2 == null) {
              return false;
          }
          var path1 = DomEditor.findPath(null, node1);
          var path2 = DomEditor.findPath(null, node2);
          var res = distExports$1.Path.equals(path1, path2);
          return res;
      };
      /**
       * 销毁 hoverbar
       */
      HoverBar.prototype.destroy = function () {
          var _a;
          // fix https://github.com/wangeditor-next/wangeditor-next-v5/issues/410
          this.changeHoverbarState.cancel();
          // 销毁 DOM
          this.$elem.remove();
          // 销毁语言监听
          (_a = this.lngListen) === null || _a === void 0 ? void 0 : _a.call(this);
          // 清空属性
          this.menus = {};
          this.hoverbarItems = [];
          this.prevSelectedNode = null;
      };
      return HoverBar;
  }());

  /**
   * lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="npm" -o ./`
   * Copyright jQuery Foundation and other contributors <https://jquery.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */

  var lodash_throttle;
  var hasRequiredLodash_throttle;

  function requireLodash_throttle () {
  	if (hasRequiredLodash_throttle) return lodash_throttle;
  	hasRequiredLodash_throttle = 1;
  	/** Used as the `TypeError` message for "Functions" methods. */
  	var FUNC_ERROR_TEXT = 'Expected a function';

  	/** Used as references for various `Number` constants. */
  	var NAN = 0 / 0;

  	/** `Object#toString` result references. */
  	var symbolTag = '[object Symbol]';

  	/** Used to match leading and trailing whitespace. */
  	var reTrim = /^\s+|\s+$/g;

  	/** Used to detect bad signed hexadecimal string values. */
  	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  	/** Used to detect binary string values. */
  	var reIsBinary = /^0b[01]+$/i;

  	/** Used to detect octal string values. */
  	var reIsOctal = /^0o[0-7]+$/i;

  	/** Built-in method references without a dependency on `root`. */
  	var freeParseInt = parseInt;

  	/** Detect free variable `global` from Node.js. */
  	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  	/** Detect free variable `self`. */
  	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  	/** Used as a reference to the global object. */
  	var root = freeGlobal || freeSelf || Function('return this')();

  	/** Used for built-in method references. */
  	var objectProto = Object.prototype;

  	/**
  	 * Used to resolve the
  	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
  	 * of values.
  	 */
  	var objectToString = objectProto.toString;

  	/* Built-in method references for those with the same name as other `lodash` methods. */
  	var nativeMax = Math.max,
  	    nativeMin = Math.min;

  	/**
  	 * Gets the timestamp of the number of milliseconds that have elapsed since
  	 * the Unix epoch (1 January 1970 00:00:00 UTC).
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 2.4.0
  	 * @category Date
  	 * @returns {number} Returns the timestamp.
  	 * @example
  	 *
  	 * _.defer(function(stamp) {
  	 *   console.log(_.now() - stamp);
  	 * }, _.now());
  	 * // => Logs the number of milliseconds it took for the deferred invocation.
  	 */
  	var now = function() {
  	  return root.Date.now();
  	};

  	/**
  	 * Creates a debounced function that delays invoking `func` until after `wait`
  	 * milliseconds have elapsed since the last time the debounced function was
  	 * invoked. The debounced function comes with a `cancel` method to cancel
  	 * delayed `func` invocations and a `flush` method to immediately invoke them.
  	 * Provide `options` to indicate whether `func` should be invoked on the
  	 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
  	 * with the last arguments provided to the debounced function. Subsequent
  	 * calls to the debounced function return the result of the last `func`
  	 * invocation.
  	 *
  	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
  	 * invoked on the trailing edge of the timeout only if the debounced function
  	 * is invoked more than once during the `wait` timeout.
  	 *
  	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
  	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
  	 *
  	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
  	 * for details over the differences between `_.debounce` and `_.throttle`.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Function
  	 * @param {Function} func The function to debounce.
  	 * @param {number} [wait=0] The number of milliseconds to delay.
  	 * @param {Object} [options={}] The options object.
  	 * @param {boolean} [options.leading=false]
  	 *  Specify invoking on the leading edge of the timeout.
  	 * @param {number} [options.maxWait]
  	 *  The maximum time `func` is allowed to be delayed before it's invoked.
  	 * @param {boolean} [options.trailing=true]
  	 *  Specify invoking on the trailing edge of the timeout.
  	 * @returns {Function} Returns the new debounced function.
  	 * @example
  	 *
  	 * // Avoid costly calculations while the window size is in flux.
  	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
  	 *
  	 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
  	 * jQuery(element).on('click', _.debounce(sendMail, 300, {
  	 *   'leading': true,
  	 *   'trailing': false
  	 * }));
  	 *
  	 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
  	 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
  	 * var source = new EventSource('/stream');
  	 * jQuery(source).on('message', debounced);
  	 *
  	 * // Cancel the trailing debounced invocation.
  	 * jQuery(window).on('popstate', debounced.cancel);
  	 */
  	function debounce(func, wait, options) {
  	  var lastArgs,
  	      lastThis,
  	      maxWait,
  	      result,
  	      timerId,
  	      lastCallTime,
  	      lastInvokeTime = 0,
  	      leading = false,
  	      maxing = false,
  	      trailing = true;

  	  if (typeof func != 'function') {
  	    throw new TypeError(FUNC_ERROR_TEXT);
  	  }
  	  wait = toNumber(wait) || 0;
  	  if (isObject(options)) {
  	    leading = !!options.leading;
  	    maxing = 'maxWait' in options;
  	    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
  	    trailing = 'trailing' in options ? !!options.trailing : trailing;
  	  }

  	  function invokeFunc(time) {
  	    var args = lastArgs,
  	        thisArg = lastThis;

  	    lastArgs = lastThis = undefined;
  	    lastInvokeTime = time;
  	    result = func.apply(thisArg, args);
  	    return result;
  	  }

  	  function leadingEdge(time) {
  	    // Reset any `maxWait` timer.
  	    lastInvokeTime = time;
  	    // Start the timer for the trailing edge.
  	    timerId = setTimeout(timerExpired, wait);
  	    // Invoke the leading edge.
  	    return leading ? invokeFunc(time) : result;
  	  }

  	  function remainingWait(time) {
  	    var timeSinceLastCall = time - lastCallTime,
  	        timeSinceLastInvoke = time - lastInvokeTime,
  	        result = wait - timeSinceLastCall;

  	    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
  	  }

  	  function shouldInvoke(time) {
  	    var timeSinceLastCall = time - lastCallTime,
  	        timeSinceLastInvoke = time - lastInvokeTime;

  	    // Either this is the first call, activity has stopped and we're at the
  	    // trailing edge, the system time has gone backwards and we're treating
  	    // it as the trailing edge, or we've hit the `maxWait` limit.
  	    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
  	      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  	  }

  	  function timerExpired() {
  	    var time = now();
  	    if (shouldInvoke(time)) {
  	      return trailingEdge(time);
  	    }
  	    // Restart the timer.
  	    timerId = setTimeout(timerExpired, remainingWait(time));
  	  }

  	  function trailingEdge(time) {
  	    timerId = undefined;

  	    // Only invoke if we have `lastArgs` which means `func` has been
  	    // debounced at least once.
  	    if (trailing && lastArgs) {
  	      return invokeFunc(time);
  	    }
  	    lastArgs = lastThis = undefined;
  	    return result;
  	  }

  	  function cancel() {
  	    if (timerId !== undefined) {
  	      clearTimeout(timerId);
  	    }
  	    lastInvokeTime = 0;
  	    lastArgs = lastCallTime = lastThis = timerId = undefined;
  	  }

  	  function flush() {
  	    return timerId === undefined ? result : trailingEdge(now());
  	  }

  	  function debounced() {
  	    var time = now(),
  	        isInvoking = shouldInvoke(time);

  	    lastArgs = arguments;
  	    lastThis = this;
  	    lastCallTime = time;

  	    if (isInvoking) {
  	      if (timerId === undefined) {
  	        return leadingEdge(lastCallTime);
  	      }
  	      if (maxing) {
  	        // Handle invocations in a tight loop.
  	        timerId = setTimeout(timerExpired, wait);
  	        return invokeFunc(lastCallTime);
  	      }
  	    }
  	    if (timerId === undefined) {
  	      timerId = setTimeout(timerExpired, wait);
  	    }
  	    return result;
  	  }
  	  debounced.cancel = cancel;
  	  debounced.flush = flush;
  	  return debounced;
  	}

  	/**
  	 * Creates a throttled function that only invokes `func` at most once per
  	 * every `wait` milliseconds. The throttled function comes with a `cancel`
  	 * method to cancel delayed `func` invocations and a `flush` method to
  	 * immediately invoke them. Provide `options` to indicate whether `func`
  	 * should be invoked on the leading and/or trailing edge of the `wait`
  	 * timeout. The `func` is invoked with the last arguments provided to the
  	 * throttled function. Subsequent calls to the throttled function return the
  	 * result of the last `func` invocation.
  	 *
  	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
  	 * invoked on the trailing edge of the timeout only if the throttled function
  	 * is invoked more than once during the `wait` timeout.
  	 *
  	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
  	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
  	 *
  	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
  	 * for details over the differences between `_.throttle` and `_.debounce`.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Function
  	 * @param {Function} func The function to throttle.
  	 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
  	 * @param {Object} [options={}] The options object.
  	 * @param {boolean} [options.leading=true]
  	 *  Specify invoking on the leading edge of the timeout.
  	 * @param {boolean} [options.trailing=true]
  	 *  Specify invoking on the trailing edge of the timeout.
  	 * @returns {Function} Returns the new throttled function.
  	 * @example
  	 *
  	 * // Avoid excessively updating the position while scrolling.
  	 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
  	 *
  	 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
  	 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
  	 * jQuery(element).on('click', throttled);
  	 *
  	 * // Cancel the trailing throttled invocation.
  	 * jQuery(window).on('popstate', throttled.cancel);
  	 */
  	function throttle(func, wait, options) {
  	  var leading = true,
  	      trailing = true;

  	  if (typeof func != 'function') {
  	    throw new TypeError(FUNC_ERROR_TEXT);
  	  }
  	  if (isObject(options)) {
  	    leading = 'leading' in options ? !!options.leading : leading;
  	    trailing = 'trailing' in options ? !!options.trailing : trailing;
  	  }
  	  return debounce(func, wait, {
  	    'leading': leading,
  	    'maxWait': wait,
  	    'trailing': trailing
  	  });
  	}

  	/**
  	 * Checks if `value` is the
  	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
  	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 0.1.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
  	 * @example
  	 *
  	 * _.isObject({});
  	 * // => true
  	 *
  	 * _.isObject([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isObject(_.noop);
  	 * // => true
  	 *
  	 * _.isObject(null);
  	 * // => false
  	 */
  	function isObject(value) {
  	  var type = typeof value;
  	  return !!value && (type == 'object' || type == 'function');
  	}

  	/**
  	 * Checks if `value` is object-like. A value is object-like if it's not `null`
  	 * and has a `typeof` result of "object".
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
  	 * @example
  	 *
  	 * _.isObjectLike({});
  	 * // => true
  	 *
  	 * _.isObjectLike([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isObjectLike(_.noop);
  	 * // => false
  	 *
  	 * _.isObjectLike(null);
  	 * // => false
  	 */
  	function isObjectLike(value) {
  	  return !!value && typeof value == 'object';
  	}

  	/**
  	 * Checks if `value` is classified as a `Symbol` primitive or object.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
  	 * @example
  	 *
  	 * _.isSymbol(Symbol.iterator);
  	 * // => true
  	 *
  	 * _.isSymbol('abc');
  	 * // => false
  	 */
  	function isSymbol(value) {
  	  return typeof value == 'symbol' ||
  	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
  	}

  	/**
  	 * Converts `value` to a number.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to process.
  	 * @returns {number} Returns the number.
  	 * @example
  	 *
  	 * _.toNumber(3.2);
  	 * // => 3.2
  	 *
  	 * _.toNumber(Number.MIN_VALUE);
  	 * // => 5e-324
  	 *
  	 * _.toNumber(Infinity);
  	 * // => Infinity
  	 *
  	 * _.toNumber('3.2');
  	 * // => 3.2
  	 */
  	function toNumber(value) {
  	  if (typeof value == 'number') {
  	    return value;
  	  }
  	  if (isSymbol(value)) {
  	    return NAN;
  	  }
  	  if (isObject(value)) {
  	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
  	    value = isObject(other) ? (other + '') : other;
  	  }
  	  if (typeof value != 'string') {
  	    return value === 0 ? value : +value;
  	  }
  	  value = value.replace(reTrim, '');
  	  var isBinary = reIsBinary.test(value);
  	  return (isBinary || reIsOctal.test(value))
  	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
  	    : (reIsBadHex.test(value) ? NAN : +value);
  	}

  	lodash_throttle = throttle;
  	return lodash_throttle;
  }

  var lodash_throttleExports = requireLodash_throttle();
  var throttle = /*@__PURE__*/getDefaultExportFromCjs(lodash_throttleExports);

  /**
   * @description textarea helper fns
   * @author wangfupeng
   */
  /**
   * Check if the target is editable and in the editor.
   */
  function hasEditableTarget(editor, target) {
      return isDOMNode(target) && DomEditor.hasDOMNode(editor, target, { editable: true });
  }
  /**
   * Check if the target is inside void and in an non-readonly editor.
   */
  function isTargetInsideNonReadonlyVoid(editor, target) {
      var readOnly = editor.getConfig().readOnly;
      if (readOnly)
          return false;
      var slateNode = hasTarget(editor, target) && DomEditor.toSlateNode(editor, target);
      return distExports$1.Editor.isVoid(editor, slateNode);
  }
  /**
   * Check if the target is in the editor.
   */
  function hasTarget(editor, target) {
      return isDOMNode(target) && DomEditor.hasDOMNode(editor, target);
  }

  /**
   * @description 处理 beforeInput 事件
   * @author wangfupeng
   */
  function handleBeforeInput(e, textarea, editor) {
      var event = e;
      var readOnly = editor.getConfig().readOnly;
      if (!HAS_BEFORE_INPUT_SUPPORT) {
          return;
      } // 有些浏览器完全不支持 beforeInput ，会用 keypress 和 keydown 兼容
      if (readOnly) {
          return;
      }
      if (!hasEditableTarget(editor, event.target)) {
          return;
      }
      var selection = editor.selection;
      var type = event.inputType;
      var data = event.dataTransfer || event.data || undefined;
      // These two types occur while a user is composing text and can't be
      // cancelled. Let them through and wait for the composition to end.
      if (type === 'insertCompositionText' || type === 'deleteCompositionText') {
          return;
      }
      // 阻止默认行为，劫持所有的富文本输入
      event.preventDefault();
      // COMPAT: For the deleting forward/backward input types we don't want
      // to change the selection because it is the range that will be deleted,
      // and those commands determine that for themselves.
      if (!type.startsWith('delete') || type.startsWith('deleteBy')) {
          var _a = __read(event.getTargetRanges(), 1), targetRange = _a[0];
          if (targetRange) {
              var range = DomEditor.toSlateRange(editor, targetRange, {
                  exactMatch: false,
                  suppressThrow: false,
              });
              if (!selection || !distExports$1.Range.equals(selection, range)) {
                  distExports$1.Transforms.select(editor, range);
              }
          }
      }
      if (selection && distExports$1.Range.isExpanded(selection)) {
          var selectedElems = DomEditor.getSelectedElems(editor);
          var isTableSelected = selectedElems[0].type === 'table';
          var isLastNotTableCell = selectedElems[selectedElems.length - 1].type !== 'table-cell';
          // 如果选中的是开头表格，并且最后不是 table-cell ，则不处理，防止选区包含部分 table 时误删 table 单元格
          if (isTableSelected && isLastNotTableCell) {
              return;
          }
          // COMPAT: If the selection is expanded, even if the command seems like
          // a delete forward/backward command it should delete the selection.
          if (type.startsWith('delete')) {
              var direction = type.endsWith('Backward') ? 'backward' : 'forward';
              distExports$1.Editor.deleteFragment(editor, { direction: direction });
              return;
          }
      }
      // 根据 beforeInput 的 event.inputType
      switch (type) {
          case 'deleteByComposition':
          case 'deleteByCut':
          case 'deleteByDrag': {
              distExports$1.Editor.deleteFragment(editor);
              break;
          }
          case 'deleteContent':
          case 'deleteContentForward': {
              distExports$1.Editor.deleteForward(editor);
              break;
          }
          case 'deleteContentBackward': {
              distExports$1.Editor.deleteBackward(editor);
              break;
          }
          case 'deleteEntireSoftLine': {
              distExports$1.Editor.deleteBackward(editor, { unit: 'line' });
              distExports$1.Editor.deleteForward(editor, { unit: 'line' });
              break;
          }
          case 'deleteHardLineBackward': {
              distExports$1.Editor.deleteBackward(editor, { unit: 'block' });
              break;
          }
          case 'deleteSoftLineBackward': {
              distExports$1.Editor.deleteBackward(editor, { unit: 'line' });
              break;
          }
          case 'deleteHardLineForward': {
              distExports$1.Editor.deleteForward(editor, { unit: 'block' });
              break;
          }
          case 'deleteSoftLineForward': {
              distExports$1.Editor.deleteForward(editor, { unit: 'line' });
              break;
          }
          case 'deleteWordBackward': {
              distExports$1.Editor.deleteBackward(editor, { unit: 'word' });
              break;
          }
          case 'deleteWordForward': {
              distExports$1.Editor.deleteForward(editor, { unit: 'word' });
              break;
          }
          case 'insertLineBreak':
          case 'insertParagraph': {
              distExports$1.Editor.insertBreak(editor);
              break;
          }
          case 'insertFromDrop':
          case 'insertFromPaste':
          case 'insertFromYank':
          case 'insertReplacementText':
          case 'insertText': {
              if (type === 'insertFromPaste') {
                  if (!EDITOR_TO_CAN_PASTE.get(editor)) {
                      break;
                  } // 不可默认粘贴
              }
              if (isDataTransfer(data)) {
                  // 这里处理非纯文本（如 html 图片文件等）的粘贴。对于纯文本的粘贴，使用 paste 事件
                  editor.insertData(data);
              }
              else if (typeof data === 'string') {
                  distExports$1.Editor.insertText(editor, data);
              }
              break;
          }
      }
  }

  /**
   * @description 处理 onblur 事件
   * @author wangfupeng
   */
  function handleOnBlur(e, textarea, editor) {
      var event = e;
      var isUpdatingSelection = textarea.isUpdatingSelection, latestElement = textarea.latestElement;
      var readOnly = editor.getConfig().readOnly;
      if (readOnly)
          return;
      if (isUpdatingSelection)
          return;
      if (!hasEditableTarget(editor, event.target))
          return;
      var root = DomEditor.findDocumentOrShadowRoot(editor);
      // COMPAT: If the current `activeElement` is still the previous
      // one, this is due to the window being blurred when the tab
      // itself becomes unfocused, so we want to abort early to allow to
      // editor to stay focused when the tab becomes focused again.
      if (latestElement === root.activeElement)
          return;
      // relatedTarget 即 blur 之后又 focus 到了哪个元素，如果没有则是 null
      var relatedTarget = event.relatedTarget;
      var el = DomEditor.toDOMNode(editor, editor);
      // COMPAT: The event should be ignored if the focus is returning
      // to the editor from an embedded editable element (eg. an <input>
      // element inside a void node).
      if (relatedTarget === el) {
          return;
      }
      // COMPAT: The event should be ignored if the focus is moving from
      // the editor to inside a void node's spacer element.
      if (isDOMElement(relatedTarget) && relatedTarget.hasAttribute('data-slate-spacer')) {
          return;
      }
      // COMPAT: The event should be ignored if the focus is moving to a
      // non- editable section of an element that isn't a void node (eg.
      // a list item of the check list example).
      if (relatedTarget != null &&
          isDOMNode(relatedTarget) &&
          DomEditor.hasDOMNode(editor, relatedTarget)) {
          var node = DomEditor.toSlateNode(editor, relatedTarget);
          if (distExports$1.Element.isElement(node) && !editor.isVoid(node)) {
              return;
          }
      }
      // COMPAT: Safari doesn't always remove the selection even if the content-
      // editable element no longer has focus. Refer to:
      // https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web
      // 修复在 Safari 下，即使 contenteditable 元素非聚焦状态，并不会删除所选内容
      if (IS_SAFARI) {
          var domSelection = root.getSelection();
          domSelection === null || domSelection === void 0 ? void 0 : domSelection.removeAllRanges();
      }
      // 检验完毕，可正式触发 onblur
      IS_FOCUSED.delete(editor);
  }

  /**
   * @description 处理 onfocus 事件
   * @author wangfupeng
   */
  function handleOnFocus(event, textarea, editor) {
      var el = DomEditor.toDOMNode(editor, editor);
      var root = DomEditor.findDocumentOrShadowRoot(editor);
      textarea.latestElement = root.activeElement;
      // COMPAT: If the editor has nested editable elements, the focus
      // can go to them. In Firefox, this must be prevented because it
      // results in issues with keyboard navigation. (2017/03/30)
      if (IS_FIREFOX && event.target !== el) {
          el.focus();
          return;
      }
      IS_FOCUSED.set(editor, true);
  }

  /**
   * @description 处理 click 事件
   * @author wangfupeng
   */
  function handleOnClick(event, textarea, editor) {
      var readOnly = editor.getConfig().readOnly;
      if (readOnly)
          return;
      if (!hasTarget(editor, event.target))
          return;
      if (!isDOMNode(event.target))
          return;
      var node = DomEditor.toSlateNode(editor, event.target);
      var path = DomEditor.findPath(editor, node);
      // At this time, the Slate document may be arbitrarily different,
      // because onClick handlers can change the document before we get here.
      // Therefore we must check that this path actually exists,
      // and that it still refers to the same node.
      if (distExports$1.Editor.hasPath(editor, path)) {
          var lookupNode = distExports$1.Node.get(editor, path);
          if (lookupNode === node) {
              var start = distExports$1.Editor.start(editor, path);
              var end = distExports$1.Editor.end(editor, path);
              var startVoid = distExports$1.Editor.void(editor, { at: start });
              var endVoid = distExports$1.Editor.void(editor, { at: end });
              if (startVoid && endVoid && distExports$1.Path.equals(startVoid[1], endVoid[1])) {
                  var range = distExports$1.Editor.range(editor, start);
                  distExports$1.Transforms.select(editor, range);
              }
          }
      }
  }

  /**
   * @description 显示/隐藏 placeholder
   * @author wangfupeng
   */
  /**
   * 处理 placeholder
   * @param textarea textarea
   * @param editor editor
   */
  function handlePlaceholder(textarea, editor) {
      var _a;
      var placeholder = editor.getConfig().placeholder;
      if (!placeholder)
          return;
      var isEmpty = editor.isEmpty();
      // 内容为空，且目前未显示 placeholder ，则显示
      if (isEmpty && !textarea.showPlaceholder && !textarea.isComposing) {
          if (textarea.$placeholder == null) {
              var $placeholder = $$1("<div class=\"w-e-text-placeholder\">".concat(placeholder, "</div>"));
              textarea.$textAreaContainer.append($placeholder);
              textarea.$placeholder = $placeholder;
          }
          textarea.$placeholder.show();
          textarea.showPlaceholder = true; // 记录
          return;
      }
      // 内容不是空，且目前显示着 placeholder ，则隐藏
      if (!isEmpty && textarea.showPlaceholder) {
          (_a = textarea.$placeholder) === null || _a === void 0 ? void 0 : _a.hide();
          textarea.showPlaceholder = false; // 记录
          return;
      }
  }
  /**
   * 隐藏 placeholder （如拼音输入 compositionStart 时，要先隐藏，等 compositionEnd 时再判断是否显示）
   * @param textarea textarea
   * @param editor editor
   */
  function hidePlaceholder(textarea, editor) {
      var _a;
      var placeholder = editor.getConfig().placeholder;
      if (!placeholder)
          return;
      var isEmpty = editor.isEmpty();
      if (!isEmpty)
          return;
      if (textarea.showPlaceholder) {
          (_a = textarea.$placeholder) === null || _a === void 0 ? void 0 : _a.hide();
          textarea.showPlaceholder = false; // 记录
      }
  }

  const t$1=t=>"object"==typeof t&&null!=t&&1===t.nodeType,e$2=(t,e)=>(!e||"hidden"!==t)&&("visible"!==t&&"clip"!==t),n$1=(t,n)=>{if(t.clientHeight<t.scrollHeight||t.clientWidth<t.scrollWidth){const o=getComputedStyle(t,null);return e$2(o.overflowY,n)||e$2(o.overflowX,n)||(t=>{const e=(t=>{if(!t.ownerDocument||!t.ownerDocument.defaultView)return null;try{return t.ownerDocument.defaultView.frameElement}catch(t){return null}})(t);return !!e&&(e.clientHeight<t.scrollHeight||e.clientWidth<t.scrollWidth)})(t)}return  false},o$2=(t,e,n,o,l,r,i,s)=>r<t&&i>e||r>t&&i<e?0:r<=t&&s<=n||i>=e&&s>=n?r-t-o:i>e&&s<n||r<t&&s>n?i-e+l:0,l$1=t=>{const e=t.parentElement;return null==e?t.getRootNode().host||null:e},r$1=(e,r)=>{var i,s,d,h;if("undefined"==typeof document)return [];const{scrollMode:c,block:f,inline:u,boundary:a,skipOverflowHiddenElements:g}=r,p="function"==typeof a?a:t=>t!==a;if(!t$1(e))throw new TypeError("Invalid target");const m=document.scrollingElement||document.documentElement,w=[];let W=e;for(;t$1(W)&&p(W);){if(W=l$1(W),W===m){w.push(W);break}null!=W&&W===document.body&&n$1(W)&&!n$1(document.documentElement)||null!=W&&n$1(W,g)&&w.push(W);}const b=null!=(s=null==(i=window.visualViewport)?void 0:i.width)?s:innerWidth,H=null!=(h=null==(d=window.visualViewport)?void 0:d.height)?h:innerHeight,{scrollX:y,scrollY:M}=window,{height:v,width:E,top:x,right:C,bottom:I,left:R}=e.getBoundingClientRect(),{top:T,right:B,bottom:F,left:V}=(t=>{const e=window.getComputedStyle(t);return {top:parseFloat(e.scrollMarginTop)||0,right:parseFloat(e.scrollMarginRight)||0,bottom:parseFloat(e.scrollMarginBottom)||0,left:parseFloat(e.scrollMarginLeft)||0}})(e);let k="start"===f||"nearest"===f?x-T:"end"===f?I+F:x+v/2-T+F,D="center"===u?R+E/2-V+B:"end"===u?C+B:R-V;const L=[];for(let t=0;t<w.length;t++){const e=w[t],{height:l,width:r,top:i,right:s,bottom:d,left:h}=e.getBoundingClientRect();if("if-needed"===c&&x>=0&&R>=0&&I<=H&&C<=b&&(e===m&&!n$1(e)||x>=i&&I<=d&&R>=h&&C<=s))return L;const a=getComputedStyle(e),g=parseInt(a.borderLeftWidth,10),p=parseInt(a.borderTopWidth,10),W=parseInt(a.borderRightWidth,10),T=parseInt(a.borderBottomWidth,10);let B=0,F=0;const V="offsetWidth"in e?e.offsetWidth-e.clientWidth-g-W:0,S="offsetHeight"in e?e.offsetHeight-e.clientHeight-p-T:0,X="offsetWidth"in e?0===e.offsetWidth?0:r/e.offsetWidth:0,Y="offsetHeight"in e?0===e.offsetHeight?0:l/e.offsetHeight:0;if(m===e)B="start"===f?k:"end"===f?k-H:"nearest"===f?o$2(M,M+H,H,p,T,M+k,M+k+v,v):k-H/2,F="start"===u?D:"center"===u?D-b/2:"end"===u?D-b:o$2(y,y+b,b,g,W,y+D,y+D+E,E),B=Math.max(0,B+M),F=Math.max(0,F+y);else {B="start"===f?k-i-p:"end"===f?k-d+T+S:"nearest"===f?o$2(i,d,l,p,T+S,k,k+v,v):k-(i+l/2)+S/2,F="start"===u?D-h-g:"center"===u?D-(h+r/2)+V/2:"end"===u?D-s+W+V:o$2(h,s,r,g,W+V,D,D+E,E);const{scrollLeft:t,scrollTop:n}=e;B=0===Y?0:Math.max(0,Math.min(n+B/Y,e.scrollHeight-l/Y+S)),F=0===X?0:Math.max(0,Math.min(t+F/X,e.scrollWidth-r/X+V)),k+=n-B,D+=t-F;}L.push({el:e,top:B,left:F});}return L};

  const o$1=t=>false===t?{block:"end",inline:"nearest"}:(t=>t===Object(t)&&0!==Object.keys(t).length)(t)?t:{block:"start",inline:"nearest"};function e$1(e,r){if(!e.isConnected||!(t=>{let o=t;for(;o&&o.parentNode;){if(o.parentNode===document)return  true;o=o.parentNode instanceof ShadowRoot?o.parentNode.host:o.parentNode;}return  false})(e))return;const n=(t=>{const o=window.getComputedStyle(t);return {top:parseFloat(o.scrollMarginTop)||0,right:parseFloat(o.scrollMarginRight)||0,bottom:parseFloat(o.scrollMarginBottom)||0,left:parseFloat(o.scrollMarginLeft)||0}})(e);if((t=>"object"==typeof t&&"function"==typeof t.behavior)(r))return r.behavior(r$1(e,r));const l="boolean"==typeof r||null==r?void 0:r.behavior;for(const{el:a,top:i,left:s}of r$1(e,o$1(r))){const t=i-n.top+n.bottom,o=s-n.left+n.right;a.scroll({top:t,left:o,behavior:l});}}

  /**
   * @description 同步 selection
   * @author wangfupeng
   */
  /**
   * editor onchange 时，将 editor selection 同步给 DOM
   * @param textarea textarea
   * @param editor editor
   * @param focus 是否强制更新选区
   */
  function editorSelectionToDOM(textarea, editor, focus) {
      if (focus === void 0) { focus = false; }
      var selection = editor.selection;
      var config = editor.getConfig();
      var root = DomEditor.findDocumentOrShadowRoot(editor);
      var domSelection = root.getSelection();
      if (!domSelection) {
          return;
      }
      if (textarea.isComposing && !focus) {
          return;
      }
      if (!editor.isFocused()) {
          return;
      }
      var hasDomSelection = domSelection.type !== 'None';
      // If the DOM selection is properly unset, we're done.
      if (!selection && !hasDomSelection) {
          return;
      }
      // verify that the dom selection is in the editor
      var editorElement = EDITOR_TO_ELEMENT.get(editor);
      var hasDomSelectionInEditor = false;
      if (editorElement.contains(domSelection.anchorNode)
          && editorElement.contains(domSelection.focusNode)) {
          hasDomSelectionInEditor = true;
      }
      // If the DOM selection is in the editor and the editor selection is already correct, we're done.
      if (hasDomSelection && hasDomSelectionInEditor && selection) {
          var slateRange = DomEditor.toSlateRange(editor, domSelection, {
              exactMatch: true,
              // domSelection is not necessarily a valid Slate range
              // (e.g. when clicking on contentEditable:false element)
              suppressThrow: true,
          });
          if (slateRange && distExports$1.Range.equals(slateRange, selection)) {
              var canReturn = true;
              // 选区在 table 时，需要特殊处理
              if (distExports$1.Range.isCollapsed(selection)) {
                  var anchorNode = domSelection.anchorNode, anchorOffset = domSelection.anchorOffset;
                  if (anchorNode === editorElement) {
                      var childNodes = editorElement.childNodes;
                      var tableElem 
                      // 光标在 table 前面时
                      = void 0;
                      // 光标在 table 前面时
                      tableElem = childNodes[anchorOffset];
                      if (tableElem && tableElem.matches('table')) {
                          canReturn = false; // 不能就此结束，需要重置光标
                      }
                      // 光标在 table 后面时
                      tableElem = childNodes[anchorOffset - 1];
                      if (tableElem && tableElem.matches('table')) {
                          canReturn = false; // 不能就此结束，需要重置光标
                      }
                  }
              }
              // 其他情况，就此结束
              if (canReturn) {
                  return;
              }
          }
      }
      // when <Editable/> is being controlled through external value
      // then its children might just change - DOM responds to it on its own
      // but Slate's value is not being updated through any operation
      // and thus it doesn't transform selection on its own
      if (selection && !DomEditor.hasRange(editor, selection)) {
          editor.selection = DomEditor.toSlateRange(editor, domSelection, {
              exactMatch: false,
              suppressThrow: false,
          });
          return;
      }
      // Otherwise the DOM selection is out of sync, so update it.
      textarea.isUpdatingSelection = true;
      var newDomRange = selection && DomEditor.toDOMRange(editor, selection);
      if (newDomRange) {
          if (distExports$1.Range.isBackward(selection)) {
              domSelection.setBaseAndExtent(newDomRange.endContainer, newDomRange.endOffset, newDomRange.startContainer, newDomRange.startOffset);
          }
          else {
              domSelection.setBaseAndExtent(newDomRange.startContainer, newDomRange.startOffset, newDomRange.endContainer, newDomRange.endOffset);
          }
          // 滚动到选区
          var leafEl = newDomRange.startContainer.parentElement;
          var spacer = leafEl.closest('[data-slate-spacer]');
          // 这个 if 防止选中图片时发生滚动
          if (!spacer && newDomRange.getBoundingClientRect) {
              leafEl.getBoundingClientRect = newDomRange.getBoundingClientRect.bind(newDomRange);
              var body = document.body;
              e$1(leafEl, {
                  scrollMode: 'if-needed',
                  boundary: config.scroll ? editorElement.parentElement : body, // issue 4215
                  block: 'end',
                  behavior: 'smooth',
              });
              // @ts-ignore
              delete leafEl.getBoundingClientRect;
          }
      }
      else {
          domSelection.removeAllRanges();
      }
      setTimeout(function () {
          // COMPAT: In Firefox, it's not enough to create a range, you also need
          // to focus the contenteditable element too. (2016/11/16)
          if (newDomRange && IS_FIREFOX) {
              editorElement.focus();
          }
          textarea.isUpdatingSelection = false;
      });
  }
  /**
   * DOM selection change 时，把 DOM selection 同步给 slate
   * @param textarea textarea
   * @param editor editor
   */
  function DOMSelectionToEditor(textarea, editor) {
      var isComposing = textarea.isComposing, isUpdatingSelection = textarea.isUpdatingSelection, isDraggingInternally = textarea.isDraggingInternally;
      var config = editor.getConfig();
      if (config.readOnly) {
          return;
      }
      if (isComposing) {
          return;
      }
      if (isUpdatingSelection) {
          return;
      }
      if (isDraggingInternally) {
          return;
      }
      var root = DomEditor.findDocumentOrShadowRoot(editor);
      var activeElement = root.activeElement;
      var el = DomEditor.toDOMNode(editor, editor);
      var domSelection = root.getSelection();
      if (activeElement === el) {
          textarea.latestElement = activeElement;
          IS_FOCUSED.set(editor, true);
      }
      else {
          IS_FOCUSED.delete(editor);
          distExports$1.Transforms.deselect(editor);
          return;
      }
      if (!domSelection) {
          return distExports$1.Transforms.deselect(editor);
      }
      var anchorNode = domSelection.anchorNode, focusNode = domSelection.focusNode;
      var anchorNodeSelectable = hasEditableTarget(editor, anchorNode) || isTargetInsideNonReadonlyVoid(editor, anchorNode);
      var focusNodeSelectable = hasEditableTarget(editor, focusNode) || isTargetInsideNonReadonlyVoid(editor, focusNode);
      if (anchorNodeSelectable && focusNodeSelectable) {
          var range = DomEditor.toSlateRange(editor, domSelection, {
              exactMatch: false,
              suppressThrow: false,
          });
          distExports$1.Transforms.select(editor, range);
      }
  }

  /**
   * @description 监听 composition 事件
   * @author wangfupeng
   */
  var EDITOR_TO_TEXT = new WeakMap();
  var EDITOR_TO_START_CONTAINER = new WeakMap();
  function areBothTextNodes(editor, selection) {
      if (distExports$1.Range.isCollapsed(selection)) {
          var anchor = selection.anchor, focus_1 = selection.focus;
          if ([2, 3].includes(anchor.path.length)
              && [2, 3].includes(focus_1.path.length)
              && (anchor.offset === 0 || focus_1.offset === 0)) {
              var nowEntry = distExports$1.Editor.node(editor, anchor.path);
              var nowPath = anchor.offset === 0 ? anchor.path : focus_1.path;
              var prePath = [nowPath[0], nowPath[1] - 1];
              if (nowPath[1] === 0) {
                  return false;
              }
              var preEntry = distExports$1.Editor.node(editor, prePath);
              if (distExports$1.Text.isText(preEntry[0]) && distExports$1.Text.isText(nowEntry[0])) {
                  return true;
              }
          }
      }
  }
  /**
   * composition start 事件
   * @param e event
   * @param textarea textarea
   * @param editor editor
   */
  function handleCompositionStart(e, textarea, editor) {
      var event = e;
      if (!hasEditableTarget(editor, event.target)) {
          return;
      }
      var selection = editor.selection;
      if (selection && distExports$1.Range.isExpanded(selection)) {
          distExports$1.Editor.deleteFragment(editor);
          Promise.resolve().then(function () {
              // deleteFragment 会在一个 Promise 后更新 dom，导致浏览器选区不正确
              // 因此这里延迟一下再设置选区，使选区在正确位置
              // 这里 model 选区没有发生变化，不能使用 editor.restoreSelection
              // restoreSelection 会对比前后 model 选区是否相同，相同就不更新了
              editorSelectionToDOM(textarea, editor, true);
          });
      }
      if (editor.selection) {
          // 记录下 dom text ，以便触发 maxLength 时使用
          var domRange = DomEditor.toDOMRange(editor, editor.selection);
          var startContainer = domRange.startContainer;
          var curText = startContainer.textContent || '';
          EDITOR_TO_TEXT.set(editor, curText);
          // 记录下 dom range startContainer
          EDITOR_TO_START_CONTAINER.set(editor, startContainer);
      }
      textarea.isComposing = true;
      // 隐藏 placeholder
      hidePlaceholder(textarea, editor);
  }
  /**
   * composition update 事件
   * @param e event
   * @param textarea textarea
   * @param editor editor
   */
  function handleCompositionUpdate(event, textarea, editor) {
      if (!hasEditableTarget(editor, event.target)) {
          return;
      }
      textarea.isComposing = true;
  }
  /**
   * composition end 事件
   * @param e event
   * @param textarea textarea
   * @param editor editor
   */
  function handleCompositionEnd(e, textarea, editor) {
      var event = e;
      if (!hasEditableTarget(editor, event.target)) {
          return;
      }
      textarea.isComposing = false;
      var selection = editor.selection;
      if (selection == null) {
          return;
      }
      // 清理可能暴露的 text 节点
      // 例如 chrome 在链接后面，输入拼音，就会出现有暴露出来的 text node
      if (IS_CHROME || IS_FIREFOX) {
          DomEditor.cleanExposedTexNodeInSelectionBlock(editor);
      }
      // 在中文输入法下，浏览器的默认行为会使一些dom产生不可逆的变化
      // 比如在 Safari 中 url 后面输入，初始是 a > span > spans
      // 输入后变成 span > span > a
      // 因此需要设置新的 key 来强刷整行
      var start = distExports$1.Range.isBackward(selection) ? selection.focus : selection.anchor;
      var _a = __read(distExports$1.Editor.node(editor, [start.path[0]]), 1), paragraph = _a[0];
      for (var i = 0; i < start.path.length; i += 1) {
          var _b = __read(distExports$1.Editor.node(editor, start.path.slice(0, i + 1)), 1), node = _b[0];
          if (distExports$1.Element.isElement(node)) {
              if (((IS_SAFARI || IS_FIREFOX) && node.type === 'link') || node.type === 'code') {
                  DomEditor.setNewKey(paragraph);
                  break;
              }
          }
      }
      var data = event.data;
      if (!data) {
          return;
      }
      // 检查 maxLength -【注意】这里只处理拼音输入的 maxLength 限制。其他限制，在插件 with-max-length.ts 中处理
      var maxLength = editor.getConfig().maxLength;
      if (maxLength) {
          var leftLengthOfMaxLength = DomEditor.getLeftLengthOfMaxLength(editor);
          if (leftLengthOfMaxLength < data.length) {
              var domRange = DomEditor.toDOMRange(editor, selection);
              if (domRange.startContainer.nodeType === Node.TEXT_NODE) {
                  domRange.startContainer.textContent = EDITOR_TO_TEXT.get(editor) || '';
              }
              if (leftLengthOfMaxLength > 0) {
                  // 剩余长度 >0 ，但小于 data 长度，截取一部分插入
                  distExports$1.Editor.insertText(editor, data.slice(0, leftLengthOfMaxLength));
              }
              textarea.changeViewState(); // 重新定位光标
          }
          else {
              distExports$1.Editor.insertText(editor, data);
          }
      }
      else {
          // 拼音输入，当选区的边缘在两个 text node 之间时 需要重置为 domselction 的 选区
          var root = DomEditor.findDocumentOrShadowRoot(editor);
          var domSelection = root.getSelection();
          if (domSelection && areBothTextNodes(editor, selection)) {
              editor.selection = DomEditor.toSlateRange(editor, domSelection, {
                  exactMatch: false,
                  suppressThrow: false,
              });
          }
          distExports$1.Editor.insertText(editor, data);
      }
      // 检查拼音输入是否夸 DOM 节点了，解决 wangEditor-v5/issues/47
      if (!IS_SAFARI) {
          setTimeout(function () {
              var setTimeoutSelection = editor.selection;
              if (setTimeoutSelection == null) {
                  return;
              }
              var oldStartContainer = EDITOR_TO_START_CONTAINER.get(editor); // 拼音输入开始时的 text node
              if (oldStartContainer == null) {
                  return;
              }
              var curStartContainer = DomEditor.toDOMRange(editor, setTimeoutSelection).startContainer; // 拼音输入结束时的 text node
              if (curStartContainer === oldStartContainer) {
                  // 拼音输入的开始和结束，都在同一个 text node ，则不做处理
                  return;
              }
              // 否则，拼音输入的开始和结束，不是同一个 text node ，则将第一个 text node 重新设置 text
              oldStartContainer.textContent = EDITOR_TO_TEXT.get(editor) || '';
          });
      }
  }

  var lib$4 = {};

  var hasRequiredLib$4;

  function requireLib$4 () {
  	if (hasRequiredLib$4) return lib$4;
  	hasRequiredLib$4 = 1;

  	Object.defineProperty(lib$4, "__esModule", {
  	  value: true
  	});

  	/**
  	 * Constants.
  	 */

  	var IS_MAC = typeof window != 'undefined' && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);

  	var MODIFIERS = {
  	  alt: 'altKey',
  	  control: 'ctrlKey',
  	  meta: 'metaKey',
  	  shift: 'shiftKey'
  	};

  	var ALIASES = {
  	  add: '+',
  	  break: 'pause',
  	  cmd: 'meta',
  	  command: 'meta',
  	  ctl: 'control',
  	  ctrl: 'control',
  	  del: 'delete',
  	  down: 'arrowdown',
  	  esc: 'escape',
  	  ins: 'insert',
  	  left: 'arrowleft',
  	  mod: IS_MAC ? 'meta' : 'control',
  	  opt: 'alt',
  	  option: 'alt',
  	  return: 'enter',
  	  right: 'arrowright',
  	  space: ' ',
  	  spacebar: ' ',
  	  up: 'arrowup',
  	  win: 'meta',
  	  windows: 'meta'
  	};

  	var CODES = {
  	  backspace: 8,
  	  tab: 9,
  	  enter: 13,
  	  shift: 16,
  	  control: 17,
  	  alt: 18,
  	  pause: 19,
  	  capslock: 20,
  	  escape: 27,
  	  ' ': 32,
  	  pageup: 33,
  	  pagedown: 34,
  	  end: 35,
  	  home: 36,
  	  arrowleft: 37,
  	  arrowup: 38,
  	  arrowright: 39,
  	  arrowdown: 40,
  	  insert: 45,
  	  delete: 46,
  	  meta: 91,
  	  numlock: 144,
  	  scrolllock: 145,
  	  ';': 186,
  	  '=': 187,
  	  ',': 188,
  	  '-': 189,
  	  '.': 190,
  	  '/': 191,
  	  '`': 192,
  	  '[': 219,
  	  '\\': 220,
  	  ']': 221,
  	  '\'': 222
  	};

  	for (var f = 1; f < 20; f++) {
  	  CODES['f' + f] = 111 + f;
  	}

  	/**
  	 * Is hotkey?
  	 */

  	function isHotkey(hotkey, options, event) {
  	  if (options && !('byKey' in options)) {
  	    event = options;
  	    options = null;
  	  }

  	  if (!Array.isArray(hotkey)) {
  	    hotkey = [hotkey];
  	  }

  	  var array = hotkey.map(function (string) {
  	    return parseHotkey(string, options);
  	  });
  	  var check = function check(e) {
  	    return array.some(function (object) {
  	      return compareHotkey(object, e);
  	    });
  	  };
  	  var ret = event == null ? check : check(event);
  	  return ret;
  	}

  	function isCodeHotkey(hotkey, event) {
  	  return isHotkey(hotkey, event);
  	}

  	function isKeyHotkey(hotkey, event) {
  	  return isHotkey(hotkey, { byKey: true }, event);
  	}

  	/**
  	 * Parse.
  	 */

  	function parseHotkey(hotkey, options) {
  	  var byKey = options && options.byKey;
  	  var ret = {};

  	  // Special case to handle the `+` key since we use it as a separator.
  	  hotkey = hotkey.replace('++', '+add');
  	  var values = hotkey.split('+');
  	  var length = values.length;

  	  // Ensure that all the modifiers are set to false unless the hotkey has them.

  	  for (var k in MODIFIERS) {
  	    ret[MODIFIERS[k]] = false;
  	  }

  	  var _iteratorNormalCompletion = true;
  	  var _didIteratorError = false;
  	  var _iteratorError = undefined;

  	  try {
  	    for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
  	      var value = _step.value;

  	      var optional = value.endsWith('?') && value.length > 1;

  	      if (optional) {
  	        value = value.slice(0, -1);
  	      }

  	      var name = toKeyName(value);
  	      var modifier = MODIFIERS[name];

  	      if (value.length > 1 && !modifier && !ALIASES[value] && !CODES[name]) {
  	        throw new TypeError('Unknown modifier: "' + value + '"');
  	      }

  	      if (length === 1 || !modifier) {
  	        if (byKey) {
  	          ret.key = name;
  	        } else {
  	          ret.which = toKeyCode(value);
  	        }
  	      }

  	      if (modifier) {
  	        ret[modifier] = optional ? null : true;
  	      }
  	    }
  	  } catch (err) {
  	    _didIteratorError = true;
  	    _iteratorError = err;
  	  } finally {
  	    try {
  	      if (!_iteratorNormalCompletion && _iterator.return) {
  	        _iterator.return();
  	      }
  	    } finally {
  	      if (_didIteratorError) {
  	        throw _iteratorError;
  	      }
  	    }
  	  }

  	  return ret;
  	}

  	/**
  	 * Compare.
  	 */

  	function compareHotkey(object, event) {
  	  for (var key in object) {
  	    var expected = object[key];
  	    var actual = void 0;

  	    if (expected == null) {
  	      continue;
  	    }

  	    if (key === 'key' && event.key != null) {
  	      actual = event.key.toLowerCase();
  	    } else if (key === 'which') {
  	      actual = expected === 91 && event.which === 93 ? 91 : event.which;
  	    } else {
  	      actual = event[key];
  	    }

  	    if (actual == null && expected === false) {
  	      continue;
  	    }

  	    if (actual !== expected) {
  	      return false;
  	    }
  	  }

  	  return true;
  	}

  	/**
  	 * Utils.
  	 */

  	function toKeyCode(name) {
  	  name = toKeyName(name);
  	  var code = CODES[name] || name.toUpperCase().charCodeAt(0);
  	  return code;
  	}

  	function toKeyName(name) {
  	  name = name.toLowerCase();
  	  name = ALIASES[name] || name;
  	  return name;
  	}

  	/**
  	 * Export.
  	 */

  	lib$4.default = isHotkey;
  	lib$4.isHotkey = isHotkey;
  	lib$4.isCodeHotkey = isCodeHotkey;
  	lib$4.isKeyHotkey = isKeyHotkey;
  	lib$4.parseHotkey = parseHotkey;
  	lib$4.compareHotkey = compareHotkey;
  	lib$4.toKeyCode = toKeyCode;
  	lib$4.toKeyName = toKeyName;
  	return lib$4;
  }

  var libExports$2 = requireLib$4();

  /**
   * @description 快捷键
   * @author wangfupeng
   */
  /**
   * Hotkey mappings for each platform.
   */
  var HOTKEYS = {
      bold: 'mod+b',
      compose: ['down', 'left', 'right', 'up', 'backspace', 'enter'],
      moveBackward: 'left',
      moveForward: 'right',
      moveWordBackward: 'ctrl+left',
      moveWordForward: 'ctrl+right',
      deleteBackward: 'shift?+backspace',
      deleteForward: 'shift?+delete',
      extendBackward: 'shift+left',
      extendForward: 'shift+right',
      italic: 'mod+i',
      splitBlock: 'shift?+enter',
      undo: 'mod+z',
      tab: 'tab',
      selectAll: 'mod+a',
  };
  var APPLE_HOTKEYS = {
      moveLineBackward: 'opt+up',
      moveLineForward: 'opt+down',
      moveWordBackward: 'opt+left',
      moveWordForward: 'opt+right',
      deleteBackward: ['ctrl+backspace', 'ctrl+h'],
      deleteForward: ['ctrl+delete', 'ctrl+d'],
      deleteLineBackward: 'cmd+shift?+backspace',
      deleteLineForward: ['cmd+shift?+delete', 'ctrl+k'],
      deleteWordBackward: 'opt+shift?+backspace',
      deleteWordForward: 'opt+shift?+delete',
      extendLineBackward: 'opt+shift+up',
      extendLineForward: 'opt+shift+down',
      redo: 'cmd+shift+z',
      transposeCharacter: 'ctrl+t',
  };
  var WINDOWS_HOTKEYS = {
      deleteWordBackward: 'ctrl+shift?+backspace',
      deleteWordForward: 'ctrl+shift?+delete',
      redo: ['ctrl+y', 'ctrl+shift+z'],
  };
  /**
   * Create a platform-aware hotkey checker.
   */
  var create = function (key) {
      var generic = HOTKEYS[key];
      var apple = APPLE_HOTKEYS[key];
      var windows = WINDOWS_HOTKEYS[key];
      var isGeneric = generic && libExports$2.isKeyHotkey(generic);
      var isApple = apple && libExports$2.isKeyHotkey(apple);
      var isWindows = windows && libExports$2.isKeyHotkey(windows);
      return function (event) {
          if (isGeneric && isGeneric(event))
              return true;
          if (IS_APPLE && isApple && isApple(event))
              return true;
          if (!IS_APPLE && isWindows && isWindows(event))
              return true;
          return false;
      };
  };
  /**
   * Hotkeys.
   */
  var Hotkeys = {
      isBold: create('bold'),
      isCompose: create('compose'),
      isMoveBackward: create('moveBackward'),
      isMoveForward: create('moveForward'),
      isDeleteBackward: create('deleteBackward'),
      isDeleteForward: create('deleteForward'),
      isDeleteLineBackward: create('deleteLineBackward'),
      isDeleteLineForward: create('deleteLineForward'),
      isDeleteWordBackward: create('deleteWordBackward'),
      isDeleteWordForward: create('deleteWordForward'),
      isExtendBackward: create('extendBackward'),
      isExtendForward: create('extendForward'),
      isExtendLineBackward: create('extendLineBackward'),
      isExtendLineForward: create('extendLineForward'),
      isItalic: create('italic'),
      isMoveLineBackward: create('moveLineBackward'),
      isMoveLineForward: create('moveLineForward'),
      isMoveWordBackward: create('moveWordBackward'),
      isMoveWordForward: create('moveWordForward'),
      isRedo: create('redo'),
      isSplitBlock: create('splitBlock'),
      isTransposeCharacter: create('transposeCharacter'),
      isUndo: create('undo'),
      isTab: create('tab'),
      isSelectAll: create('selectAll'),
  };

  /**
   * @description 监听 onKeydown 事件
   * @author wangfupeng
   */
  function preventDefault(event) {
      event.preventDefault();
  }
  // 触发 menu 快捷键
  function triggerMenuHotKey(editor, event) {
      var toolbar = EDITOR_TO_TOOLBAR.get(editor);
      var toolbarMenus = toolbar && toolbar.getMenus();
      var hoverbar = EDITOR_TO_HOVER_BAR.get(editor);
      var hoverbarMenus = hoverbar && hoverbar.getMenus();
      // 合并所有 menus
      var allMenus = __assign(__assign({}, toolbarMenus), hoverbarMenus);
      for (var key in allMenus) {
          var menu = allMenus[key];
          var hotkey = menu.hotkey;
          if (hotkey && libExports$2.isHotkey(hotkey, event)) {
              var disabled = menu.isDisabled(editor);
              if (!disabled) {
                  var val = menu.getValue(editor);
                  menu.exec(editor, val); // 执行 menu 命令
              }
          }
      }
  }
  function handleOnKeydown(e, textarea, editor) {
      var event = e;
      var selection = editor.selection;
      var readOnly = editor.getConfig().readOnly;
      if (readOnly)
          return;
      if (textarea.isComposing)
          return;
      if (!hasEditableTarget(editor, event.target))
          return;
      // 触发 menu 快捷键
      triggerMenuHotKey(editor, event);
      // tab
      if (Hotkeys.isTab(event)) {
          preventDefault(event);
          editor.handleTab();
          return;
      }
      // COMPAT: Since we prevent the default behavior on
      // `beforeinput` events, the browser doesn't think there's ever
      // any history stack to undo or redo, so we have to manage these
      // hotkeys ourselves. (2019/11/06)
      if (Hotkeys.isRedo(event)) {
          preventDefault(event);
          if (typeof editor.redo === 'function') {
              editor.redo();
          }
          return;
      }
      if (Hotkeys.isUndo(event)) {
          preventDefault(event);
          if (typeof editor.undo === 'function') {
              editor.undo();
          }
          return;
      }
      // COMPAT: Certain browsers don't handle the selection updates
      // properly. In Chrome, the selection isn't properly extended.
      // And in Firefox, the selection isn't properly collapsed.
      // (2017/10/17)
      if (Hotkeys.isMoveLineBackward(event)) {
          preventDefault(event);
          distExports$1.Transforms.move(editor, { unit: 'line', reverse: true }); // Transforms.move 修改 selection
          return;
      }
      if (Hotkeys.isMoveLineForward(event)) {
          preventDefault(event);
          distExports$1.Transforms.move(editor, { unit: 'line' });
          return;
      }
      if (Hotkeys.isExtendLineBackward(event)) {
          preventDefault(event);
          distExports$1.Transforms.move(editor, { unit: 'line', edge: 'focus', reverse: true });
          return;
      }
      if (Hotkeys.isExtendLineForward(event)) {
          preventDefault(event);
          distExports$1.Transforms.move(editor, { unit: 'line', edge: 'focus' });
          return;
      }
      // COMPAT: If a void node is selected, or a zero-width text node
      // adjacent to an inline is selected, we need to handle these
      // hotkeys manually because browsers won't be able to skip over
      // the void node with the zero-width space not being an empty
      // string.
      // todo 移动 word 考虑 Node 排版模式是否为 rtl 的情况
      if (Hotkeys.isMoveBackward(event)) {
          preventDefault(event);
          if (selection && distExports$1.Range.isCollapsed(selection)) {
              distExports$1.Transforms.move(editor, { reverse: true });
          }
          else {
              distExports$1.Transforms.collapse(editor, { edge: 'start' });
          }
          return;
      }
      if (Hotkeys.isMoveForward(event)) {
          preventDefault(event);
          if (selection && distExports$1.Range.isCollapsed(selection)) {
              distExports$1.Transforms.move(editor);
          }
          else {
              distExports$1.Transforms.collapse(editor, { edge: 'end' });
          }
          return;
      }
      if (Hotkeys.isMoveWordBackward(event)) {
          preventDefault(event);
          if (selection && distExports$1.Range.isExpanded(selection)) {
              distExports$1.Transforms.collapse(editor, { edge: 'focus' });
          }
          distExports$1.Transforms.move(editor, { unit: 'word', reverse: true });
          return;
      }
      if (Hotkeys.isMoveWordForward(event)) {
          preventDefault(event);
          if (selection && distExports$1.Range.isExpanded(selection)) {
              distExports$1.Transforms.collapse(editor, { edge: 'focus' });
          }
          distExports$1.Transforms.move(editor, { unit: 'word' });
          return;
      }
      if (Hotkeys.isSelectAll(event)) {
          preventDefault(event);
          editor.selectAll();
          return;
      }
      // COMPAT: Certain browsers don't support the `beforeinput` event, so we
      // fall back to guessing at the input intention for hotkeys.
      // COMPAT: In iOS, some of these hotkeys are handled in the
      if (!HAS_BEFORE_INPUT_SUPPORT) {
          // 这里是兼容不完全支持 beforeInput 的浏览器。对于支持 beforeInput 的浏览器，会用 beforeinput 事件处理
          // 这里兼容了 beforeInput 的一些功能键（如回车、删除等）没有文本输入。文本输入使用 keypress 兼容。
          // We don't have a core behavior for these, but they change the
          // DOM if we don't prevent them, so we have to.
          if (Hotkeys.isBold(event) || Hotkeys.isItalic(event) || Hotkeys.isTransposeCharacter(event)) {
              preventDefault(event);
              return;
          }
          if (Hotkeys.isSplitBlock(event)) {
              preventDefault(event);
              distExports$1.Editor.insertBreak(editor);
              return;
          }
          if (Hotkeys.isDeleteBackward(event)) {
              preventDefault(event);
              if (selection && distExports$1.Range.isExpanded(selection)) {
                  distExports$1.Editor.deleteFragment(editor, { direction: 'backward' });
              }
              else {
                  distExports$1.Editor.deleteBackward(editor);
              }
              return;
          }
          if (Hotkeys.isDeleteForward(event)) {
              preventDefault(event);
              if (selection && distExports$1.Range.isExpanded(selection)) {
                  distExports$1.Editor.deleteFragment(editor, { direction: 'forward' });
              }
              else {
                  distExports$1.Editor.deleteForward(editor);
              }
              return;
          }
          if (Hotkeys.isDeleteLineBackward(event)) {
              preventDefault(event);
              if (selection && distExports$1.Range.isExpanded(selection)) {
                  distExports$1.Editor.deleteFragment(editor, { direction: 'backward' });
              }
              else {
                  distExports$1.Editor.deleteBackward(editor, { unit: 'line' });
              }
              return;
          }
          if (Hotkeys.isDeleteLineForward(event)) {
              preventDefault(event);
              if (selection && distExports$1.Range.isExpanded(selection)) {
                  distExports$1.Editor.deleteFragment(editor, { direction: 'forward' });
              }
              else {
                  distExports$1.Editor.deleteForward(editor, { unit: 'line' });
              }
              return;
          }
          if (Hotkeys.isDeleteWordBackward(event)) {
              preventDefault(event);
              if (selection && distExports$1.Range.isExpanded(selection)) {
                  distExports$1.Editor.deleteFragment(editor, { direction: 'backward' });
              }
              else {
                  distExports$1.Editor.deleteBackward(editor, { unit: 'word' });
              }
              return;
          }
          if (Hotkeys.isDeleteWordForward(event)) {
              preventDefault(event);
              if (selection && distExports$1.Range.isExpanded(selection)) {
                  distExports$1.Editor.deleteFragment(editor, { direction: 'forward' });
              }
              else {
                  distExports$1.Editor.deleteForward(editor, { unit: 'word' });
              }
              return;
          }
      }
      else {
          if (IS_CHROME || IS_SAFARI) {
              // COMPAT: Chrome and Safari support `beforeinput` event but do not fire
              // an event when deleting backwards in a selected void inline node
              // 修复在 Chrome 和 Safari 中删除内容时，内联空节点被选中
              if (selection &&
                  (Hotkeys.isDeleteBackward(event) || Hotkeys.isDeleteForward(event)) &&
                  distExports$1.Range.isCollapsed(selection)) {
                  var currentNode = distExports$1.Node.parent(editor, selection.anchor.path);
                  if (distExports$1.Element.isElement(currentNode) &&
                      distExports$1.Editor.isVoid(editor, currentNode) &&
                      distExports$1.Editor.isInline(editor, currentNode)) {
                      event.preventDefault();
                      distExports$1.Transforms.delete(editor, { unit: 'block' });
                      return;
                  }
              }
          }
      }
  }

  /**
   * @description 监听 keypress 事件
   * @author wangfupeng
   */
  // 【注意】虽然 keypress 事件已经过时（建议用 keydown 取代），但这里是为了兼容 beforeinput ，所以不会在高级浏览器生效，不用升级 keydown
  function handleKeypress(event, textarea, editor) {
      // 这里是兼容不完全支持 beforeInput 的浏览器。对于支持 beforeInput 的浏览器，会用 beforeinput 事件处理
      if (HAS_BEFORE_INPUT_SUPPORT)
          return;
      var readOnly = editor.getConfig().readOnly;
      if (readOnly)
          return;
      if (!hasEditableTarget(editor, event.target))
          return;
      event.preventDefault();
      var text = event.key;
      // 这里只兼容 beforeInput 的 insertText 类型，其他的（如删除、换行）使用 keydown 来兼容
      distExports$1.Editor.insertText(editor, text);
  }

  /**
   * @description 处理 copy 事件
   * @author wangfupeng
   */
  function handleOnCopy(e, _textarea, editor) {
      var event = e;
      if (!hasEditableTarget(editor, event.target)) {
          return;
      }
      var readOnly = editor.getConfig().readOnly;
      if (!readOnly) {
          event.preventDefault();
      }
      var data = event.clipboardData;
      if (data == null) {
          return;
      }
      editor.setFragmentData(data);
      var customCopy = editor.getConfig().customCopy;
      if (customCopy) {
          customCopy(editor, event);
      }
  }

  /**
   * @description 处理 cut 事件
   * @author wangfupeng
   */
  function handleOnCut(e, textarea, editor) {
      var event = e;
      var selection = editor.selection;
      var readOnly = editor.getConfig().readOnly;
      if (readOnly) {
          return;
      }
      event.preventDefault();
      if (!hasEditableTarget(editor, event.target)) {
          return;
      }
      var data = event.clipboardData;
      if (data == null) {
          return;
      }
      editor.setFragmentData(data);
      if (selection) {
          if (distExports$1.Range.isExpanded(selection)) {
              distExports$1.Editor.deleteFragment(editor);
          }
          else {
              var node = distExports$1.Node.parent(editor, selection.anchor.path);
              if (distExports$1.Editor.isVoid(editor, node)) {
                  distExports$1.Transforms.delete(editor);
              }
          }
      }
  }

  /**
   * @description 处理 paste 事件
   * @author wangfupeng
   */
  function handleOnPaste(e, textarea, editor) {
      EDITOR_TO_CAN_PASTE.set(editor, true); // 标记为：可执行默认粘贴
      var event = e;
      var readOnly = editor.getConfig().readOnly;
      if (readOnly) {
          return;
      }
      if (!hasEditableTarget(editor, event.target)) {
          return;
      }
      var customPaste = editor.getConfig().customPaste;
      if (customPaste) {
          var res = customPaste(editor, event);
          if (res === false) {
              // 自行实现粘贴，不执行默认粘贴
              EDITOR_TO_CAN_PASTE.set(editor, false); // 标记为：不可执行默认粘贴
              return;
          }
      }
      // 如果支持 beforeInput 且不是纯粘贴文本（如 html、图片文件），则使用 beforeInput 来实现
      // 这里只处理：不支持 beforeInput 或者 粘贴纯文本
      if (!IS_SAFARI && HAS_BEFORE_INPUT_SUPPORT && !isPlainTextOnlyPaste(event)) {
          return;
      }
      event.preventDefault();
      var data = event.clipboardData;
      if (data == null) {
          return;
      }
      editor.insertData(data);
  }

  /**
   * @description 处理 dragover 事件
   * @author wangfupeng
   */
  function handleOnDragstart(e, textarea, editor) {
      var event = e;
      if (!hasTarget(editor, event.target)) {
          return;
      }
      var readOnly = editor.getConfig().readOnly;
      if (readOnly) {
          return;
      }
      var node = DomEditor.toSlateNode(editor, event.target);
      var path = DomEditor.findPath(editor, node);
      var voidMatch = distExports$1.Editor.isVoid(editor, node) || distExports$1.Editor.void(editor, { at: path, voids: true });
      // If starting a drag on a void node, make sure it is selected
      // so that it shows up in the selection's fragment.
      if (voidMatch) {
          var range = distExports$1.Editor.range(editor, path);
          distExports$1.Transforms.select(editor, range);
      }
      var data = event.dataTransfer;
      if (data == null) {
          return;
      }
      var selectedNode = DomEditor.getSelectedNodeByType(editor, 'table');
      if (selectedNode) {
          return;
      }
      textarea.isDraggingInternally = true;
      editor.setFragmentData(data);
  }
  function handleOnDragover(event, textarea, editor) {
      if (!hasTarget(editor, event.target)) {
          return;
      }
      // Only when the target is void, call `preventDefault` to signal
      // that drops are allowed. Editable content is droppable by
      // default, and calling `preventDefault` hides the cursor.
      var node = DomEditor.toSlateNode(editor, event.target);
      if (distExports$1.Editor.isVoid(editor, node)) {
          event.preventDefault();
      }
  }
  function handleOnDragend(e, textarea, editor) {
      var event = e;
      var readOnly = editor.getConfig().readOnly;
      if (readOnly) {
          return;
      }
      if (!textarea.isDraggingInternally) {
          return;
      }
      if (!hasTarget(editor, event.target)) {
          return;
      }
      textarea.isDraggingInternally = false;
  }

  /**
   * @description 处理 drop 事件
   * @author wangfupeng
   */
  function handleOnDrop(e, textarea, editor) {
      var event = e;
      var data = event.dataTransfer;
      var readOnly = editor.getConfig().readOnly;
      if (readOnly)
          return;
      if (!hasTarget(editor, event.target))
          return;
      if (data == null)
          return;
      if (HAS_BEFORE_INPUT_SUPPORT) {
          if (IS_SAFARI) {
              // safari 不支持拖拽文件
              if (data.files.length > 0)
                  return;
          }
      }
      event.preventDefault();
      // Keep a reference to the dragged range before updating selection
      var draggedRange = editor.selection;
      var range = DomEditor.findEventRange(editor, event);
      distExports$1.Transforms.select(editor, range);
      if (textarea.isDraggingInternally) {
          if (draggedRange) {
              distExports$1.Transforms.delete(editor, {
                  at: draggedRange,
              });
          }
          textarea.isDraggingInternally = false;
      }
      editor.insertData(data);
      // When dragging from another source into the editor, it's possible
      // that the current editor does not have focus.
      if (!editor.isFocused()) {
          editor.focus();
      }
  }

  /**
   * @description textarea event handlers entry
   * @author wangfupeng
   */
  var eventConf = {
      beforeinput: handleBeforeInput,
      blur: handleOnBlur,
      focus: handleOnFocus,
      click: handleOnClick,
      compositionstart: handleCompositionStart,
      compositionend: handleCompositionEnd,
      compositionupdate: handleCompositionUpdate,
      keydown: handleOnKeydown,
      keypress: handleKeypress,
      copy: handleOnCopy,
      cut: handleOnCut,
      paste: handleOnPaste,
      dragover: handleOnDragover,
      dragstart: handleOnDragstart,
      dragend: handleOnDragend,
      drop: handleOnDrop,
  };

  function createElement(tagName, options) {
      return document.createElement(tagName, options);
  }
  function createElementNS(namespaceURI, qualifiedName, options) {
      return document.createElementNS(namespaceURI, qualifiedName, options);
  }
  function createDocumentFragment() {
      return parseFragment(document.createDocumentFragment());
  }
  function createTextNode(text) {
      return document.createTextNode(text);
  }
  function createComment(text) {
      return document.createComment(text);
  }
  function insertBefore(parentNode, newNode, referenceNode) {
      if (isDocumentFragment$1(parentNode)) {
          let node = parentNode;
          while (node && isDocumentFragment$1(node)) {
              const fragment = parseFragment(node);
              node = fragment.parent;
          }
          parentNode = node !== null && node !== void 0 ? node : parentNode;
      }
      if (isDocumentFragment$1(newNode)) {
          newNode = parseFragment(newNode, parentNode);
      }
      if (referenceNode && isDocumentFragment$1(referenceNode)) {
          referenceNode = parseFragment(referenceNode).firstChildNode;
      }
      parentNode.insertBefore(newNode, referenceNode);
  }
  function removeChild(node, child) {
      node.removeChild(child);
  }
  function appendChild(node, child) {
      if (isDocumentFragment$1(child)) {
          child = parseFragment(child, node);
      }
      node.appendChild(child);
  }
  function parentNode(node) {
      if (isDocumentFragment$1(node)) {
          while (node && isDocumentFragment$1(node)) {
              const fragment = parseFragment(node);
              node = fragment.parent;
          }
          return node !== null && node !== void 0 ? node : null;
      }
      return node.parentNode;
  }
  function nextSibling(node) {
      var _a;
      if (isDocumentFragment$1(node)) {
          const fragment = parseFragment(node);
          const parent = parentNode(fragment);
          if (parent && fragment.lastChildNode) {
              const children = Array.from(parent.childNodes);
              const index = children.indexOf(fragment.lastChildNode);
              return (_a = children[index + 1]) !== null && _a !== void 0 ? _a : null;
          }
          return null;
      }
      return node.nextSibling;
  }
  function tagName(elm) {
      return elm.tagName;
  }
  function setTextContent(node, text) {
      node.textContent = text;
  }
  function getTextContent(node) {
      return node.textContent;
  }
  function isElement$2(node) {
      return node.nodeType === 1;
  }
  function isText(node) {
      return node.nodeType === 3;
  }
  function isComment(node) {
      return node.nodeType === 8;
  }
  function isDocumentFragment$1(node) {
      return node.nodeType === 11;
  }
  function parseFragment(fragmentNode, parentNode) {
      var _a, _b, _c;
      const fragment = fragmentNode;
      (_a = fragment.parent) !== null && _a !== void 0 ? _a : (fragment.parent = parentNode !== null && parentNode !== void 0 ? parentNode : null);
      (_b = fragment.firstChildNode) !== null && _b !== void 0 ? _b : (fragment.firstChildNode = fragmentNode.firstChild);
      (_c = fragment.lastChildNode) !== null && _c !== void 0 ? _c : (fragment.lastChildNode = fragmentNode.lastChild);
      return fragment;
  }
  const htmlDomApi = {
      createElement,
      createElementNS,
      createTextNode,
      createDocumentFragment,
      createComment,
      insertBefore,
      removeChild,
      appendChild,
      parentNode,
      nextSibling,
      tagName,
      setTextContent,
      getTextContent,
      isElement: isElement$2,
      isText,
      isComment,
      isDocumentFragment: isDocumentFragment$1
  };

  function vnode(sel, data, children, text, elm) {
      const key = data === undefined ? undefined : data.key;
      return { sel, data, children, text, elm, key };
  }

  const array = Array.isArray;
  function primitive(s) {
      return (typeof s === "string" ||
          typeof s === "number" ||
          s instanceof String ||
          s instanceof Number);
  }

  function isUndef(s) {
      return s === undefined;
  }
  function isDef(s) {
      return s !== undefined;
  }
  const emptyNode = vnode("", {}, [], undefined, undefined);
  function sameVnode(vnode1, vnode2) {
      var _a, _b;
      const isSameKey = vnode1.key === vnode2.key;
      const isSameIs = ((_a = vnode1.data) === null || _a === void 0 ? void 0 : _a.is) === ((_b = vnode2.data) === null || _b === void 0 ? void 0 : _b.is);
      const isSameSel = vnode1.sel === vnode2.sel;
      const isSameTextOrFragment = !vnode1.sel && vnode1.sel === vnode2.sel
          ? typeof vnode1.text === typeof vnode2.text
          : true;
      return isSameSel && isSameKey && isSameIs && isSameTextOrFragment;
  }
  /**
   * @todo Remove this function when the document fragment is considered stable.
   */
  function documentFragmentIsNotSupported() {
      throw new Error("The document fragment is not supported on this platform.");
  }
  function isElement$1(api, vnode) {
      return api.isElement(vnode);
  }
  function isDocumentFragment(api, vnode) {
      return api.isDocumentFragment(vnode);
  }
  function createKeyToOldIdx(children, beginIdx, endIdx) {
      var _a;
      const map = {};
      for (let i = beginIdx; i <= endIdx; ++i) {
          const key = (_a = children[i]) === null || _a === void 0 ? void 0 : _a.key;
          if (key !== undefined) {
              map[key] = i;
          }
      }
      return map;
  }
  const hooks = [
      "create",
      "update",
      "remove",
      "destroy",
      "pre",
      "post"
  ];
  function init(modules, domApi, options) {
      const cbs = {
          create: [],
          update: [],
          remove: [],
          destroy: [],
          pre: [],
          post: []
      };
      const api = htmlDomApi;
      for (const hook of hooks) {
          for (const module of modules) {
              const currentHook = module[hook];
              if (currentHook !== undefined) {
                  cbs[hook].push(currentHook);
              }
          }
      }
      function emptyNodeAt(elm) {
          const id = elm.id ? "#" + elm.id : "";
          // elm.className doesn't return a string when elm is an SVG element inside a shadowRoot.
          // https://stackoverflow.com/questions/29454340/detecting-classname-of-svganimatedstring
          const classes = elm.getAttribute("class");
          const c = classes ? "." + classes.split(" ").join(".") : "";
          return vnode(api.tagName(elm).toLowerCase() + id + c, {}, [], undefined, elm);
      }
      function emptyDocumentFragmentAt(frag) {
          return vnode(undefined, {}, [], undefined, frag);
      }
      function createRmCb(childElm, listeners) {
          return function rmCb() {
              if (--listeners === 0) {
                  const parent = api.parentNode(childElm);
                  if (parent !== null) {
                      api.removeChild(parent, childElm);
                  }
              }
          };
      }
      function createElm(vnode, insertedVnodeQueue) {
          var _a, _b, _c, _d;
          let i;
          let data = vnode.data;
          if (data !== undefined) {
              const init = (_a = data.hook) === null || _a === void 0 ? void 0 : _a.init;
              if (isDef(init)) {
                  init(vnode);
                  data = vnode.data;
              }
          }
          const children = vnode.children;
          const sel = vnode.sel;
          if (sel === "!") {
              if (isUndef(vnode.text)) {
                  vnode.text = "";
              }
              vnode.elm = api.createComment(vnode.text);
          }
          else if (sel === "") {
              // textNode has no selector
              vnode.elm = api.createTextNode(vnode.text);
          }
          else if (sel !== undefined) {
              // Parse selector
              const hashIdx = sel.indexOf("#");
              const dotIdx = sel.indexOf(".", hashIdx);
              const hash = hashIdx > 0 ? hashIdx : sel.length;
              const dot = dotIdx > 0 ? dotIdx : sel.length;
              const tag = hashIdx !== -1 || dotIdx !== -1
                  ? sel.slice(0, Math.min(hash, dot))
                  : sel;
              const elm = (vnode.elm =
                  isDef(data) && isDef((i = data.ns))
                      ? api.createElementNS(i, tag, data)
                      : api.createElement(tag, data));
              if (hash < dot)
                  elm.setAttribute("id", sel.slice(hash + 1, dot));
              if (dotIdx > 0)
                  elm.setAttribute("class", sel.slice(dot + 1).replace(/\./g, " "));
              for (i = 0; i < cbs.create.length; ++i)
                  cbs.create[i](emptyNode, vnode);
              if (primitive(vnode.text) &&
                  (!array(children) || children.length === 0)) {
                  // allow h1 and similar nodes to be created w/ text and empty child list
                  api.appendChild(elm, api.createTextNode(vnode.text));
              }
              if (array(children)) {
                  for (i = 0; i < children.length; ++i) {
                      const ch = children[i];
                      if (ch != null) {
                          api.appendChild(elm, createElm(ch, insertedVnodeQueue));
                      }
                  }
              }
              const hook = vnode.data.hook;
              if (isDef(hook)) {
                  (_b = hook.create) === null || _b === void 0 ? void 0 : _b.call(hook, emptyNode, vnode);
                  if (hook.insert) {
                      insertedVnodeQueue.push(vnode);
                  }
              }
          }
          else if (((_c = void 0 ) === null || _c === void 0 ? void 0 : _c.fragments) && vnode.children) {
              vnode.elm = ((_d = api.createDocumentFragment) !== null && _d !== void 0 ? _d : documentFragmentIsNotSupported)();
              for (i = 0; i < cbs.create.length; ++i)
                  cbs.create[i](emptyNode, vnode);
              for (i = 0; i < vnode.children.length; ++i) {
                  const ch = vnode.children[i];
                  if (ch != null) {
                      api.appendChild(vnode.elm, createElm(ch, insertedVnodeQueue));
                  }
              }
          }
          else {
              vnode.elm = api.createTextNode(vnode.text);
          }
          return vnode.elm;
      }
      function addVnodes(parentElm, before, vnodes, startIdx, endIdx, insertedVnodeQueue) {
          for (; startIdx <= endIdx; ++startIdx) {
              const ch = vnodes[startIdx];
              if (ch != null) {
                  api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);
              }
          }
      }
      function invokeDestroyHook(vnode) {
          var _a, _b;
          const data = vnode.data;
          if (data !== undefined) {
              (_b = (_a = data === null || data === void 0 ? void 0 : data.hook) === null || _a === void 0 ? void 0 : _a.destroy) === null || _b === void 0 ? void 0 : _b.call(_a, vnode);
              for (let i = 0; i < cbs.destroy.length; ++i)
                  cbs.destroy[i](vnode);
              if (vnode.children !== undefined) {
                  for (let j = 0; j < vnode.children.length; ++j) {
                      const child = vnode.children[j];
                      if (child != null && typeof child !== "string") {
                          invokeDestroyHook(child);
                      }
                  }
              }
          }
      }
      function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
          var _a, _b;
          for (; startIdx <= endIdx; ++startIdx) {
              let listeners;
              let rm;
              const ch = vnodes[startIdx];
              if (ch != null) {
                  if (isDef(ch.sel)) {
                      invokeDestroyHook(ch);
                      listeners = cbs.remove.length + 1;
                      rm = createRmCb(ch.elm, listeners);
                      for (let i = 0; i < cbs.remove.length; ++i)
                          cbs.remove[i](ch, rm);
                      const removeHook = (_b = (_a = ch === null || ch === void 0 ? void 0 : ch.data) === null || _a === void 0 ? void 0 : _a.hook) === null || _b === void 0 ? void 0 : _b.remove;
                      if (isDef(removeHook)) {
                          removeHook(ch, rm);
                      }
                      else {
                          rm();
                      }
                  }
                  else if (ch.children) {
                      // Fragment node
                      invokeDestroyHook(ch);
                      removeVnodes(parentElm, ch.children, 0, ch.children.length - 1);
                  }
                  else {
                      // Text node
                      api.removeChild(parentElm, ch.elm);
                  }
              }
          }
      }
      function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue) {
          let oldStartIdx = 0;
          let newStartIdx = 0;
          let oldEndIdx = oldCh.length - 1;
          let oldStartVnode = oldCh[0];
          let oldEndVnode = oldCh[oldEndIdx];
          let newEndIdx = newCh.length - 1;
          let newStartVnode = newCh[0];
          let newEndVnode = newCh[newEndIdx];
          let oldKeyToIdx;
          let idxInOld;
          let elmToMove;
          let before;
          while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
              if (oldStartVnode == null) {
                  oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left
              }
              else if (oldEndVnode == null) {
                  oldEndVnode = oldCh[--oldEndIdx];
              }
              else if (newStartVnode == null) {
                  newStartVnode = newCh[++newStartIdx];
              }
              else if (newEndVnode == null) {
                  newEndVnode = newCh[--newEndIdx];
              }
              else if (sameVnode(oldStartVnode, newStartVnode)) {
                  patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
                  oldStartVnode = oldCh[++oldStartIdx];
                  newStartVnode = newCh[++newStartIdx];
              }
              else if (sameVnode(oldEndVnode, newEndVnode)) {
                  patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
                  oldEndVnode = oldCh[--oldEndIdx];
                  newEndVnode = newCh[--newEndIdx];
              }
              else if (sameVnode(oldStartVnode, newEndVnode)) {
                  // Vnode moved right
                  patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
                  api.insertBefore(parentElm, oldStartVnode.elm, api.nextSibling(oldEndVnode.elm));
                  oldStartVnode = oldCh[++oldStartIdx];
                  newEndVnode = newCh[--newEndIdx];
              }
              else if (sameVnode(oldEndVnode, newStartVnode)) {
                  // Vnode moved left
                  patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
                  api.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
                  oldEndVnode = oldCh[--oldEndIdx];
                  newStartVnode = newCh[++newStartIdx];
              }
              else {
                  if (oldKeyToIdx === undefined) {
                      oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
                  }
                  idxInOld = oldKeyToIdx[newStartVnode.key];
                  if (isUndef(idxInOld)) {
                      // `newStartVnode` is new, create and insert it in beginning
                      api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);
                      newStartVnode = newCh[++newStartIdx];
                  }
                  else if (isUndef(oldKeyToIdx[newEndVnode.key])) {
                      // `newEndVnode` is new, create and insert it in the end
                      api.insertBefore(parentElm, createElm(newEndVnode, insertedVnodeQueue), api.nextSibling(oldEndVnode.elm));
                      newEndVnode = newCh[--newEndIdx];
                  }
                  else {
                      // Neither of the new endpoints are new vnodes, so we make progress by
                      // moving `newStartVnode` into position
                      elmToMove = oldCh[idxInOld];
                      if (elmToMove.sel !== newStartVnode.sel) {
                          api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);
                      }
                      else {
                          patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);
                          oldCh[idxInOld] = undefined;
                          api.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);
                      }
                      newStartVnode = newCh[++newStartIdx];
                  }
              }
          }
          if (newStartIdx <= newEndIdx) {
              before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].elm;
              addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
          }
          if (oldStartIdx <= oldEndIdx) {
              removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
          }
      }
      function patchVnode(oldVnode, vnode, insertedVnodeQueue) {
          var _a, _b, _c, _d, _e, _f, _g, _h;
          const hook = (_a = vnode.data) === null || _a === void 0 ? void 0 : _a.hook;
          (_b = hook === null || hook === void 0 ? void 0 : hook.prepatch) === null || _b === void 0 ? void 0 : _b.call(hook, oldVnode, vnode);
          const elm = (vnode.elm = oldVnode.elm);
          if (oldVnode === vnode)
              return;
          if (vnode.data !== undefined ||
              (isDef(vnode.text) && vnode.text !== oldVnode.text)) {
              (_c = vnode.data) !== null && _c !== void 0 ? _c : (vnode.data = {});
              (_d = oldVnode.data) !== null && _d !== void 0 ? _d : (oldVnode.data = {});
              for (let i = 0; i < cbs.update.length; ++i)
                  cbs.update[i](oldVnode, vnode);
              (_g = (_f = (_e = vnode.data) === null || _e === void 0 ? void 0 : _e.hook) === null || _f === void 0 ? void 0 : _f.update) === null || _g === void 0 ? void 0 : _g.call(_f, oldVnode, vnode);
          }
          const oldCh = oldVnode.children;
          const ch = vnode.children;
          if (isUndef(vnode.text)) {
              if (isDef(oldCh) && isDef(ch)) {
                  if (oldCh !== ch)
                      updateChildren(elm, oldCh, ch, insertedVnodeQueue);
              }
              else if (isDef(ch)) {
                  if (isDef(oldVnode.text))
                      api.setTextContent(elm, "");
                  addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
              }
              else if (isDef(oldCh)) {
                  removeVnodes(elm, oldCh, 0, oldCh.length - 1);
              }
              else if (isDef(oldVnode.text)) {
                  api.setTextContent(elm, "");
              }
          }
          else if (oldVnode.text !== vnode.text) {
              if (isDef(oldCh)) {
                  removeVnodes(elm, oldCh, 0, oldCh.length - 1);
              }
              api.setTextContent(elm, vnode.text);
          }
          (_h = hook === null || hook === void 0 ? void 0 : hook.postpatch) === null || _h === void 0 ? void 0 : _h.call(hook, oldVnode, vnode);
      }
      return function patch(oldVnode, vnode) {
          let i, elm, parent;
          const insertedVnodeQueue = [];
          for (i = 0; i < cbs.pre.length; ++i)
              cbs.pre[i]();
          if (isElement$1(api, oldVnode)) {
              oldVnode = emptyNodeAt(oldVnode);
          }
          else if (isDocumentFragment(api, oldVnode)) {
              oldVnode = emptyDocumentFragmentAt(oldVnode);
          }
          if (sameVnode(oldVnode, vnode)) {
              patchVnode(oldVnode, vnode, insertedVnodeQueue);
          }
          else {
              elm = oldVnode.elm;
              parent = api.parentNode(elm);
              createElm(vnode, insertedVnodeQueue);
              if (parent !== null) {
                  api.insertBefore(parent, vnode.elm, api.nextSibling(elm));
                  removeVnodes(parent, [oldVnode], 0, 0);
              }
          }
          for (i = 0; i < insertedVnodeQueue.length; ++i) {
              insertedVnodeQueue[i].data.hook.insert(insertedVnodeQueue[i]);
          }
          for (i = 0; i < cbs.post.length; ++i)
              cbs.post[i]();
          return vnode;
      };
  }

  function addNS(data, children, sel) {
      data.ns = "http://www.w3.org/2000/svg";
      if (sel !== "foreignObject" && children !== undefined) {
          for (let i = 0; i < children.length; ++i) {
              const child = children[i];
              if (typeof child === "string")
                  continue;
              const childData = child.data;
              if (childData !== undefined) {
                  addNS(childData, child.children, child.sel);
              }
          }
      }
  }
  function h$1(sel, b, c) {
      let data = {};
      let children;
      let text;
      let i;
      if (c !== undefined) {
          if (b !== null) {
              data = b;
          }
          if (array(c)) {
              children = c;
          }
          else if (primitive(c)) {
              text = c.toString();
          }
          else if (c && c.sel) {
              children = [c];
          }
      }
      else if (b !== undefined && b !== null) {
          if (array(b)) {
              children = b;
          }
          else if (primitive(b)) {
              text = b.toString();
          }
          else if (b && b.sel) {
              children = [b];
          }
          else {
              data = b;
          }
      }
      if (children !== undefined) {
          for (i = 0; i < children.length; ++i) {
              if (primitive(children[i]))
                  children[i] = vnode(undefined, undefined, undefined, children[i], undefined);
          }
      }
      if (sel.startsWith("svg") &&
          (sel.length === 3 || sel[3] === "." || sel[3] === "#")) {
          addNS(data, children, sel);
      }
      return vnode(sel, data, children, text, undefined);
  }

  const xlinkNS = "http://www.w3.org/1999/xlink";
  const xmlnsNS = "http://www.w3.org/2000/xmlns/";
  const xmlNS = "http://www.w3.org/XML/1998/namespace";
  const colonChar = 58;
  const xChar = 120;
  const mChar = 109;
  function updateAttrs(oldVnode, vnode) {
      let key;
      const elm = vnode.elm;
      let oldAttrs = oldVnode.data.attrs;
      let attrs = vnode.data.attrs;
      if (!oldAttrs && !attrs)
          return;
      if (oldAttrs === attrs)
          return;
      oldAttrs = oldAttrs || {};
      attrs = attrs || {};
      // update modified attributes, add new attributes
      for (key in attrs) {
          const cur = attrs[key];
          const old = oldAttrs[key];
          if (old !== cur) {
              if (cur === true) {
                  elm.setAttribute(key, "");
              }
              else if (cur === false) {
                  elm.removeAttribute(key);
              }
              else {
                  if (key.charCodeAt(0) !== xChar) {
                      elm.setAttribute(key, cur);
                  }
                  else if (key.charCodeAt(3) === colonChar) {
                      // Assume xml namespace
                      elm.setAttributeNS(xmlNS, key, cur);
                  }
                  else if (key.charCodeAt(5) === colonChar) {
                      // Assume 'xmlns' or 'xlink' namespace
                      key.charCodeAt(1) === mChar
                          ? elm.setAttributeNS(xmlnsNS, key, cur)
                          : elm.setAttributeNS(xlinkNS, key, cur);
                  }
                  else {
                      elm.setAttribute(key, cur);
                  }
              }
          }
      }
      // remove removed attributes
      // use `in` operator since the previous `for` iteration uses it (.i.e. add even attributes with undefined value)
      // the other option is to remove all attributes with value == undefined
      for (key in oldAttrs) {
          if (!(key in attrs)) {
              elm.removeAttribute(key);
          }
      }
  }
  const attributesModule = {
      create: updateAttrs,
      update: updateAttrs
  };

  function updateClass(oldVnode, vnode) {
      let cur;
      let name;
      const elm = vnode.elm;
      let oldClass = oldVnode.data.class;
      let klass = vnode.data.class;
      if (!oldClass && !klass)
          return;
      if (oldClass === klass)
          return;
      oldClass = oldClass || {};
      klass = klass || {};
      for (name in oldClass) {
          if (oldClass[name] && !Object.prototype.hasOwnProperty.call(klass, name)) {
              // was `true` and now not provided
              elm.classList.remove(name);
          }
      }
      for (name in klass) {
          cur = klass[name];
          if (cur !== oldClass[name]) {
              elm.classList[cur ? "add" : "remove"](name);
          }
      }
  }
  const classModule = { create: updateClass, update: updateClass };

  const CAPS_REGEX = /[A-Z]/g;
  function updateDataset(oldVnode, vnode) {
      const elm = vnode.elm;
      let oldDataset = oldVnode.data.dataset;
      let dataset = vnode.data.dataset;
      let key;
      if (!oldDataset && !dataset)
          return;
      if (oldDataset === dataset)
          return;
      oldDataset = oldDataset || {};
      dataset = dataset || {};
      const d = elm.dataset;
      for (key in oldDataset) {
          if (!(key in dataset)) {
              if (d) {
                  if (key in d) {
                      delete d[key];
                  }
              }
              else {
                  elm.removeAttribute("data-" + key.replace(CAPS_REGEX, "-$&").toLowerCase());
              }
          }
      }
      for (key in dataset) {
          if (oldDataset[key] !== dataset[key]) {
              if (d) {
                  d[key] = dataset[key];
              }
              else {
                  elm.setAttribute("data-" + key.replace(CAPS_REGEX, "-$&").toLowerCase(), dataset[key]);
              }
          }
      }
  }
  const datasetModule = {
      create: updateDataset,
      update: updateDataset
  };

  function invokeHandler(handler, vnode, event) {
      if (typeof handler === "function") {
          // call function handler
          handler.call(vnode, event, vnode);
      }
      else if (typeof handler === "object") {
          // call multiple handlers
          for (let i = 0; i < handler.length; i++) {
              invokeHandler(handler[i], vnode, event);
          }
      }
  }
  function handleEvent(event, vnode) {
      const name = event.type;
      const on = vnode.data.on;
      // call event handler(s) if exists
      if (on && on[name]) {
          invokeHandler(on[name], vnode, event);
      }
  }
  function createListener() {
      return function handler(event) {
          handleEvent(event, handler.vnode);
      };
  }
  function updateEventListeners(oldVnode, vnode) {
      const oldOn = oldVnode.data.on;
      const oldListener = oldVnode.listener;
      const oldElm = oldVnode.elm;
      const on = vnode && vnode.data.on;
      const elm = (vnode && vnode.elm);
      let name;
      // optimization for reused immutable handlers
      if (oldOn === on) {
          return;
      }
      // remove existing listeners which no longer used
      if (oldOn && oldListener) {
          // if element changed or deleted we remove all existing listeners unconditionally
          if (!on) {
              for (name in oldOn) {
                  // remove listener if element was changed or existing listeners removed
                  oldElm.removeEventListener(name, oldListener, false);
              }
          }
          else {
              for (name in oldOn) {
                  // remove listener if existing listener removed
                  if (!on[name]) {
                      oldElm.removeEventListener(name, oldListener, false);
                  }
              }
          }
      }
      // add new listeners which has not already attached
      if (on) {
          // reuse existing listener or create new
          const listener = (vnode.listener =
              oldVnode.listener || createListener());
          // update vnode for listener
          listener.vnode = vnode;
          // if element changed or added we add all needed listeners unconditionally
          if (!oldOn) {
              for (name in on) {
                  // add listener if element was changed or new listeners added
                  elm.addEventListener(name, listener, false);
              }
          }
          else {
              for (name in on) {
                  // add listener if new listener added
                  if (!oldOn[name]) {
                      elm.addEventListener(name, listener, false);
                  }
              }
          }
      }
  }
  const eventListenersModule = {
      create: updateEventListeners,
      update: updateEventListeners,
      destroy: updateEventListeners
  };

  function updateProps(oldVnode, vnode) {
      let key;
      let cur;
      let old;
      const elm = vnode.elm;
      let oldProps = oldVnode.data.props;
      let props = vnode.data.props;
      if (!oldProps && !props)
          return;
      if (oldProps === props)
          return;
      oldProps = oldProps || {};
      props = props || {};
      for (key in props) {
          cur = props[key];
          old = oldProps[key];
          if (old !== cur && (key !== "value" || elm[key] !== cur)) {
              elm[key] = cur;
          }
      }
  }
  const propsModule = { create: updateProps, update: updateProps };

  // Binding `requestAnimationFrame` like this fixes a bug in IE/Edge. See #360 and #409.
  const raf = typeof (window === null || window === void 0 ? void 0 : window.requestAnimationFrame) === "function"
      ? window.requestAnimationFrame.bind(window)
      : setTimeout;
  const nextFrame = function (fn) {
      raf(function () {
          raf(fn);
      });
  };
  let reflowForced = false;
  function setNextFrame(obj, prop, val) {
      nextFrame(function () {
          obj[prop] = val;
      });
  }
  function updateStyle(oldVnode, vnode) {
      let cur;
      let name;
      const elm = vnode.elm;
      let oldStyle = oldVnode.data.style;
      let style = vnode.data.style;
      if (!oldStyle && !style)
          return;
      if (oldStyle === style)
          return;
      oldStyle = oldStyle || {};
      style = style || {};
      const oldHasDel = "delayed" in oldStyle;
      for (name in oldStyle) {
          if (!(name in style)) {
              if (name[0] === "-" && name[1] === "-") {
                  elm.style.removeProperty(name);
              }
              else {
                  elm.style[name] = "";
              }
          }
      }
      for (name in style) {
          cur = style[name];
          if (name === "delayed" && style.delayed) {
              for (const name2 in style.delayed) {
                  cur = style.delayed[name2];
                  if (!oldHasDel || cur !== oldStyle.delayed[name2]) {
                      setNextFrame(elm.style, name2, cur);
                  }
              }
          }
          else if (name !== "remove" && cur !== oldStyle[name]) {
              if (name[0] === "-" && name[1] === "-") {
                  elm.style.setProperty(name, cur);
              }
              else {
                  elm.style[name] = cur;
              }
          }
      }
  }
  function applyDestroyStyle(vnode) {
      let style;
      let name;
      const elm = vnode.elm;
      const s = vnode.data.style;
      if (!s || !(style = s.destroy))
          return;
      for (name in style) {
          elm.style[name] = style[name];
      }
  }
  function applyRemoveStyle(vnode, rm) {
      const s = vnode.data.style;
      if (!s || !s.remove) {
          rm();
          return;
      }
      if (!reflowForced) {
          // eslint-disable-next-line @typescript-eslint/no-unused-expressions
          vnode.elm.offsetLeft;
          reflowForced = true;
      }
      let name;
      const elm = vnode.elm;
      let i = 0;
      const style = s.remove;
      let amount = 0;
      const applied = [];
      for (name in style) {
          applied.push(name);
          elm.style[name] = style[name];
      }
      const compStyle = getComputedStyle(elm);
      const props = compStyle["transition-property"].split(", ");
      for (; i < props.length; ++i) {
          if (applied.indexOf(props[i]) !== -1)
              amount++;
      }
      elm.addEventListener("transitionend", function (ev) {
          if (ev.target === elm)
              --amount;
          if (amount === 0)
              rm();
      });
  }
  function forceReflow() {
      reflowForced = false;
  }
  const styleModule = {
      pre: forceReflow,
      create: updateStyle,
      update: updateStyle,
      destroy: applyDestroyStyle,
      remove: applyRemoveStyle
  };

  function flattenAndFilter(children, flattened) {
      for (const child of children) {
          // filter out falsey children, except 0 since zero can be a valid value e.g inside a chart
          if (child !== undefined &&
              child !== null &&
              child !== false &&
              child !== "") {
              if (Array.isArray(child)) {
                  flattenAndFilter(child, flattened);
              }
              else if (typeof child === "string" ||
                  typeof child === "number" ||
                  typeof child === "boolean") {
                  flattened.push(vnode(undefined, undefined, undefined, String(child), undefined));
              }
              else {
                  flattened.push(child);
              }
          }
      }
      return flattened;
  }
  /**
   * jsx/tsx compatible factory function
   * see: https://www.typescriptlang.org/docs/handbook/jsx.html#factory-functions
   */
  function jsx(tag, data, ...children) {
      const flatChildren = flattenAndFilter(children, []);
      if (typeof tag === "function") {
          // tag is a function component
          return tag(data, flatChildren);
      }
      else {
          if (flatChildren.length === 1 &&
              !flatChildren[0].sel &&
              flatChildren[0].text) {
              // only child is a simple text node, pass as text for a simpler vtree
              return h$1(tag, data, flatChildren[0].text);
          }
          else {
              return h$1(tag, data, flatChildren);
          }
      }
  }

  /**
   * @description formats entry
   * @author wangfupeng
   */
  // 存储：处理文本样式的函数，如 b u color 等
  var RENDER_STYLE_HANDLER_LIST = [];
  /**
   * 注册处理文本样式的函数
   * @param fn 处理文本样式的函数
   */
  function registerStyleHandler(fn) {
      RENDER_STYLE_HANDLER_LIST.push(fn);
  }
  // 注册 render element 配置
  var RENDER_ELEM_CONF = {};
  /**
   * 注册 render elem 函数
   * @param conf { type, renderElem } ，type 即 node.type
   */
  function registerRenderElemConf(conf) {
      var type = conf.type, renderElem = conf.renderElem;
      var key = type || '';
      // 如果 key 重复了，就后者覆盖前者
      RENDER_ELEM_CONF[key] = renderElem;
  }

  /**
   * @description 获取 elem render 函数
   * @author wangfupeng
   */
  /**
   * 默认的 render elem
   * @param elemNode elem
   * @param editor editor
   * @param children children vnode
   * @returns vnode
   */
  function defaultRender(elemNode, children, editor) {
      var Tag = editor.isInline(elemNode) ? 'span' : 'div';
      var vnode = jsx(Tag, null, children);
      return vnode;
  }
  /**
   * 根据 elemNode.type 获取 renderElement 函数
   * @param type elemNode.type
   */
  function getRenderElem(type) {
      var fn = RENDER_ELEM_CONF[type];
      return fn || defaultRender;
  }

  /**
   * @description 添加文本相关的样式
   * @author wangfupeng
   */
  /**
   * 渲染样式
   * @param elem slate elem node
   * @param vnode elem Vnode
   */
  function renderStyle$8(elem, vnode) {
      var newVnode = vnode;
      RENDER_STYLE_HANDLER_LIST.forEach(function (styleHandler) {
          newVnode = styleHandler(elem, vnode);
      });
      return newVnode;
  }

  /**
   * @description render element node
   * @author wangfupeng
   */
  function renderElement(elemNode, editor) {
      var key = DomEditor.findKey(editor, elemNode);
      // const readOnly = editor.isDisabled()
      var isInline = editor.isInline(elemNode);
      var isVoid = distExports$1.Editor.isVoid(editor, elemNode);
      var domId = genElemId$1(elemNode.type, key.id);
      var attrs = {
          id: domId,
          key: key.id,
          'data-slate-node': 'element',
          'data-slate-inline': isInline,
      };
      // 根据 type 生成 vnode 的函数
      var type = elemNode.type, _a = elemNode.children, children = _a === void 0 ? [] : _a;
      var renderElem = getRenderElem(type);
      var childrenVnode;
      if (isVoid) {
          childrenVnode = null; // void 节点 render elem 时不传入 children
      }
      else {
          childrenVnode = children.map(function (child, index) {
              return node2Vnode(child, index, elemNode, editor);
          });
      }
      // 创建 vnode
      var vnode = renderElem(elemNode, childrenVnode, editor);
      // void node 要特殊处理
      if (isVoid) {
          attrs['data-slate-void'] = true;
          // 如果这里设置 contentEditable = false ，那图片就无法删除了 ？？？
          // if (!readOnly && isInline) {
          //     attrs.contentEditable = false
          // }
          var Tag = isInline ? 'span' : 'div';
          var _b = __read(distExports$1.Node.texts(elemNode), 1), _c = __read(_b[0], 1), text = _c[0];
          var textVnode = node2Vnode(text, 0, elemNode, editor);
          var textWrapperVnode = (jsx(Tag, { "data-slate-spacer": true, style: {
                  height: '0',
                  color: 'transparent',
                  outline: 'none',
                  position: 'absolute',
              } }, textVnode));
          // 重写 vnode
          vnode = (
          // 设置 position: relative，保证 absolute 的 textWrapperVnode 不乱跑
          jsx(Tag, { style: { position: 'relative' } },
              vnode,
              textWrapperVnode));
          // 记录 text 相关 weakMap
          NODE_TO_INDEX.set(text, 0);
          NODE_TO_PARENT.set(text, elemNode);
      }
      // 添加 element 属性
      if (vnode.data == null) {
          vnode.data = {};
      }
      Object.assign(vnode.data, attrs);
      // 添加文本相关的样式，如 text-align
      if (!isVoid && !isInline) {
          // 非 void + 非 inline
          vnode = renderStyle$8(elemNode, vnode);
      }
      // 更新 element 相关的 weakMap
      promiseResolveThen(function () {
          // 异步，否则拿不到 DOM 节点
          var dom = getElementById(domId);
          if (dom == null) {
              return;
          }
          KEY_TO_ELEMENT.set(key, dom);
          NODE_TO_ELEMENT.set(elemNode, dom);
          ELEMENT_TO_NODE.set(dom, elemNode);
      });
      return vnode;
  }

  /**
   * @description 生成 text vnode
   * @author wangfupeng
   */
  function str(text, isTrailing) {
      if (isTrailing === void 0) { isTrailing = false; }
      return jsx("span", { "data-slate-string": true }, isTrailing ? text + '\n' : text);
  }
  function zeroWidthStr(length, isLineBreak) {
      if (length === void 0) { length = 0; }
      if (isLineBreak === void 0) { isLineBreak = false; }
      return (jsx("span", { "data-slate-zero-width": isLineBreak ? 'n' : 'z', "data-slate-length": length },
          '\uFEFF',
          isLineBreak ? jsx("br", null) : null));
  }
  function genTextVnode(leafNode, isLast, textNode, parent, editor) {
      if (isLast === void 0) { isLast = false; }
      var text = leafNode.text;
      var path = DomEditor.findPath(editor, textNode);
      var parentPath = distExports$1.Path.parent(path);
      if (distExports$1.Editor.isEditor(parent)) {
          throw new Error("Text node ".concat(JSON.stringify(textNode), " parent is Editor"));
      }
      // COMPAT: Render text inside void nodes with a zero-width space.
      // So the node can contain selection but the text is not visible.
      if (editor.isVoid(parent)) {
          return zeroWidthStr(distExports$1.Node.string(parent).length);
      }
      // COMPAT: If this is the last text node in an empty block, render a zero-
      // width space that will convert into a line break when copying and pasting
      // to support expected plain text.
      if (text === '' &&
          parent.children[parent.children.length - 1] === textNode &&
          !editor.isInline(parent) &&
          distExports$1.Editor.string(editor, parentPath) === '') {
          return zeroWidthStr(0, true);
      }
      // COMPAT: If the text is empty, it's because it's on the edge of an inline
      // node, so we render a zero-width space so that the selection can be
      // inserted next to it still.
      if (text === '') {
          return zeroWidthStr();
      }
      // COMPAT: Browsers will collapse trailing new lines at the end of blocks,
      // so we need to add an extra trailing new lines to prevent that.
      if (isLast && text.slice(-1) === '\n') {
          return str(text, true);
      }
      return str(text);
  }

  /**
   * @description text 样式
   * @author wangfupeng
   */
  /**
   * 给字符串增加样式
   * @param leafNode slate text leaf node
   * @param textVnode textVnode
   */
  function addTextVnodeStyle(leafNode, textVnode) {
      var newTextVnode = textVnode;
      RENDER_STYLE_HANDLER_LIST.forEach(function (styleHandler) {
          newTextVnode = styleHandler(leafNode, newTextVnode);
      });
      return newTextVnode;
  }

  /**
   * @description render text node
   * @author wangfupeng
   */
  function renderText(textNode, parent, editor) {
      if (textNode.text == null)
          throw new Error("Current node is not slate Text ".concat(JSON.stringify(textNode)));
      var key = DomEditor.findKey(editor, textNode);
      // 根据 decorate 将 text 拆分为多个叶子节点 text[]
      var decorate = editor.getConfig().decorate;
      if (decorate == null)
          throw new Error("Can not get config.decorate");
      var path = DomEditor.findPath(editor, textNode);
      var ds = decorate([textNode, path]);
      var leaves = distExports$1.Text.decorations(textNode, ds);
      // 生成 leaves vnode
      var leavesVnode = leaves.map(function (leafNode, index) {
          // 文字和样式
          var isLast = index === leaves.length - 1;
          var strVnode = genTextVnode(leafNode, isLast, textNode, parent, editor);
          strVnode = addTextVnodeStyle(leafNode, strVnode);
          // 生成每一个 leaf 节点
          return jsx("span", { "data-slate-leaf": true }, strVnode);
      });
      // 生成 text vnode
      var textId = genTextId(key.id);
      var vnode = (jsx("span", { "data-slate-node": "text", id: textId, key: key.id }, leavesVnode /* 一个 text 可能包含多个 leaf */));
      // 更新 weak-map
      promiseResolveThen(function () {
          // 异步，否则拿不到 DOM
          var dom = getElementById(textId);
          if (dom == null)
              return;
          KEY_TO_ELEMENT.set(key, dom);
          NODE_TO_ELEMENT.set(textNode, dom);
          ELEMENT_TO_NODE.set(dom, textNode);
      });
      return vnode;
  }

  /**
   * @description slate node to vnode
   * @author wangfupeng
   */
  /**
   * 根据 slate node 生成 snabbdom vnode
   * @param node node
   * @param index node index in parent.children
   * @param parent parent node
   * @param editor editor
   */
  function node2Vnode(node, index, parent, editor) {
      // 设置相关 weakMap 信息
      NODE_TO_INDEX.set(node, index);
      NODE_TO_PARENT.set(node, parent);
      var vnode;
      if (distExports$1.Element.isElement(node)) {
          // element
          vnode = renderElement(node, editor);
      }
      else {
          // text
          vnode = renderText(node, parent, editor);
      }
      return vnode;
  }

  /**
   * lodash (Custom Build) <https://lodash.com/>
   * Build: `lodash modularize exports="npm" -o ./`
   * Copyright jQuery Foundation and other contributors <https://jquery.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */

  var lodash_camelcase;
  var hasRequiredLodash_camelcase;

  function requireLodash_camelcase () {
  	if (hasRequiredLodash_camelcase) return lodash_camelcase;
  	hasRequiredLodash_camelcase = 1;

  	/** `Object#toString` result references. */
  	var symbolTag = '[object Symbol]';

  	/** Used to match words composed of alphanumeric characters. */
  	var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  	/** Used to match Latin Unicode letters (excluding mathematical operators). */
  	var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  	/** Used to compose unicode character classes. */
  	var rsAstralRange = '\\ud800-\\udfff',
  	    rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
  	    rsComboSymbolsRange = '\\u20d0-\\u20f0',
  	    rsDingbatRange = '\\u2700-\\u27bf',
  	    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
  	    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
  	    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
  	    rsPunctuationRange = '\\u2000-\\u206f',
  	    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
  	    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
  	    rsVarRange = '\\ufe0e\\ufe0f',
  	    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  	/** Used to compose unicode capture groups. */
  	var rsApos = "['\u2019]",
  	    rsAstral = '[' + rsAstralRange + ']',
  	    rsBreak = '[' + rsBreakRange + ']',
  	    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
  	    rsDigits = '\\d+',
  	    rsDingbat = '[' + rsDingbatRange + ']',
  	    rsLower = '[' + rsLowerRange + ']',
  	    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
  	    rsFitz = '\\ud83c[\\udffb-\\udfff]',
  	    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
  	    rsNonAstral = '[^' + rsAstralRange + ']',
  	    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
  	    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
  	    rsUpper = '[' + rsUpperRange + ']',
  	    rsZWJ = '\\u200d';

  	/** Used to compose unicode regexes. */
  	var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
  	    rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
  	    rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
  	    rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
  	    reOptMod = rsModifier + '?',
  	    rsOptVar = '[' + rsVarRange + ']?',
  	    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
  	    rsSeq = rsOptVar + reOptMod + rsOptJoin,
  	    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
  	    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  	/** Used to match apostrophes. */
  	var reApos = RegExp(rsApos, 'g');

  	/**
  	 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
  	 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
  	 */
  	var reComboMark = RegExp(rsCombo, 'g');

  	/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  	var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  	/** Used to match complex or compound words. */
  	var reUnicodeWord = RegExp([
  	  rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
  	  rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
  	  rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,
  	  rsUpper + '+' + rsOptUpperContr,
  	  rsDigits,
  	  rsEmoji
  	].join('|'), 'g');

  	/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  	var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

  	/** Used to detect strings that need a more robust regexp to match words. */
  	var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  	/** Used to map Latin Unicode letters to basic Latin letters. */
  	var deburredLetters = {
  	  // Latin-1 Supplement block.
  	  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
  	  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
  	  '\xc7': 'C',  '\xe7': 'c',
  	  '\xd0': 'D',  '\xf0': 'd',
  	  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
  	  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
  	  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
  	  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
  	  '\xd1': 'N',  '\xf1': 'n',
  	  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
  	  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
  	  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
  	  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
  	  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
  	  '\xc6': 'Ae', '\xe6': 'ae',
  	  '\xde': 'Th', '\xfe': 'th',
  	  '\xdf': 'ss',
  	  // Latin Extended-A block.
  	  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
  	  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
  	  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
  	  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
  	  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
  	  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
  	  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
  	  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
  	  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
  	  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
  	  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
  	  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
  	  '\u0134': 'J',  '\u0135': 'j',
  	  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
  	  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
  	  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
  	  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
  	  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
  	  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
  	  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
  	  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
  	  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
  	  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
  	  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
  	  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
  	  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
  	  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
  	  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
  	  '\u0174': 'W',  '\u0175': 'w',
  	  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
  	  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
  	  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
  	  '\u0132': 'IJ', '\u0133': 'ij',
  	  '\u0152': 'Oe', '\u0153': 'oe',
  	  '\u0149': "'n", '\u017f': 'ss'
  	};

  	/** Detect free variable `global` from Node.js. */
  	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  	/** Detect free variable `self`. */
  	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  	/** Used as a reference to the global object. */
  	var root = freeGlobal || freeSelf || Function('return this')();

  	/**
  	 * A specialized version of `_.reduce` for arrays without support for
  	 * iteratee shorthands.
  	 *
  	 * @private
  	 * @param {Array} [array] The array to iterate over.
  	 * @param {Function} iteratee The function invoked per iteration.
  	 * @param {*} [accumulator] The initial value.
  	 * @param {boolean} [initAccum] Specify using the first element of `array` as
  	 *  the initial value.
  	 * @returns {*} Returns the accumulated value.
  	 */
  	function arrayReduce(array, iteratee, accumulator, initAccum) {
  	  var index = -1,
  	      length = array ? array.length : 0;
  	  while (++index < length) {
  	    accumulator = iteratee(accumulator, array[index], index, array);
  	  }
  	  return accumulator;
  	}

  	/**
  	 * Converts an ASCII `string` to an array.
  	 *
  	 * @private
  	 * @param {string} string The string to convert.
  	 * @returns {Array} Returns the converted array.
  	 */
  	function asciiToArray(string) {
  	  return string.split('');
  	}

  	/**
  	 * Splits an ASCII `string` into an array of its words.
  	 *
  	 * @private
  	 * @param {string} The string to inspect.
  	 * @returns {Array} Returns the words of `string`.
  	 */
  	function asciiWords(string) {
  	  return string.match(reAsciiWord) || [];
  	}

  	/**
  	 * The base implementation of `_.propertyOf` without support for deep paths.
  	 *
  	 * @private
  	 * @param {Object} object The object to query.
  	 * @returns {Function} Returns the new accessor function.
  	 */
  	function basePropertyOf(object) {
  	  return function(key) {
  	    return object == null ? undefined : object[key];
  	  };
  	}

  	/**
  	 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
  	 * letters to basic Latin letters.
  	 *
  	 * @private
  	 * @param {string} letter The matched letter to deburr.
  	 * @returns {string} Returns the deburred letter.
  	 */
  	var deburrLetter = basePropertyOf(deburredLetters);

  	/**
  	 * Checks if `string` contains Unicode symbols.
  	 *
  	 * @private
  	 * @param {string} string The string to inspect.
  	 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
  	 */
  	function hasUnicode(string) {
  	  return reHasUnicode.test(string);
  	}

  	/**
  	 * Checks if `string` contains a word composed of Unicode symbols.
  	 *
  	 * @private
  	 * @param {string} string The string to inspect.
  	 * @returns {boolean} Returns `true` if a word is found, else `false`.
  	 */
  	function hasUnicodeWord(string) {
  	  return reHasUnicodeWord.test(string);
  	}

  	/**
  	 * Converts `string` to an array.
  	 *
  	 * @private
  	 * @param {string} string The string to convert.
  	 * @returns {Array} Returns the converted array.
  	 */
  	function stringToArray(string) {
  	  return hasUnicode(string)
  	    ? unicodeToArray(string)
  	    : asciiToArray(string);
  	}

  	/**
  	 * Converts a Unicode `string` to an array.
  	 *
  	 * @private
  	 * @param {string} string The string to convert.
  	 * @returns {Array} Returns the converted array.
  	 */
  	function unicodeToArray(string) {
  	  return string.match(reUnicode) || [];
  	}

  	/**
  	 * Splits a Unicode `string` into an array of its words.
  	 *
  	 * @private
  	 * @param {string} The string to inspect.
  	 * @returns {Array} Returns the words of `string`.
  	 */
  	function unicodeWords(string) {
  	  return string.match(reUnicodeWord) || [];
  	}

  	/** Used for built-in method references. */
  	var objectProto = Object.prototype;

  	/**
  	 * Used to resolve the
  	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
  	 * of values.
  	 */
  	var objectToString = objectProto.toString;

  	/** Built-in value references. */
  	var Symbol = root.Symbol;

  	/** Used to convert symbols to primitives and strings. */
  	var symbolProto = Symbol ? Symbol.prototype : undefined,
  	    symbolToString = symbolProto ? symbolProto.toString : undefined;

  	/**
  	 * The base implementation of `_.slice` without an iteratee call guard.
  	 *
  	 * @private
  	 * @param {Array} array The array to slice.
  	 * @param {number} [start=0] The start position.
  	 * @param {number} [end=array.length] The end position.
  	 * @returns {Array} Returns the slice of `array`.
  	 */
  	function baseSlice(array, start, end) {
  	  var index = -1,
  	      length = array.length;

  	  if (start < 0) {
  	    start = -start > length ? 0 : (length + start);
  	  }
  	  end = end > length ? length : end;
  	  if (end < 0) {
  	    end += length;
  	  }
  	  length = start > end ? 0 : ((end - start) >>> 0);
  	  start >>>= 0;

  	  var result = Array(length);
  	  while (++index < length) {
  	    result[index] = array[index + start];
  	  }
  	  return result;
  	}

  	/**
  	 * The base implementation of `_.toString` which doesn't convert nullish
  	 * values to empty strings.
  	 *
  	 * @private
  	 * @param {*} value The value to process.
  	 * @returns {string} Returns the string.
  	 */
  	function baseToString(value) {
  	  // Exit early for strings to avoid a performance hit in some environments.
  	  if (typeof value == 'string') {
  	    return value;
  	  }
  	  if (isSymbol(value)) {
  	    return symbolToString ? symbolToString.call(value) : '';
  	  }
  	  var result = (value + '');
  	  return (result == '0' && (1 / value) == -Infinity) ? '-0' : result;
  	}

  	/**
  	 * Casts `array` to a slice if it's needed.
  	 *
  	 * @private
  	 * @param {Array} array The array to inspect.
  	 * @param {number} start The start position.
  	 * @param {number} [end=array.length] The end position.
  	 * @returns {Array} Returns the cast slice.
  	 */
  	function castSlice(array, start, end) {
  	  var length = array.length;
  	  end = end === undefined ? length : end;
  	  return (!start && end >= length) ? array : baseSlice(array, start, end);
  	}

  	/**
  	 * Creates a function like `_.lowerFirst`.
  	 *
  	 * @private
  	 * @param {string} methodName The name of the `String` case method to use.
  	 * @returns {Function} Returns the new case function.
  	 */
  	function createCaseFirst(methodName) {
  	  return function(string) {
  	    string = toString(string);

  	    var strSymbols = hasUnicode(string)
  	      ? stringToArray(string)
  	      : undefined;

  	    var chr = strSymbols
  	      ? strSymbols[0]
  	      : string.charAt(0);

  	    var trailing = strSymbols
  	      ? castSlice(strSymbols, 1).join('')
  	      : string.slice(1);

  	    return chr[methodName]() + trailing;
  	  };
  	}

  	/**
  	 * Creates a function like `_.camelCase`.
  	 *
  	 * @private
  	 * @param {Function} callback The function to combine each word.
  	 * @returns {Function} Returns the new compounder function.
  	 */
  	function createCompounder(callback) {
  	  return function(string) {
  	    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
  	  };
  	}

  	/**
  	 * Checks if `value` is object-like. A value is object-like if it's not `null`
  	 * and has a `typeof` result of "object".
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
  	 * @example
  	 *
  	 * _.isObjectLike({});
  	 * // => true
  	 *
  	 * _.isObjectLike([1, 2, 3]);
  	 * // => true
  	 *
  	 * _.isObjectLike(_.noop);
  	 * // => false
  	 *
  	 * _.isObjectLike(null);
  	 * // => false
  	 */
  	function isObjectLike(value) {
  	  return !!value && typeof value == 'object';
  	}

  	/**
  	 * Checks if `value` is classified as a `Symbol` primitive or object.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to check.
  	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
  	 * @example
  	 *
  	 * _.isSymbol(Symbol.iterator);
  	 * // => true
  	 *
  	 * _.isSymbol('abc');
  	 * // => false
  	 */
  	function isSymbol(value) {
  	  return typeof value == 'symbol' ||
  	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
  	}

  	/**
  	 * Converts `value` to a string. An empty string is returned for `null`
  	 * and `undefined` values. The sign of `-0` is preserved.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category Lang
  	 * @param {*} value The value to process.
  	 * @returns {string} Returns the string.
  	 * @example
  	 *
  	 * _.toString(null);
  	 * // => ''
  	 *
  	 * _.toString(-0);
  	 * // => '-0'
  	 *
  	 * _.toString([1, 2, 3]);
  	 * // => '1,2,3'
  	 */
  	function toString(value) {
  	  return value == null ? '' : baseToString(value);
  	}

  	/**
  	 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 3.0.0
  	 * @category String
  	 * @param {string} [string=''] The string to convert.
  	 * @returns {string} Returns the camel cased string.
  	 * @example
  	 *
  	 * _.camelCase('Foo Bar');
  	 * // => 'fooBar'
  	 *
  	 * _.camelCase('--foo-bar--');
  	 * // => 'fooBar'
  	 *
  	 * _.camelCase('__FOO_BAR__');
  	 * // => 'fooBar'
  	 */
  	var camelCase = createCompounder(function(result, word, index) {
  	  word = word.toLowerCase();
  	  return result + (index ? capitalize(word) : word);
  	});

  	/**
  	 * Converts the first character of `string` to upper case and the remaining
  	 * to lower case.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 3.0.0
  	 * @category String
  	 * @param {string} [string=''] The string to capitalize.
  	 * @returns {string} Returns the capitalized string.
  	 * @example
  	 *
  	 * _.capitalize('FRED');
  	 * // => 'Fred'
  	 */
  	function capitalize(string) {
  	  return upperFirst(toString(string).toLowerCase());
  	}

  	/**
  	 * Deburrs `string` by converting
  	 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
  	 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
  	 * letters to basic Latin letters and removing
  	 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 3.0.0
  	 * @category String
  	 * @param {string} [string=''] The string to deburr.
  	 * @returns {string} Returns the deburred string.
  	 * @example
  	 *
  	 * _.deburr('déjà vu');
  	 * // => 'deja vu'
  	 */
  	function deburr(string) {
  	  string = toString(string);
  	  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
  	}

  	/**
  	 * Converts the first character of `string` to upper case.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 4.0.0
  	 * @category String
  	 * @param {string} [string=''] The string to convert.
  	 * @returns {string} Returns the converted string.
  	 * @example
  	 *
  	 * _.upperFirst('fred');
  	 * // => 'Fred'
  	 *
  	 * _.upperFirst('FRED');
  	 * // => 'FRED'
  	 */
  	var upperFirst = createCaseFirst('toUpperCase');

  	/**
  	 * Splits `string` into an array of its words.
  	 *
  	 * @static
  	 * @memberOf _
  	 * @since 3.0.0
  	 * @category String
  	 * @param {string} [string=''] The string to inspect.
  	 * @param {RegExp|string} [pattern] The pattern to match words.
  	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
  	 * @returns {Array} Returns the words of `string`.
  	 * @example
  	 *
  	 * _.words('fred, barney, & pebbles');
  	 * // => ['fred', 'barney', 'pebbles']
  	 *
  	 * _.words('fred, barney, & pebbles', /[^, ]+/g);
  	 * // => ['fred', 'barney', '&', 'pebbles']
  	 */
  	function words(string, pattern, guard) {
  	  string = toString(string);
  	  pattern = pattern;

  	  if (pattern === undefined) {
  	    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
  	  }
  	  return string.match(pattern) || [];
  	}

  	lodash_camelcase = camelCase;
  	return lodash_camelcase;
  }

  var lodash_camelcaseExports = requireLodash_camelcase();
  var camelCase = /*@__PURE__*/getDefaultExportFromCjs(lodash_camelcaseExports);

  /**
   * @description vdom 相关方法
   * @author wangfupeng
   */
  /**
   * 创建 snabbdom patch
   * @returns snabbdom patch 函数
   */
  function genPatchFn() {
      var patch = init([
          // Init patch function with chosen modules
          classModule, // makes it easy to toggle classes
          propsModule, // for setting properties on DOM elements
          styleModule, // handles styling on elements with support for animations
          datasetModule,
          eventListenersModule, // attaches event listeners
          attributesModule,
      ]);
      return patch;
  }
  // vnode.data 保留属性，参考 snabbdom VNodeData
  var DATA_PRESERVE_KEYS = ['props', 'attrs', 'style', 'dataset', 'on', 'hook'];
  /**
   * 整理 vnode.data ，将暴露出来的零散属性（如 id className data-xxx）放在 data.props 或 data.dataset
   * @param vnode vnode
   */
  function normalizeVnodeData(vnode) {
      var _a = vnode.data, data = _a === void 0 ? {} : _a, _b = vnode.children, children = _b === void 0 ? [] : _b;
      var dataKeys = Object.keys(data);
      dataKeys.forEach(function (key) {
          var _a, _b;
          var value = data[key];
          // 赋值 key
          if (key === 'key') {
              vnode.key = value;
              return;
          }
          // 忽略 data 保留属性
          if (DATA_PRESERVE_KEYS.includes(key))
              return;
          // dataset
          if (key.startsWith('data-')) {
              var datasetKey = key.slice(5); // 截取掉最前面的 'data-'
              datasetKey = camelCase(datasetKey); // 转为驼峰写法
              // 存储到 data.dataset
              addVnodeDataset(vnode, (_a = {}, _a[datasetKey] = value, _a));
              delete data[key]; // 删掉原有的属性
              return;
          }
          // 其他的，都算 props ，存储到 props
          addVnodeProp(vnode, (_b = {}, _b[key] = value, _b));
          delete data[key]; // 删掉原有的属性
      });
      // 遍历 children
      if (children.length > 0) {
          children.forEach(function (child) {
              if (typeof child === 'string')
                  return;
              normalizeVnodeData(child);
          });
      }
  }
  /**
   * 给 vnode 添加 prop
   * @param vnode vnode
   * @param newProp { key: val }
   */
  function addVnodeProp(vnode, newProp) {
      if (vnode.data == null)
          vnode.data = {};
      var data = vnode.data;
      if (data.props == null)
          data.props = {};
      Object.assign(data.props, newProp);
  }
  /**
   * 给 vnode 添加 dataset
   * @param vnode vnode
   * @param newDataset { key: val }
   */
  function addVnodeDataset(vnode, newDataset) {
      if (vnode.data == null)
          vnode.data = {};
      var data = vnode.data;
      if (data.dataset == null)
          data.dataset = {};
      Object.assign(data.dataset, newDataset);
  }

  /**
   * @description patch textarea view
   * @author wangfupeng
   */
  function genElemId(id) {
      return "w-e-textarea-".concat(id);
  }
  /**
   * 生成编辑区域节点的 vnode
   * @param elemId elemId
   * @param readOnly readOnly
   */
  function genRootVnode(elemId, readOnly) {
      if (readOnly === void 0) { readOnly = false; }
      return h$1("div#".concat(elemId), {
          props: {
              contentEditable: !readOnly,
          },
      });
      // 其他属性在 genRootElem 中定，这里不用重复写
  }
  /**
   * 生成编辑区域的 elem
   * @param elemId elemId
   * @param readOnly readOnly
   */
  function genRootElem(elemId, _readOnly) {
      var $elem = $$1("<div\n        id=\"".concat(elemId, "\"\n        data-slate-editor\n        data-slate-node=\"value\"\n        suppressContentEditableWarning\n        role=\"textarea\"\n        spellCheck=\"true\"\n        autoCorrect=\"true\"\n        autoCapitalize=\"true\"\n    ></div>"));
      // role="textarea" - 增强语义，div 语义太弱
      return $elem;
  }
  /**
   * 获取 editor.children 渲染 DOM
   * @param textarea textarea
   * @param editor editor
   */
  function updateView(textarea, editor) {
      var $scroll = textarea.$scroll;
      var elemId = genElemId(textarea.id);
      var _a = editor.getConfig(), readOnly = _a.readOnly, autoFocus = _a.autoFocus;
      // 生成 newVnode
      var newVnode = genRootVnode(elemId, readOnly);
      var content = editor.children || [];
      newVnode.children = content.map(function (node, i) {
          if (NODE_TO_VNODE.has(node)) {
              var cachedValue = NODE_TO_VNODE.get(node);
              if (cachedValue) {
                  var _a = __read(cachedValue, 2), index = _a[0], cached = _a[1];
                  if (cached) {
                      if (index !== i) {
                          // 设置相关 weakMap 信息
                          NODE_TO_INDEX.set(node, i);
                          NODE_TO_VNODE.set(node, [i, cached]);
                      }
                      return cached;
                  }
              }
          }
          var vnode = node2Vnode(node, i, editor, editor);
          normalizeVnodeData(vnode); // 整理 vnode.data 以符合 snabbdom 的要求
          var _b = editor.getConfig().skipCacheTypes, skipCacheTypes = _b === void 0 ? ['list-item'] : _b;
          if (distExports$1.Element.isElement(node) && skipCacheTypes.includes(node.type)) {
              // 如果是跳过缓存的类型，则不缓存
              return vnode;
          }
          NODE_TO_VNODE.set(node, [i, vnode]);
          return vnode;
      });
      var textareaElem;
      var isFirstPatch = IS_FIRST_PATCH.get(textarea);
      if (isFirstPatch == null) {
          isFirstPatch = true;
      } // 尚未赋值，也是第一次
      if (isFirstPatch) {
          // 第一次 patch ，先生成 elem
          var $textArea = genRootElem(elemId);
          $scroll.append($textArea);
          textarea.$textArea = $textArea; // 存储下编辑区域的 DOM 节点
          textareaElem = $textArea[0];
          // 再生成 patch 函数，并执行
          var patchFn = genPatchFn();
          patchFn(textareaElem, newVnode);
          // 存储相关信息
          IS_FIRST_PATCH.set(textarea, false); // 不再是第一次 patch
          TEXTAREA_TO_PATCH_FN.set(textarea, patchFn); // 存储 patch 函数
      }
      else {
          // 不是第一次 patch
          var curVnode = TEXTAREA_TO_VNODE.get(textarea);
          var patchFn = TEXTAREA_TO_PATCH_FN.get(textarea);
          if (curVnode == null || patchFn == null) {
              return;
          }
          textareaElem = curVnode.elm;
          patchFn(curVnode, newVnode);
      }
      if (textareaElem == null) {
          textareaElem = getElementById(elemId);
          // 通过 getElementById 获取的有可能是 null （销毁、重建时，可能会发生这种情况）
          if (textareaElem == null) {
              return;
          }
      }
      // focus
      var isFocused;
      if (isFirstPatch) {
          // 初次渲染
          isFocused = autoFocus;
      }
      else {
          // 非初次渲染
          isFocused = editor.isFocused();
      }
      if (isFocused) {
          textareaElem.focus({
              preventScroll: true, // 必须添加 preventScroll 选项，否则弹窗或者编辑器失焦会导致编辑区域自动滚动到顶部
          });
      }
      // 存储相关信息
      if (isFirstPatch) {
          var window_1 = getDefaultView(textareaElem);
          window_1 && EDITOR_TO_WINDOW.set(editor, window_1);
      }
      EDITOR_TO_ELEMENT.set(editor, textareaElem); // 存储 editor -> elem 对应关系
      NODE_TO_ELEMENT.set(editor, textareaElem);
      ELEMENT_TO_NODE.set(textareaElem, editor);
      TEXTAREA_TO_VNODE.set(textarea, newVnode); // 存储 vnode
  }

  /**
   * @description text-area class
   * @author wangfupeng
   */
  var ID = 1;
  var TextArea = /** @class */ (function () {
      function TextArea(boxSelector) {
          var _this = this;
          // eslint-disable-next-line
          this.id = ID++;
          this.$textArea = null;
          this.$progressBar = $$1('<div class="w-e-progress-bar"></div>');
          this.$maxLengthInfo = $$1('<div class="w-e-max-length-info"></div>');
          this.isComposing = false;
          this.isUpdatingSelection = false;
          this.isDraggingInternally = false;
          this.latestElement = null;
          this.showPlaceholder = false;
          this.$placeholder = null;
          this.latestEditorSelection = null;
          this.onDOMSelectionChange = throttle(function () {
              var editor = _this.editorInstance;
              DOMSelectionToEditor(_this, editor);
          }, 100);
          // @ts-ignore 初始化 dom
          var $box = $$1(boxSelector);
          if ($box.length === 0) {
              throw new Error("Cannot find textarea DOM by selector '".concat(boxSelector, "'"));
          }
          this.$box = $box;
          var $container = $$1('<div class="w-e-text-container"></div>');
          $container.append(this.$progressBar); // 进度条
          $container.append(this.$maxLengthInfo); // max length 提示信息
          $box.append($container);
          var $scroll = $$1('<div class="w-e-scroll"></div>');
          $container.append($scroll);
          this.$scroll = $scroll;
          this.$textAreaContainer = $container;
          // 异步，否则获取不到 editor 和 DOM
          promiseResolveThen(function () {
              var editor = _this.editorInstance;
              var window = DomEditor.getWindow(editor);
              // 监听 selection change
              window.document.addEventListener('selectionchange', _this.onDOMSelectionChange);
              // editor 销毁时，解绑 selection change
              editor.on(EditorEvents.DESTROYED, function () {
                  window.document.removeEventListener('selectionchange', _this.onDOMSelectionChange);
              });
              // 点击编辑区域，关闭 panel
              $container.on('click', function () { return editor.hidePanelOrModal(); });
              // editor onchange 时更新视图
              editor.on(EditorEvents.CHANGE, _this.changeViewState.bind(_this));
              // editor onchange 时触发用户配置的 onChange （需要在 changeViewState 后执行）
              var _a = editor.getConfig(), onChange = _a.onChange, scroll = _a.scroll;
              if (onChange) {
                  editor.on(EditorEvents.CHANGE, function () { return onChange(editor); });
              }
              // scroll: false时，容器height: 100%不生效，样式设置，避免悬浮框位置出现错位问题
              if (!scroll) {
                  $box.css('position', 'relative');
                  $container.addClass('no-scroll');
              }
              // 监听 onfocus onblur
              _this.onFocusAndOnBlur();
              // 实时修改 maxLength 提示信息
              editor.on(EditorEvents.CHANGE, _this.changeMaxLengthInfo.bind(_this));
              // 绑定 DOM 事件
              _this.bindEvent();
          });
      }
      Object.defineProperty(TextArea.prototype, "editorInstance", {
          get: function () {
              var editor = TEXTAREA_TO_EDITOR.get(this);
              if (editor == null) {
                  throw new Error('Can not get editor instance');
              }
              return editor;
          },
          enumerable: false,
          configurable: true
      });
      /**
       * 绑定事件，如 beforeinput onblur onfocus keydown click copy/paste drag/drop 等
       */
      TextArea.prototype.bindEvent = function () {
          var _this = this;
          var _a = this, $textArea = _a.$textArea, $scroll = _a.$scroll;
          var editor = this.editorInstance;
          if ($textArea == null) {
              return;
          }
          // 遍历所有事件类型，绑定
          forEach(eventConf, function (fn, eventType) {
              $textArea.on(eventType, function (event) {
                  fn(event, _this, editor);
              });
          });
          // 设置 scroll
          var scroll = editor.getConfig().scroll;
          if (scroll) {
              $scroll.css('overflow-y', 'auto');
              // scroll 自定义事件
              $scroll.on('scroll', throttle(function () {
                  editor.emit('scroll');
              }, 100));
          }
      };
      TextArea.prototype.onFocusAndOnBlur = function () {
          var _this = this;
          var editor = this.editorInstance;
          var _a = editor.getConfig(), onBlur = _a.onBlur, onFocus = _a.onFocus;
          this.latestEditorSelection = editor.selection;
          editor.on(EditorEvents.CHANGE, function () {
              if (_this.latestEditorSelection == null && editor.selection != null) {
                  // 异步触发 focus
                  setTimeout(function () { return onFocus && onFocus(editor); });
              }
              else if (_this.latestEditorSelection != null && editor.selection == null) {
                  // 异步触发 blur
                  setTimeout(function () { return onBlur && onBlur(editor); });
              }
              _this.latestEditorSelection = editor.selection; // 重新记录 selection
          });
      };
      /**
       * 修改 maxLength 提示信息
       */
      TextArea.prototype.changeMaxLengthInfo = function () {
          var editor = this.editorInstance;
          var maxLength = editor.getConfig().maxLength;
          if (maxLength) {
              var leftLength = DomEditor.getLeftLengthOfMaxLength(editor);
              var curLength = maxLength - leftLength;
              this.$maxLengthInfo[0].innerHTML = "".concat(curLength, "/").concat(maxLength);
          }
      };
      /**
       * 修改进度条
       * @param progress 进度
       */
      TextArea.prototype.changeProgress = function (progress) {
          var $progressBar = this.$progressBar;
          $progressBar.css('width', "".concat(progress, "%"));
          // 进度 100% 之后，定时隐藏
          if (progress >= 100) {
              setTimeout(function () {
                  $progressBar.hide();
                  $progressBar.css('width', '0');
                  $progressBar.show();
              }, 1000);
          }
      };
      /**
       * 修改 view 状态
       */
      TextArea.prototype.changeViewState = function () {
          var _this = this;
          var editor = this.editorInstance;
          // 更新 DOM
          // TODO 注意这里是否会有性能瓶颈？因为每次键盘输入，都会触发这里 —— 可单独测试大文件、多内容，如几万个字
          updateView(this, editor);
          // 处理 placeholder
          handlePlaceholder(this, editor);
          // 同步选区（异步，否则拿不到 DOM 渲染结果，vdom）
          promiseResolveThen(function () {
              editorSelectionToDOM(_this, editor);
          });
      };
      /**
       * 销毁 textarea
       */
      TextArea.prototype.destroy = function () {
          // 销毁 DOM （只销毁最外层 DOM 即可）
          this.$textAreaContainer.remove();
      };
      return TextArea;
  }());

  /**
   * @description 绑定 node 的关系
   * @author wangfupeng
   */
  /**
   * createEditor 未传递 selector 时，绑定 node 的关系（ NODE_TO_PARENT, NODE_TO_INDEX 等 ）
   * @param node node
   * @param index index
   * @param parent parent node
   * @param editor editor
   */
  function bindNodeRelation(node, index, parent, editor) {
      // 设置相关 weakMap 信息
      NODE_TO_INDEX.set(node, index);
      NODE_TO_PARENT.set(node, parent);
      if (distExports$1.Element.isElement(node)) {
          var _a = node.children, children = _a === void 0 ? [] : _a;
          children.forEach(function (child, i) { return bindNodeRelation(child, i, node, editor); }); // 递归子节点
          var isVoid = distExports$1.Editor.isVoid(editor, node);
          if (isVoid) {
              var _b = __read(distExports$1.Node.texts(node), 1), _c = __read(_b[0], 1), text = _c[0];
              // 记录 text 相关 weakMap
              NODE_TO_INDEX.set(text, 0);
              NODE_TO_PARENT.set(text, node);
          }
      }
  }

  /**
   * @description create editor
   * @author wangfupeng
   */
  var MIN_TEXTAREA_HEIGHT = 300;
  var MESSAGES = {
      heightWarning: {
          en: 'Textarea height < 300px. This may cause modal and hoverbar position error',
          zh: '编辑区域高度 < 300px 这可能会导致 modal hoverbar 定位异常',
      },
  };
  /**
   * 创建编辑器
   */
  function coreCreateEditor (option) {
      var _a = option.selector, selector = _a === void 0 ? '' : _a, _b = option.config, config = _b === void 0 ? {} : _b, content = option.content, html = option.html, _c = option.plugins, plugins = _c === void 0 ? [] : _c;
      // 创建实例 - 使用插件
      var createBaseEditor = function () { return distExports$1.createEditor(); };
      var applyPlugins = function (editor) {
          return [
              withEventData,
              withDOM,
              withConfig,
              withContent,
              withSelection$1,
              withEmitter,
              withMaxLength,
              distExports.withHistory,
          ].reduce(function (ed, plugin) { return plugin(ed); }, editor);
      };
      var editor = applyPlugins(createBaseEditor());
      if (selector) {
          // 检查是否对同一个 DOM 重复创建
          if (isRepeatedCreateTextarea(editor, selector)) {
              throw new Error("Repeated create editor by selector '".concat(selector, "'"));
          }
      }
      // 处理配置
      var editorConfig = genEditorConfig(config);
      EDITOR_TO_CONFIG.set(editor, editorConfig);
      var _d = editorConfig.hoverbarKeys, hoverbarKeys = _d === void 0 ? {} : _d;
      // 注册第三方插件
      plugins.forEach(function (plugin) {
          editor = plugin(editor);
      });
      initializeContent(editor, { html: html, content: content });
      // 兼容了更多格式，normalizeContent 以不在适合于初始化 content
      // Content normalization is disabled to support more formats.
      // Note: This may result in non-normalized content (e.g., adjacent text nodes won't be merged).
      // TODO: Document specific formats that would break with normalization
      // DomEditor.normalizeContent(editor)
      if (selector) {
          // 传入了 selector ，则创建 textarea DOM
          var textarea_1 = new TextArea(selector);
          EDITOR_TO_TEXTAREA.set(editor, textarea_1);
          TEXTAREA_TO_EDITOR.set(textarea_1, editor);
          textarea_1.changeViewState(); // 初始化时触发一次，以便能初始化 textarea DOM 和 selection
          // 判断 textarea 最小高度，并给出提示
          promiseResolveThen(function () {
              var $scroll = textarea_1.$scroll;
              if ($scroll == null) {
                  return;
              }
              if ($scroll.height() < MIN_TEXTAREA_HEIGHT) {
                  console.warn("".concat(MESSAGES.heightWarning.zh, "\n").concat(MESSAGES.heightWarning.en), { element: $scroll, height: $scroll.height() });
              }
          });
          // 创建 hoverbar DOM
          var hoverbar = void 0;
          if (Object.keys(hoverbarKeys).length > 0) {
              hoverbar = new HoverBar();
              HOVER_BAR_TO_EDITOR.set(hoverbar, editor);
              EDITOR_TO_HOVER_BAR.set(editor, hoverbar);
          }
          // 隐藏 panel and modal
          editor.on(EditorEvents.CHANGE, function () {
              editor.hidePanelOrModal();
          });
          editor.on(EditorEvents.SCROLL, function () {
              editor.hidePanelOrModal();
          });
      }
      else {
          // 未传入 selector ，则遍历 content ，绑定一些 WeakMap 关系 （ NODE_TO_PARENT, NODE_TO_INDEX 等 ）
          editor.children.forEach(function (node, i) { return bindNodeRelation(node, i, editor, editor); });
      }
      // 触发生命周期
      var onCreated = editorConfig.onCreated, onDestroyed = editorConfig.onDestroyed;
      if (onCreated) {
          editor.on(EditorEvents.CREATED, function () { return onCreated(editor); });
      }
      if (onDestroyed) {
          editor.on(EditorEvents.DESTROYED, function () { return onDestroyed(editor); });
      }
      // 创建完毕，异步触发 created
      promiseResolveThen(function () { return editor.emit('created'); });
      return editor;
  }

  /**
   * @description classic toolbar
   * @author wangfupeng
   */
  var Toolbar = /** @class */ (function () {
      function Toolbar(boxSelector, config) {
          var _this = this;
          this.$toolbar = $$1('<div class="w-e-bar w-e-bar-show w-e-toolbar"></div>');
          this.menus = {};
          this.toolbarItems = [];
          this.config = {};
          this.lngListen = function () { };
          /**
           * editor onChange 时触发（涉及 DOM 操作，加防抖）
           */
          this.changeToolbarState = debounce(function () {
              _this.toolbarItems.forEach(function (toolbarItem) {
                  toolbarItem.changeMenuState();
              });
          }, 200);
          this.config = config;
          // @ts-ignore 初始化 DOM
          var $box = $$1(boxSelector);
          if ($box.length === 0) {
              throw new Error("Cannot find toolbar DOM by selector '".concat(boxSelector, "'"));
          }
          this.$box = $box;
          var $toolbar = this.$toolbar;
          // @ts-ignore
          $toolbar.on('mousedown', function (e) { return e.preventDefault(); }, { passive: false }); // 防止点击失焦
          $box.append($toolbar);
          // 异步，否则拿不到 editor 实例
          promiseResolveThen(function () {
              // 首次初始化
              _this.initToolbar();
              // 监听语言变更
              _this.lngListen = i18nListenLanguage(function () { return _this.initToolbar(); });
              // 监听 editor onchange
              var editor = _this.getEditorInstance();
              editor.on(EditorEvents.CHANGE, _this.changeToolbarState);
          });
      }
      Toolbar.prototype.getMenus = function () {
          return this.menus;
      };
      Toolbar.prototype.getConfig = function () {
          return this.config;
      };
      // 初始化工具栏
      Toolbar.prototype.initToolbar = function () {
          // 清空menu缓存
          this.menus = {};
          // 清空elem
          var $toolbar = this.$toolbar;
          $toolbar === null || $toolbar === void 0 ? void 0 : $toolbar.empty();
          // 注册 items
          this.registerItems();
          // 创建完，先模拟一次 onchange
          this.changeToolbarState();
      };
      // 注册 toolbarItems
      Toolbar.prototype.registerItems = function () {
          var _this = this;
          var prevKey = '';
          var $toolbar = this.$toolbar;
          var _a = this.config, _b = _a.toolbarKeys, toolbarKeys = _b === void 0 ? [] : _b, _c = _a.insertKeys, insertKeys = _c === void 0 ? { index: 0, keys: [] } : _c, _d = _a.excludeKeys, excludeKeys = _d === void 0 ? [] : _d; // 格式如 ['a', '|', 'b', 'c', '|', 'd']
          // 新插入菜单
          var toolbarKeysWithInsertedKeys = clonedeep(toolbarKeys);
          if (insertKeys.keys.length > 0) {
              if (typeof insertKeys.keys === 'string') {
                  insertKeys.keys = [insertKeys.keys];
              }
              insertKeys.keys.forEach(function (k, i) {
                  toolbarKeysWithInsertedKeys.splice(insertKeys.index + i, 0, k);
              });
          }
          // 排除某些菜单
          var filteredKeys = toolbarKeysWithInsertedKeys.filter(function (key) {
              var keyToCheck = typeof key === 'string' ? key : key.key;
              return !excludeKeys.includes(keyToCheck);
          });
          var filteredKeysLength = filteredKeys.length;
          // 开始注册菜单
          filteredKeys.forEach(function (key, index) {
              if (key === '|') {
                  // 第一个就是 `|` ，忽略
                  if (index === 0) {
                      return;
                  }
                  // 最后一个是 `|` ，忽略
                  if (index + 1 === filteredKeysLength) {
                      return;
                  }
                  // 多个紧挨着的 `|` ，只显示一个
                  if (prevKey === '|') {
                      return;
                  }
                  // 分割线
                  var $divider = gen$barItemDivider();
                  $toolbar.append($divider);
                  prevKey = key;
                  return;
              }
              // 正常菜单
              if (typeof key === 'string') {
                  _this.registerSingleItem(key, _this);
                  prevKey = key;
                  return;
              }
              // 菜单组
              _this.registerGroup(key);
              prevKey = 'group';
          });
      };
      // 注册菜单组
      Toolbar.prototype.registerGroup = function (menu) {
          var _this = this;
          var $toolbar = this.$toolbar;
          var group = createBarItemGroup(menu);
          var _a = menu.menuKeys, menuKeys = _a === void 0 ? [] : _a;
          var _b = this.config.excludeKeys, excludeKeys = _b === void 0 ? [] : _b;
          // 注册子菜单
          menuKeys.forEach(function (key) {
              if (excludeKeys.includes(key)) {
                  return;
              }
              _this.registerSingleItem(key, group);
          });
          // 添加到 DOM
          $toolbar.append(group.$elem);
      };
      // 注册单个 toolbarItem
      Toolbar.prototype.registerSingleItem = function (key, container) {
          var editor = this.getEditorInstance();
          var inGroup = container instanceof GroupButton; // 要添加到 groupButton
          // 尝试从缓存中获取
          var menus = this.menus;
          var menu = menus[key];
          if (menu == null) {
              // 缓存中没有，则创建
              var factory = MENU_ITEM_FACTORIES[key];
              if (factory == null) {
                  throw new Error("Not found menu item factory by key '".concat(key, "'"));
              }
              if (typeof factory !== 'function') {
                  throw new Error("Menu item factory (key='".concat(key, "') is not a function"));
              }
              // 创建 toolbarItem 并记录缓存
              menu = factory();
              menus[key] = menu;
          }
          else {
              console.warn("Duplicated toolbar menu key '".concat(key, "'\n\u91CD\u590D\u6CE8\u518C\u4E86\u83DC\u5355\u680F menu '").concat(key, "'"));
          }
          // 替换 icon svg
          var menuConf = editor.getMenuConfig(key);
          if (menuConf && menuConf.iconSvg !== undefined) {
              menu.iconSvg = menuConf.iconSvg;
          }
          var toolbarItem = createBarItem(key, menu, inGroup);
          this.toolbarItems.push(toolbarItem);
          // 保存 toolbarItem 和 editor 的关系
          BAR_ITEM_TO_EDITOR.set(toolbarItem, editor);
          // 添加 DOM
          if (inGroup) {
              // barItem 是 groupButton
              var group = container;
              group.appendBarItem(toolbarItem);
          }
          else {
              // barItem 添加到 toolbar
              var toolbar_1 = container;
              toolbar_1.$toolbar.append(toolbarItem.$elem);
          }
      };
      Toolbar.prototype.getEditorInstance = function () {
          var editor = TOOLBAR_TO_EDITOR.get(this);
          if (editor == null) {
              throw new Error('Can not get editor instance');
          }
          return editor;
      };
      /**
       * 销毁 toolbar
       */
      Toolbar.prototype.destroy = function () {
          var _a;
          // 销毁 DOM
          this.$toolbar.remove();
          // 销毁语言监听
          (_a = this.lngListen) === null || _a === void 0 ? void 0 : _a.call(this);
          // 清空属性
          this.menus = {};
          this.toolbarItems = [];
      };
      return Toolbar;
  }());

  /**
   * @description create toolbar
   * @author wangfupeng
   */
  function coreCreateToolbar (editor, option) {
      if (editor == null) {
          throw new Error("Cannot create toolbar, because editor is null");
      }
      var selector = option.selector, _a = option.config, config = _a === void 0 ? {} : _a;
      // 避免重复创建
      if (isRepeatedCreateToolbar(editor, selector)) {
          // 对同一个 DOM 重复创建
          throw new Error("Repeated create toolbar by selector '".concat(selector, "'"));
      }
      // 处理配置
      var toolbarConfig = genToolbarConfig(config);
      // 创建 toolbar ，并记录和 editor 关系
      var toolbar = new Toolbar(selector, toolbarConfig);
      TOOLBAR_TO_EDITOR.set(toolbar, editor);
      EDITOR_TO_TOOLBAR.set(editor, toolbar);
      return toolbar;
  }

  var lib$3 = {exports: {}};

  var loggers = {};

  var getTimeStamp_1;
  var hasRequiredGetTimeStamp;

  function requireGetTimeStamp () {
  	if (hasRequiredGetTimeStamp) return getTimeStamp_1;
  	hasRequiredGetTimeStamp = 1;

  	/**
  	 * Adds zero to strings shorter than two characters.
  	 *
  	 * @param {number} number
  	 * @returns {string}
  	 */
  	function pad(number) {
  	  return number < 10 ? `0${number}` : number.toString();
  	}
  	/**
  	 * Returns a timestamp in the format of `hours:minutes:seconds`
  	 */


  	function getTimeStamp() {
  	  const date = new Date();
  	  const hours = pad(date.getHours());
  	  const minutes = pad(date.getMinutes());
  	  const seconds = pad(date.getSeconds());
  	  return `${hours}:${minutes}:${seconds}`;
  	}

  	getTimeStamp_1 = getTimeStamp;
  	return getTimeStamp_1;
  }

  var hasRequiredLoggers;

  function requireLoggers () {
  	if (hasRequiredLoggers) return loggers;
  	hasRequiredLoggers = 1;

  	Object.defineProperty(loggers, "__esModule", {
  	  value: true
  	});
  	loggers.justErrorsLogger = loggers.debugLogger = void 0;

  	/* eslint-disable no-console */
  	const getTimeStamp = requireGetTimeStamp(); // Swallow all logs, except errors.
  	// default if logger is not set or debug: false


  	const justErrorsLogger = {
  	  debug: () => {},
  	  warn: () => {},
  	  error: function () {
  	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
  	      args[_key] = arguments[_key];
  	    }

  	    return console.error(`[Uppy] [${getTimeStamp()}]`, ...args);
  	  }
  	}; // Print logs to console with namespace + timestamp,
  	// set by logger: Uppy.debugLogger or debug: true

  	loggers.justErrorsLogger = justErrorsLogger;
  	const debugLogger = {
  	  debug: function () {
  	    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
  	      args[_key2] = arguments[_key2];
  	    }

  	    return console.debug(`[Uppy] [${getTimeStamp()}]`, ...args);
  	  },
  	  warn: function () {
  	    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
  	      args[_key3] = arguments[_key3];
  	    }

  	    return console.warn(`[Uppy] [${getTimeStamp()}]`, ...args);
  	  },
  	  error: function () {
  	    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
  	      args[_key4] = arguments[_key4];
  	    }

  	    return console.error(`[Uppy] [${getTimeStamp()}]`, ...args);
  	  }
  	};
  	loggers.debugLogger = debugLogger;
  	return loggers;
  }

  var nonSecure;
  var hasRequiredNonSecure;

  function requireNonSecure () {
  	if (hasRequiredNonSecure) return nonSecure;
  	hasRequiredNonSecure = 1;
  	// This alphabet uses `A-Za-z0-9_-` symbols.
  	// The order of characters is optimized for better gzip and brotli compression.
  	// References to the same file (works both for gzip and brotli):
  	// `'use`, `andom`, and `rict'`
  	// References to the brotli default dictionary:
  	// `-26T`, `1983`, `40px`, `75px`, `bush`, `jack`, `mind`, `very`, and `wolf`
  	let urlAlphabet =
  	  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict';

  	let customAlphabet = (alphabet, defaultSize = 21) => {
  	  return (size = defaultSize) => {
  	    let id = '';
  	    // A compact alternative for `for (var i = 0; i < step; i++)`.
  	    let i = size | 0;
  	    while (i--) {
  	      // `| 0` is more compact and faster than `Math.floor()`.
  	      id += alphabet[(Math.random() * alphabet.length) | 0];
  	    }
  	    return id
  	  }
  	};

  	let nanoid = (size = 21) => {
  	  let id = '';
  	  // A compact alternative for `for (var i = 0; i < step; i++)`.
  	  let i = size | 0;
  	  while (i--) {
  	    // `| 0` is more compact and faster than `Math.floor()`.
  	    id += urlAlphabet[(Math.random() * 64) | 0];
  	  }
  	  return id
  	};

  	nonSecure = { nanoid, customAlphabet };
  	return nonSecure;
  }

  var Restricter = {};

  var prettierBytes;
  var hasRequiredPrettierBytes;

  function requirePrettierBytes () {
  	if (hasRequiredPrettierBytes) return prettierBytes;
  	hasRequiredPrettierBytes = 1;
  	// Adapted from https://github.com/Flet/prettier-bytes/
  	// Changing 1000 bytes to 1024, so we can keep uppercase KB vs kB
  	// ISC License (c) Dan Flettre https://github.com/Flet/prettier-bytes/blob/master/LICENSE
  	prettierBytes = function prettierBytes (num) {
  	  if (typeof num !== 'number' || isNaN(num)) {
  	    throw new TypeError('Expected a number, got ' + typeof num)
  	  }

  	  var neg = num < 0;
  	  var units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

  	  if (neg) {
  	    num = -num;
  	  }

  	  if (num < 1) {
  	    return (neg ? '-' : '') + num + ' B'
  	  }

  	  var exponent = Math.min(Math.floor(Math.log(num) / Math.log(1024)), units.length - 1);
  	  num = Number(num / Math.pow(1024, exponent));
  	  var unit = units[exponent];

  	  if (num >= 10 || num % 1 === 0) {
  	    // Do not show decimals when the number is two-digit, or if the number has no
  	    // decimal component.
  	    return (neg ? '-' : '') + num.toFixed(0) + ' ' + unit
  	  } else {
  	    return (neg ? '-' : '') + num.toFixed(1) + ' ' + unit
  	  }
  	};
  	return prettierBytes;
  }

  /* jshint node: true */

  var wildcard;
  var hasRequiredWildcard;

  function requireWildcard () {
  	if (hasRequiredWildcard) return wildcard;
  	hasRequiredWildcard = 1;

  	/**
  	  # wildcard

  	  Very simple wildcard matching, which is designed to provide the same
  	  functionality that is found in the
  	  [eve](https://github.com/adobe-webplatform/eve) eventing library.

  	  ## Usage

  	  It works with strings:

  	  <<< examples/strings.js

  	  Arrays:

  	  <<< examples/arrays.js

  	  Objects (matching against keys):

  	  <<< examples/objects.js

  	  While the library works in Node, if you are are looking for file-based
  	  wildcard matching then you should have a look at:

  	  <https://github.com/isaacs/node-glob>
  	**/

  	function WildcardMatcher(text, separator) {
  	  this.text = text = text || '';
  	  this.hasWild = ~text.indexOf('*');
  	  this.separator = separator;
  	  this.parts = text.split(separator);
  	}

  	WildcardMatcher.prototype.match = function(input) {
  	  var matches = true;
  	  var parts = this.parts;
  	  var ii;
  	  var partsCount = parts.length;
  	  var testParts;

  	  if (typeof input == 'string' || input instanceof String) {
  	    if (!this.hasWild && this.text != input) {
  	      matches = false;
  	    } else {
  	      testParts = (input || '').split(this.separator);
  	      for (ii = 0; matches && ii < partsCount; ii++) {
  	        if (parts[ii] === '*')  {
  	          continue;
  	        } else if (ii < testParts.length) {
  	          matches = parts[ii] === testParts[ii];
  	        } else {
  	          matches = false;
  	        }
  	      }

  	      // If matches, then return the component parts
  	      matches = matches && testParts;
  	    }
  	  }
  	  else if (typeof input.splice == 'function') {
  	    matches = [];

  	    for (ii = input.length; ii--; ) {
  	      if (this.match(input[ii])) {
  	        matches[matches.length] = input[ii];
  	      }
  	    }
  	  }
  	  else if (typeof input == 'object') {
  	    matches = {};

  	    for (var key in input) {
  	      if (this.match(key)) {
  	        matches[key] = input[key];
  	      }
  	    }
  	  }

  	  return matches;
  	};

  	wildcard = function(text, test, separator) {
  	  var matcher = new WildcardMatcher(text, separator || /[\/\.]/);
  	  if (typeof test != 'undefined') {
  	    return matcher.match(test);
  	  }

  	  return matcher;
  	};
  	return wildcard;
  }

  var mimeMatch;
  var hasRequiredMimeMatch;

  function requireMimeMatch () {
  	if (hasRequiredMimeMatch) return mimeMatch;
  	hasRequiredMimeMatch = 1;
  	var wildcard = requireWildcard();
  	var reMimePartSplit = /[\/\+\.]/;

  	/**
  	  # mime-match

  	  A simple function to checker whether a target mime type matches a mime-type
  	  pattern (e.g. image/jpeg matches image/jpeg OR image/*).

  	  ## Example Usage

  	  <<< example.js

  	**/
  	mimeMatch = function(target, pattern) {
  	  function test(pattern) {
  	    var result = wildcard(pattern, target, reMimePartSplit);

  	    // ensure that we have a valid mime type (should have two parts)
  	    return result && result.length >= 2;
  	  }

  	  return pattern ? test(pattern.split(';')[0]) : test;
  	};
  	return mimeMatch;
  }

  var hasRequiredRestricter;

  function requireRestricter () {
  	if (hasRequiredRestricter) return Restricter;
  	hasRequiredRestricter = 1;

  	Object.defineProperty(Restricter, "__esModule", {
  	  value: true
  	});
  	Restricter.defaultOptions = Restricter.RestrictionError = Restricter.Restricter = void 0;

  	/* eslint-disable max-classes-per-file, class-methods-use-this */

  	/* global AggregateError */
  	const prettierBytes = requirePrettierBytes();

  	const match = requireMimeMatch();

  	const defaultOptions = {
  	  maxFileSize: null,
  	  minFileSize: null,
  	  maxTotalFileSize: null,
  	  maxNumberOfFiles: null,
  	  minNumberOfFiles: null,
  	  allowedFileTypes: null,
  	  requiredMetaFields: []
  	};
  	Restricter.defaultOptions = defaultOptions;

  	class RestrictionError extends Error {
  	  constructor() {
  	    super(...arguments);
  	    this.isRestriction = true;
  	  }

  	}

  	Restricter.RestrictionError = RestrictionError;

  	if (typeof AggregateError === 'undefined') {
  	  // eslint-disable-next-line no-global-assign
  	  // TODO: remove this "polyfill" in the next major.
  	  globalThis.AggregateError = class AggregateError extends Error {
  	    constructor(errors, message) {
  	      super(message);
  	      this.errors = errors;
  	    }

  	  };
  	}

  	let Restricter$1 = class Restricter {
  	  constructor(getOpts, i18n) {
  	    this.i18n = i18n;

  	    this.getOpts = () => {
  	      const opts = getOpts();

  	      if (opts.restrictions.allowedFileTypes != null && !Array.isArray(opts.restrictions.allowedFileTypes)) {
  	        throw new TypeError('`restrictions.allowedFileTypes` must be an array');
  	      }

  	      return opts;
  	    };
  	  }

  	  validate(file, files) {
  	    const {
  	      maxFileSize,
  	      minFileSize,
  	      maxTotalFileSize,
  	      maxNumberOfFiles,
  	      allowedFileTypes
  	    } = this.getOpts().restrictions;

  	    if (maxNumberOfFiles) {
  	      const nonGhostFiles = files.filter(f => !f.isGhost);

  	      if (nonGhostFiles.length + 1 > maxNumberOfFiles) {
  	        throw new RestrictionError(`${this.i18n('youCanOnlyUploadX', {
	          smart_count: maxNumberOfFiles
	        })}`);
  	      }
  	    }

  	    if (allowedFileTypes) {
  	      const isCorrectFileType = allowedFileTypes.some(type => {
  	        // check if this is a mime-type
  	        if (type.includes('/')) {
  	          if (!file.type) return false;
  	          return match(file.type.replace(/;.*?$/, ''), type);
  	        } // otherwise this is likely an extension


  	        if (type[0] === '.' && file.extension) {
  	          return file.extension.toLowerCase() === type.slice(1).toLowerCase();
  	        }

  	        return false;
  	      });

  	      if (!isCorrectFileType) {
  	        const allowedFileTypesString = allowedFileTypes.join(', ');
  	        throw new RestrictionError(this.i18n('youCanOnlyUploadFileTypes', {
  	          types: allowedFileTypesString
  	        }));
  	      }
  	    } // We can't check maxTotalFileSize if the size is unknown.


  	    if (maxTotalFileSize && file.size != null) {
  	      const totalFilesSize = files.reduce((total, f) => total + f.size, file.size);

  	      if (totalFilesSize > maxTotalFileSize) {
  	        throw new RestrictionError(this.i18n('exceedsSize', {
  	          size: prettierBytes(maxTotalFileSize),
  	          file: file.name
  	        }));
  	      }
  	    } // We can't check maxFileSize if the size is unknown.


  	    if (maxFileSize && file.size != null && file.size > maxFileSize) {
  	      throw new RestrictionError(this.i18n('exceedsSize', {
  	        size: prettierBytes(maxFileSize),
  	        file: file.name
  	      }));
  	    } // We can't check minFileSize if the size is unknown.


  	    if (minFileSize && file.size != null && file.size < minFileSize) {
  	      throw new RestrictionError(this.i18n('inferiorSize', {
  	        size: prettierBytes(minFileSize)
  	      }));
  	    }
  	  }

  	  validateMinNumberOfFiles(files) {
  	    const {
  	      minNumberOfFiles
  	    } = this.getOpts().restrictions;

  	    if (Object.keys(files).length < minNumberOfFiles) {
  	      throw new RestrictionError(this.i18n('youHaveToAtLeastSelectX', {
  	        smart_count: minNumberOfFiles
  	      }));
  	    }
  	  }

  	  getMissingRequiredMetaFields(file) {
  	    const error = new RestrictionError(this.i18n('missingRequiredMetaFieldOnFile', {
  	      fileName: file.name
  	    }));
  	    const {
  	      requiredMetaFields
  	    } = this.getOpts().restrictions; // TODO: migrate to Object.hasOwn in the next major.

  	    const own = Object.prototype.hasOwnProperty;
  	    const missingFields = [];

  	    for (const field of requiredMetaFields) {
  	      if (!own.call(file.meta, field) || file.meta[field] === '') {
  	        missingFields.push(field);
  	      }
  	    }

  	    return {
  	      missingFields,
  	      error
  	    };
  	  }

  	};

  	Restricter.Restricter = Restricter$1;
  	return Restricter;
  }

  var hasProperty;
  var hasRequiredHasProperty;

  function requireHasProperty () {
  	if (hasRequiredHasProperty) return hasProperty;
  	hasRequiredHasProperty = 1;

  	function has(object, key) {
  	  return Object.prototype.hasOwnProperty.call(object, key);
  	}

  	hasProperty = has;
  	return hasProperty;
  }

  var Translator_1;
  var hasRequiredTranslator;

  function requireTranslator () {
  	if (hasRequiredTranslator) return Translator_1;
  	hasRequiredTranslator = 1;

  	function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

  	var id = 0;

  	function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

  	const has = requireHasProperty();

  	function insertReplacement(source, rx, replacement) {
  	  const newParts = [];
  	  source.forEach(chunk => {
  	    // When the source contains multiple placeholders for interpolation,
  	    // we should ignore chunks that are not strings, because those
  	    // can be JSX objects and will be otherwise incorrectly turned into strings.
  	    // Without this condition we’d get this: [object Object] hello [object Object] my <button>
  	    if (typeof chunk !== 'string') {
  	      return newParts.push(chunk);
  	    }

  	    return rx[Symbol.split](chunk).forEach((raw, i, list) => {
  	      if (raw !== '') {
  	        newParts.push(raw);
  	      } // Interlace with the `replacement` value


  	      if (i < list.length - 1) {
  	        newParts.push(replacement);
  	      }
  	    });
  	  });
  	  return newParts;
  	}
  	/**
  	 * Takes a string with placeholder variables like `%{smart_count} file selected`
  	 * and replaces it with values from options `{smart_count: 5}`
  	 *
  	 * @license https://github.com/airbnb/polyglot.js/blob/master/LICENSE
  	 * taken from https://github.com/airbnb/polyglot.js/blob/master/lib/polyglot.js#L299
  	 *
  	 * @param {string} phrase that needs interpolation, with placeholders
  	 * @param {object} options with values that will be used to replace placeholders
  	 * @returns {any[]} interpolated
  	 */


  	function interpolate(phrase, options) {
  	  const dollarRegex = /\$/g;
  	  const dollarBillsYall = '$$$$';
  	  let interpolated = [phrase];
  	  if (options == null) return interpolated;

  	  for (const arg of Object.keys(options)) {
  	    if (arg !== '_') {
  	      // Ensure replacement value is escaped to prevent special $-prefixed
  	      // regex replace tokens. the "$$$$" is needed because each "$" needs to
  	      // be escaped with "$" itself, and we need two in the resulting output.
  	      let replacement = options[arg];

  	      if (typeof replacement === 'string') {
  	        replacement = dollarRegex[Symbol.replace](replacement, dollarBillsYall);
  	      } // We create a new `RegExp` each time instead of using a more-efficient
  	      // string replace so that the same argument can be replaced multiple times
  	      // in the same phrase.


  	      interpolated = insertReplacement(interpolated, new RegExp(`%\\{${arg}\\}`, 'g'), replacement);
  	    }
  	  }

  	  return interpolated;
  	}
  	/**
  	 * Translates strings with interpolation & pluralization support.
  	 * Extensible with custom dictionaries and pluralization functions.
  	 *
  	 * Borrows heavily from and inspired by Polyglot https://github.com/airbnb/polyglot.js,
  	 * basically a stripped-down version of it. Differences: pluralization functions are not hardcoded
  	 * and can be easily added among with dictionaries, nested objects are used for pluralization
  	 * as opposed to `||||` delimeter
  	 *
  	 * Usage example: `translator.translate('files_chosen', {smart_count: 3})`
  	 */


  	var _apply = /*#__PURE__*/_classPrivateFieldLooseKey("apply");

  	class Translator {
  	  /**
  	   * @param {object|Array<object>} locales - locale or list of locales.
  	   */
  	  constructor(locales) {
  	    Object.defineProperty(this, _apply, {
  	      value: _apply2
  	    });
  	    this.locale = {
  	      strings: {},

  	      pluralize(n) {
  	        if (n === 1) {
  	          return 0;
  	        }

  	        return 1;
  	      }

  	    };

  	    if (Array.isArray(locales)) {
  	      locales.forEach(_classPrivateFieldLooseBase(this, _apply)[_apply], this);
  	    } else {
  	      _classPrivateFieldLooseBase(this, _apply)[_apply](locales);
  	    }
  	  }

  	  /**
  	   * Public translate method
  	   *
  	   * @param {string} key
  	   * @param {object} options with values that will be used later to replace placeholders in string
  	   * @returns {string} translated (and interpolated)
  	   */
  	  translate(key, options) {
  	    return this.translateArray(key, options).join('');
  	  }
  	  /**
  	   * Get a translation and return the translated and interpolated parts as an array.
  	   *
  	   * @param {string} key
  	   * @param {object} options with values that will be used to replace placeholders
  	   * @returns {Array} The translated and interpolated parts, in order.
  	   */


  	  translateArray(key, options) {
  	    if (!has(this.locale.strings, key)) {
  	      throw new Error(`missing string: ${key}`);
  	    }

  	    const string = this.locale.strings[key];
  	    const hasPluralForms = typeof string === 'object';

  	    if (hasPluralForms) {
  	      if (options && typeof options.smart_count !== 'undefined') {
  	        const plural = this.locale.pluralize(options.smart_count);
  	        return interpolate(string[plural], options);
  	      }

  	      throw new Error('Attempted to use a string with plural forms, but no value was given for %{smart_count}');
  	    }

  	    return interpolate(string, options);
  	  }

  	}

  	function _apply2(locale) {
  	  if (!(locale != null && locale.strings)) {
  	    return;
  	  }

  	  const prevLocale = this.locale;
  	  this.locale = { ...prevLocale,
  	    strings: { ...prevLocale.strings,
  	      ...locale.strings
  	    }
  	  };
  	  this.locale.pluralize = locale.pluralize || prevLocale.pluralize;
  	}

  	Translator_1 = Translator;
  	return Translator_1;
  }

  /**
  * Create an event emitter with namespaces
  * @name createNamespaceEmitter
  * @example
  * var emitter = require('./index')()
  *
  * emitter.on('*', function () {
  *   console.log('all events emitted', this.event)
  * })
  *
  * emitter.on('example', function () {
  *   console.log('example event emitted')
  * })
  */

  var namespaceEmitter;
  var hasRequiredNamespaceEmitter;

  function requireNamespaceEmitter () {
  	if (hasRequiredNamespaceEmitter) return namespaceEmitter;
  	hasRequiredNamespaceEmitter = 1;
  	namespaceEmitter = function createNamespaceEmitter () {
  	  var emitter = {};
  	  var _fns = emitter._fns = {};

  	  /**
  	  * Emit an event. Optionally namespace the event. Handlers are fired in the order in which they were added with exact matches taking precedence. Separate the namespace and event with a `:`
  	  * @name emit
  	  * @param {String} event – the name of the event, with optional namespace
  	  * @param {...*} data – up to 6 arguments that are passed to the event listener
  	  * @example
  	  * emitter.emit('example')
  	  * emitter.emit('demo:test')
  	  * emitter.emit('data', { example: true}, 'a string', 1)
  	  */
  	  emitter.emit = function emit (event, arg1, arg2, arg3, arg4, arg5, arg6) {
  	    var toEmit = getListeners(event);

  	    if (toEmit.length) {
  	      emitAll(event, toEmit, [arg1, arg2, arg3, arg4, arg5, arg6]);
  	    }
  	  };

  	  /**
  	  * Create en event listener.
  	  * @name on
  	  * @param {String} event
  	  * @param {Function} fn
  	  * @example
  	  * emitter.on('example', function () {})
  	  * emitter.on('demo', function () {})
  	  */
  	  emitter.on = function on (event, fn) {
  	    if (!_fns[event]) {
  	      _fns[event] = [];
  	    }

  	    _fns[event].push(fn);
  	  };

  	  /**
  	  * Create en event listener that fires once.
  	  * @name once
  	  * @param {String} event
  	  * @param {Function} fn
  	  * @example
  	  * emitter.once('example', function () {})
  	  * emitter.once('demo', function () {})
  	  */
  	  emitter.once = function once (event, fn) {
  	    function one () {
  	      fn.apply(this, arguments);
  	      emitter.off(event, one);
  	    }
  	    this.on(event, one);
  	  };

  	  /**
  	  * Stop listening to an event. Stop all listeners on an event by only passing the event name. Stop a single listener by passing that event handler as a callback.
  	  * You must be explicit about what will be unsubscribed: `emitter.off('demo')` will unsubscribe an `emitter.on('demo')` listener,
  	  * `emitter.off('demo:example')` will unsubscribe an `emitter.on('demo:example')` listener
  	  * @name off
  	  * @param {String} event
  	  * @param {Function} [fn] – the specific handler
  	  * @example
  	  * emitter.off('example')
  	  * emitter.off('demo', function () {})
  	  */
  	  emitter.off = function off (event, fn) {
  	    var keep = [];

  	    if (event && fn) {
  	      var fns = this._fns[event];
  	      var i = 0;
  	      var l = fns ? fns.length : 0;

  	      for (i; i < l; i++) {
  	        if (fns[i] !== fn) {
  	          keep.push(fns[i]);
  	        }
  	      }
  	    }

  	    keep.length ? this._fns[event] = keep : delete this._fns[event];
  	  };

  	  function getListeners (e) {
  	    var out = _fns[e] ? _fns[e] : [];
  	    var idx = e.indexOf(':');
  	    var args = (idx === -1) ? [e] : [e.substring(0, idx), e.substring(idx + 1)];

  	    var keys = Object.keys(_fns);
  	    var i = 0;
  	    var l = keys.length;

  	    for (i; i < l; i++) {
  	      var key = keys[i];
  	      if (key === '*') {
  	        out = out.concat(_fns[key]);
  	      }

  	      if (args.length === 2 && args[0] === key) {
  	        out = out.concat(_fns[key]);
  	        break
  	      }
  	    }

  	    return out
  	  }

  	  function emitAll (e, fns, args) {
  	    var i = 0;
  	    var l = fns.length;

  	    for (i; i < l; i++) {
  	      if (!fns[i]) break
  	      fns[i].event = e;
  	      fns[i].apply(fns[i], args);
  	    }
  	  }

  	  return emitter
  	};
  	return namespaceEmitter;
  }

  var lib$2;
  var hasRequiredLib$3;

  function requireLib$3 () {
  	if (hasRequiredLib$3) return lib$2;
  	hasRequiredLib$3 = 1;

  	function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

  	var id = 0;

  	function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

  	const packageJson = {
  	  "version": "2.1.1"
  	};
  	/**
  	 * Default store that keeps state in a simple object.
  	 */

  	var _publish = /*#__PURE__*/_classPrivateFieldLooseKey("publish");

  	class DefaultStore {
  	  constructor() {
  	    Object.defineProperty(this, _publish, {
  	      value: _publish2
  	    });
  	    this.state = {};
  	    this.callbacks = []; // TODO: use a Set instead, make it a private prop
  	  }

  	  getState() {
  	    return this.state;
  	  }

  	  setState(patch) {
  	    const prevState = { ...this.state
  	    };
  	    const nextState = { ...this.state,
  	      ...patch
  	    };
  	    this.state = nextState;

  	    _classPrivateFieldLooseBase(this, _publish)[_publish](prevState, nextState, patch);
  	  }

  	  subscribe(listener) {
  	    this.callbacks.push(listener);
  	    return () => {
  	      // Remove the listener.
  	      this.callbacks.splice(this.callbacks.indexOf(listener), 1);
  	    };
  	  }

  	} // TODO: export the class instead in the next major.


  	function _publish2() {
  	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
  	    args[_key] = arguments[_key];
  	  }

  	  this.callbacks.forEach(listener => {
  	    listener(...args);
  	  });
  	}

  	DefaultStore.VERSION = packageJson.version;

  	function defaultStore() {
  	  return new DefaultStore();
  	}

  	lib$2 = defaultStore;
  	return lib$2;
  }

  var getFileNameAndExtension_1;
  var hasRequiredGetFileNameAndExtension;

  function requireGetFileNameAndExtension () {
  	if (hasRequiredGetFileNameAndExtension) return getFileNameAndExtension_1;
  	hasRequiredGetFileNameAndExtension = 1;

  	function getFileNameAndExtension(fullFileName) {
  	  const lastDot = fullFileName.lastIndexOf('.'); // these count as no extension: "no-dot", "trailing-dot."

  	  if (lastDot === -1 || lastDot === fullFileName.length - 1) {
  	    return {
  	      name: fullFileName,
  	      extension: undefined
  	    };
  	  }

  	  return {
  	    name: fullFileName.slice(0, lastDot),
  	    extension: fullFileName.slice(lastDot + 1)
  	  };
  	}

  	/**
  	 * Takes a full filename string and returns an object {name, extension}
  	 *
  	 * @param {string} fullFileName
  	 * @returns {object} {name, extension}
  	 */
  	getFileNameAndExtension_1 = getFileNameAndExtension;
  	return getFileNameAndExtension_1;
  }

  var mimeTypes;
  var hasRequiredMimeTypes;

  function requireMimeTypes () {
  	if (hasRequiredMimeTypes) return mimeTypes;
  	hasRequiredMimeTypes = 1;

  	// ___Why not add the mime-types package?
  	//    It's 19.7kB gzipped, and we only need mime types for well-known extensions (for file previews).
  	// ___Where to take new extensions from?
  	//    https://github.com/jshttp/mime-db/blob/master/db.json
  	mimeTypes = {
  	  md: 'text/markdown',
  	  markdown: 'text/markdown',
  	  mp4: 'video/mp4',
  	  mp3: 'audio/mp3',
  	  svg: 'image/svg+xml',
  	  jpg: 'image/jpeg',
  	  png: 'image/png',
  	  gif: 'image/gif',
  	  heic: 'image/heic',
  	  heif: 'image/heif',
  	  yaml: 'text/yaml',
  	  yml: 'text/yaml',
  	  csv: 'text/csv',
  	  tsv: 'text/tab-separated-values',
  	  tab: 'text/tab-separated-values',
  	  avi: 'video/x-msvideo',
  	  mks: 'video/x-matroska',
  	  mkv: 'video/x-matroska',
  	  mov: 'video/quicktime',
  	  dicom: 'application/dicom',
  	  doc: 'application/msword',
  	  docm: 'application/vnd.ms-word.document.macroenabled.12',
  	  docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
  	  dot: 'application/msword',
  	  dotm: 'application/vnd.ms-word.template.macroenabled.12',
  	  dotx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.template',
  	  xla: 'application/vnd.ms-excel',
  	  xlam: 'application/vnd.ms-excel.addin.macroenabled.12',
  	  xlc: 'application/vnd.ms-excel',
  	  xlf: 'application/x-xliff+xml',
  	  xlm: 'application/vnd.ms-excel',
  	  xls: 'application/vnd.ms-excel',
  	  xlsb: 'application/vnd.ms-excel.sheet.binary.macroenabled.12',
  	  xlsm: 'application/vnd.ms-excel.sheet.macroenabled.12',
  	  xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
  	  xlt: 'application/vnd.ms-excel',
  	  xltm: 'application/vnd.ms-excel.template.macroenabled.12',
  	  xltx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.template',
  	  xlw: 'application/vnd.ms-excel',
  	  txt: 'text/plain',
  	  text: 'text/plain',
  	  conf: 'text/plain',
  	  log: 'text/plain',
  	  pdf: 'application/pdf',
  	  zip: 'application/zip',
  	  '7z': 'application/x-7z-compressed',
  	  rar: 'application/x-rar-compressed',
  	  tar: 'application/x-tar',
  	  gz: 'application/gzip',
  	  dmg: 'application/x-apple-diskimage'
  	};
  	return mimeTypes;
  }

  var getFileType_1;
  var hasRequiredGetFileType;

  function requireGetFileType () {
  	if (hasRequiredGetFileType) return getFileType_1;
  	hasRequiredGetFileType = 1;

  	const getFileNameAndExtension = requireGetFileNameAndExtension();

  	const mimeTypes = requireMimeTypes();

  	function getFileType(file) {
  	  var _getFileNameAndExtens;

  	  if (file.type) return file.type;
  	  const fileExtension = file.name ? (_getFileNameAndExtens = getFileNameAndExtension(file.name).extension) == null ? void 0 : _getFileNameAndExtens.toLowerCase() : null;

  	  if (fileExtension && fileExtension in mimeTypes) {
  	    // else, see if we can map extension to a mime type
  	    return mimeTypes[fileExtension];
  	  } // if all fails, fall back to a generic byte stream type


  	  return 'application/octet-stream';
  	}

  	getFileType_1 = getFileType;
  	return getFileType_1;
  }

  var generateFileID_1;
  var hasRequiredGenerateFileID;

  function requireGenerateFileID () {
  	if (hasRequiredGenerateFileID) return generateFileID_1;
  	hasRequiredGenerateFileID = 1;

  	function encodeCharacter(character) {
  	  return character.charCodeAt(0).toString(32);
  	}

  	function encodeFilename(name) {
  	  let suffix = '';
  	  return name.replace(/[^A-Z0-9]/ig, character => {
  	    suffix += `-${encodeCharacter(character)}`;
  	    return '/';
  	  }) + suffix;
  	}
  	/**
  	 * Takes a file object and turns it into fileID, by converting file.name to lowercase,
  	 * removing extra characters and adding type, size and lastModified
  	 *
  	 * @param {object} file
  	 * @returns {string} the fileID
  	 */


  	function generateFileID(file) {
  	  // It's tempting to do `[items].filter(Boolean).join('-')` here, but that
  	  // is slower! simple string concatenation is fast
  	  let id = 'uppy';

  	  if (typeof file.name === 'string') {
  	    id += `-${encodeFilename(file.name.toLowerCase())}`;
  	  }

  	  if (file.type !== undefined) {
  	    id += `-${file.type}`;
  	  }

  	  if (file.meta && typeof file.meta.relativePath === 'string') {
  	    id += `-${encodeFilename(file.meta.relativePath.toLowerCase())}`;
  	  }

  	  if (file.data.size !== undefined) {
  	    id += `-${file.data.size}`;
  	  }

  	  if (file.data.lastModified !== undefined) {
  	    id += `-${file.data.lastModified}`;
  	  }

  	  return id;
  	}

  	generateFileID_1 = generateFileID;
  	return generateFileID_1;
  }

  var supportsUploadProgress_1;
  var hasRequiredSupportsUploadProgress;

  function requireSupportsUploadProgress () {
  	if (hasRequiredSupportsUploadProgress) return supportsUploadProgress_1;
  	hasRequiredSupportsUploadProgress = 1;

  	function supportsUploadProgress(userAgent) {
  	  // Allow passing in userAgent for tests
  	  if (userAgent == null && typeof navigator !== 'undefined') {
  	    // eslint-disable-next-line no-param-reassign
  	    userAgent = navigator.userAgent;
  	  } // Assume it works because basically everything supports progress events.


  	  if (!userAgent) return true;
  	  const m = /Edge\/(\d+\.\d+)/.exec(userAgent);
  	  if (!m) return true;
  	  const edgeVersion = m[1];
  	  let [major, minor] = edgeVersion.split('.');
  	  major = parseInt(major, 10);
  	  minor = parseInt(minor, 10); // Worked before:
  	  // Edge 40.15063.0.0
  	  // Microsoft EdgeHTML 15.15063

  	  if (major < 15 || major === 15 && minor < 15063) {
  	    return true;
  	  } // Fixed in:
  	  // Microsoft EdgeHTML 18.18218


  	  if (major > 18 || major === 18 && minor >= 18218) {
  	    return true;
  	  } // other versions don't work.


  	  return false;
  	}

  	// Edge 15.x does not fire 'progress' events on uploads.
  	// See https://github.com/transloadit/uppy/issues/945
  	// And https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12224510/
  	supportsUploadProgress_1 = supportsUploadProgress;
  	return supportsUploadProgress_1;
  }

  var getFileName_1;
  var hasRequiredGetFileName;

  function requireGetFileName () {
  	if (hasRequiredGetFileName) return getFileName_1;
  	hasRequiredGetFileName = 1;

  	function getFileName(fileType, fileDescriptor) {
  	  if (fileDescriptor.name) {
  	    return fileDescriptor.name;
  	  }

  	  if (fileType.split('/')[0] === 'image') {
  	    return `${fileType.split('/')[0]}.${fileType.split('/')[1]}`;
  	  }

  	  return 'noname';
  	}

  	getFileName_1 = getFileName;
  	return getFileName_1;
  }

  var locale$1;
  var hasRequiredLocale$1;

  function requireLocale$1 () {
  	if (hasRequiredLocale$1) return locale$1;
  	hasRequiredLocale$1 = 1;

  	locale$1 = {
  	  strings: {
  	    addBulkFilesFailed: {
  	      0: 'Failed to add %{smart_count} file due to an internal error',
  	      1: 'Failed to add %{smart_count} files due to internal errors'
  	    },
  	    youCanOnlyUploadX: {
  	      0: 'You can only upload %{smart_count} file',
  	      1: 'You can only upload %{smart_count} files'
  	    },
  	    youHaveToAtLeastSelectX: {
  	      0: 'You have to select at least %{smart_count} file',
  	      1: 'You have to select at least %{smart_count} files'
  	    },
  	    exceedsSize: '%{file} exceeds maximum allowed size of %{size}',
  	    missingRequiredMetaField: 'Missing required meta fields',
  	    missingRequiredMetaFieldOnFile: 'Missing required meta fields in %{fileName}',
  	    inferiorSize: 'This file is smaller than the allowed size of %{size}',
  	    youCanOnlyUploadFileTypes: 'You can only upload: %{types}',
  	    noMoreFilesAllowed: 'Cannot add more files',
  	    noDuplicates: "Cannot add the duplicate file '%{fileName}', it already exists",
  	    companionError: 'Connection with Companion failed',
  	    authAborted: 'Authentication aborted',
  	    companionUnauthorizeHint: 'To unauthorize to your %{provider} account, please go to %{url}',
  	    failedToUpload: 'Failed to upload %{file}',
  	    noInternetConnection: 'No Internet connection',
  	    connectedToInternet: 'Connected to the Internet',
  	    // Strings for remote providers
  	    noFilesFound: 'You have no files or folders here',
  	    selectX: {
  	      0: 'Select %{smart_count}',
  	      1: 'Select %{smart_count}'
  	    },
  	    allFilesFromFolderNamed: 'All files from folder %{name}',
  	    openFolderNamed: 'Open folder %{name}',
  	    cancel: 'Cancel',
  	    logOut: 'Log out',
  	    filter: 'Filter',
  	    resetFilter: 'Reset filter',
  	    loading: 'Loading...',
  	    authenticateWithTitle: 'Please authenticate with %{pluginName} to select files',
  	    authenticateWith: 'Connect to %{pluginName}',
  	    signInWithGoogle: 'Sign in with Google',
  	    searchImages: 'Search for images',
  	    enterTextToSearch: 'Enter text to search for images',
  	    search: 'Search',
  	    emptyFolderAdded: 'No files were added from empty folder',
  	    folderAlreadyAdded: 'The folder "%{folder}" was already added',
  	    folderAdded: {
  	      0: 'Added %{smart_count} file from %{folder}',
  	      1: 'Added %{smart_count} files from %{folder}'
  	    }
  	  }
  	};
  	return locale$1;
  }

  var Uppy_1;
  var hasRequiredUppy;

  function requireUppy () {
  	if (hasRequiredUppy) return Uppy_1;
  	hasRequiredUppy = 1;

  	var _nonSecure = /*@__PURE__*/ requireNonSecure();

  	var _loggers = requireLoggers();

  	var _Restricter = requireRestricter();

  	let _Symbol$for, _Symbol$for2;

  	function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

  	var id = 0;

  	function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

  	/* eslint-disable max-classes-per-file */

  	/* global AggregateError */
  	const Translator = requireTranslator();

  	const ee = requireNamespaceEmitter();

  	const throttle = requireLodash_throttle();

  	const DefaultStore = requireLib$3();

  	const getFileType = requireGetFileType();

  	const getFileNameAndExtension = requireGetFileNameAndExtension();

  	const generateFileID = requireGenerateFileID();

  	const supportsUploadProgress = requireSupportsUploadProgress();

  	const getFileName = requireGetFileName();

  	const packageJson = {
  	  "version": "2.3.4"
  	};

  	const locale = requireLocale$1();
  	/**
  	 * Uppy Core module.
  	 * Manages plugins, state updates, acts as an event bus,
  	 * adds/removes files and metadata.
  	 */


  	var _plugins = /*#__PURE__*/_classPrivateFieldLooseKey("plugins");

  	var _restricter = /*#__PURE__*/_classPrivateFieldLooseKey("restricter");

  	var _storeUnsubscribe = /*#__PURE__*/_classPrivateFieldLooseKey("storeUnsubscribe");

  	var _emitter = /*#__PURE__*/_classPrivateFieldLooseKey("emitter");

  	var _preProcessors = /*#__PURE__*/_classPrivateFieldLooseKey("preProcessors");

  	var _uploaders = /*#__PURE__*/_classPrivateFieldLooseKey("uploaders");

  	var _postProcessors = /*#__PURE__*/_classPrivateFieldLooseKey("postProcessors");

  	var _informAndEmit = /*#__PURE__*/_classPrivateFieldLooseKey("informAndEmit");

  	var _checkRequiredMetaFieldsOnFile = /*#__PURE__*/_classPrivateFieldLooseKey("checkRequiredMetaFieldsOnFile");

  	var _checkRequiredMetaFields = /*#__PURE__*/_classPrivateFieldLooseKey("checkRequiredMetaFields");

  	var _assertNewUploadAllowed = /*#__PURE__*/_classPrivateFieldLooseKey("assertNewUploadAllowed");

  	var _checkAndCreateFileStateObject = /*#__PURE__*/_classPrivateFieldLooseKey("checkAndCreateFileStateObject");

  	var _startIfAutoProceed = /*#__PURE__*/_classPrivateFieldLooseKey("startIfAutoProceed");

  	var _addListeners = /*#__PURE__*/_classPrivateFieldLooseKey("addListeners");

  	var _updateOnlineStatus = /*#__PURE__*/_classPrivateFieldLooseKey("updateOnlineStatus");

  	var _createUpload = /*#__PURE__*/_classPrivateFieldLooseKey("createUpload");

  	var _getUpload = /*#__PURE__*/_classPrivateFieldLooseKey("getUpload");

  	var _removeUpload = /*#__PURE__*/_classPrivateFieldLooseKey("removeUpload");

  	var _runUpload = /*#__PURE__*/_classPrivateFieldLooseKey("runUpload");

  	_Symbol$for = Symbol.for('uppy test: getPlugins');
  	_Symbol$for2 = Symbol.for('uppy test: createUpload');

  	class Uppy {
  	  /** @type {Record<string, BasePlugin[]>} */

  	  /**
  	   * Instantiate Uppy
  	   *
  	   * @param {object} opts — Uppy options
  	   */
  	  constructor(_opts) {
  	    Object.defineProperty(this, _runUpload, {
  	      value: _runUpload2
  	    });
  	    Object.defineProperty(this, _removeUpload, {
  	      value: _removeUpload2
  	    });
  	    Object.defineProperty(this, _getUpload, {
  	      value: _getUpload2
  	    });
  	    Object.defineProperty(this, _createUpload, {
  	      value: _createUpload2
  	    });
  	    Object.defineProperty(this, _addListeners, {
  	      value: _addListeners2
  	    });
  	    Object.defineProperty(this, _startIfAutoProceed, {
  	      value: _startIfAutoProceed2
  	    });
  	    Object.defineProperty(this, _checkAndCreateFileStateObject, {
  	      value: _checkAndCreateFileStateObject2
  	    });
  	    Object.defineProperty(this, _assertNewUploadAllowed, {
  	      value: _assertNewUploadAllowed2
  	    });
  	    Object.defineProperty(this, _checkRequiredMetaFields, {
  	      value: _checkRequiredMetaFields2
  	    });
  	    Object.defineProperty(this, _checkRequiredMetaFieldsOnFile, {
  	      value: _checkRequiredMetaFieldsOnFile2
  	    });
  	    Object.defineProperty(this, _informAndEmit, {
  	      value: _informAndEmit2
  	    });
  	    Object.defineProperty(this, _plugins, {
  	      writable: true,
  	      value: Object.create(null)
  	    });
  	    Object.defineProperty(this, _restricter, {
  	      writable: true,
  	      value: void 0
  	    });
  	    Object.defineProperty(this, _storeUnsubscribe, {
  	      writable: true,
  	      value: void 0
  	    });
  	    Object.defineProperty(this, _emitter, {
  	      writable: true,
  	      value: ee()
  	    });
  	    Object.defineProperty(this, _preProcessors, {
  	      writable: true,
  	      value: new Set()
  	    });
  	    Object.defineProperty(this, _uploaders, {
  	      writable: true,
  	      value: new Set()
  	    });
  	    Object.defineProperty(this, _postProcessors, {
  	      writable: true,
  	      value: new Set()
  	    });
  	    Object.defineProperty(this, _updateOnlineStatus, {
  	      writable: true,
  	      value: this.updateOnlineStatus.bind(this)
  	    });
  	    this.defaultLocale = locale;
  	    const defaultOptions = {
  	      id: 'uppy',
  	      autoProceed: false,

  	      /**
  	       * @deprecated The method should not be used
  	       */
  	      allowMultipleUploads: true,
  	      allowMultipleUploadBatches: true,
  	      debug: false,
  	      restrictions: _Restricter.defaultOptions,
  	      meta: {},
  	      onBeforeFileAdded: currentFile => currentFile,
  	      onBeforeUpload: files => files,
  	      store: DefaultStore(),
  	      logger: _loggers.justErrorsLogger,
  	      infoTimeout: 5000
  	    }; // Merge default options with the ones set by user,
  	    // making sure to merge restrictions too

  	    this.opts = { ...defaultOptions,
  	      ..._opts,
  	      restrictions: { ...defaultOptions.restrictions,
  	        ...(_opts && _opts.restrictions)
  	      }
  	    }; // Support debug: true for backwards-compatability, unless logger is set in opts
  	    // opts instead of this.opts to avoid comparing objects — we set logger: justErrorsLogger in defaultOptions

  	    if (_opts && _opts.logger && _opts.debug) {
  	      this.log('You are using a custom `logger`, but also set `debug: true`, which uses built-in logger to output logs to console. Ignoring `debug: true` and using your custom `logger`.', 'warning');
  	    } else if (_opts && _opts.debug) {
  	      this.opts.logger = _loggers.debugLogger;
  	    }

  	    this.log(`Using Core v${this.constructor.VERSION}`);
  	    this.i18nInit(); // ___Why throttle at 500ms?
  	    //    - We must throttle at >250ms for superfocus in Dashboard to work well
  	    //    (because animation takes 0.25s, and we want to wait for all animations to be over before refocusing).
  	    //    [Practical Check]: if thottle is at 100ms, then if you are uploading a file,
  	    //    and click 'ADD MORE FILES', - focus won't activate in Firefox.
  	    //    - We must throttle at around >500ms to avoid performance lags.
  	    //    [Practical Check] Firefox, try to upload a big file for a prolonged period of time. Laptop will start to heat up.

  	    this.calculateProgress = throttle(this.calculateProgress.bind(this), 500, {
  	      leading: true,
  	      trailing: true
  	    });
  	    this.store = this.opts.store;
  	    this.setState({
  	      plugins: {},
  	      files: {},
  	      currentUploads: {},
  	      allowNewUpload: true,
  	      capabilities: {
  	        uploadProgress: supportsUploadProgress(),
  	        individualCancellation: true,
  	        resumableUploads: false
  	      },
  	      totalProgress: 0,
  	      meta: { ...this.opts.meta
  	      },
  	      info: [],
  	      recoveredState: null
  	    });
  	    _classPrivateFieldLooseBase(this, _restricter)[_restricter] = new _Restricter.Restricter(() => this.opts, this.i18n);
  	    _classPrivateFieldLooseBase(this, _storeUnsubscribe)[_storeUnsubscribe] = this.store.subscribe((prevState, nextState, patch) => {
  	      this.emit('state-update', prevState, nextState, patch);
  	      this.updateAll(nextState);
  	    }); // Exposing uppy object on window for debugging and testing

  	    if (this.opts.debug && typeof window !== 'undefined') {
  	      window[this.opts.id] = this;
  	    }

  	    _classPrivateFieldLooseBase(this, _addListeners)[_addListeners]();
  	  }

  	  emit(event) {
  	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
  	      args[_key - 1] = arguments[_key];
  	    }

  	    _classPrivateFieldLooseBase(this, _emitter)[_emitter].emit(event, ...args);
  	  }

  	  on(event, callback) {
  	    _classPrivateFieldLooseBase(this, _emitter)[_emitter].on(event, callback);

  	    return this;
  	  }

  	  once(event, callback) {
  	    _classPrivateFieldLooseBase(this, _emitter)[_emitter].once(event, callback);

  	    return this;
  	  }

  	  off(event, callback) {
  	    _classPrivateFieldLooseBase(this, _emitter)[_emitter].off(event, callback);

  	    return this;
  	  }
  	  /**
  	   * Iterate on all plugins and run `update` on them.
  	   * Called each time state changes.
  	   *
  	   */


  	  updateAll(state) {
  	    this.iteratePlugins(plugin => {
  	      plugin.update(state);
  	    });
  	  }
  	  /**
  	   * Updates state with a patch
  	   *
  	   * @param {object} patch {foo: 'bar'}
  	   */


  	  setState(patch) {
  	    this.store.setState(patch);
  	  }
  	  /**
  	   * Returns current state.
  	   *
  	   * @returns {object}
  	   */


  	  getState() {
  	    return this.store.getState();
  	  }
  	  /**
  	   * Back compat for when uppy.state is used instead of uppy.getState().
  	   *
  	   * @deprecated
  	   */


  	  get state() {
  	    // Here, state is a non-enumerable property.
  	    return this.getState();
  	  }
  	  /**
  	   * Shorthand to set state for a specific file.
  	   */


  	  setFileState(fileID, state) {
  	    if (!this.getState().files[fileID]) {
  	      throw new Error(`Can’t set state for ${fileID} (the file could have been removed)`);
  	    }

  	    this.setState({
  	      files: { ...this.getState().files,
  	        [fileID]: { ...this.getState().files[fileID],
  	          ...state
  	        }
  	      }
  	    });
  	  }

  	  i18nInit() {
  	    const translator = new Translator([this.defaultLocale, this.opts.locale]);
  	    this.i18n = translator.translate.bind(translator);
  	    this.i18nArray = translator.translateArray.bind(translator);
  	    this.locale = translator.locale;
  	  }

  	  setOptions(newOpts) {
  	    this.opts = { ...this.opts,
  	      ...newOpts,
  	      restrictions: { ...this.opts.restrictions,
  	        ...(newOpts && newOpts.restrictions)
  	      }
  	    };

  	    if (newOpts.meta) {
  	      this.setMeta(newOpts.meta);
  	    }

  	    this.i18nInit();

  	    if (newOpts.locale) {
  	      this.iteratePlugins(plugin => {
  	        plugin.setOptions();
  	      });
  	    } // Note: this is not the preact `setState`, it's an internal function that has the same name.


  	    this.setState(); // so that UI re-renders with new options
  	  }

  	  resetProgress() {
  	    const defaultProgress = {
  	      percentage: 0,
  	      bytesUploaded: 0,
  	      uploadComplete: false,
  	      uploadStarted: null
  	    };
  	    const files = { ...this.getState().files
  	    };
  	    const updatedFiles = {};
  	    Object.keys(files).forEach(fileID => {
  	      const updatedFile = { ...files[fileID]
  	      };
  	      updatedFile.progress = { ...updatedFile.progress,
  	        ...defaultProgress
  	      };
  	      updatedFiles[fileID] = updatedFile;
  	    });
  	    this.setState({
  	      files: updatedFiles,
  	      totalProgress: 0
  	    });
  	    this.emit('reset-progress');
  	  }

  	  addPreProcessor(fn) {
  	    _classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors].add(fn);
  	  }

  	  removePreProcessor(fn) {
  	    return _classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors].delete(fn);
  	  }

  	  addPostProcessor(fn) {
  	    _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].add(fn);
  	  }

  	  removePostProcessor(fn) {
  	    return _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].delete(fn);
  	  }

  	  addUploader(fn) {
  	    _classPrivateFieldLooseBase(this, _uploaders)[_uploaders].add(fn);
  	  }

  	  removeUploader(fn) {
  	    return _classPrivateFieldLooseBase(this, _uploaders)[_uploaders].delete(fn);
  	  }

  	  setMeta(data) {
  	    const updatedMeta = { ...this.getState().meta,
  	      ...data
  	    };
  	    const updatedFiles = { ...this.getState().files
  	    };
  	    Object.keys(updatedFiles).forEach(fileID => {
  	      updatedFiles[fileID] = { ...updatedFiles[fileID],
  	        meta: { ...updatedFiles[fileID].meta,
  	          ...data
  	        }
  	      };
  	    });
  	    this.log('Adding metadata:');
  	    this.log(data);
  	    this.setState({
  	      meta: updatedMeta,
  	      files: updatedFiles
  	    });
  	  }

  	  setFileMeta(fileID, data) {
  	    const updatedFiles = { ...this.getState().files
  	    };

  	    if (!updatedFiles[fileID]) {
  	      this.log('Was trying to set metadata for a file that has been removed: ', fileID);
  	      return;
  	    }

  	    const newMeta = { ...updatedFiles[fileID].meta,
  	      ...data
  	    };
  	    updatedFiles[fileID] = { ...updatedFiles[fileID],
  	      meta: newMeta
  	    };
  	    this.setState({
  	      files: updatedFiles
  	    });
  	  }
  	  /**
  	   * Get a file object.
  	   *
  	   * @param {string} fileID The ID of the file object to return.
  	   */


  	  getFile(fileID) {
  	    return this.getState().files[fileID];
  	  }
  	  /**
  	   * Get all files in an array.
  	   */


  	  getFiles() {
  	    const {
  	      files
  	    } = this.getState();
  	    return Object.values(files);
  	  }

  	  getObjectOfFilesPerState() {
  	    const {
  	      files: filesObject,
  	      totalProgress,
  	      error
  	    } = this.getState();
  	    const files = Object.values(filesObject);
  	    const inProgressFiles = files.filter(_ref => {
  	      let {
  	        progress
  	      } = _ref;
  	      return !progress.uploadComplete && progress.uploadStarted;
  	    });
  	    const newFiles = files.filter(file => !file.progress.uploadStarted);
  	    const startedFiles = files.filter(file => file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess);
  	    const uploadStartedFiles = files.filter(file => file.progress.uploadStarted);
  	    const pausedFiles = files.filter(file => file.isPaused);
  	    const completeFiles = files.filter(file => file.progress.uploadComplete);
  	    const erroredFiles = files.filter(file => file.error);
  	    const inProgressNotPausedFiles = inProgressFiles.filter(file => !file.isPaused);
  	    const processingFiles = files.filter(file => file.progress.preprocess || file.progress.postprocess);
  	    return {
  	      newFiles,
  	      startedFiles,
  	      uploadStartedFiles,
  	      pausedFiles,
  	      completeFiles,
  	      erroredFiles,
  	      inProgressFiles,
  	      inProgressNotPausedFiles,
  	      processingFiles,
  	      isUploadStarted: uploadStartedFiles.length > 0,
  	      isAllComplete: totalProgress === 100 && completeFiles.length === files.length && processingFiles.length === 0,
  	      isAllErrored: !!error && erroredFiles.length === files.length,
  	      isAllPaused: inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length,
  	      isUploadInProgress: inProgressFiles.length > 0,
  	      isSomeGhost: files.some(file => file.isGhost)
  	    };
  	  }
  	  /*
  	  * @constructs
  	  * @param { Error } error
  	  * @param { undefined } file
  	  */

  	  /*
  	  * @constructs
  	  * @param { RestrictionError } error
  	  * @param { UppyFile | undefined } file
  	  */


  	  validateRestrictions(file, files) {
  	    if (files === void 0) {
  	      files = this.getFiles();
  	    }

  	    // TODO: directly return the Restriction error in next major version.
  	    // we create RestrictionError's just to discard immediately, which doesn't make sense.
  	    try {
  	      _classPrivateFieldLooseBase(this, _restricter)[_restricter].validate(file, files);

  	      return {
  	        result: true
  	      };
  	    } catch (err) {
  	      return {
  	        result: false,
  	        reason: err.message
  	      };
  	    }
  	  }

  	  checkIfFileAlreadyExists(fileID) {
  	    const {
  	      files
  	    } = this.getState();

  	    if (files[fileID] && !files[fileID].isGhost) {
  	      return true;
  	    }

  	    return false;
  	  }
  	  /**
  	   * Create a file state object based on user-provided `addFile()` options.
  	   *
  	   * Note this is extremely side-effectful and should only be done when a file state object
  	   * will be added to state immediately afterward!
  	   *
  	   * The `files` value is passed in because it may be updated by the caller without updating the store.
  	   */


  	  /**
  	   * Add a new file to `state.files`. This will run `onBeforeFileAdded`,
  	   * try to guess file type in a clever way, check file against restrictions,
  	   * and start an upload if `autoProceed === true`.
  	   *
  	   * @param {object} file object to add
  	   * @returns {string} id for the added file
  	   */
  	  addFile(file) {
  	    _classPrivateFieldLooseBase(this, _assertNewUploadAllowed)[_assertNewUploadAllowed](file);

  	    const {
  	      files
  	    } = this.getState();

  	    let newFile = _classPrivateFieldLooseBase(this, _checkAndCreateFileStateObject)[_checkAndCreateFileStateObject](files, file); // Users are asked to re-select recovered files without data,
  	    // and to keep the progress, meta and everthing else, we only replace said data


  	    if (files[newFile.id] && files[newFile.id].isGhost) {
  	      newFile = { ...files[newFile.id],
  	        data: file.data,
  	        isGhost: false
  	      };
  	      this.log(`Replaced the blob in the restored ghost file: ${newFile.name}, ${newFile.id}`);
  	    }

  	    this.setState({
  	      files: { ...files,
  	        [newFile.id]: newFile
  	      }
  	    });
  	    this.emit('file-added', newFile);
  	    this.emit('files-added', [newFile]);
  	    this.log(`Added file: ${newFile.name}, ${newFile.id}, mime type: ${newFile.type}`);

  	    _classPrivateFieldLooseBase(this, _startIfAutoProceed)[_startIfAutoProceed]();

  	    return newFile.id;
  	  }
  	  /**
  	   * Add multiple files to `state.files`. See the `addFile()` documentation.
  	   *
  	   * If an error occurs while adding a file, it is logged and the user is notified.
  	   * This is good for UI plugins, but not for programmatic use.
  	   * Programmatic users should usually still use `addFile()` on individual files.
  	   */


  	  addFiles(fileDescriptors) {
  	    _classPrivateFieldLooseBase(this, _assertNewUploadAllowed)[_assertNewUploadAllowed](); // create a copy of the files object only once


  	    const files = { ...this.getState().files
  	    };
  	    const newFiles = [];
  	    const errors = [];

  	    for (let i = 0; i < fileDescriptors.length; i++) {
  	      try {
  	        let newFile = _classPrivateFieldLooseBase(this, _checkAndCreateFileStateObject)[_checkAndCreateFileStateObject](files, fileDescriptors[i]); // Users are asked to re-select recovered files without data,
  	        // and to keep the progress, meta and everthing else, we only replace said data


  	        if (files[newFile.id] && files[newFile.id].isGhost) {
  	          newFile = { ...files[newFile.id],
  	            data: fileDescriptors[i].data,
  	            isGhost: false
  	          };
  	          this.log(`Replaced blob in a ghost file: ${newFile.name}, ${newFile.id}`);
  	        }

  	        files[newFile.id] = newFile;
  	        newFiles.push(newFile);
  	      } catch (err) {
  	        if (!err.isRestriction) {
  	          errors.push(err);
  	        }
  	      }
  	    }

  	    this.setState({
  	      files
  	    });
  	    newFiles.forEach(newFile => {
  	      this.emit('file-added', newFile);
  	    });
  	    this.emit('files-added', newFiles);

  	    if (newFiles.length > 5) {
  	      this.log(`Added batch of ${newFiles.length} files`);
  	    } else {
  	      Object.keys(newFiles).forEach(fileID => {
  	        this.log(`Added file: ${newFiles[fileID].name}\n id: ${newFiles[fileID].id}\n type: ${newFiles[fileID].type}`);
  	      });
  	    }

  	    if (newFiles.length > 0) {
  	      _classPrivateFieldLooseBase(this, _startIfAutoProceed)[_startIfAutoProceed]();
  	    }

  	    if (errors.length > 0) {
  	      let message = 'Multiple errors occurred while adding files:\n';
  	      errors.forEach(subError => {
  	        message += `\n * ${subError.message}`;
  	      });
  	      this.info({
  	        message: this.i18n('addBulkFilesFailed', {
  	          smart_count: errors.length
  	        }),
  	        details: message
  	      }, 'error', this.opts.infoTimeout);

  	      if (typeof AggregateError === 'function') {
  	        throw new AggregateError(errors, message);
  	      } else {
  	        const err = new Error(message);
  	        err.errors = errors;
  	        throw err;
  	      }
  	    }
  	  }

  	  removeFiles(fileIDs, reason) {
  	    const {
  	      files,
  	      currentUploads
  	    } = this.getState();
  	    const updatedFiles = { ...files
  	    };
  	    const updatedUploads = { ...currentUploads
  	    };
  	    const removedFiles = Object.create(null);
  	    fileIDs.forEach(fileID => {
  	      if (files[fileID]) {
  	        removedFiles[fileID] = files[fileID];
  	        delete updatedFiles[fileID];
  	      }
  	    }); // Remove files from the `fileIDs` list in each upload.

  	    function fileIsNotRemoved(uploadFileID) {
  	      return removedFiles[uploadFileID] === undefined;
  	    }

  	    Object.keys(updatedUploads).forEach(uploadID => {
  	      const newFileIDs = currentUploads[uploadID].fileIDs.filter(fileIsNotRemoved); // Remove the upload if no files are associated with it anymore.

  	      if (newFileIDs.length === 0) {
  	        delete updatedUploads[uploadID];
  	        return;
  	      }

  	      const {
  	        capabilities
  	      } = this.getState();

  	      if (newFileIDs.length !== currentUploads[uploadID].fileIDs.length && !capabilities.individualCancellation) {
  	        throw new Error('individualCancellation is disabled');
  	      }

  	      updatedUploads[uploadID] = { ...currentUploads[uploadID],
  	        fileIDs: newFileIDs
  	      };
  	    });
  	    const stateUpdate = {
  	      currentUploads: updatedUploads,
  	      files: updatedFiles
  	    }; // If all files were removed - allow new uploads,
  	    // and clear recoveredState

  	    if (Object.keys(updatedFiles).length === 0) {
  	      stateUpdate.allowNewUpload = true;
  	      stateUpdate.error = null;
  	      stateUpdate.recoveredState = null;
  	    }

  	    this.setState(stateUpdate);
  	    this.calculateTotalProgress();
  	    const removedFileIDs = Object.keys(removedFiles);
  	    removedFileIDs.forEach(fileID => {
  	      this.emit('file-removed', removedFiles[fileID], reason);
  	    });

  	    if (removedFileIDs.length > 5) {
  	      this.log(`Removed ${removedFileIDs.length} files`);
  	    } else {
  	      this.log(`Removed files: ${removedFileIDs.join(', ')}`);
  	    }
  	  }

  	  removeFile(fileID, reason) {
  	    if (reason === void 0) {
  	      reason = null;
  	    }

  	    this.removeFiles([fileID], reason);
  	  }

  	  pauseResume(fileID) {
  	    if (!this.getState().capabilities.resumableUploads || this.getFile(fileID).uploadComplete) {
  	      return undefined;
  	    }

  	    const wasPaused = this.getFile(fileID).isPaused || false;
  	    const isPaused = !wasPaused;
  	    this.setFileState(fileID, {
  	      isPaused
  	    });
  	    this.emit('upload-pause', fileID, isPaused);
  	    return isPaused;
  	  }

  	  pauseAll() {
  	    const updatedFiles = { ...this.getState().files
  	    };
  	    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter(file => {
  	      return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;
  	    });
  	    inProgressUpdatedFiles.forEach(file => {
  	      const updatedFile = { ...updatedFiles[file],
  	        isPaused: true
  	      };
  	      updatedFiles[file] = updatedFile;
  	    });
  	    this.setState({
  	      files: updatedFiles
  	    });
  	    this.emit('pause-all');
  	  }

  	  resumeAll() {
  	    const updatedFiles = { ...this.getState().files
  	    };
  	    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter(file => {
  	      return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;
  	    });
  	    inProgressUpdatedFiles.forEach(file => {
  	      const updatedFile = { ...updatedFiles[file],
  	        isPaused: false,
  	        error: null
  	      };
  	      updatedFiles[file] = updatedFile;
  	    });
  	    this.setState({
  	      files: updatedFiles
  	    });
  	    this.emit('resume-all');
  	  }

  	  retryAll() {
  	    const updatedFiles = { ...this.getState().files
  	    };
  	    const filesToRetry = Object.keys(updatedFiles).filter(file => {
  	      return updatedFiles[file].error;
  	    });
  	    filesToRetry.forEach(file => {
  	      const updatedFile = { ...updatedFiles[file],
  	        isPaused: false,
  	        error: null
  	      };
  	      updatedFiles[file] = updatedFile;
  	    });
  	    this.setState({
  	      files: updatedFiles,
  	      error: null
  	    });
  	    this.emit('retry-all', filesToRetry);

  	    if (filesToRetry.length === 0) {
  	      return Promise.resolve({
  	        successful: [],
  	        failed: []
  	      });
  	    }

  	    const uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](filesToRetry, {
  	      forceAllowNewUpload: true // create new upload even if allowNewUpload: false

  	    });

  	    return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);
  	  }

  	  cancelAll(_temp) {
  	    let {
  	      reason = 'user'
  	    } = _temp === void 0 ? {} : _temp;
  	    this.emit('cancel-all', {
  	      reason
  	    }); // Only remove existing uploads if user is canceling

  	    if (reason === 'user') {
  	      const {
  	        files
  	      } = this.getState();
  	      const fileIDs = Object.keys(files);

  	      if (fileIDs.length) {
  	        this.removeFiles(fileIDs, 'cancel-all');
  	      }

  	      this.setState({
  	        totalProgress: 0,
  	        error: null,
  	        recoveredState: null
  	      });
  	    }
  	  }

  	  retryUpload(fileID) {
  	    this.setFileState(fileID, {
  	      error: null,
  	      isPaused: false
  	    });
  	    this.emit('upload-retry', fileID);

  	    const uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload]([fileID], {
  	      forceAllowNewUpload: true // create new upload even if allowNewUpload: false

  	    });

  	    return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);
  	  } // todo remove in next major. what is the point of the reset method when we have cancelAll or vice versa?


  	  reset() {
  	    this.cancelAll(...arguments);
  	  }

  	  logout() {
  	    this.iteratePlugins(plugin => {
  	      if (plugin.provider && plugin.provider.logout) {
  	        plugin.provider.logout();
  	      }
  	    });
  	  }

  	  calculateProgress(file, data) {
  	    if (file == null || !this.getFile(file.id)) {
  	      this.log(`Not setting progress for a file that has been removed: ${file == null ? void 0 : file.id}`);
  	      return;
  	    } // bytesTotal may be null or zero; in that case we can't divide by it


  	    const canHavePercentage = Number.isFinite(data.bytesTotal) && data.bytesTotal > 0;
  	    this.setFileState(file.id, {
  	      progress: { ...this.getFile(file.id).progress,
  	        bytesUploaded: data.bytesUploaded,
  	        bytesTotal: data.bytesTotal,
  	        percentage: canHavePercentage ? Math.round(data.bytesUploaded / data.bytesTotal * 100) : 0
  	      }
  	    });
  	    this.calculateTotalProgress();
  	  }

  	  calculateTotalProgress() {
  	    // calculate total progress, using the number of files currently uploading,
  	    // multiplied by 100 and the summ of individual progress of each file
  	    const files = this.getFiles();
  	    const inProgress = files.filter(file => {
  	      return file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess;
  	    });

  	    if (inProgress.length === 0) {
  	      this.emit('progress', 0);
  	      this.setState({
  	        totalProgress: 0
  	      });
  	      return;
  	    }

  	    const sizedFiles = inProgress.filter(file => file.progress.bytesTotal != null);
  	    const unsizedFiles = inProgress.filter(file => file.progress.bytesTotal == null);

  	    if (sizedFiles.length === 0) {
  	      const progressMax = inProgress.length * 100;
  	      const currentProgress = unsizedFiles.reduce((acc, file) => {
  	        return acc + file.progress.percentage;
  	      }, 0);
  	      const totalProgress = Math.round(currentProgress / progressMax * 100);
  	      this.setState({
  	        totalProgress
  	      });
  	      return;
  	    }

  	    let totalSize = sizedFiles.reduce((acc, file) => {
  	      return acc + file.progress.bytesTotal;
  	    }, 0);
  	    const averageSize = totalSize / sizedFiles.length;
  	    totalSize += averageSize * unsizedFiles.length;
  	    let uploadedSize = 0;
  	    sizedFiles.forEach(file => {
  	      uploadedSize += file.progress.bytesUploaded;
  	    });
  	    unsizedFiles.forEach(file => {
  	      uploadedSize += averageSize * (file.progress.percentage || 0) / 100;
  	    });
  	    let totalProgress = totalSize === 0 ? 0 : Math.round(uploadedSize / totalSize * 100); // hot fix, because:
  	    // uploadedSize ended up larger than totalSize, resulting in 1325% total

  	    if (totalProgress > 100) {
  	      totalProgress = 100;
  	    }

  	    this.setState({
  	      totalProgress
  	    });
  	    this.emit('progress', totalProgress);
  	  }
  	  /**
  	   * Registers listeners for all global actions, like:
  	   * `error`, `file-removed`, `upload-progress`
  	   */


  	  updateOnlineStatus() {
  	    const online = typeof window.navigator.onLine !== 'undefined' ? window.navigator.onLine : true;

  	    if (!online) {
  	      this.emit('is-offline');
  	      this.info(this.i18n('noInternetConnection'), 'error', 0);
  	      this.wasOffline = true;
  	    } else {
  	      this.emit('is-online');

  	      if (this.wasOffline) {
  	        this.emit('back-online');
  	        this.info(this.i18n('connectedToInternet'), 'success', 3000);
  	        this.wasOffline = false;
  	      }
  	    }
  	  }

  	  getID() {
  	    return this.opts.id;
  	  }
  	  /**
  	   * Registers a plugin with Core.
  	   *
  	   * @param {object} Plugin object
  	   * @param {object} [opts] object with options to be passed to Plugin
  	   * @returns {object} self for chaining
  	   */
  	  // eslint-disable-next-line no-shadow


  	  use(Plugin, opts) {
  	    if (typeof Plugin !== 'function') {
  	      const msg = `Expected a plugin class, but got ${Plugin === null ? 'null' : typeof Plugin}.` + ' Please verify that the plugin was imported and spelled correctly.';
  	      throw new TypeError(msg);
  	    } // Instantiate


  	    const plugin = new Plugin(this, opts);
  	    const pluginId = plugin.id;

  	    if (!pluginId) {
  	      throw new Error('Your plugin must have an id');
  	    }

  	    if (!plugin.type) {
  	      throw new Error('Your plugin must have a type');
  	    }

  	    const existsPluginAlready = this.getPlugin(pluginId);

  	    if (existsPluginAlready) {
  	      const msg = `Already found a plugin named '${existsPluginAlready.id}'. ` + `Tried to use: '${pluginId}'.\n` + 'Uppy plugins must have unique `id` options. See https://uppy.io/docs/plugins/#id.';
  	      throw new Error(msg);
  	    }

  	    if (Plugin.VERSION) {
  	      this.log(`Using ${pluginId} v${Plugin.VERSION}`);
  	    }

  	    if (plugin.type in _classPrivateFieldLooseBase(this, _plugins)[_plugins]) {
  	      _classPrivateFieldLooseBase(this, _plugins)[_plugins][plugin.type].push(plugin);
  	    } else {
  	      _classPrivateFieldLooseBase(this, _plugins)[_plugins][plugin.type] = [plugin];
  	    }

  	    plugin.install();
  	    return this;
  	  }
  	  /**
  	   * Find one Plugin by name.
  	   *
  	   * @param {string} id plugin id
  	   * @returns {BasePlugin|undefined}
  	   */


  	  getPlugin(id) {
  	    for (const plugins of Object.values(_classPrivateFieldLooseBase(this, _plugins)[_plugins])) {
  	      const foundPlugin = plugins.find(plugin => plugin.id === id);
  	      if (foundPlugin != null) return foundPlugin;
  	    }

  	    return undefined;
  	  }

  	  [_Symbol$for](type) {
  	    return _classPrivateFieldLooseBase(this, _plugins)[_plugins][type];
  	  }
  	  /**
  	   * Iterate through all `use`d plugins.
  	   *
  	   * @param {Function} method that will be run on each plugin
  	   */


  	  iteratePlugins(method) {
  	    Object.values(_classPrivateFieldLooseBase(this, _plugins)[_plugins]).flat(1).forEach(method);
  	  }
  	  /**
  	   * Uninstall and remove a plugin.
  	   *
  	   * @param {object} instance The plugin instance to remove.
  	   */


  	  removePlugin(instance) {
  	    this.log(`Removing plugin ${instance.id}`);
  	    this.emit('plugin-remove', instance);

  	    if (instance.uninstall) {
  	      instance.uninstall();
  	    }

  	    const list = _classPrivateFieldLooseBase(this, _plugins)[_plugins][instance.type]; // list.indexOf failed here, because Vue3 converted the plugin instance
  	    // to a Proxy object, which failed the strict comparison test:
  	    // obj !== objProxy


  	    const index = list.findIndex(item => item.id === instance.id);

  	    if (index !== -1) {
  	      list.splice(index, 1);
  	    }

  	    const state = this.getState();
  	    const updatedState = {
  	      plugins: { ...state.plugins,
  	        [instance.id]: undefined
  	      }
  	    };
  	    this.setState(updatedState);
  	  }
  	  /**
  	   * Uninstall all plugins and close down this Uppy instance.
  	   */


  	  close(_temp2) {
  	    let {
  	      reason
  	    } = _temp2 === void 0 ? {} : _temp2;
  	    this.log(`Closing Uppy instance ${this.opts.id}: removing all files and uninstalling plugins`);
  	    this.cancelAll({
  	      reason
  	    });

  	    _classPrivateFieldLooseBase(this, _storeUnsubscribe)[_storeUnsubscribe]();

  	    this.iteratePlugins(plugin => {
  	      this.removePlugin(plugin);
  	    });

  	    if (typeof window !== 'undefined' && window.removeEventListener) {
  	      window.removeEventListener('online', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);
  	      window.removeEventListener('offline', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);
  	    }
  	  }

  	  hideInfo() {
  	    const {
  	      info
  	    } = this.getState();
  	    this.setState({
  	      info: info.slice(1)
  	    });
  	    this.emit('info-hidden');
  	  }
  	  /**
  	   * Set info message in `state.info`, so that UI plugins like `Informer`
  	   * can display the message.
  	   *
  	   * @param {string | object} message Message to be displayed by the informer
  	   * @param {string} [type]
  	   * @param {number} [duration]
  	   */


  	  info(message, type, duration) {
  	    if (type === void 0) {
  	      type = 'info';
  	    }

  	    if (duration === void 0) {
  	      duration = 3000;
  	    }

  	    const isComplexMessage = typeof message === 'object';
  	    this.setState({
  	      info: [...this.getState().info, {
  	        type,
  	        message: isComplexMessage ? message.message : message,
  	        details: isComplexMessage ? message.details : null
  	      }]
  	    });
  	    setTimeout(() => this.hideInfo(), duration);
  	    this.emit('info-visible');
  	  }
  	  /**
  	   * Passes messages to a function, provided in `opts.logger`.
  	   * If `opts.logger: Uppy.debugLogger` or `opts.debug: true`, logs to the browser console.
  	   *
  	   * @param {string|object} message to log
  	   * @param {string} [type] optional `error` or `warning`
  	   */


  	  log(message, type) {
  	    const {
  	      logger
  	    } = this.opts;

  	    switch (type) {
  	      case 'error':
  	        logger.error(message);
  	        break;

  	      case 'warning':
  	        logger.warn(message);
  	        break;

  	      default:
  	        logger.debug(message);
  	        break;
  	    }
  	  }
  	  /**
  	   * Restore an upload by its ID.
  	   */


  	  restore(uploadID) {
  	    this.log(`Core: attempting to restore upload "${uploadID}"`);

  	    if (!this.getState().currentUploads[uploadID]) {
  	      _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);

  	      return Promise.reject(new Error('Nonexistent upload'));
  	    }

  	    return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);
  	  }
  	  /**
  	   * Create an upload for a bunch of files.
  	   *
  	   * @param {Array<string>} fileIDs File IDs to include in this upload.
  	   * @returns {string} ID of this upload.
  	   */


  	  [_Symbol$for2]() {
  	    return _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](...arguments);
  	  }

  	  /**
  	   * Add data to an upload's result object.
  	   *
  	   * @param {string} uploadID The ID of the upload.
  	   * @param {object} data Data properties to add to the result object.
  	   */
  	  addResultData(uploadID, data) {
  	    if (!_classPrivateFieldLooseBase(this, _getUpload)[_getUpload](uploadID)) {
  	      this.log(`Not setting result for an upload that has been removed: ${uploadID}`);
  	      return;
  	    }

  	    const {
  	      currentUploads
  	    } = this.getState();
  	    const currentUpload = { ...currentUploads[uploadID],
  	      result: { ...currentUploads[uploadID].result,
  	        ...data
  	      }
  	    };
  	    this.setState({
  	      currentUploads: { ...currentUploads,
  	        [uploadID]: currentUpload
  	      }
  	    });
  	  }
  	  /**
  	   * Remove an upload, eg. if it has been canceled or completed.
  	   *
  	   * @param {string} uploadID The ID of the upload.
  	   */


  	  /**
  	   * Start an upload for all the files that are not currently being uploaded.
  	   *
  	   * @returns {Promise}
  	   */
  	  upload() {
  	    var _classPrivateFieldLoo;

  	    if (!((_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _plugins)[_plugins].uploader) != null && _classPrivateFieldLoo.length)) {
  	      this.log('No uploader type plugins are used', 'warning');
  	    }

  	    let {
  	      files
  	    } = this.getState();
  	    const onBeforeUploadResult = this.opts.onBeforeUpload(files);

  	    if (onBeforeUploadResult === false) {
  	      return Promise.reject(new Error('Not starting the upload because onBeforeUpload returned false'));
  	    }

  	    if (onBeforeUploadResult && typeof onBeforeUploadResult === 'object') {
  	      files = onBeforeUploadResult; // Updating files in state, because uploader plugins receive file IDs,
  	      // and then fetch the actual file object from state

  	      this.setState({
  	        files
  	      });
  	    }

  	    return Promise.resolve().then(() => _classPrivateFieldLooseBase(this, _restricter)[_restricter].validateMinNumberOfFiles(files)).catch(err => {
  	      _classPrivateFieldLooseBase(this, _informAndEmit)[_informAndEmit](err);

  	      throw err;
  	    }).then(() => {
  	      if (!_classPrivateFieldLooseBase(this, _checkRequiredMetaFields)[_checkRequiredMetaFields](files)) {
  	        throw new _Restricter.RestrictionError(this.i18n('missingRequiredMetaField'));
  	      }
  	    }).catch(err => {
  	      // Doing this in a separate catch because we already emited and logged
  	      // all the errors in `checkRequiredMetaFields` so we only throw a generic
  	      // missing fields error here.
  	      throw err;
  	    }).then(() => {
  	      const {
  	        currentUploads
  	      } = this.getState(); // get a list of files that are currently assigned to uploads

  	      const currentlyUploadingFiles = Object.values(currentUploads).flatMap(curr => curr.fileIDs);
  	      const waitingFileIDs = [];
  	      Object.keys(files).forEach(fileID => {
  	        const file = this.getFile(fileID); // if the file hasn't started uploading and hasn't already been assigned to an upload..

  	        if (!file.progress.uploadStarted && currentlyUploadingFiles.indexOf(fileID) === -1) {
  	          waitingFileIDs.push(file.id);
  	        }
  	      });

  	      const uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](waitingFileIDs);

  	      return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);
  	    }).catch(err => {
  	      this.emit('error', err);
  	      this.log(err, 'error');
  	      throw err;
  	    });
  	  }

  	}

  	function _informAndEmit2(error, file) {
  	  const {
  	    message,
  	    details = ''
  	  } = error;

  	  if (error.isRestriction) {
  	    this.emit('restriction-failed', file, error);
  	  } else {
  	    this.emit('error', error);
  	  }

  	  this.info({
  	    message,
  	    details
  	  }, 'error', this.opts.infoTimeout);
  	  this.log(`${message} ${details}`.trim(), 'error');
  	}

  	function _checkRequiredMetaFieldsOnFile2(file) {
  	  const {
  	    missingFields,
  	    error
  	  } = _classPrivateFieldLooseBase(this, _restricter)[_restricter].getMissingRequiredMetaFields(file);

  	  if (missingFields.length > 0) {
  	    this.setFileState(file.id, {
  	      missingRequiredMetaFields: missingFields
  	    });
  	    this.log(error.message);
  	    this.emit('restriction-failed', file, error);
  	    return false;
  	  }

  	  return true;
  	}

  	function _checkRequiredMetaFields2(files) {
  	  let success = true;

  	  for (const file of Object.values(files)) {
  	    if (!_classPrivateFieldLooseBase(this, _checkRequiredMetaFieldsOnFile)[_checkRequiredMetaFieldsOnFile](file)) {
  	      success = false;
  	    }
  	  }

  	  return success;
  	}

  	function _assertNewUploadAllowed2(file) {
  	  const {
  	    allowNewUpload
  	  } = this.getState();

  	  if (allowNewUpload === false) {
  	    const error = new _Restricter.RestrictionError(this.i18n('noMoreFilesAllowed'));

  	    _classPrivateFieldLooseBase(this, _informAndEmit)[_informAndEmit](error, file);

  	    throw error;
  	  }
  	}

  	function _checkAndCreateFileStateObject2(files, fileDescriptor) {
  	  const fileType = getFileType(fileDescriptor);
  	  const fileName = getFileName(fileType, fileDescriptor);
  	  const fileExtension = getFileNameAndExtension(fileName).extension;
  	  const isRemote = Boolean(fileDescriptor.isRemote);
  	  const fileID = generateFileID({ ...fileDescriptor,
  	    type: fileType
  	  });

  	  if (this.checkIfFileAlreadyExists(fileID)) {
  	    const error = new _Restricter.RestrictionError(this.i18n('noDuplicates', {
  	      fileName
  	    }));

  	    _classPrivateFieldLooseBase(this, _informAndEmit)[_informAndEmit](error, fileDescriptor);

  	    throw error;
  	  }

  	  const meta = fileDescriptor.meta || {};
  	  meta.name = fileName;
  	  meta.type = fileType; // `null` means the size is unknown.

  	  const size = Number.isFinite(fileDescriptor.data.size) ? fileDescriptor.data.size : null;
  	  let newFile = {
  	    source: fileDescriptor.source || '',
  	    id: fileID,
  	    name: fileName,
  	    extension: fileExtension || '',
  	    meta: { ...this.getState().meta,
  	      ...meta
  	    },
  	    type: fileType,
  	    data: fileDescriptor.data,
  	    progress: {
  	      percentage: 0,
  	      bytesUploaded: 0,
  	      bytesTotal: size,
  	      uploadComplete: false,
  	      uploadStarted: null
  	    },
  	    size,
  	    isRemote,
  	    remote: fileDescriptor.remote || '',
  	    preview: fileDescriptor.preview
  	  };
  	  const onBeforeFileAddedResult = this.opts.onBeforeFileAdded(newFile, files);

  	  if (onBeforeFileAddedResult === false) {
  	    // Don’t show UI info for this error, as it should be done by the developer
  	    const error = new _Restricter.RestrictionError('Cannot add the file because onBeforeFileAdded returned false.');
  	    this.emit('restriction-failed', fileDescriptor, error);
  	    throw error;
  	  } else if (typeof onBeforeFileAddedResult === 'object' && onBeforeFileAddedResult !== null) {
  	    newFile = onBeforeFileAddedResult;
  	  }

  	  try {
  	    const filesArray = Object.keys(files).map(i => files[i]);

  	    _classPrivateFieldLooseBase(this, _restricter)[_restricter].validate(newFile, filesArray);
  	  } catch (err) {
  	    _classPrivateFieldLooseBase(this, _informAndEmit)[_informAndEmit](err, newFile);

  	    throw err;
  	  }

  	  return newFile;
  	}

  	function _startIfAutoProceed2() {
  	  if (this.opts.autoProceed && !this.scheduledAutoProceed) {
  	    this.scheduledAutoProceed = setTimeout(() => {
  	      this.scheduledAutoProceed = null;
  	      this.upload().catch(err => {
  	        if (!err.isRestriction) {
  	          this.log(err.stack || err.message || err);
  	        }
  	      });
  	    }, 4);
  	  }
  	}

  	function _addListeners2() {
  	  /**
  	   * @param {Error} error
  	   * @param {object} [file]
  	   * @param {object} [response]
  	   */
  	  const errorHandler = (error, file, response) => {
  	    let errorMsg = error.message || 'Unknown error';

  	    if (error.details) {
  	      errorMsg += ` ${error.details}`;
  	    }

  	    this.setState({
  	      error: errorMsg
  	    });

  	    if (file != null && file.id in this.getState().files) {
  	      this.setFileState(file.id, {
  	        error: errorMsg,
  	        response
  	      });
  	    }
  	  };

  	  this.on('error', errorHandler);
  	  this.on('upload-error', (file, error, response) => {
  	    errorHandler(error, file, response);

  	    if (typeof error === 'object' && error.message) {
  	      const newError = new Error(error.message);
  	      newError.details = error.message;

  	      if (error.details) {
  	        newError.details += ` ${error.details}`;
  	      }

  	      newError.message = this.i18n('failedToUpload', {
  	        file: file == null ? void 0 : file.name
  	      });

  	      _classPrivateFieldLooseBase(this, _informAndEmit)[_informAndEmit](newError);
  	    } else {
  	      _classPrivateFieldLooseBase(this, _informAndEmit)[_informAndEmit](error);
  	    }
  	  });
  	  this.on('upload', () => {
  	    this.setState({
  	      error: null
  	    });
  	  });
  	  this.on('upload-started', file => {
  	    if (file == null || !this.getFile(file.id)) {
  	      this.log(`Not setting progress for a file that has been removed: ${file == null ? void 0 : file.id}`);
  	      return;
  	    }

  	    this.setFileState(file.id, {
  	      progress: {
  	        uploadStarted: Date.now(),
  	        uploadComplete: false,
  	        percentage: 0,
  	        bytesUploaded: 0,
  	        bytesTotal: file.size
  	      }
  	    });
  	  });
  	  this.on('upload-progress', this.calculateProgress);
  	  this.on('upload-success', (file, uploadResp) => {
  	    if (file == null || !this.getFile(file.id)) {
  	      this.log(`Not setting progress for a file that has been removed: ${file == null ? void 0 : file.id}`);
  	      return;
  	    }

  	    const currentProgress = this.getFile(file.id).progress;
  	    this.setFileState(file.id, {
  	      progress: { ...currentProgress,
  	        postprocess: _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].size > 0 ? {
  	          mode: 'indeterminate'
  	        } : null,
  	        uploadComplete: true,
  	        percentage: 100,
  	        bytesUploaded: currentProgress.bytesTotal
  	      },
  	      response: uploadResp,
  	      uploadURL: uploadResp.uploadURL,
  	      isPaused: false
  	    }); // Remote providers sometimes don't tell us the file size,
  	    // but we can know how many bytes we uploaded once the upload is complete.

  	    if (file.size == null) {
  	      this.setFileState(file.id, {
  	        size: uploadResp.bytesUploaded || currentProgress.bytesTotal
  	      });
  	    }

  	    this.calculateTotalProgress();
  	  });
  	  this.on('preprocess-progress', (file, progress) => {
  	    if (file == null || !this.getFile(file.id)) {
  	      this.log(`Not setting progress for a file that has been removed: ${file == null ? void 0 : file.id}`);
  	      return;
  	    }

  	    this.setFileState(file.id, {
  	      progress: { ...this.getFile(file.id).progress,
  	        preprocess: progress
  	      }
  	    });
  	  });
  	  this.on('preprocess-complete', file => {
  	    if (file == null || !this.getFile(file.id)) {
  	      this.log(`Not setting progress for a file that has been removed: ${file == null ? void 0 : file.id}`);
  	      return;
  	    }

  	    const files = { ...this.getState().files
  	    };
  	    files[file.id] = { ...files[file.id],
  	      progress: { ...files[file.id].progress
  	      }
  	    };
  	    delete files[file.id].progress.preprocess;
  	    this.setState({
  	      files
  	    });
  	  });
  	  this.on('postprocess-progress', (file, progress) => {
  	    if (file == null || !this.getFile(file.id)) {
  	      this.log(`Not setting progress for a file that has been removed: ${file == null ? void 0 : file.id}`);
  	      return;
  	    }

  	    this.setFileState(file.id, {
  	      progress: { ...this.getState().files[file.id].progress,
  	        postprocess: progress
  	      }
  	    });
  	  });
  	  this.on('postprocess-complete', file => {
  	    if (file == null || !this.getFile(file.id)) {
  	      this.log(`Not setting progress for a file that has been removed: ${file == null ? void 0 : file.id}`);
  	      return;
  	    }

  	    const files = { ...this.getState().files
  	    };
  	    files[file.id] = { ...files[file.id],
  	      progress: { ...files[file.id].progress
  	      }
  	    };
  	    delete files[file.id].progress.postprocess;
  	    this.setState({
  	      files
  	    });
  	  });
  	  this.on('restored', () => {
  	    // Files may have changed--ensure progress is still accurate.
  	    this.calculateTotalProgress();
  	  });
  	  this.on('dashboard:file-edit-complete', file => {
  	    if (file) {
  	      _classPrivateFieldLooseBase(this, _checkRequiredMetaFieldsOnFile)[_checkRequiredMetaFieldsOnFile](file);
  	    }
  	  }); // show informer if offline

  	  if (typeof window !== 'undefined' && window.addEventListener) {
  	    window.addEventListener('online', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);
  	    window.addEventListener('offline', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);
  	    setTimeout(_classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus], 3000);
  	  }
  	}

  	function _createUpload2(fileIDs, opts) {
  	  if (opts === void 0) {
  	    opts = {};
  	  }

  	  // uppy.retryAll sets this to true — when retrying we want to ignore `allowNewUpload: false`
  	  const {
  	    forceAllowNewUpload = false
  	  } = opts;
  	  const {
  	    allowNewUpload,
  	    currentUploads
  	  } = this.getState();

  	  if (!allowNewUpload && !forceAllowNewUpload) {
  	    throw new Error('Cannot create a new upload: already uploading.');
  	  }

  	  const uploadID = (0, _nonSecure.nanoid)();
  	  this.emit('upload', {
  	    id: uploadID,
  	    fileIDs
  	  });
  	  this.setState({
  	    allowNewUpload: this.opts.allowMultipleUploadBatches !== false && this.opts.allowMultipleUploads !== false,
  	    currentUploads: { ...currentUploads,
  	      [uploadID]: {
  	        fileIDs,
  	        step: 0,
  	        result: {}
  	      }
  	    }
  	  });
  	  return uploadID;
  	}

  	function _getUpload2(uploadID) {
  	  const {
  	    currentUploads
  	  } = this.getState();
  	  return currentUploads[uploadID];
  	}

  	function _removeUpload2(uploadID) {
  	  const currentUploads = { ...this.getState().currentUploads
  	  };
  	  delete currentUploads[uploadID];
  	  this.setState({
  	    currentUploads
  	  });
  	}

  	async function _runUpload2(uploadID) {
  	  let {
  	    currentUploads
  	  } = this.getState();
  	  let currentUpload = currentUploads[uploadID];
  	  const restoreStep = currentUpload.step || 0;
  	  const steps = [..._classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors], ..._classPrivateFieldLooseBase(this, _uploaders)[_uploaders], ..._classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors]];

  	  try {
  	    for (let step = restoreStep; step < steps.length; step++) {
  	      if (!currentUpload) {
  	        break;
  	      }

  	      const fn = steps[step];
  	      const updatedUpload = { ...currentUpload,
  	        step
  	      };
  	      this.setState({
  	        currentUploads: { ...currentUploads,
  	          [uploadID]: updatedUpload
  	        }
  	      }); // TODO give this the `updatedUpload` object as its only parameter maybe?
  	      // Otherwise when more metadata may be added to the upload this would keep getting more parameters

  	      await fn(updatedUpload.fileIDs, uploadID); // Update currentUpload value in case it was modified asynchronously.

  	      currentUploads = this.getState().currentUploads;
  	      currentUpload = currentUploads[uploadID];
  	    }
  	  } catch (err) {
  	    _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);

  	    throw err;
  	  } // Set result data.


  	  if (currentUpload) {
  	    // Mark postprocessing step as complete if necessary; this addresses a case where we might get
  	    // stuck in the postprocessing UI while the upload is fully complete.
  	    // If the postprocessing steps do not do any work, they may not emit postprocessing events at
  	    // all, and never mark the postprocessing as complete. This is fine on its own but we
  	    // introduced code in the @uppy/core upload-success handler to prepare postprocessing progress
  	    // state if any postprocessors are registered. That is to avoid a "flash of completed state"
  	    // before the postprocessing plugins can emit events.
  	    //
  	    // So, just in case an upload with postprocessing plugins *has* completed *without* emitting
  	    // postprocessing completion, we do it instead.
  	    currentUpload.fileIDs.forEach(fileID => {
  	      const file = this.getFile(fileID);

  	      if (file && file.progress.postprocess) {
  	        this.emit('postprocess-complete', file);
  	      }
  	    });
  	    const files = currentUpload.fileIDs.map(fileID => this.getFile(fileID));
  	    const successful = files.filter(file => !file.error);
  	    const failed = files.filter(file => file.error);
  	    await this.addResultData(uploadID, {
  	      successful,
  	      failed,
  	      uploadID
  	    }); // Update currentUpload value in case it was modified asynchronously.

  	    currentUploads = this.getState().currentUploads;
  	    currentUpload = currentUploads[uploadID];
  	  } // Emit completion events.
  	  // This is in a separate function so that the `currentUploads` variable
  	  // always refers to the latest state. In the handler right above it refers
  	  // to an outdated object without the `.result` property.


  	  let result;

  	  if (currentUpload) {
  	    result = currentUpload.result;
  	    this.emit('complete', result);

  	    _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);
  	  }

  	  if (result == null) {
  	    this.log(`Not setting result for an upload that has been removed: ${uploadID}`);
  	  }

  	  return result;
  	}

  	Uppy.VERSION = packageJson.version;
  	Uppy_1 = Uppy;
  	return Uppy_1;
  }

  var n,l,u,t,i,r,o,e,f,c,s,a,h,p$1={},v=[],y=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,w=Array.isArray;function d(n,l){for(var u in l)n[u]=l[u];return n}function g(n){n&&n.parentNode&&n.parentNode.removeChild(n);}function _(l,u,t){var i,r,o,e={};for(o in u)"key"==o?i=u[o]:"ref"==o?r=u[o]:e[o]=u[o];if(arguments.length>2&&(e.children=arguments.length>3?n.call(arguments,2):t),"function"==typeof l&&null!=l.defaultProps)for(o in l.defaultProps) void 0===e[o]&&(e[o]=l.defaultProps[o]);return m(l,e,i,r,null)}function m(n,t,i,r,o){var e={type:n,props:t,key:i,ref:r,__k:null,__:null,__b:0,__e:null,__c:null,constructor:void 0,__v:null==o?++u:o,__i:-1,__u:0};return null==o&&null!=l.vnode&&l.vnode(e),e}function b(){return {current:null}}function k(n){return n.children}function x(n,l){this.props=n,this.context=l;}function S(n,l){if(null==l)return n.__?S(n.__,n.__i+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return "function"==typeof n.type?S(n):null}function C(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break}return C(n)}}function M(n){(!n.__d&&(n.__d=true)&&i.push(n)&&!$.__r++||r!=l.debounceRendering)&&((r=l.debounceRendering)||o)($);}function $(){for(var n,u,t,r,o,f,c,s=1;i.length;)i.length>s&&i.sort(e),n=i.shift(),s=i.length,n.__d&&(t=void 0,o=(r=(u=n).__v).__e,f=[],c=[],u.__P&&((t=d({},r)).__v=r.__v+1,l.vnode&&l.vnode(t),O(u.__P,t,r,u.__n,u.__P.namespaceURI,32&r.__u?[o]:null,f,null==o?S(r):o,!!(32&r.__u),c),t.__v=r.__v,t.__.__k[t.__i]=t,z(f,t,c),t.__e!=o&&C(t)));$.__r=0;}function I(n,l,u,t,i,r,o,e,f,c,s){var a,h,y,w,d,g,_=t&&t.__k||v,m=l.length;for(f=P(u,l,_,f,m),a=0;a<m;a++)null!=(y=u.__k[a])&&(h=-1==y.__i?p$1:_[y.__i]||p$1,y.__i=a,g=O(n,y,h,i,r,o,e,f,c,s),w=y.__e,y.ref&&h.ref!=y.ref&&(h.ref&&q(h.ref,null,y),s.push(y.ref,y.__c||w,y)),null==d&&null!=w&&(d=w),4&y.__u||h.__k===y.__k?f=A(y,f,n):"function"==typeof y.type&&void 0!==g?f=g:w&&(f=w.nextSibling),y.__u&=-7);return u.__e=d,f}function P(n,l,u,t,i){var r,o,e,f,c,s=u.length,a=s,h=0;for(n.__k=new Array(i),r=0;r<i;r++)null!=(o=l[r])&&"boolean"!=typeof o&&"function"!=typeof o?(f=r+h,(o=n.__k[r]="string"==typeof o||"number"==typeof o||"bigint"==typeof o||o.constructor==String?m(null,o,null,null,null):w(o)?m(k,{children:o},null,null,null):null==o.constructor&&o.__b>0?m(o.type,o.props,o.key,o.ref?o.ref:null,o.__v):o).__=n,o.__b=n.__b+1,e=null,-1!=(c=o.__i=L(o,u,f,a))&&(a--,(e=u[c])&&(e.__u|=2)),null==e||null==e.__v?(-1==c&&(i>s?h--:i<s&&h++),"function"!=typeof o.type&&(o.__u|=4)):c!=f&&(c==f-1?h--:c==f+1?h++:(c>f?h--:h++,o.__u|=4))):n.__k[r]=null;if(a)for(r=0;r<s;r++)null!=(e=u[r])&&0==(2&e.__u)&&(e.__e==t&&(t=S(e)),B(e,e));return t}function A(n,l,u){var t,i;if("function"==typeof n.type){for(t=n.__k,i=0;t&&i<t.length;i++)t[i]&&(t[i].__=n,l=A(t[i],l,u));return l}n.__e!=l&&(l&&n.type&&!u.contains(l)&&(l=S(n)),u.insertBefore(n.__e,l||null),l=n.__e);do{l=l&&l.nextSibling;}while(null!=l&&8==l.nodeType);return l}function H(n,l){return l=l||[],null==n||"boolean"==typeof n||(w(n)?n.some(function(n){H(n,l);}):l.push(n)),l}function L(n,l,u,t){var i,r,o=n.key,e=n.type,f=l[u];if(null===f&&null==n.key||f&&o==f.key&&e==f.type&&0==(2&f.__u))return u;if(t>(null!=f&&0==(2&f.__u)?1:0))for(i=u-1,r=u+1;i>=0||r<l.length;){if(i>=0){if((f=l[i])&&0==(2&f.__u)&&o==f.key&&e==f.type)return i;i--;}if(r<l.length){if((f=l[r])&&0==(2&f.__u)&&o==f.key&&e==f.type)return r;r++;}}return  -1}function T(n,l,u){"-"==l[0]?n.setProperty(l,null==u?"":u):n[l]=null==u?"":"number"!=typeof u||y.test(l)?u:u+"px";}function j(n,l,u,t,i){var r,o;n:if("style"==l)if("string"==typeof u)n.style.cssText=u;else {if("string"==typeof t&&(n.style.cssText=t=""),t)for(l in t)u&&l in u||T(n.style,l,"");if(u)for(l in u)t&&u[l]==t[l]||T(n.style,l,u[l]);}else if("o"==l[0]&&"n"==l[1])r=l!=(l=l.replace(f,"$1")),o=l.toLowerCase(),l=o in n||"onFocusOut"==l||"onFocusIn"==l?o.slice(2):l.slice(2),n.l||(n.l={}),n.l[l+r]=u,u?t?u.u=t.u:(u.u=c,n.addEventListener(l,r?a:s,r)):n.removeEventListener(l,r?a:s,r);else {if("http://www.w3.org/2000/svg"==i)l=l.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!=l&&"height"!=l&&"href"!=l&&"list"!=l&&"form"!=l&&"tabIndex"!=l&&"download"!=l&&"rowSpan"!=l&&"colSpan"!=l&&"role"!=l&&"popover"!=l&&l in n)try{n[l]=null==u?"":u;break n}catch(n){}"function"==typeof u||(null==u||false===u&&"-"!=l[4]?n.removeAttribute(l):n.setAttribute(l,"popover"==l&&1==u?"":u));}}function F(n){return function(u){if(this.l){var t=this.l[u.type+n];if(null==u.t)u.t=c++;else if(u.t<t.u)return;return t(l.event?l.event(u):u)}}}function O(n,u,t,i,r,o,e,f,c,s){var a,h,p,v,y,_,m,b,S,C,M,$,P,A,H,L,T,j=u.type;if(null!=u.constructor)return null;128&t.__u&&(c=!!(32&t.__u),o=[f=u.__e=t.__e]),(a=l.__b)&&a(u);n:if("function"==typeof j)try{if(b=u.props,S="prototype"in j&&j.prototype.render,C=(a=j.contextType)&&i[a.__c],M=a?C?C.props.value:a.__:i,t.__c?m=(h=u.__c=t.__c).__=h.__E:(S?u.__c=h=new j(b,M):(u.__c=h=new x(b,M),h.constructor=j,h.render=D),C&&C.sub(h),h.props=b,h.state||(h.state={}),h.context=M,h.__n=i,p=h.__d=!0,h.__h=[],h._sb=[]),S&&null==h.__s&&(h.__s=h.state),S&&null!=j.getDerivedStateFromProps&&(h.__s==h.state&&(h.__s=d({},h.__s)),d(h.__s,j.getDerivedStateFromProps(b,h.__s))),v=h.props,y=h.state,h.__v=u,p)S&&null==j.getDerivedStateFromProps&&null!=h.componentWillMount&&h.componentWillMount(),S&&null!=h.componentDidMount&&h.__h.push(h.componentDidMount);else {if(S&&null==j.getDerivedStateFromProps&&b!==v&&null!=h.componentWillReceiveProps&&h.componentWillReceiveProps(b,M),!h.__e&&null!=h.shouldComponentUpdate&&!1===h.shouldComponentUpdate(b,h.__s,M)||u.__v==t.__v){for(u.__v!=t.__v&&(h.props=b,h.state=h.__s,h.__d=!1),u.__e=t.__e,u.__k=t.__k,u.__k.some(function(n){n&&(n.__=u);}),$=0;$<h._sb.length;$++)h.__h.push(h._sb[$]);h._sb=[],h.__h.length&&e.push(h);break n}null!=h.componentWillUpdate&&h.componentWillUpdate(b,h.__s,M),S&&null!=h.componentDidUpdate&&h.__h.push(function(){h.componentDidUpdate(v,y,_);});}if(h.context=M,h.props=b,h.__P=n,h.__e=!1,P=l.__r,A=0,S){for(h.state=h.__s,h.__d=!1,P&&P(u),a=h.render(h.props,h.state,h.context),H=0;H<h._sb.length;H++)h.__h.push(h._sb[H]);h._sb=[];}else do{h.__d=!1,P&&P(u),a=h.render(h.props,h.state,h.context),h.state=h.__s;}while(h.__d&&++A<25);h.state=h.__s,null!=h.getChildContext&&(i=d(d({},i),h.getChildContext())),S&&!p&&null!=h.getSnapshotBeforeUpdate&&(_=h.getSnapshotBeforeUpdate(v,y)),L=a,null!=a&&a.type===k&&null==a.key&&(L=N(a.props.children)),f=I(n,w(L)?L:[L],u,t,i,r,o,e,f,c,s),h.base=u.__e,u.__u&=-161,h.__h.length&&e.push(h),m&&(h.__E=h.__=null);}catch(n){if(u.__v=null,c||null!=o)if(n.then){for(u.__u|=c?160:128;f&&8==f.nodeType&&f.nextSibling;)f=f.nextSibling;o[o.indexOf(f)]=null,u.__e=f;}else for(T=o.length;T--;)g(o[T]);else u.__e=t.__e,u.__k=t.__k;l.__e(n,u,t);}else null==o&&u.__v==t.__v?(u.__k=t.__k,u.__e=t.__e):f=u.__e=V(t.__e,u,t,i,r,o,e,c,s);return (a=l.diffed)&&a(u),128&u.__u?void 0:f}function z(n,u,t){for(var i=0;i<t.length;i++)q(t[i],t[++i],t[++i]);l.__c&&l.__c(u,n),n.some(function(u){try{n=u.__h,u.__h=[],n.some(function(n){n.call(u);});}catch(n){l.__e(n,u.__v);}});}function N(n){return "object"!=typeof n||null==n||n.__b&&n.__b>0?n:w(n)?n.map(N):d({},n)}function V(u,t,i,r,o,e,f,c,s){var a,h,v,y,d,_,m,b=i.props,k=t.props,x=t.type;if("svg"==x?o="http://www.w3.org/2000/svg":"math"==x?o="http://www.w3.org/1998/Math/MathML":o||(o="http://www.w3.org/1999/xhtml"),null!=e)for(a=0;a<e.length;a++)if((d=e[a])&&"setAttribute"in d==!!x&&(x?d.localName==x:3==d.nodeType)){u=d,e[a]=null;break}if(null==u){if(null==x)return document.createTextNode(k);u=document.createElementNS(o,x,k.is&&k),c&&(l.__m&&l.__m(t,e),c=false),e=null;}if(null==x)b===k||c&&u.data==k||(u.data=k);else {if(e=e&&n.call(u.childNodes),b=i.props||p$1,!c&&null!=e)for(b={},a=0;a<u.attributes.length;a++)b[(d=u.attributes[a]).name]=d.value;for(a in b)if(d=b[a],"children"==a);else if("dangerouslySetInnerHTML"==a)v=d;else if(!(a in k)){if("value"==a&&"defaultValue"in k||"checked"==a&&"defaultChecked"in k)continue;j(u,a,null,d,o);}for(a in k)d=k[a],"children"==a?y=d:"dangerouslySetInnerHTML"==a?h=d:"value"==a?_=d:"checked"==a?m=d:c&&"function"!=typeof d||b[a]===d||j(u,a,d,b[a],o);if(h)c||v&&(h.__html==v.__html||h.__html==u.innerHTML)||(u.innerHTML=h.__html),t.__k=[];else if(v&&(u.innerHTML=""),I("template"==t.type?u.content:u,w(y)?y:[y],t,i,r,"foreignObject"==x?"http://www.w3.org/1999/xhtml":o,e,f,e?e[0]:i.__k&&S(i,0),c,s),null!=e)for(a=e.length;a--;)g(e[a]);c||(a="value","progress"==x&&null==_?u.removeAttribute("value"):null!=_&&(_!==u[a]||"progress"==x&&!_||"option"==x&&_!=b[a])&&j(u,a,_,b[a],o),a="checked",null!=m&&m!=u[a]&&j(u,a,m,b[a],o));}return u}function q(n,u,t){try{if("function"==typeof n){var i="function"==typeof n.__u;i&&n.__u(),i&&null==u||(n.__u=n(u));}else n.current=u;}catch(n){l.__e(n,t);}}function B(n,u,t){var i,r;if(l.unmount&&l.unmount(n),(i=n.ref)&&(i.current&&i.current!=n.__e||q(i,null,u)),null!=(i=n.__c)){if(i.componentWillUnmount)try{i.componentWillUnmount();}catch(n){l.__e(n,u);}i.base=i.__P=null;}if(i=n.__k)for(r=0;r<i.length;r++)i[r]&&B(i[r],u,t||"function"!=typeof n.type);t||g(n.__e),n.__c=n.__=n.__e=void 0;}function D(n,l,u){return this.constructor(n,u)}function E(u,t,i){var r,o,e,f;t==document&&(t=document.documentElement),l.__&&l.__(u,t),o=(r="function"==typeof i)?null:i&&i.__k||t.__k,e=[],f=[],O(t,u=(!r&&i||t).__k=_(k,null,[u]),o||p$1,p$1,t.namespaceURI,!r&&i?[i]:o?null:t.firstChild?n.call(t.childNodes):null,e,!r&&i?i:o?o.__e:t.firstChild,r,f),z(e,u,f);}function G(n,l){E(n,l,G);}function J(l,u,t){var i,r,o,e,f=d({},l.props);for(o in l.type&&l.type.defaultProps&&(e=l.type.defaultProps),u)"key"==o?i=u[o]:"ref"==o?r=u[o]:f[o]=void 0===u[o]&&null!=e?e[o]:u[o];return arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):t),m(l.type,f,i||l.key,r||l.ref,null)}function K(n){function l(n){var u,t;return this.getChildContext||(u=new Set,(t={})[l.__c]=this,this.getChildContext=function(){return t},this.componentWillUnmount=function(){u=null;},this.shouldComponentUpdate=function(n){this.props.value!=n.value&&u.forEach(function(n){n.__e=true,M(n);});},this.sub=function(n){u.add(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u&&u.delete(n),l&&l.call(n);};}),n.children}return l.__c="__cC"+h++,l.__=n,l.Provider=l.__l=(l.Consumer=function(n,l){return n.children(l)}).contextType=l,l}n=v.slice,l={__e:function(n,l,u,t){for(var i,r,o;l=l.__;)if((i=l.__c)&&!i.__)try{if((r=i.constructor)&&null!=r.getDerivedStateFromError&&(i.setState(r.getDerivedStateFromError(n)),o=i.__d),null!=i.componentDidCatch&&(i.componentDidCatch(n,t||{}),o=i.__d),o)return i.__E=i}catch(l){n=l;}throw n}},u=0,t=function(n){return null!=n&&null==n.constructor},x.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!=this.state?this.__s:this.__s=d({},this.state),"function"==typeof n&&(n=n(d({},u),this.props)),n&&d(u,n),null!=n&&this.__v&&(l&&this._sb.push(l),M(this));},x.prototype.forceUpdate=function(n){this.__v&&(this.__e=true,n&&this.__h.push(n),M(this));},x.prototype.render=k,i=[],o="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,e=function(n,l){return n.__v.__b-l.__v.__b},$.__r=0,f=/(PointerCapture)$|Capture$/i,c=0,s=F(false),a=F(true),h=0;

  var preact_module = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Component: x,
    Fragment: k,
    cloneElement: J,
    createContext: K,
    createElement: _,
    createRef: b,
    h: _,
    hydrate: G,
    get isValidElement () { return t; },
    get options () { return l; },
    render: E,
    toChildArray: H
  });

  var require$$0 = /*@__PURE__*/getAugmentedNamespace(preact_module);

  var isDOMElement_1;
  var hasRequiredIsDOMElement;

  function requireIsDOMElement () {
  	if (hasRequiredIsDOMElement) return isDOMElement_1;
  	hasRequiredIsDOMElement = 1;

  	function isDOMElement(obj) {
  	  return (obj == null ? void 0 : obj.nodeType) === Node.ELEMENT_NODE;
  	}

  	/**
  	 * Check if an object is a DOM element. Duck-typing based on `nodeType`.
  	 *
  	 * @param {*} obj
  	 */
  	isDOMElement_1 = isDOMElement;
  	return isDOMElement_1;
  }

  var findDOMElement_1;
  var hasRequiredFindDOMElement;

  function requireFindDOMElement () {
  	if (hasRequiredFindDOMElement) return findDOMElement_1;
  	hasRequiredFindDOMElement = 1;

  	const isDOMElement = requireIsDOMElement();
  	/**
  	 * Find a DOM element.
  	 *
  	 * @param {Node|string} element
  	 * @returns {Node|null}
  	 */


  	function findDOMElement(element, context) {
  	  if (context === void 0) {
  	    context = document;
  	  }

  	  if (typeof element === 'string') {
  	    return context.querySelector(element);
  	  }

  	  if (isDOMElement(element)) {
  	    return element;
  	  }

  	  return null;
  	}

  	findDOMElement_1 = findDOMElement;
  	return findDOMElement_1;
  }

  var getTextDirection_1;
  var hasRequiredGetTextDirection;

  function requireGetTextDirection () {
  	if (hasRequiredGetTextDirection) return getTextDirection_1;
  	hasRequiredGetTextDirection = 1;

  	/**
  	 * Get the declared text direction for an element.
  	 *
  	 * @param {Node} element
  	 * @returns {string|undefined}
  	 */
  	function getTextDirection(element) {
  	  var _element;

  	  // There is another way to determine text direction using getComputedStyle(), as done here:
  	  // https://github.com/pencil-js/text-direction/blob/2a235ce95089b3185acec3b51313cbba921b3811/text-direction.js
  	  //
  	  // We do not use that approach because we are interested specifically in the _declared_ text direction.
  	  // If no text direction is declared, we have to provide our own explicit text direction so our
  	  // bidirectional CSS style sheets work.
  	  while (element && !element.dir) {
  	    // eslint-disable-next-line no-param-reassign
  	    element = element.parentNode;
  	  }

  	  return (_element = element) == null ? void 0 : _element.dir;
  	}

  	getTextDirection_1 = getTextDirection;
  	return getTextDirection_1;
  }

  var BasePlugin_1;
  var hasRequiredBasePlugin;

  function requireBasePlugin () {
  	if (hasRequiredBasePlugin) return BasePlugin_1;
  	hasRequiredBasePlugin = 1;

  	/**
  	 * Core plugin logic that all plugins share.
  	 *
  	 * BasePlugin does not contain DOM rendering so it can be used for plugins
  	 * without a user interface.
  	 *
  	 * See `Plugin` for the extended version with Preact rendering for interfaces.
  	 */
  	const Translator = requireTranslator();

  	class BasePlugin {
  	  constructor(uppy, opts) {
  	    if (opts === void 0) {
  	      opts = {};
  	    }

  	    this.uppy = uppy;
  	    this.opts = opts;
  	  }

  	  getPluginState() {
  	    const {
  	      plugins
  	    } = this.uppy.getState();
  	    return plugins[this.id] || {};
  	  }

  	  setPluginState(update) {
  	    const {
  	      plugins
  	    } = this.uppy.getState();
  	    this.uppy.setState({
  	      plugins: { ...plugins,
  	        [this.id]: { ...plugins[this.id],
  	          ...update
  	        }
  	      }
  	    });
  	  }

  	  setOptions(newOpts) {
  	    this.opts = { ...this.opts,
  	      ...newOpts
  	    };
  	    this.setPluginState(); // so that UI re-renders with new options

  	    this.i18nInit();
  	  }

  	  i18nInit() {
  	    const translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);
  	    this.i18n = translator.translate.bind(translator);
  	    this.i18nArray = translator.translateArray.bind(translator);
  	    this.setPluginState(); // so that UI re-renders and we see the updated locale
  	  }
  	  /**
  	   * Extendable methods
  	   * ==================
  	   * These methods are here to serve as an overview of the extendable methods as well as
  	   * making them not conditional in use, such as `if (this.afterUpdate)`.
  	   */
  	  // eslint-disable-next-line class-methods-use-this


  	  addTarget() {
  	    throw new Error('Extend the addTarget method to add your plugin to another plugin\'s target');
  	  } // eslint-disable-next-line class-methods-use-this


  	  install() {} // eslint-disable-next-line class-methods-use-this


  	  uninstall() {}
  	  /**
  	   * Called when plugin is mounted, whether in DOM or into another plugin.
  	   * Needed because sometimes plugins are mounted separately/after `install`,
  	   * so this.el and this.parent might not be available in `install`.
  	   * This is the case with @uppy/react plugins, for example.
  	   */


  	  render() {
  	    throw new Error('Extend the render method to add your plugin to a DOM element');
  	  } // TODO: remove in the next major version. It's not feasible to
  	  // try to use plugins with other frameworks.
  	  // eslint-disable-next-line class-methods-use-this


  	  update() {} // Called after every state update, after everything's mounted. Debounced.
  	  // eslint-disable-next-line class-methods-use-this


  	  afterUpdate() {}

  	}

  	BasePlugin_1 = BasePlugin;
  	return BasePlugin_1;
  }

  var UIPlugin_1;
  var hasRequiredUIPlugin;

  function requireUIPlugin () {
  	if (hasRequiredUIPlugin) return UIPlugin_1;
  	hasRequiredUIPlugin = 1;

  	var _preact = require$$0;

  	function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

  	var id = 0;

  	function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

  	const findDOMElement = requireFindDOMElement();

  	const getTextDirection = requireGetTextDirection();

  	const BasePlugin = requireBasePlugin();
  	/**
  	 * Defer a frequent call to the microtask queue.
  	 *
  	 * @param {() => T} fn
  	 * @returns {Promise<T>}
  	 */


  	function debounce(fn) {
  	  let calling = null;
  	  let latestArgs = null;
  	  return function () {
  	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
  	      args[_key] = arguments[_key];
  	    }

  	    latestArgs = args;

  	    if (!calling) {
  	      calling = Promise.resolve().then(() => {
  	        calling = null; // At this point `args` may be different from the most
  	        // recent state, if multiple calls happened since this task
  	        // was queued. So we use the `latestArgs`, which definitely
  	        // is the most recent call.

  	        return fn(...latestArgs);
  	      });
  	    }

  	    return calling;
  	  };
  	}
  	/**
  	 * UIPlugin is the extended version of BasePlugin to incorporate rendering with Preact.
  	 * Use this for plugins that need a user interface.
  	 *
  	 * For plugins without an user interface, see BasePlugin.
  	 */


  	var _updateUI = /*#__PURE__*/_classPrivateFieldLooseKey("updateUI");

  	class UIPlugin extends BasePlugin {
  	  constructor() {
  	    super(...arguments);
  	    Object.defineProperty(this, _updateUI, {
  	      writable: true,
  	      value: void 0
  	    });
  	  }

  	  /**
  	   * Check if supplied `target` is a DOM element or an `object`.
  	   * If it’s an object — target is a plugin, and we search `plugins`
  	   * for a plugin with same name and return its target.
  	   */
  	  mount(target, plugin) {
  	    const callerPluginName = plugin.id;
  	    const targetElement = findDOMElement(target);

  	    if (targetElement) {
  	      this.isTargetDOMEl = true; // When target is <body> with a single <div> element,
  	      // Preact thinks it’s the Uppy root element in there when doing a diff,
  	      // and destroys it. So we are creating a fragment (could be empty div)

  	      const uppyRootElement = document.createElement('div');
  	      uppyRootElement.classList.add('uppy-Root'); // API for plugins that require a synchronous rerender.

  	      _classPrivateFieldLooseBase(this, _updateUI)[_updateUI] = debounce(state => {
  	        // plugin could be removed, but this.rerender is debounced below,
  	        // so it could still be called even after uppy.removePlugin or uppy.close
  	        // hence the check
  	        if (!this.uppy.getPlugin(this.id)) return;
  	        (0, _preact.render)(this.render(state), uppyRootElement);
  	        this.afterUpdate();
  	      });
  	      this.uppy.log(`Installing ${callerPluginName} to a DOM element '${target}'`);

  	      if (this.opts.replaceTargetContent) {
  	        // Doing render(h(null), targetElement), which should have been
  	        // a better way, since because the component might need to do additional cleanup when it is removed,
  	        // stopped working — Preact just adds null into target, not replacing
  	        targetElement.innerHTML = '';
  	      }

  	      (0, _preact.render)(this.render(this.uppy.getState()), uppyRootElement);
  	      this.el = uppyRootElement;
  	      targetElement.appendChild(uppyRootElement); // Set the text direction if the page has not defined one.

  	      uppyRootElement.dir = this.opts.direction || getTextDirection(uppyRootElement) || 'ltr';
  	      this.onMount();
  	      return this.el;
  	    }

  	    let targetPlugin;

  	    if (typeof target === 'object' && target instanceof UIPlugin) {
  	      // Targeting a plugin *instance*
  	      targetPlugin = target;
  	    } else if (typeof target === 'function') {
  	      // Targeting a plugin type
  	      const Target = target; // Find the target plugin instance.

  	      this.uppy.iteratePlugins(p => {
  	        if (p instanceof Target) {
  	          targetPlugin = p;
  	        }
  	      });
  	    }

  	    if (targetPlugin) {
  	      this.uppy.log(`Installing ${callerPluginName} to ${targetPlugin.id}`);
  	      this.parent = targetPlugin;
  	      this.el = targetPlugin.addTarget(plugin);
  	      this.onMount();
  	      return this.el;
  	    }

  	    this.uppy.log(`Not installing ${callerPluginName}`);
  	    let message = `Invalid target option given to ${callerPluginName}.`;

  	    if (typeof target === 'function') {
  	      message += ' The given target is not a Plugin class. ' + 'Please check that you\'re not specifying a React Component instead of a plugin. ' + 'If you are using @uppy/* packages directly, make sure you have only 1 version of @uppy/core installed: ' + 'run `npm ls @uppy/core` on the command line and verify that all the versions match and are deduped correctly.';
  	    } else {
  	      message += 'If you meant to target an HTML element, please make sure that the element exists. ' + 'Check that the <script> tag initializing Uppy is right before the closing </body> tag at the end of the page. ' + '(see https://github.com/transloadit/uppy/issues/1042)\n\n' + 'If you meant to target a plugin, please confirm that your `import` statements or `require` calls are correct.';
  	    }

  	    throw new Error(message);
  	  }

  	  update(state) {
  	    if (this.el != null) {
  	      var _classPrivateFieldLoo, _classPrivateFieldLoo2;

  	      (_classPrivateFieldLoo = (_classPrivateFieldLoo2 = _classPrivateFieldLooseBase(this, _updateUI))[_updateUI]) == null ? void 0 : _classPrivateFieldLoo.call(_classPrivateFieldLoo2, state);
  	    }
  	  }

  	  unmount() {
  	    if (this.isTargetDOMEl) {
  	      var _this$el;

  	      (_this$el = this.el) == null ? void 0 : _this$el.remove();
  	    }

  	    this.onUnmount();
  	  } // eslint-disable-next-line class-methods-use-this


  	  onMount() {} // eslint-disable-next-line class-methods-use-this


  	  onUnmount() {}

  	}

  	UIPlugin_1 = UIPlugin;
  	return UIPlugin_1;
  }

  var hasRequiredLib$2;

  function requireLib$2 () {
  	if (hasRequiredLib$2) return lib$3.exports;
  	hasRequiredLib$2 = 1;
  	(function (module, exports) {

  		Object.defineProperty(exports, "__esModule", {
  		  value: true
  		});
  		exports.Uppy = exports.UIPlugin = exports.BasePlugin = void 0;
  		Object.defineProperty(exports, "debugLogger", {
  		  enumerable: true,
  		  get: function () {
  		    return _loggers.debugLogger;
  		  }
  		});

  		var _loggers = requireLoggers();

  		module.exports = requireUppy();

  		const _0 = requireUIPlugin();

  		exports.UIPlugin = _0;

  		const _1 = requireBasePlugin();

  		exports.BasePlugin = _1;

  		// TODO: remove all the following in the next major

  		/* eslint-disable import/first */
  		const Uppy = requireUppy();

  		exports.Uppy = Uppy;

  		const UIPlugin = requireUIPlugin();

  		const BasePlugin = requireBasePlugin();

  		// Backward compatibility: we want those to keep being accessible as static
  		// properties of `Uppy` to avoid a breaking change.
  		Uppy.Uppy = Uppy;
  		Uppy.UIPlugin = UIPlugin;
  		Uppy.BasePlugin = BasePlugin;
  		Uppy.debugLogger = _loggers.debugLogger; 
  	} (lib$3, lib$3.exports));
  	return lib$3.exports;
  }

  var libExports$1 = requireLib$2();
  var Uppy = /*@__PURE__*/getDefaultExportFromCjs(libExports$1);

  var lib$1 = {};

  var NetworkError_1;
  var hasRequiredNetworkError;

  function requireNetworkError () {
  	if (hasRequiredNetworkError) return NetworkError_1;
  	hasRequiredNetworkError = 1;

  	class NetworkError extends Error {
  	  constructor(error, xhr) {
  	    if (xhr === void 0) {
  	      xhr = null;
  	    }

  	    super(`This looks like a network error, the endpoint might be blocked by an internet provider or a firewall.`);
  	    this.cause = error;
  	    this.isNetworkError = true;
  	    this.request = xhr;
  	  }

  	}

  	NetworkError_1 = NetworkError;
  	return NetworkError_1;
  }

  var fetchWithNetworkError_1;
  var hasRequiredFetchWithNetworkError;

  function requireFetchWithNetworkError () {
  	if (hasRequiredFetchWithNetworkError) return fetchWithNetworkError_1;
  	hasRequiredFetchWithNetworkError = 1;

  	const NetworkError = requireNetworkError();
  	/**
  	 * Wrapper around window.fetch that throws a NetworkError when appropriate
  	 */


  	function fetchWithNetworkError() {
  	  return fetch(...arguments).catch(err => {
  	    if (err.name === 'AbortError') {
  	      throw err;
  	    } else {
  	      throw new NetworkError(err);
  	    }
  	  });
  	}

  	fetchWithNetworkError_1 = fetchWithNetworkError;
  	return fetchWithNetworkError_1;
  }

  var ErrorWithCause_1;
  var hasRequiredErrorWithCause;

  function requireErrorWithCause () {
  	if (hasRequiredErrorWithCause) return ErrorWithCause_1;
  	hasRequiredErrorWithCause = 1;

  	const hasProperty = requireHasProperty();

  	class ErrorWithCause extends Error {
  	  constructor(message, options) {
  	    if (options === void 0) {
  	      options = {};
  	    }

  	    super(message);
  	    this.cause = options.cause;

  	    if (this.cause && hasProperty(this.cause, 'isNetworkError')) {
  	      this.isNetworkError = this.cause.isNetworkError;
  	    }
  	  }

  	}

  	ErrorWithCause_1 = ErrorWithCause;
  	return ErrorWithCause_1;
  }

  var AuthError_1;
  var hasRequiredAuthError;

  function requireAuthError () {
  	if (hasRequiredAuthError) return AuthError_1;
  	hasRequiredAuthError = 1;

  	class AuthError extends Error {
  	  constructor() {
  	    super('Authorization required');
  	    this.name = 'AuthError';
  	    this.isAuthError = true;
  	  }

  	}

  	AuthError_1 = AuthError;
  	return AuthError_1;
  }

  var RequestClient_1;
  var hasRequiredRequestClient;

  function requireRequestClient () {
  	if (hasRequiredRequestClient) return RequestClient_1;
  	hasRequiredRequestClient = 1;

  	let _Symbol$for;

  	function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

  	var id = 0;

  	function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

  	const fetchWithNetworkError = requireFetchWithNetworkError();

  	const ErrorWithCause = requireErrorWithCause();

  	const AuthError = requireAuthError();

  	const packageJson = {
  	  "version": "2.2.2"
  	}; // Remove the trailing slash so we can always safely append /xyz.

  	function stripSlash(url) {
  	  return url.replace(/\/$/, '');
  	}

  	async function handleJSONResponse(res) {
  	  if (res.status === 401) {
  	    throw new AuthError();
  	  }

  	  const jsonPromise = res.json();

  	  if (res.status < 200 || res.status > 300) {
  	    let errMsg = `Failed request with status: ${res.status}. ${res.statusText}`;

  	    try {
  	      const errData = await jsonPromise;
  	      errMsg = errData.message ? `${errMsg} message: ${errData.message}` : errMsg;
  	      errMsg = errData.requestId ? `${errMsg} request-Id: ${errData.requestId}` : errMsg;
  	    } finally {
  	      // eslint-disable-next-line no-unsafe-finally
  	      throw new Error(errMsg);
  	    }
  	  }

  	  return jsonPromise;
  	}

  	var _companionHeaders = /*#__PURE__*/_classPrivateFieldLooseKey("companionHeaders");

  	var _getPostResponseFunc = /*#__PURE__*/_classPrivateFieldLooseKey("getPostResponseFunc");

  	var _getUrl = /*#__PURE__*/_classPrivateFieldLooseKey("getUrl");

  	var _errorHandler = /*#__PURE__*/_classPrivateFieldLooseKey("errorHandler");

  	_Symbol$for = Symbol.for('uppy test: getCompanionHeaders');

  	class RequestClient {
  	  constructor(uppy, opts) {
  	    Object.defineProperty(this, _errorHandler, {
  	      value: _errorHandler2
  	    });
  	    Object.defineProperty(this, _getUrl, {
  	      value: _getUrl2
  	    });
  	    Object.defineProperty(this, _companionHeaders, {
  	      writable: true,
  	      value: void 0
  	    });
  	    Object.defineProperty(this, _getPostResponseFunc, {
  	      writable: true,
  	      value: skip => response => skip ? response : this.onReceiveResponse(response)
  	    });
  	    this.uppy = uppy;
  	    this.opts = opts;
  	    this.onReceiveResponse = this.onReceiveResponse.bind(this);
  	    this.allowedHeaders = ['accept', 'content-type', 'uppy-auth-token'];
  	    this.preflightDone = false;
  	    _classPrivateFieldLooseBase(this, _companionHeaders)[_companionHeaders] = opts == null ? void 0 : opts.companionHeaders;
  	  }

  	  setCompanionHeaders(headers) {
  	    _classPrivateFieldLooseBase(this, _companionHeaders)[_companionHeaders] = headers;
  	  }

  	  [_Symbol$for]() {
  	    return _classPrivateFieldLooseBase(this, _companionHeaders)[_companionHeaders];
  	  }

  	  get hostname() {
  	    const {
  	      companion
  	    } = this.uppy.getState();
  	    const host = this.opts.companionUrl;
  	    return stripSlash(companion && companion[host] ? companion[host] : host);
  	  }

  	  headers() {
  	    return Promise.resolve({ ...RequestClient.defaultHeaders,
  	      ..._classPrivateFieldLooseBase(this, _companionHeaders)[_companionHeaders]
  	    });
  	  }

  	  onReceiveResponse(response) {
  	    const state = this.uppy.getState();
  	    const companion = state.companion || {};
  	    const host = this.opts.companionUrl;
  	    const {
  	      headers
  	    } = response; // Store the self-identified domain name for the Companion instance we just hit.

  	    if (headers.has('i-am') && headers.get('i-am') !== companion[host]) {
  	      this.uppy.setState({
  	        companion: { ...companion,
  	          [host]: headers.get('i-am')
  	        }
  	      });
  	    }

  	    return response;
  	  }

  	  preflight(path) {
  	    if (this.preflightDone) {
  	      return Promise.resolve(this.allowedHeaders.slice());
  	    }

  	    return fetch(_classPrivateFieldLooseBase(this, _getUrl)[_getUrl](path), {
  	      method: 'OPTIONS'
  	    }).then(response => {
  	      if (response.headers.has('access-control-allow-headers')) {
  	        this.allowedHeaders = response.headers.get('access-control-allow-headers').split(',').map(headerName => headerName.trim().toLowerCase());
  	      }

  	      this.preflightDone = true;
  	      return this.allowedHeaders.slice();
  	    }).catch(err => {
  	      this.uppy.log(`[CompanionClient] unable to make preflight request ${err}`, 'warning');
  	      this.preflightDone = true;
  	      return this.allowedHeaders.slice();
  	    });
  	  }

  	  preflightAndHeaders(path) {
  	    return Promise.all([this.preflight(path), this.headers()]).then(_ref => {
  	      let [allowedHeaders, headers] = _ref;
  	      // filter to keep only allowed Headers
  	      Object.keys(headers).forEach(header => {
  	        if (!allowedHeaders.includes(header.toLowerCase())) {
  	          this.uppy.log(`[CompanionClient] excluding disallowed header ${header}`);
  	          delete headers[header]; // eslint-disable-line no-param-reassign
  	        }
  	      });
  	      return headers;
  	    });
  	  }

  	  get(path, skipPostResponse) {
  	    const method = 'get';
  	    return this.preflightAndHeaders(path).then(headers => fetchWithNetworkError(_classPrivateFieldLooseBase(this, _getUrl)[_getUrl](path), {
  	      method,
  	      headers,
  	      credentials: this.opts.companionCookiesRule || 'same-origin'
  	    })).then(_classPrivateFieldLooseBase(this, _getPostResponseFunc)[_getPostResponseFunc](skipPostResponse)).then(handleJSONResponse).catch(_classPrivateFieldLooseBase(this, _errorHandler)[_errorHandler](method, path));
  	  }

  	  post(path, data, skipPostResponse) {
  	    const method = 'post';
  	    return this.preflightAndHeaders(path).then(headers => fetchWithNetworkError(_classPrivateFieldLooseBase(this, _getUrl)[_getUrl](path), {
  	      method,
  	      headers,
  	      credentials: this.opts.companionCookiesRule || 'same-origin',
  	      body: JSON.stringify(data)
  	    })).then(_classPrivateFieldLooseBase(this, _getPostResponseFunc)[_getPostResponseFunc](skipPostResponse)).then(handleJSONResponse).catch(_classPrivateFieldLooseBase(this, _errorHandler)[_errorHandler](method, path));
  	  }

  	  delete(path, data, skipPostResponse) {
  	    const method = 'delete';
  	    return this.preflightAndHeaders(path).then(headers => fetchWithNetworkError(`${this.hostname}/${path}`, {
  	      method,
  	      headers,
  	      credentials: this.opts.companionCookiesRule || 'same-origin',
  	      body: data ? JSON.stringify(data) : null
  	    })).then(_classPrivateFieldLooseBase(this, _getPostResponseFunc)[_getPostResponseFunc](skipPostResponse)).then(handleJSONResponse).catch(_classPrivateFieldLooseBase(this, _errorHandler)[_errorHandler](method, path));
  	  }

  	}

  	function _getUrl2(url) {
  	  if (/^(https?:|)\/\//.test(url)) {
  	    return url;
  	  }

  	  return `${this.hostname}/${url}`;
  	}

  	function _errorHandler2(method, path) {
  	  return err => {
  	    var _err;

  	    if (!((_err = err) != null && _err.isAuthError)) {
  	      // eslint-disable-next-line no-param-reassign
  	      err = new ErrorWithCause(`Could not ${method} ${_classPrivateFieldLooseBase(this, _getUrl)[_getUrl](path)}`, {
  	        cause: err
  	      });
  	    }

  	    return Promise.reject(err);
  	  };
  	}

  	RequestClient.VERSION = packageJson.version;
  	RequestClient.defaultHeaders = {
  	  Accept: 'application/json',
  	  'Content-Type': 'application/json',
  	  'Uppy-Versions': `@uppy/companion-client=${RequestClient.VERSION}`
  	};
  	RequestClient_1 = RequestClient;
  	return RequestClient_1;
  }

  var tokenStorage = {};

  var hasRequiredTokenStorage;

  function requireTokenStorage () {
  	if (hasRequiredTokenStorage) return tokenStorage;
  	hasRequiredTokenStorage = 1;
  	/**
  	 * This module serves as an Async wrapper for LocalStorage
  	 */

  	Object.defineProperty(tokenStorage, "__esModule", {
  	  value: true
  	});
  	tokenStorage.getItem = getItem;
  	tokenStorage.removeItem = removeItem;
  	tokenStorage.setItem = setItem;

  	function setItem(key, value) {
  	  return new Promise(resolve => {
  	    localStorage.setItem(key, value);
  	    resolve();
  	  });
  	}

  	function getItem(key) {
  	  return Promise.resolve(localStorage.getItem(key));
  	}

  	function removeItem(key) {
  	  return new Promise(resolve => {
  	    localStorage.removeItem(key);
  	    resolve();
  	  });
  	}
  	return tokenStorage;
  }

  var Provider_1;
  var hasRequiredProvider;

  function requireProvider () {
  	if (hasRequiredProvider) return Provider_1;
  	hasRequiredProvider = 1;

  	var tokenStorage = requireTokenStorage();

  	const RequestClient = requireRequestClient();

  	const getName = id => {
  	  return id.split('-').map(s => s.charAt(0).toUpperCase() + s.slice(1)).join(' ');
  	};

  	class Provider extends RequestClient {
  	  constructor(uppy, opts) {
  	    super(uppy, opts);
  	    this.provider = opts.provider;
  	    this.id = this.provider;
  	    this.name = this.opts.name || getName(this.id);
  	    this.pluginId = this.opts.pluginId;
  	    this.tokenKey = `companion-${this.pluginId}-auth-token`;
  	    this.companionKeysParams = this.opts.companionKeysParams;
  	    this.preAuthToken = null;
  	  }

  	  headers() {
  	    return Promise.all([super.headers(), this.getAuthToken()]).then(_ref => {
  	      let [headers, token] = _ref;
  	      const authHeaders = {};

  	      if (token) {
  	        authHeaders['uppy-auth-token'] = token;
  	      }

  	      if (this.companionKeysParams) {
  	        authHeaders['uppy-credentials-params'] = btoa(JSON.stringify({
  	          params: this.companionKeysParams
  	        }));
  	      }

  	      return { ...headers,
  	        ...authHeaders
  	      };
  	    });
  	  }

  	  onReceiveResponse(response) {
  	    response = super.onReceiveResponse(response); // eslint-disable-line no-param-reassign

  	    const plugin = this.uppy.getPlugin(this.pluginId);
  	    const oldAuthenticated = plugin.getPluginState().authenticated;
  	    const authenticated = oldAuthenticated ? response.status !== 401 : response.status < 400;
  	    plugin.setPluginState({
  	      authenticated
  	    });
  	    return response;
  	  }

  	  setAuthToken(token) {
  	    return this.uppy.getPlugin(this.pluginId).storage.setItem(this.tokenKey, token);
  	  }

  	  getAuthToken() {
  	    return this.uppy.getPlugin(this.pluginId).storage.getItem(this.tokenKey);
  	  }
  	  /**
  	   * Ensure we have a preauth token if necessary. Attempts to fetch one if we don't,
  	   * or rejects if loading one fails.
  	   */


  	  async ensurePreAuth() {
  	    if (this.companionKeysParams && !this.preAuthToken) {
  	      await this.fetchPreAuthToken();

  	      if (!this.preAuthToken) {
  	        throw new Error('Could not load authentication data required for third-party login. Please try again later.');
  	      }
  	    }
  	  }

  	  authUrl(queries) {
  	    if (queries === void 0) {
  	      queries = {};
  	    }

  	    const params = new URLSearchParams(queries);

  	    if (this.preAuthToken) {
  	      params.set('uppyPreAuthToken', this.preAuthToken);
  	    }

  	    return `${this.hostname}/${this.id}/connect?${params}`;
  	  }

  	  fileUrl(id) {
  	    return `${this.hostname}/${this.id}/get/${id}`;
  	  }

  	  async fetchPreAuthToken() {
  	    if (!this.companionKeysParams) {
  	      return;
  	    }

  	    try {
  	      const res = await this.post(`${this.id}/preauth/`, {
  	        params: this.companionKeysParams
  	      });
  	      this.preAuthToken = res.token;
  	    } catch (err) {
  	      this.uppy.log(`[CompanionClient] unable to fetch preAuthToken ${err}`, 'warning');
  	    }
  	  }

  	  list(directory) {
  	    return this.get(`${this.id}/list/${directory || ''}`);
  	  }

  	  logout() {
  	    return this.get(`${this.id}/logout`).then(response => Promise.all([response, this.uppy.getPlugin(this.pluginId).storage.removeItem(this.tokenKey)])).then(_ref2 => {
  	      let [response] = _ref2;
  	      return response;
  	    });
  	  }

  	  static initPlugin(plugin, opts, defaultOpts) {
  	    /* eslint-disable no-param-reassign */
  	    plugin.type = 'acquirer';
  	    plugin.files = [];

  	    if (defaultOpts) {
  	      plugin.opts = { ...defaultOpts,
  	        ...opts
  	      };
  	    }

  	    if (opts.serverUrl || opts.serverPattern) {
  	      throw new Error('`serverUrl` and `serverPattern` have been renamed to `companionUrl` and `companionAllowedHosts` respectively in the 0.30.5 release. Please consult the docs (for example, https://uppy.io/docs/instagram/ for the Instagram plugin) and use the updated options.`');
  	    }

  	    if (opts.companionAllowedHosts) {
  	      const pattern = opts.companionAllowedHosts; // validate companionAllowedHosts param

  	      if (typeof pattern !== 'string' && !Array.isArray(pattern) && !(pattern instanceof RegExp)) {
  	        throw new TypeError(`${plugin.id}: the option "companionAllowedHosts" must be one of string, Array, RegExp`);
  	      }

  	      plugin.opts.companionAllowedHosts = pattern;
  	    } else if (/^(?!https?:\/\/).*$/i.test(opts.companionUrl)) {
  	      // does not start with https://
  	      plugin.opts.companionAllowedHosts = `https://${opts.companionUrl.replace(/^\/\//, '')}`;
  	    } else {
  	      plugin.opts.companionAllowedHosts = new URL(opts.companionUrl).origin;
  	    }

  	    plugin.storage = plugin.opts.storage || tokenStorage;
  	    /* eslint-enable no-param-reassign */
  	  }

  	}

  	Provider_1 = Provider;
  	return Provider_1;
  }

  var SearchProvider_1;
  var hasRequiredSearchProvider;

  function requireSearchProvider () {
  	if (hasRequiredSearchProvider) return SearchProvider_1;
  	hasRequiredSearchProvider = 1;

  	const RequestClient = requireRequestClient();

  	const getName = id => {
  	  return id.split('-').map(s => s.charAt(0).toUpperCase() + s.slice(1)).join(' ');
  	};

  	class SearchProvider extends RequestClient {
  	  constructor(uppy, opts) {
  	    super(uppy, opts);
  	    this.provider = opts.provider;
  	    this.id = this.provider;
  	    this.name = this.opts.name || getName(this.id);
  	    this.pluginId = this.opts.pluginId;
  	  }

  	  fileUrl(id) {
  	    return `${this.hostname}/search/${this.id}/get/${id}`;
  	  }

  	  search(text, queries) {
  	    return this.get(`search/${this.id}/list?q=${encodeURIComponent(text)}${queries ? `&${queries}` : ''}`);
  	  }

  	}

  	SearchProvider_1 = SearchProvider;
  	return SearchProvider_1;
  }

  var Socket;
  var hasRequiredSocket;

  function requireSocket () {
  	if (hasRequiredSocket) return Socket;
  	hasRequiredSocket = 1;

  	let _Symbol$for, _Symbol$for2;

  	function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

  	var id = 0;

  	function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

  	const ee = requireNamespaceEmitter();

  	var _queued = /*#__PURE__*/_classPrivateFieldLooseKey("queued");

  	var _emitter = /*#__PURE__*/_classPrivateFieldLooseKey("emitter");

  	var _isOpen = /*#__PURE__*/_classPrivateFieldLooseKey("isOpen");

  	var _socket = /*#__PURE__*/_classPrivateFieldLooseKey("socket");

  	var _handleMessage = /*#__PURE__*/_classPrivateFieldLooseKey("handleMessage");

  	_Symbol$for = Symbol.for('uppy test: getSocket');
  	_Symbol$for2 = Symbol.for('uppy test: getQueued');

  	class UppySocket {
  	  constructor(opts) {
  	    Object.defineProperty(this, _queued, {
  	      writable: true,
  	      value: []
  	    });
  	    Object.defineProperty(this, _emitter, {
  	      writable: true,
  	      value: ee()
  	    });
  	    Object.defineProperty(this, _isOpen, {
  	      writable: true,
  	      value: false
  	    });
  	    Object.defineProperty(this, _socket, {
  	      writable: true,
  	      value: void 0
  	    });
  	    Object.defineProperty(this, _handleMessage, {
  	      writable: true,
  	      value: e => {
  	        try {
  	          const message = JSON.parse(e.data);
  	          this.emit(message.action, message.payload);
  	        } catch (err) {
  	          // TODO: use a more robust error handler.
  	          console.log(err); // eslint-disable-line no-console
  	        }
  	      }
  	    });
  	    this.opts = opts;

  	    if (!opts || opts.autoOpen !== false) {
  	      this.open();
  	    }
  	  }

  	  get isOpen() {
  	    return _classPrivateFieldLooseBase(this, _isOpen)[_isOpen];
  	  }

  	  [_Symbol$for]() {
  	    return _classPrivateFieldLooseBase(this, _socket)[_socket];
  	  }

  	  [_Symbol$for2]() {
  	    return _classPrivateFieldLooseBase(this, _queued)[_queued];
  	  }

  	  open() {
  	    _classPrivateFieldLooseBase(this, _socket)[_socket] = new WebSocket(this.opts.target);

  	    _classPrivateFieldLooseBase(this, _socket)[_socket].onopen = () => {
  	      _classPrivateFieldLooseBase(this, _isOpen)[_isOpen] = true;

  	      while (_classPrivateFieldLooseBase(this, _queued)[_queued].length > 0 && _classPrivateFieldLooseBase(this, _isOpen)[_isOpen]) {
  	        const first = _classPrivateFieldLooseBase(this, _queued)[_queued].shift();

  	        this.send(first.action, first.payload);
  	      }
  	    };

  	    _classPrivateFieldLooseBase(this, _socket)[_socket].onclose = () => {
  	      _classPrivateFieldLooseBase(this, _isOpen)[_isOpen] = false;
  	    };

  	    _classPrivateFieldLooseBase(this, _socket)[_socket].onmessage = _classPrivateFieldLooseBase(this, _handleMessage)[_handleMessage];
  	  }

  	  close() {
  	    var _classPrivateFieldLoo;

  	    (_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _socket)[_socket]) == null ? void 0 : _classPrivateFieldLoo.close();
  	  }

  	  send(action, payload) {
  	    // attach uuid
  	    if (!_classPrivateFieldLooseBase(this, _isOpen)[_isOpen]) {
  	      _classPrivateFieldLooseBase(this, _queued)[_queued].push({
  	        action,
  	        payload
  	      });

  	      return;
  	    }

  	    _classPrivateFieldLooseBase(this, _socket)[_socket].send(JSON.stringify({
  	      action,
  	      payload
  	    }));
  	  }

  	  on(action, handler) {
  	    _classPrivateFieldLooseBase(this, _emitter)[_emitter].on(action, handler);
  	  }

  	  emit(action, payload) {
  	    _classPrivateFieldLooseBase(this, _emitter)[_emitter].emit(action, payload);
  	  }

  	  once(action, handler) {
  	    _classPrivateFieldLooseBase(this, _emitter)[_emitter].once(action, handler);
  	  }

  	}

  	Socket = UppySocket;
  	return Socket;
  }

  var hasRequiredLib$1;

  function requireLib$1 () {
  	if (hasRequiredLib$1) return lib$1;
  	hasRequiredLib$1 = 1;
  	/**
  	 * Manages communications with Companion
  	 */

  	Object.defineProperty(lib$1, "__esModule", {
  	  value: true
  	});
  	lib$1.Socket = lib$1.SearchProvider = lib$1.RequestClient = lib$1.Provider = void 0;

  	const _0 = requireRequestClient();

  	lib$1.RequestClient = _0;

  	const _1 = requireProvider();

  	lib$1.Provider = _1;

  	const _2 = requireSearchProvider();

  	lib$1.SearchProvider = _2;

  	const _3 = requireSocket();

  	lib$1.Socket = _3;
  	return lib$1;
  }

  var RateLimitedQueue = {};

  var hasRequiredRateLimitedQueue;

  function requireRateLimitedQueue () {
  	if (hasRequiredRateLimitedQueue) return RateLimitedQueue;
  	hasRequiredRateLimitedQueue = 1;

  	Object.defineProperty(RateLimitedQueue, "__esModule", {
  	  value: true
  	});
  	RateLimitedQueue.internalRateLimitedQueue = RateLimitedQueue.RateLimitedQueue = void 0;

  	function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

  	var id = 0;

  	function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

  	function createCancelError() {
  	  return new Error('Cancelled');
  	}

  	var _activeRequests = /*#__PURE__*/_classPrivateFieldLooseKey("activeRequests");

  	var _queuedHandlers = /*#__PURE__*/_classPrivateFieldLooseKey("queuedHandlers");

  	var _paused = /*#__PURE__*/_classPrivateFieldLooseKey("paused");

  	var _pauseTimer = /*#__PURE__*/_classPrivateFieldLooseKey("pauseTimer");

  	var _downLimit = /*#__PURE__*/_classPrivateFieldLooseKey("downLimit");

  	var _upperLimit = /*#__PURE__*/_classPrivateFieldLooseKey("upperLimit");

  	var _rateLimitingTimer = /*#__PURE__*/_classPrivateFieldLooseKey("rateLimitingTimer");

  	var _call = /*#__PURE__*/_classPrivateFieldLooseKey("call");

  	var _queueNext = /*#__PURE__*/_classPrivateFieldLooseKey("queueNext");

  	var _next = /*#__PURE__*/_classPrivateFieldLooseKey("next");

  	var _queue = /*#__PURE__*/_classPrivateFieldLooseKey("queue");

  	var _dequeue = /*#__PURE__*/_classPrivateFieldLooseKey("dequeue");

  	var _resume = /*#__PURE__*/_classPrivateFieldLooseKey("resume");

  	var _increaseLimit = /*#__PURE__*/_classPrivateFieldLooseKey("increaseLimit");

  	let RateLimitedQueue$1 = class RateLimitedQueue {
  	  constructor(limit) {
  	    Object.defineProperty(this, _dequeue, {
  	      value: _dequeue2
  	    });
  	    Object.defineProperty(this, _queue, {
  	      value: _queue2
  	    });
  	    Object.defineProperty(this, _next, {
  	      value: _next2
  	    });
  	    Object.defineProperty(this, _queueNext, {
  	      value: _queueNext2
  	    });
  	    Object.defineProperty(this, _call, {
  	      value: _call2
  	    });
  	    Object.defineProperty(this, _activeRequests, {
  	      writable: true,
  	      value: 0
  	    });
  	    Object.defineProperty(this, _queuedHandlers, {
  	      writable: true,
  	      value: []
  	    });
  	    Object.defineProperty(this, _paused, {
  	      writable: true,
  	      value: false
  	    });
  	    Object.defineProperty(this, _pauseTimer, {
  	      writable: true,
  	      value: void 0
  	    });
  	    Object.defineProperty(this, _downLimit, {
  	      writable: true,
  	      value: 1
  	    });
  	    Object.defineProperty(this, _upperLimit, {
  	      writable: true,
  	      value: void 0
  	    });
  	    Object.defineProperty(this, _rateLimitingTimer, {
  	      writable: true,
  	      value: void 0
  	    });
  	    Object.defineProperty(this, _resume, {
  	      writable: true,
  	      value: () => this.resume()
  	    });
  	    Object.defineProperty(this, _increaseLimit, {
  	      writable: true,
  	      value: () => {
  	        if (_classPrivateFieldLooseBase(this, _paused)[_paused]) {
  	          _classPrivateFieldLooseBase(this, _rateLimitingTimer)[_rateLimitingTimer] = setTimeout(_classPrivateFieldLooseBase(this, _increaseLimit)[_increaseLimit], 0);
  	          return;
  	        }

  	        _classPrivateFieldLooseBase(this, _downLimit)[_downLimit] = this.limit;
  	        this.limit = Math.ceil((_classPrivateFieldLooseBase(this, _upperLimit)[_upperLimit] + _classPrivateFieldLooseBase(this, _downLimit)[_downLimit]) / 2);

  	        for (let i = _classPrivateFieldLooseBase(this, _downLimit)[_downLimit]; i <= this.limit; i++) {
  	          _classPrivateFieldLooseBase(this, _queueNext)[_queueNext]();
  	        }

  	        if (_classPrivateFieldLooseBase(this, _upperLimit)[_upperLimit] - _classPrivateFieldLooseBase(this, _downLimit)[_downLimit] > 3) {
  	          _classPrivateFieldLooseBase(this, _rateLimitingTimer)[_rateLimitingTimer] = setTimeout(_classPrivateFieldLooseBase(this, _increaseLimit)[_increaseLimit], 2000);
  	        } else {
  	          _classPrivateFieldLooseBase(this, _downLimit)[_downLimit] = Math.floor(_classPrivateFieldLooseBase(this, _downLimit)[_downLimit] / 2);
  	        }
  	      }
  	    });

  	    if (typeof limit !== 'number' || limit === 0) {
  	      this.limit = Infinity;
  	    } else {
  	      this.limit = limit;
  	    }
  	  }

  	  run(fn, queueOptions) {
  	    if (!_classPrivateFieldLooseBase(this, _paused)[_paused] && _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] < this.limit) {
  	      return _classPrivateFieldLooseBase(this, _call)[_call](fn);
  	    }

  	    return _classPrivateFieldLooseBase(this, _queue)[_queue](fn, queueOptions);
  	  }

  	  wrapPromiseFunction(fn, queueOptions) {
  	    var _this = this;

  	    return function () {
  	      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
  	        args[_key] = arguments[_key];
  	      }

  	      let queuedRequest;
  	      const outerPromise = new Promise((resolve, reject) => {
  	        queuedRequest = _this.run(() => {
  	          let cancelError;
  	          let innerPromise;

  	          try {
  	            innerPromise = Promise.resolve(fn(...args));
  	          } catch (err) {
  	            innerPromise = Promise.reject(err);
  	          }

  	          innerPromise.then(result => {
  	            if (cancelError) {
  	              reject(cancelError);
  	            } else {
  	              queuedRequest.done();
  	              resolve(result);
  	            }
  	          }, err => {
  	            if (cancelError) {
  	              reject(cancelError);
  	            } else {
  	              queuedRequest.done();
  	              reject(err);
  	            }
  	          });
  	          return () => {
  	            cancelError = createCancelError();
  	          };
  	        }, queueOptions);
  	      });

  	      outerPromise.abort = () => {
  	        queuedRequest.abort();
  	      };

  	      return outerPromise;
  	    };
  	  }

  	  resume() {
  	    _classPrivateFieldLooseBase(this, _paused)[_paused] = false;
  	    clearTimeout(_classPrivateFieldLooseBase(this, _pauseTimer)[_pauseTimer]);

  	    for (let i = 0; i < this.limit; i++) {
  	      _classPrivateFieldLooseBase(this, _queueNext)[_queueNext]();
  	    }
  	  }

  	  /**
  	   * Freezes the queue for a while or indefinitely.
  	   *
  	   * @param {number | null } [duration] Duration for the pause to happen, in milliseconds.
  	   *                                    If omitted, the queue won't resume automatically.
  	   */
  	  pause(duration) {
  	    if (duration === void 0) {
  	      duration = null;
  	    }

  	    _classPrivateFieldLooseBase(this, _paused)[_paused] = true;
  	    clearTimeout(_classPrivateFieldLooseBase(this, _pauseTimer)[_pauseTimer]);

  	    if (duration != null) {
  	      _classPrivateFieldLooseBase(this, _pauseTimer)[_pauseTimer] = setTimeout(_classPrivateFieldLooseBase(this, _resume)[_resume], duration);
  	    }
  	  }
  	  /**
  	   * Pauses the queue for a duration, and lower the limit of concurrent requests
  	   * when the queue resumes. When the queue resumes, it tries to progressively
  	   * increase the limit in `this.#increaseLimit` until another call is made to
  	   * `this.rateLimit`.
  	   * Call this function when using the RateLimitedQueue for network requests and
  	   * the remote server responds with 429 HTTP code.
  	   *
  	   * @param {number} duration in milliseconds.
  	   */


  	  rateLimit(duration) {
  	    clearTimeout(_classPrivateFieldLooseBase(this, _rateLimitingTimer)[_rateLimitingTimer]);
  	    this.pause(duration);

  	    if (this.limit > 1 && Number.isFinite(this.limit)) {
  	      _classPrivateFieldLooseBase(this, _upperLimit)[_upperLimit] = this.limit - 1;
  	      this.limit = _classPrivateFieldLooseBase(this, _downLimit)[_downLimit];
  	      _classPrivateFieldLooseBase(this, _rateLimitingTimer)[_rateLimitingTimer] = setTimeout(_classPrivateFieldLooseBase(this, _increaseLimit)[_increaseLimit], duration);
  	    }
  	  }

  	  get isPaused() {
  	    return _classPrivateFieldLooseBase(this, _paused)[_paused];
  	  }

  	};

  	RateLimitedQueue.RateLimitedQueue = RateLimitedQueue$1;

  	function _call2(fn) {
  	  _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] += 1;
  	  let done = false;
  	  let cancelActive;

  	  try {
  	    cancelActive = fn();
  	  } catch (err) {
  	    _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] -= 1;
  	    throw err;
  	  }

  	  return {
  	    abort: () => {
  	      if (done) return;
  	      done = true;
  	      _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] -= 1;
  	      cancelActive();

  	      _classPrivateFieldLooseBase(this, _queueNext)[_queueNext]();
  	    },
  	    done: () => {
  	      if (done) return;
  	      done = true;
  	      _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] -= 1;

  	      _classPrivateFieldLooseBase(this, _queueNext)[_queueNext]();
  	    }
  	  };
  	}

  	function _queueNext2() {
  	  // Do it soon but not immediately, this allows clearing out the entire queue synchronously
  	  // one by one without continuously _advancing_ it (and starting new tasks before immediately
  	  // aborting them)
  	  queueMicrotask(() => _classPrivateFieldLooseBase(this, _next)[_next]());
  	}

  	function _next2() {
  	  if (_classPrivateFieldLooseBase(this, _paused)[_paused] || _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] >= this.limit) {
  	    return;
  	  }

  	  if (_classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].length === 0) {
  	    return;
  	  } // Dispatch the next request, and update the abort/done handlers
  	  // so that cancelling it does the Right Thing (and doesn't just try
  	  // to dequeue an already-running request).


  	  const next = _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].shift();

  	  const handler = _classPrivateFieldLooseBase(this, _call)[_call](next.fn);

  	  next.abort = handler.abort;
  	  next.done = handler.done;
  	}

  	function _queue2(fn, options) {
  	  if (options === void 0) {
  	    options = {};
  	  }

  	  const handler = {
  	    fn,
  	    priority: options.priority || 0,
  	    abort: () => {
  	      _classPrivateFieldLooseBase(this, _dequeue)[_dequeue](handler);
  	    },
  	    done: () => {
  	      throw new Error('Cannot mark a queued request as done: this indicates a bug');
  	    }
  	  };

  	  const index = _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].findIndex(other => {
  	    return handler.priority > other.priority;
  	  });

  	  if (index === -1) {
  	    _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].push(handler);
  	  } else {
  	    _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].splice(index, 0, handler);
  	  }

  	  return handler;
  	}

  	function _dequeue2(handler) {
  	  const index = _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].indexOf(handler);

  	  if (index !== -1) {
  	    _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].splice(index, 1);
  	  }
  	}

  	const internalRateLimitedQueue = Symbol('__queue');
  	RateLimitedQueue.internalRateLimitedQueue = internalRateLimitedQueue;
  	return RateLimitedQueue;
  }

  var emitSocketProgress_1;
  var hasRequiredEmitSocketProgress;

  function requireEmitSocketProgress () {
  	if (hasRequiredEmitSocketProgress) return emitSocketProgress_1;
  	hasRequiredEmitSocketProgress = 1;

  	const throttle = requireLodash_throttle();

  	function emitSocketProgress(uploader, progressData, file) {
  	  const {
  	    progress,
  	    bytesUploaded,
  	    bytesTotal
  	  } = progressData;

  	  if (progress) {
  	    uploader.uppy.log(`Upload progress: ${progress}`);
  	    uploader.uppy.emit('upload-progress', file, {
  	      uploader,
  	      bytesUploaded,
  	      bytesTotal
  	    });
  	  }
  	}

  	emitSocketProgress_1 = throttle(emitSocketProgress, 300, {
  	  leading: true,
  	  trailing: true
  	});
  	return emitSocketProgress_1;
  }

  var getSocketHost_1;
  var hasRequiredGetSocketHost;

  function requireGetSocketHost () {
  	if (hasRequiredGetSocketHost) return getSocketHost_1;
  	hasRequiredGetSocketHost = 1;

  	function getSocketHost(url) {
  	  // get the host domain
  	  const regex = /^(?:https?:\/\/|\/\/)?(?:[^@\n]+@)?(?:www\.)?([^\n]+)/i;
  	  const host = regex.exec(url)[1];
  	  const socketProtocol = /^http:\/\//i.test(url) ? 'ws' : 'wss';
  	  return `${socketProtocol}://${host}`;
  	}

  	getSocketHost_1 = getSocketHost;
  	return getSocketHost_1;
  }

  var settle_1;
  var hasRequiredSettle;

  function requireSettle () {
  	if (hasRequiredSettle) return settle_1;
  	hasRequiredSettle = 1;

  	function settle(promises) {
  	  const resolutions = [];
  	  const rejections = [];

  	  function resolved(value) {
  	    resolutions.push(value);
  	  }

  	  function rejected(error) {
  	    rejections.push(error);
  	  }

  	  const wait = Promise.all(promises.map(promise => promise.then(resolved, rejected)));
  	  return wait.then(() => {
  	    return {
  	      successful: resolutions,
  	      failed: rejections
  	    };
  	  });
  	}

  	settle_1 = settle;
  	return settle_1;
  }

  var EventTracker_1;
  var hasRequiredEventTracker;

  function requireEventTracker () {
  	if (hasRequiredEventTracker) return EventTracker_1;
  	hasRequiredEventTracker = 1;

  	function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

  	var id = 0;

  	function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

  	var _emitter = /*#__PURE__*/_classPrivateFieldLooseKey("emitter");

  	var _events = /*#__PURE__*/_classPrivateFieldLooseKey("events");

  	class EventTracker {
  	  constructor(emitter) {
  	    Object.defineProperty(this, _emitter, {
  	      writable: true,
  	      value: void 0
  	    });
  	    Object.defineProperty(this, _events, {
  	      writable: true,
  	      value: []
  	    });
  	    _classPrivateFieldLooseBase(this, _emitter)[_emitter] = emitter;
  	  }

  	  on(event, fn) {
  	    _classPrivateFieldLooseBase(this, _events)[_events].push([event, fn]);

  	    return _classPrivateFieldLooseBase(this, _emitter)[_emitter].on(event, fn);
  	  }

  	  remove() {
  	    for (const [event, fn] of _classPrivateFieldLooseBase(this, _events)[_events].splice(0)) {
  	      _classPrivateFieldLooseBase(this, _emitter)[_emitter].off(event, fn);
  	    }
  	  }

  	}

  	/**
  	 * Create a wrapper around an event emitter with a `remove` method to remove
  	 * all events that were added using the wrapped emitter.
  	 */
  	EventTracker_1 = EventTracker;
  	return EventTracker_1;
  }

  var ProgressTimeout_1;
  var hasRequiredProgressTimeout;

  function requireProgressTimeout () {
  	if (hasRequiredProgressTimeout) return ProgressTimeout_1;
  	hasRequiredProgressTimeout = 1;

  	function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

  	var id = 0;

  	function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

  	var _aliveTimer = /*#__PURE__*/_classPrivateFieldLooseKey("aliveTimer");

  	var _isDone = /*#__PURE__*/_classPrivateFieldLooseKey("isDone");

  	var _onTimedOut = /*#__PURE__*/_classPrivateFieldLooseKey("onTimedOut");

  	var _timeout = /*#__PURE__*/_classPrivateFieldLooseKey("timeout");

  	/**
  	 * Helper to abort upload requests if there has not been any progress for `timeout` ms.
  	 * Create an instance using `timer = new ProgressTimeout(10000, onTimeout)`
  	 * Call `timer.progress()` to signal that there has been progress of any kind.
  	 * Call `timer.done()` when the upload has completed.
  	 */
  	class ProgressTimeout {
  	  constructor(timeout, timeoutHandler) {
  	    Object.defineProperty(this, _aliveTimer, {
  	      writable: true,
  	      value: void 0
  	    });
  	    Object.defineProperty(this, _isDone, {
  	      writable: true,
  	      value: false
  	    });
  	    Object.defineProperty(this, _onTimedOut, {
  	      writable: true,
  	      value: void 0
  	    });
  	    Object.defineProperty(this, _timeout, {
  	      writable: true,
  	      value: void 0
  	    });
  	    _classPrivateFieldLooseBase(this, _timeout)[_timeout] = timeout;
  	    _classPrivateFieldLooseBase(this, _onTimedOut)[_onTimedOut] = timeoutHandler;
  	  }

  	  progress() {
  	    // Some browsers fire another progress event when the upload is
  	    // cancelled, so we have to ignore progress after the timer was
  	    // told to stop.
  	    if (_classPrivateFieldLooseBase(this, _isDone)[_isDone]) return;

  	    if (_classPrivateFieldLooseBase(this, _timeout)[_timeout] > 0) {
  	      clearTimeout(_classPrivateFieldLooseBase(this, _aliveTimer)[_aliveTimer]);
  	      _classPrivateFieldLooseBase(this, _aliveTimer)[_aliveTimer] = setTimeout(_classPrivateFieldLooseBase(this, _onTimedOut)[_onTimedOut], _classPrivateFieldLooseBase(this, _timeout)[_timeout]);
  	    }
  	  }

  	  done() {
  	    if (!_classPrivateFieldLooseBase(this, _isDone)[_isDone]) {
  	      clearTimeout(_classPrivateFieldLooseBase(this, _aliveTimer)[_aliveTimer]);
  	      _classPrivateFieldLooseBase(this, _aliveTimer)[_aliveTimer] = null;
  	      _classPrivateFieldLooseBase(this, _isDone)[_isDone] = true;
  	    }
  	  }

  	}

  	ProgressTimeout_1 = ProgressTimeout;
  	return ProgressTimeout_1;
  }

  var isNetworkError_1;
  var hasRequiredIsNetworkError;

  function requireIsNetworkError () {
  	if (hasRequiredIsNetworkError) return isNetworkError_1;
  	hasRequiredIsNetworkError = 1;

  	function isNetworkError(xhr) {
  	  if (!xhr) {
  	    return false;
  	  }

  	  return xhr.readyState !== 0 && xhr.readyState !== 4 || xhr.status === 0;
  	}

  	isNetworkError_1 = isNetworkError;
  	return isNetworkError_1;
  }

  var locale;
  var hasRequiredLocale;

  function requireLocale () {
  	if (hasRequiredLocale) return locale;
  	hasRequiredLocale = 1;

  	locale = {
  	  strings: {
  	    // Shown in the Informer if an upload is being canceled because it stalled for too long.
  	    timedOut: 'Upload stalled for %{seconds} seconds, aborting.'
  	  }
  	};
  	return locale;
  }

  var lib;
  var hasRequiredLib;

  function requireLib () {
  	if (hasRequiredLib) return lib;
  	hasRequiredLib = 1;

  	var _nonSecure = /*@__PURE__*/ requireNonSecure();

  	var _companionClient = requireLib$1();

  	var _RateLimitedQueue = requireRateLimitedQueue();

  	const BasePlugin = requireBasePlugin();

  	const emitSocketProgress = requireEmitSocketProgress();

  	const getSocketHost = requireGetSocketHost();

  	const settle = requireSettle();

  	const EventTracker = requireEventTracker();

  	const ProgressTimeout = requireProgressTimeout();

  	const NetworkError = requireNetworkError();

  	const isNetworkError = requireIsNetworkError();

  	const packageJson = {
  	  "version": "2.1.3"
  	};

  	const locale = requireLocale();

  	function buildResponseError(xhr, err) {
  	  let error = err; // No error message

  	  if (!error) error = new Error('Upload error'); // Got an error message string

  	  if (typeof error === 'string') error = new Error(error); // Got something else

  	  if (!(error instanceof Error)) {
  	    error = Object.assign(new Error('Upload error'), {
  	      data: error
  	    });
  	  }

  	  if (isNetworkError(xhr)) {
  	    error = new NetworkError(error, xhr);
  	    return error;
  	  }

  	  error.request = xhr;
  	  return error;
  	}
  	/**
  	 * Set `data.type` in the blob to `file.meta.type`,
  	 * because we might have detected a more accurate file type in Uppy
  	 * https://stackoverflow.com/a/50875615
  	 *
  	 * @param {object} file File object with `data`, `size` and `meta` properties
  	 * @returns {object} blob updated with the new `type` set from `file.meta.type`
  	 */


  	function setTypeInBlob(file) {
  	  const dataWithUpdatedType = file.data.slice(0, file.data.size, file.meta.type);
  	  return dataWithUpdatedType;
  	}

  	class XHRUpload extends BasePlugin {
  	  // eslint-disable-next-line global-require
  	  constructor(uppy, opts) {
  	    super(uppy, opts);
  	    this.type = 'uploader';
  	    this.id = this.opts.id || 'XHRUpload';
  	    this.title = 'XHRUpload';
  	    this.defaultLocale = locale; // Default options

  	    const defaultOptions = {
  	      formData: true,
  	      fieldName: opts.bundle ? 'files[]' : 'file',
  	      method: 'post',
  	      metaFields: null,
  	      responseUrlFieldName: 'url',
  	      bundle: false,
  	      headers: {},
  	      timeout: 30 * 1000,
  	      limit: 5,
  	      withCredentials: false,
  	      responseType: '',

  	      /**
  	       * @param {string} responseText the response body string
  	       */
  	      getResponseData(responseText) {
  	        let parsedResponse = {};

  	        try {
  	          parsedResponse = JSON.parse(responseText);
  	        } catch (err) {
  	          uppy.log(err);
  	        }

  	        return parsedResponse;
  	      },

  	      /**
  	       *
  	       * @param {string} _ the response body string
  	       * @param {XMLHttpRequest | respObj} response the response object (XHR or similar)
  	       */
  	      getResponseError(_, response) {
  	        let error = new Error('Upload error');

  	        if (isNetworkError(response)) {
  	          error = new NetworkError(error, response);
  	        }

  	        return error;
  	      },

  	      /**
  	       * Check if the response from the upload endpoint indicates that the upload was successful.
  	       *
  	       * @param {number} status the response status code
  	       */
  	      validateStatus(status) {
  	        return status >= 200 && status < 300;
  	      }

  	    };
  	    this.opts = { ...defaultOptions,
  	      ...opts
  	    };
  	    this.i18nInit();
  	    this.handleUpload = this.handleUpload.bind(this); // Simultaneous upload limiting is shared across all uploads with this plugin.

  	    if (_RateLimitedQueue.internalRateLimitedQueue in this.opts) {
  	      this.requests = this.opts[_RateLimitedQueue.internalRateLimitedQueue];
  	    } else {
  	      this.requests = new _RateLimitedQueue.RateLimitedQueue(this.opts.limit);
  	    }

  	    if (this.opts.bundle && !this.opts.formData) {
  	      throw new Error('`opts.formData` must be true when `opts.bundle` is enabled.');
  	    }

  	    this.uploaderEvents = Object.create(null);
  	  }

  	  getOptions(file) {
  	    const overrides = this.uppy.getState().xhrUpload;
  	    const {
  	      headers
  	    } = this.opts;
  	    const opts = { ...this.opts,
  	      ...(overrides || {}),
  	      ...(file.xhrUpload || {}),
  	      headers: {}
  	    }; // Support for `headers` as a function, only in the XHRUpload settings.
  	    // Options set by other plugins in Uppy state or on the files themselves are still merged in afterward.
  	    //
  	    // ```js
  	    // headers: (file) => ({ expires: file.meta.expires })
  	    // ```

  	    if (typeof headers === 'function') {
  	      opts.headers = headers(file);
  	    } else {
  	      Object.assign(opts.headers, this.opts.headers);
  	    }

  	    if (overrides) {
  	      Object.assign(opts.headers, overrides.headers);
  	    }

  	    if (file.xhrUpload) {
  	      Object.assign(opts.headers, file.xhrUpload.headers);
  	    }

  	    return opts;
  	  } // eslint-disable-next-line class-methods-use-this


  	  addMetadata(formData, meta, opts) {
  	    const metaFields = Array.isArray(opts.metaFields) ? opts.metaFields : Object.keys(meta); // Send along all fields by default.

  	    metaFields.forEach(item => {
  	      formData.append(item, meta[item]);
  	    });
  	  }

  	  createFormDataUpload(file, opts) {
  	    const formPost = new FormData();
  	    this.addMetadata(formPost, file.meta, opts);
  	    const dataWithUpdatedType = setTypeInBlob(file);

  	    if (file.name) {
  	      formPost.append(opts.fieldName, dataWithUpdatedType, file.meta.name);
  	    } else {
  	      formPost.append(opts.fieldName, dataWithUpdatedType);
  	    }

  	    return formPost;
  	  }

  	  createBundledUpload(files, opts) {
  	    const formPost = new FormData();
  	    const {
  	      meta
  	    } = this.uppy.getState();
  	    this.addMetadata(formPost, meta, opts);
  	    files.forEach(file => {
  	      const options = this.getOptions(file);
  	      const dataWithUpdatedType = setTypeInBlob(file);

  	      if (file.name) {
  	        formPost.append(options.fieldName, dataWithUpdatedType, file.name);
  	      } else {
  	        formPost.append(options.fieldName, dataWithUpdatedType);
  	      }
  	    });
  	    return formPost;
  	  }

  	  upload(file, current, total) {
  	    const opts = this.getOptions(file);
  	    this.uppy.log(`uploading ${current} of ${total}`);
  	    return new Promise((resolve, reject) => {
  	      this.uppy.emit('upload-started', file);
  	      const data = opts.formData ? this.createFormDataUpload(file, opts) : file.data;
  	      const xhr = new XMLHttpRequest();
  	      this.uploaderEvents[file.id] = new EventTracker(this.uppy);
  	      let queuedRequest;
  	      const timer = new ProgressTimeout(opts.timeout, () => {
  	        xhr.abort();
  	        queuedRequest.done();
  	        const error = new Error(this.i18n('timedOut', {
  	          seconds: Math.ceil(opts.timeout / 1000)
  	        }));
  	        this.uppy.emit('upload-error', file, error);
  	        reject(error);
  	      });
  	      const id = (0, _nonSecure.nanoid)();
  	      xhr.upload.addEventListener('loadstart', () => {
  	        this.uppy.log(`[XHRUpload] ${id} started`);
  	      });
  	      xhr.upload.addEventListener('progress', ev => {
  	        this.uppy.log(`[XHRUpload] ${id} progress: ${ev.loaded} / ${ev.total}`); // Begin checking for timeouts when progress starts, instead of loading,
  	        // to avoid timing out requests on browser concurrency queue

  	        timer.progress();

  	        if (ev.lengthComputable) {
  	          this.uppy.emit('upload-progress', file, {
  	            uploader: this,
  	            bytesUploaded: ev.loaded,
  	            bytesTotal: ev.total
  	          });
  	        }
  	      });
  	      xhr.addEventListener('load', () => {
  	        this.uppy.log(`[XHRUpload] ${id} finished`);
  	        timer.done();
  	        queuedRequest.done();

  	        if (this.uploaderEvents[file.id]) {
  	          this.uploaderEvents[file.id].remove();
  	          this.uploaderEvents[file.id] = null;
  	        }

  	        if (opts.validateStatus(xhr.status, xhr.responseText, xhr)) {
  	          const body = opts.getResponseData(xhr.responseText, xhr);
  	          const uploadURL = body[opts.responseUrlFieldName];
  	          const uploadResp = {
  	            status: xhr.status,
  	            body,
  	            uploadURL
  	          };
  	          this.uppy.emit('upload-success', file, uploadResp);

  	          if (uploadURL) {
  	            this.uppy.log(`Download ${file.name} from ${uploadURL}`);
  	          }

  	          return resolve(file);
  	        }

  	        const body = opts.getResponseData(xhr.responseText, xhr);
  	        const error = buildResponseError(xhr, opts.getResponseError(xhr.responseText, xhr));
  	        const response = {
  	          status: xhr.status,
  	          body
  	        };
  	        this.uppy.emit('upload-error', file, error, response);
  	        return reject(error);
  	      });
  	      xhr.addEventListener('error', () => {
  	        this.uppy.log(`[XHRUpload] ${id} errored`);
  	        timer.done();
  	        queuedRequest.done();

  	        if (this.uploaderEvents[file.id]) {
  	          this.uploaderEvents[file.id].remove();
  	          this.uploaderEvents[file.id] = null;
  	        }

  	        const error = buildResponseError(xhr, opts.getResponseError(xhr.responseText, xhr));
  	        this.uppy.emit('upload-error', file, error);
  	        return reject(error);
  	      });
  	      xhr.open(opts.method.toUpperCase(), opts.endpoint, true); // IE10 does not allow setting `withCredentials` and `responseType`
  	      // before `open()` is called.

  	      xhr.withCredentials = opts.withCredentials;

  	      if (opts.responseType !== '') {
  	        xhr.responseType = opts.responseType;
  	      }

  	      queuedRequest = this.requests.run(() => {
  	        this.uppy.emit('upload-started', file); // When using an authentication system like JWT, the bearer token goes as a header. This
  	        // header needs to be fresh each time the token is refreshed so computing and setting the
  	        // headers just before the upload starts enables this kind of authentication to work properly.
  	        // Otherwise, half-way through the list of uploads the token could be stale and the upload would fail.

  	        const currentOpts = this.getOptions(file);
  	        Object.keys(currentOpts.headers).forEach(header => {
  	          xhr.setRequestHeader(header, currentOpts.headers[header]);
  	        });
  	        xhr.send(data);
  	        return () => {
  	          timer.done();
  	          xhr.abort();
  	        };
  	      });
  	      this.onFileRemove(file.id, () => {
  	        queuedRequest.abort();
  	        reject(new Error('File removed'));
  	      });
  	      this.onCancelAll(file.id, _ref => {
  	        let {
  	          reason
  	        } = _ref;

  	        if (reason === 'user') {
  	          queuedRequest.abort();
  	        }

  	        reject(new Error('Upload cancelled'));
  	      });
  	    });
  	  }

  	  uploadRemote(file) {
  	    const opts = this.getOptions(file);
  	    return new Promise((resolve, reject) => {
  	      this.uppy.emit('upload-started', file);
  	      const fields = {};
  	      const metaFields = Array.isArray(opts.metaFields) ? opts.metaFields // Send along all fields by default.
  	      : Object.keys(file.meta);
  	      metaFields.forEach(name => {
  	        fields[name] = file.meta[name];
  	      });
  	      const Client = file.remote.providerOptions.provider ? _companionClient.Provider : _companionClient.RequestClient;
  	      const client = new Client(this.uppy, file.remote.providerOptions);
  	      client.post(file.remote.url, { ...file.remote.body,
  	        endpoint: opts.endpoint,
  	        size: file.data.size,
  	        fieldname: opts.fieldName,
  	        metadata: fields,
  	        httpMethod: opts.method,
  	        useFormData: opts.formData,
  	        headers: opts.headers
  	      }).then(res => {
  	        const {
  	          token
  	        } = res;
  	        const host = getSocketHost(file.remote.companionUrl);
  	        const socket = new _companionClient.Socket({
  	          target: `${host}/api/${token}`,
  	          autoOpen: false
  	        });
  	        this.uploaderEvents[file.id] = new EventTracker(this.uppy);
  	        let queuedRequest;
  	        this.onFileRemove(file.id, () => {
  	          socket.send('cancel', {});
  	          queuedRequest.abort();
  	          resolve(`upload ${file.id} was removed`);
  	        });
  	        this.onCancelAll(file.id, function (_temp) {
  	          let {
  	            reason
  	          } = _temp === void 0 ? {} : _temp;

  	          if (reason === 'user') {
  	            socket.send('cancel', {});
  	            queuedRequest.abort();
  	          }

  	          resolve(`upload ${file.id} was canceled`);
  	        });
  	        this.onRetry(file.id, () => {
  	          socket.send('pause', {});
  	          socket.send('resume', {});
  	        });
  	        this.onRetryAll(file.id, () => {
  	          socket.send('pause', {});
  	          socket.send('resume', {});
  	        });
  	        socket.on('progress', progressData => emitSocketProgress(this, progressData, file));
  	        socket.on('success', data => {
  	          const body = opts.getResponseData(data.response.responseText, data.response);
  	          const uploadURL = body[opts.responseUrlFieldName];
  	          const uploadResp = {
  	            status: data.response.status,
  	            body,
  	            uploadURL
  	          };
  	          this.uppy.emit('upload-success', file, uploadResp);
  	          queuedRequest.done();

  	          if (this.uploaderEvents[file.id]) {
  	            this.uploaderEvents[file.id].remove();
  	            this.uploaderEvents[file.id] = null;
  	          }

  	          return resolve();
  	        });
  	        socket.on('error', errData => {
  	          const resp = errData.response;
  	          const error = resp ? opts.getResponseError(resp.responseText, resp) : Object.assign(new Error(errData.error.message), {
  	            cause: errData.error
  	          });
  	          this.uppy.emit('upload-error', file, error);
  	          queuedRequest.done();

  	          if (this.uploaderEvents[file.id]) {
  	            this.uploaderEvents[file.id].remove();
  	            this.uploaderEvents[file.id] = null;
  	          }

  	          reject(error);
  	        });
  	        queuedRequest = this.requests.run(() => {
  	          socket.open();

  	          if (file.isPaused) {
  	            socket.send('pause', {});
  	          }

  	          return () => socket.close();
  	        });
  	      }).catch(err => {
  	        this.uppy.emit('upload-error', file, err);
  	        reject(err);
  	      });
  	    });
  	  }

  	  uploadBundle(files) {
  	    return new Promise((resolve, reject) => {
  	      const {
  	        endpoint
  	      } = this.opts;
  	      const {
  	        method
  	      } = this.opts;
  	      const optsFromState = this.uppy.getState().xhrUpload;
  	      const formData = this.createBundledUpload(files, { ...this.opts,
  	        ...(optsFromState || {})
  	      });
  	      const xhr = new XMLHttpRequest();

  	      const emitError = error => {
  	        files.forEach(file => {
  	          this.uppy.emit('upload-error', file, error);
  	        });
  	      };

  	      const timer = new ProgressTimeout(this.opts.timeout, () => {
  	        xhr.abort();
  	        const error = new Error(this.i18n('timedOut', {
  	          seconds: Math.ceil(this.opts.timeout / 1000)
  	        }));
  	        emitError(error);
  	        reject(error);
  	      });
  	      xhr.upload.addEventListener('loadstart', () => {
  	        this.uppy.log('[XHRUpload] started uploading bundle');
  	        timer.progress();
  	      });
  	      xhr.upload.addEventListener('progress', ev => {
  	        timer.progress();
  	        if (!ev.lengthComputable) return;
  	        files.forEach(file => {
  	          this.uppy.emit('upload-progress', file, {
  	            uploader: this,
  	            bytesUploaded: ev.loaded / ev.total * file.size,
  	            bytesTotal: file.size
  	          });
  	        });
  	      });
  	      xhr.addEventListener('load', ev => {
  	        timer.done();

  	        if (this.opts.validateStatus(ev.target.status, xhr.responseText, xhr)) {
  	          const body = this.opts.getResponseData(xhr.responseText, xhr);
  	          const uploadResp = {
  	            status: ev.target.status,
  	            body
  	          };
  	          files.forEach(file => {
  	            this.uppy.emit('upload-success', file, uploadResp);
  	          });
  	          return resolve();
  	        }

  	        const error = this.opts.getResponseError(xhr.responseText, xhr) || new Error('Upload error');
  	        error.request = xhr;
  	        emitError(error);
  	        return reject(error);
  	      });
  	      xhr.addEventListener('error', () => {
  	        timer.done();
  	        const error = this.opts.getResponseError(xhr.responseText, xhr) || new Error('Upload error');
  	        emitError(error);
  	        return reject(error);
  	      });
  	      this.uppy.on('cancel-all', function (_temp2) {
  	        let {
  	          reason
  	        } = _temp2 === void 0 ? {} : _temp2;
  	        if (reason !== 'user') return;
  	        timer.done();
  	        xhr.abort();
  	      });
  	      xhr.open(method.toUpperCase(), endpoint, true); // IE10 does not allow setting `withCredentials` and `responseType`
  	      // before `open()` is called.

  	      xhr.withCredentials = this.opts.withCredentials;

  	      if (this.opts.responseType !== '') {
  	        xhr.responseType = this.opts.responseType;
  	      }

  	      Object.keys(this.opts.headers).forEach(header => {
  	        xhr.setRequestHeader(header, this.opts.headers[header]);
  	      });
  	      xhr.send(formData);
  	      files.forEach(file => {
  	        this.uppy.emit('upload-started', file);
  	      });
  	    });
  	  }

  	  uploadFiles(files) {
  	    const promises = files.map((file, i) => {
  	      const current = parseInt(i, 10) + 1;
  	      const total = files.length;

  	      if (file.error) {
  	        return Promise.reject(new Error(file.error));
  	      }

  	      if (file.isRemote) {
  	        return this.uploadRemote(file, current, total);
  	      }

  	      return this.upload(file, current, total);
  	    });
  	    return settle(promises);
  	  }

  	  onFileRemove(fileID, cb) {
  	    this.uploaderEvents[fileID].on('file-removed', file => {
  	      if (fileID === file.id) cb(file.id);
  	    });
  	  }

  	  onRetry(fileID, cb) {
  	    this.uploaderEvents[fileID].on('upload-retry', targetFileID => {
  	      if (fileID === targetFileID) {
  	        cb();
  	      }
  	    });
  	  }

  	  onRetryAll(fileID, cb) {
  	    this.uploaderEvents[fileID].on('retry-all', () => {
  	      if (!this.uppy.getFile(fileID)) return;
  	      cb();
  	    });
  	  }

  	  onCancelAll(fileID, eventHandler) {
  	    var _this = this;

  	    this.uploaderEvents[fileID].on('cancel-all', function () {
  	      if (!_this.uppy.getFile(fileID)) return;
  	      eventHandler(...arguments);
  	    });
  	  }

  	  handleUpload(fileIDs) {
  	    if (fileIDs.length === 0) {
  	      this.uppy.log('[XHRUpload] No files to upload!');
  	      return Promise.resolve();
  	    } // No limit configured by the user, and no RateLimitedQueue passed in by a "parent" plugin
  	    // (basically just AwsS3) using the internal symbol


  	    if (this.opts.limit === 0 && !this.opts[_RateLimitedQueue.internalRateLimitedQueue]) {
  	      this.uppy.log('[XHRUpload] When uploading multiple files at once, consider setting the `limit` option (to `10` for example), to limit the number of concurrent uploads, which helps prevent memory and network issues: https://uppy.io/docs/xhr-upload/#limit-0', 'warning');
  	    }

  	    this.uppy.log('[XHRUpload] Uploading...');
  	    const files = fileIDs.map(fileID => this.uppy.getFile(fileID));

  	    if (this.opts.bundle) {
  	      // if bundle: true, we don’t support remote uploads
  	      const isSomeFileRemote = files.some(file => file.isRemote);

  	      if (isSomeFileRemote) {
  	        throw new Error('Can’t upload remote files when the `bundle: true` option is set');
  	      }

  	      if (typeof this.opts.headers === 'function') {
  	        throw new TypeError('`headers` may not be a function when the `bundle: true` option is set');
  	      }

  	      return this.uploadBundle(files);
  	    }

  	    return this.uploadFiles(files).then(() => null);
  	  }

  	  install() {
  	    if (this.opts.bundle) {
  	      const {
  	        capabilities
  	      } = this.uppy.getState();
  	      this.uppy.setState({
  	        capabilities: { ...capabilities,
  	          individualCancellation: false
  	        }
  	      });
  	    }

  	    this.uppy.addUploader(this.handleUpload);
  	  }

  	  uninstall() {
  	    if (this.opts.bundle) {
  	      const {
  	        capabilities
  	      } = this.uppy.getState();
  	      this.uppy.setState({
  	        capabilities: { ...capabilities,
  	          individualCancellation: true
  	        }
  	      });
  	    }

  	    this.uppy.removeUploader(this.handleUpload);
  	  }

  	}

  	XHRUpload.VERSION = packageJson.version;
  	lib = XHRUpload;
  	return lib;
  }

  var libExports = requireLib();
  var XHRUpload = /*@__PURE__*/getDefaultExportFromCjs(libExports);

  /**
   * @description gen uploader
   * @author wangfupeng
   */
  function createUploader(config) {
      // 获取配置
      var _a = config.server, server = _a === void 0 ? '' : _a, _b = config.fieldName, fieldName = _b === void 0 ? '' : _b, _c = config.maxFileSize, maxFileSize = _c === void 0 ? 10 * 1024 * 1024 : _c, // 10M
      _d = config.maxNumberOfFiles, // 10M
      maxNumberOfFiles = _d === void 0 ? 100 : _d, // 最多多少个文件
      _e = config.meta, // 最多多少个文件
      meta = _e === void 0 ? {} : _e, _f = config.metaWithUrl, metaWithUrl = _f === void 0 ? false : _f, _g = config.headers, headers = _g === void 0 ? {} : _g, _h = config.withCredentials, withCredentials = _h === void 0 ? false : _h, _j = config.timeout, timeout = _j === void 0 ? 10 * 1000 : _j, // 10s
      _k = config.onBeforeUpload, // 10s
      onBeforeUpload = _k === void 0 ? function (files) { return files; } : _k, _l = config.onSuccess, onSuccess = _l === void 0 ? function (_file, _res) {
          /* on success */
      } : _l, _m = config.onError, onError = _m === void 0 ? function (file, err, res) {
          console.error("".concat(file.name, " upload error"), err, res);
      } : _m, _o = config.onProgress, onProgress = _o === void 0 ? function (_progress) {
          /* on progress */
      } : _o;
      // 判断配置项
      if (!server) {
          throw new Error('Cannot get upload server address\n没有配置上传地址');
      }
      if (!fieldName) {
          throw new Error('Cannot get fieldName\n没有配置 fieldName');
      }
      // 是否要追加 url 参数
      var url = server;
      if (metaWithUrl) {
          url = addQueryToUrl(url, meta);
      }
      // 生成 uppy 实例，参考文档 https://uppy.io/docs/uppy/
      var uppy = new Uppy(__assign({ onBeforeUpload: onBeforeUpload, restrictions: {
              maxFileSize: maxFileSize,
              maxNumberOfFiles: maxNumberOfFiles,
          }, meta: meta }, config.uppyConfig)).use(XHRUpload, __assign({ endpoint: url, headers: headers, formData: true, fieldName: fieldName, bundle: true, withCredentials: withCredentials, timeout: timeout }, config.xhrConfig));
      // 各个 callback
      // onSuccess 每个 file 上传成功都会触发，改用 complete 便于 files 上传
      uppy.on('complete', function (result) {
          var file = result.successful[0];
          var response = file.response;
          var _a = (response !== null && response !== void 0 ? response : {}).body, body = _a === void 0 ? {} : _a;
          try {
              onSuccess(file, body);
          }
          catch (err) {
              console.error('wangEditor upload file - onSuccess error', err);
          }
      });
      uppy.on('progress', function (progress) {
          // progress 值范围： 0 - 100
          if (progress < 1) {
              return;
          }
          onProgress(progress);
      });
      // uppy.on('error', error => {
      //   console.error('wangEditor file upload error', error.stack)
      // })
      uppy.on('upload-error', function (file, error, response) {
          try {
              // 有用户传入的第三方代码，得用 try catch 包裹
              onError(file, error, response);
          }
          catch (err) {
              console.error('wangEditor upload file - onError error', err);
          }
      });
      uppy.on('restriction-failed', function (file, error) {
          try {
              // 有用户传入的第三方代码，得用 try catch 包裹
              // @ts-ignore
              onError(file, error);
          }
          catch (err) {
              console.error('wangEditor upload file - onError error', err);
          }
      });
      // 返回实例
      return uppy;
  }

  /**
   * @description i18n en
   * @author wangfupeng
   */
  var enResources$6 = {
      editor: {
          more: 'More',
          justify: 'Justify',
          indent: 'Indent',
          image: 'Image',
          video: 'Video',
      },
  };

  /**
   * @description i18n zh-CN
   * @author wangfupeng
   */
  var zhResources$6 = {
      editor: {
          more: '更多',
          justify: '对齐',
          indent: '缩进',
          image: '图片',
          video: '视频',
      },
  };

  /**
   * @description i18n entry
   * @author wangfupeng
   */
  i18nAddResources('en', enResources$6);
  i18nAddResources('zh-CN', zhResources$6);

  /**
   * @description i18n en
   * @author wangfupeng
   */
  var enResources$5 = {
      // 通用的词
      common: {
          ok: 'OK',
          delete: 'Delete',
          enter: 'Enter',
      },
      blockQuote: {
          title: 'Quote',
      },
      codeBlock: {
          title: 'Code block',
      },
      color: {
          color: 'Font color',
          bgColor: 'Back color',
          default: 'Default color',
          clear: 'Clear back color',
      },
      divider: {
          title: 'Divider',
      },
      emotion: {
          title: 'Emotion',
      },
      fontSize: {
          title: 'Font size',
          default: 'Default',
      },
      fontFamily: {
          title: 'Font family',
          default: 'Default',
      },
      fullScreen: {
          title: 'Full screen',
          cancelTitle: 'Cancel full screen',
      },
      header: {
          title: 'Header',
          text: 'Text',
      },
      image: {
          netImage: 'Net image',
          delete: 'Delete image',
          edit: 'Edit image',
          editSize: 'Edit size',
          viewLink: 'View link',
          src: 'Image src',
          desc: 'Description',
          link: 'Image link',
          ok: 'Ok',
          width: 'Width',
          height: 'Height',
      },
      indent: {
          decrease: 'Decrease',
          increase: 'Increase',
      },
      justify: {
          left: 'Left',
          right: 'Right',
          center: 'Center',
          justify: 'Justify',
      },
      lineHeight: {
          title: 'Line height',
          default: 'Default',
      },
      link: {
          insert: 'Insert link',
          text: 'Link text',
          url: 'Link source',
          unLink: 'Unlink',
          edit: 'Edit link',
          view: 'View link',
      },
      textStyle: {
          bold: 'Bold',
          clear: 'Clear styles',
          code: 'Inline code',
          italic: 'Italic',
          sub: 'Sub',
          sup: 'Sup',
          through: 'Through',
          underline: 'Underline',
      },
      undo: {
          undo: 'undo',
          redo: 'Redo',
      },
      todo: {
          todo: 'Todo',
      },
      formatPainter: {
          title: 'Format Painter',
      },
  };

  /**
   * @description i18n zh-CN
   * @author wangfupeng
   */
  var zhResources$5 = {
      // 通用的词
      common: {
          ok: '确定',
          delete: '删除',
          enter: '回车',
      },
      blockQuote: {
          title: '引用',
      },
      codeBlock: {
          title: '代码块',
      },
      color: {
          color: '文字颜色',
          bgColor: '背景色',
          default: '默认颜色',
          clear: '清除背景色',
      },
      divider: {
          title: '分割线',
      },
      emotion: {
          title: '表情',
      },
      fontSize: {
          title: '字号',
          default: '默认字号',
      },
      fontFamily: {
          title: '字体',
          default: '默认字体',
      },
      fullScreen: {
          title: '全屏',
          cancelTitle: '取消全屏',
      },
      header: {
          title: '标题',
          text: '正文',
      },
      image: {
          netImage: '网络图片',
          delete: '删除图片',
          edit: '编辑图片',
          editSize: '修改尺寸',
          viewLink: '查看链接',
          src: '图片地址',
          desc: '图片描述',
          link: '图片链接',
          ok: '确定',
          width: '宽度',
          height: '高度',
      },
      indent: {
          decrease: '减少缩进',
          increase: '增加缩进',
      },
      justify: {
          left: '左对齐',
          right: '右对齐',
          center: '居中对齐',
          justify: '两端对齐',
      },
      lineHeight: {
          title: '行高',
          default: '默认行高',
      },
      link: {
          insert: '插入链接',
          text: '链接文本',
          url: '链接地址',
          unLink: '取消链接',
          edit: '修改链接',
          view: '查看链接',
      },
      textStyle: {
          bold: '粗体',
          clear: '清除格式',
          code: '行内代码',
          italic: '斜体',
          sub: '下标',
          sup: '上标',
          through: '删除线',
          underline: '下划线',
      },
      undo: {
          undo: '撤销',
          redo: '重做',
      },
      todo: {
          todo: '待办',
      },
      formatPainter: {
          title: '格式刷',
      },
  };

  /**
   * @description i18n entry
   * @author wangfupeng
   */
  i18nAddResources('en', enResources$5);
  i18nAddResources('zh-CN', zhResources$5);

  /**
   * @description to html
   * @author wangfupeng
   */
  function quoteToHtml(elem, childrenHtml) {
      return "<blockquote>".concat(childrenHtml, "</blockquote>");
  }
  var quoteToHtmlConf = {
      type: 'blockquote',
      elemToHtml: quoteToHtml,
  };

  /**
   * @description icon svg
   * @author wangfupeng
   */
  /**
   * 【注意】svg 字符串的长度 ，否则会导致代码体积过大
   * 尽量选择 https://www.iconfont.cn/collections/detail?spm=a313x.7781069.0.da5a778a4&cid=20293
   * 找不到再从 iconfont.com 搜索
   */
  // 加粗
  var BOLD_SVG = '<svg viewBox="0 0 1024 1024"><path d="M707.872 484.64A254.88 254.88 0 0 0 768 320c0-141.152-114.848-256-256-256H192v896h384c141.152 0 256-114.848 256-256a256.096 256.096 0 0 0-124.128-219.36zM384 192h101.504c55.968 0 101.504 57.408 101.504 128s-45.536 128-101.504 128H384V192z m159.008 640H384v-256h159.008c58.464 0 106.016 57.408 106.016 128s-47.552 128-106.016 128z"></path></svg>';
  // 下划线
  var UNDER_LINE_SVG = '<svg viewBox="0 0 1024 1024"><path d="M704 64l128 0 0 416c0 159.072-143.264 288-320 288s-320-128.928-320-288l0-416 128 0 0 416c0 40.16 18.24 78.688 51.36 108.512 36.896 33.216 86.848 51.488 140.64 51.488s103.744-18.304 140.64-51.488c33.12-29.792 51.36-68.352 51.36-108.512l0-416zM192 832l640 0 0 128-640 0z"></path></svg>';
  // 斜体
  var ITALIC_SVG = '<svg viewBox="0 0 1024 1024"><path d="M896 64v64h-128L448 896h128v64H128v-64h128L576 128h-128V64z"></path></svg>';
  // 删除线
  var THROUGH_SVG = '<svg viewBox="0 0 1024 1024"><path d="M1024 512v64h-234.496c27.52 38.496 42.496 82.688 42.496 128 0 70.88-36.672 139.04-100.576 186.976C672.064 935.488 594.144 960 512 960s-160.064-24.512-219.424-69.024C228.64 843.04 192 774.88 192 704h128c0 69.376 87.936 128 192 128s192-58.624 192-128-87.936-128-192-128H0v-64h299.52a385.984 385.984 0 0 1-6.944-5.024C228.64 459.04 192 390.88 192 320s36.672-139.04 100.576-186.976C351.936 88.512 429.856 64 512 64s160.064 24.512 219.424 69.024C795.328 180.96 832 249.12 832 320h-128c0-69.376-87.936-128-192-128s-192 58.624-192 128 87.936 128 192 128c78.976 0 154.048 22.688 212.48 64H1024z"></path></svg>';
  // 代码
  var CODE_SVG = '<svg viewBox="0 0 1024 1024"><path d="M576 736l96 96 320-320L672 192l-96 96 224 224zM448 288l-96-96L32 512l320 320 96-96-224-224z"></path></svg>';
  // 清除格式
  var ERASER_SVG = '<svg viewBox="0 0 1024 1024"><path d="M969.382408 288.738615l-319.401123-270.852152a67.074236 67.074236 0 0 0-96.459139 5.74922l-505.931379 574.922021a68.35184 68.35184 0 0 0-17.886463 47.910169 74.101061 74.101061 0 0 0 24.274486 47.910168l156.50655 132.232065h373.060512L975.131628 383.281347a67.074236 67.074236 0 0 0-5.74922-96.459139z m-440.134747 433.746725H264.144729l-90.071117-78.572676c-5.74922-5.74922-12.137243-12.137243-12.137243-17.886463a36.411728 36.411728 0 0 1 5.749221-24.274485l210.804741-240.828447 265.102932 228.691204z m-439.495945 180.781036h843.218964a60.047411 60.047411 0 1 1 0 120.733624H89.751716a60.047411 60.047411 0 1 1 0-120.733624z m0 0"></path></svg>';
  // 链接
  var LINK_SVG = '<svg viewBox="0 0 1024 1024"><path d="M440.224 635.776a51.84 51.84 0 0 1-36.768-15.232c-95.136-95.136-95.136-249.92 0-345.056l192-192C641.536 37.408 702.816 12.032 768 12.032s126.432 25.376 172.544 71.456c95.136 95.136 95.136 249.92 0 345.056l-87.776 87.776a51.968 51.968 0 1 1-73.536-73.536l87.776-87.776a140.16 140.16 0 0 0 0-197.984c-26.432-26.432-61.6-40.992-99.008-40.992s-72.544 14.56-99.008 40.992l-192 192a140.16 140.16 0 0 0 0 197.984 51.968 51.968 0 0 1-36.768 88.768z"></path><path d="M256 1012a242.4 242.4 0 0 1-172.544-71.456c-95.136-95.136-95.136-249.92 0-345.056l87.776-87.776a51.968 51.968 0 1 1 73.536 73.536l-87.776 87.776a140.16 140.16 0 0 0 0 197.984c26.432 26.432 61.6 40.992 99.008 40.992s72.544-14.56 99.008-40.992l192-192a140.16 140.16 0 0 0 0-197.984 51.968 51.968 0 1 1 73.536-73.536c95.136 95.136 95.136 249.92 0 345.056l-192 192A242.4 242.4 0 0 1 256 1012z"></path></svg>';
  // 取消链接
  var UN_LINK_SVG = '<svg viewBox="0 0 1024 1024"><path d="M608.16328 811.815036c9.371954 9.371954 9.371954 24.56788 0 33.941834l-89.347563 89.347564c-118.525421 118.523421-311.38448 118.531421-429.919901 0-118.527421-118.529421-118.527421-311.39048 0-429.917901l89.349564-89.349563c9.371954-9.371954 24.56788-9.371954 33.941834 0l79.195613 79.195613c9.371954 9.371954 9.371954 24.56788 0 33.941834l-89.349563 89.347564c-56.143726 56.145726-56.143726 147.49928 0 203.645005 56.143726 56.143726 147.49928 56.145726 203.647005 0l89.347564-89.347563c9.371954-9.371954 24.56788-9.371954 33.941834 0l79.193613 79.195613z m-113.135447-520.429459c9.371954 9.371954 24.56788 9.371954 33.941834 0l89.347564-89.347564c56.143726-56.149726 147.49928-56.145726 203.647006 0 56.143726 56.145726 56.143726 147.49928 0 203.645006l-89.349564 89.347564c-9.371954 9.371954-9.371954 24.56788 0 33.941834l79.195613 79.195613c9.371954 9.371954 24.56788 9.371954 33.941834 0l89.349564-89.349563c118.529421-118.529421 118.529421-311.38848 0-429.917901-118.531421-118.527421-311.38848-118.527421-429.919901 0l-89.347563 89.347564c-9.371954 9.371954-9.371954 24.56788 0 33.941834l79.193613 79.195613z m469.653707 718.556492l45.253779-45.253779c18.745908-18.745908 18.745908-49.13776 0-67.881669L127.195629 14.062931c-18.745908-18.745908-49.13776-18.745908-67.881669 0L14.058181 59.31871c-18.745908 18.745908-18.745908 49.13776 0 67.881669l882.74169 882.74169c18.745908 18.743908 49.13776 18.743908 67.881669 0z"></path></svg>';
  // 编辑
  var PENCIL_SVG$1 = '<svg viewBox="0 0 1024 1024"><path d="M864 0a160 160 0 0 1 128 256l-64 64-224-224 64-64c26.752-20.096 59.968-32 96-32zM64 736l-64 288 288-64 592-592-224-224L64 736z m651.584-372.416l-448 448-55.168-55.168 448-448 55.168 55.168z"></path></svg>';
  // 外部（链接）
  var EXTERNAL_SVG = '<svg viewBox="0 0 1024 1024"><path d="M924.402464 1023.068211H0.679665V99.345412h461.861399v98.909208H99.596867v725.896389h725.896389V561.206811h98.909208z" p-id="10909"></path><path d="M930.805104 22.977336l69.965436 69.965436-453.492405 453.492404-69.965435-69.901489z" p-id="10910"></path><path d="M1022.464381 304.030081h-98.917201V99.345412H709.230573V0.428211h313.233808z"></path></svg>';
  // 标题
  var HEADER_SVG = '<svg viewBox="0 0 1024 1024"><path d="M960 960c-51.2 0-102.4-3.2-153.6-3.2-51.2 0-99.2 3.2-150.4 3.2-19.2 0-28.8-22.4-28.8-38.4 0-51.2 57.6-28.8 86.4-48 19.2-12.8 19.2-60.8 19.2-80v-224-19.2c-9.6-3.2-19.2-3.2-28.8-3.2H320c-9.6 0-19.2 0-28.8 3.2V780.8c0 22.4 0 80 22.4 92.8 28.8 19.2 96-6.4 96 44.8 0 16-9.6 41.6-28.8 41.6-54.4 0-105.6-3.2-160-3.2-48 0-96 3.2-147.2 3.2-19.2 0-28.8-22.4-28.8-38.4 0-51.2 51.2-28.8 80-48 19.2-12.8 19.2-60.8 19.2-83.2V294.4c0-28.8 3.2-115.2-22.4-131.2-25.6-16-86.4 9.6-86.4-41.6 0-16 6.4-41.6 28.8-41.6 51.2 0 105.6 3.2 156.8 3.2 48 0 96-3.2 144-3.2 19.2 0 28.8 22.4 28.8 41.6 0 48-57.6 25.6-83.2 41.6-19.2 12.8-19.2 73.6-19.2 92.8v201.6c6.4 3.2 16 3.2 22.4 3.2h400c6.4 0 12.8 0 22.4-3.2V256c0-22.4 0-80-19.2-92.8-28.8-16-86.4 6.4-86.4-41.6 0-16 9.6-41.6 28.8-41.6 51.2 0 99.2 3.2 150.4 3.2 48 0 99.2-3.2 147.2-3.2 19.2 0 28.8 22.4 28.8 41.6 0 51.2-57.6 25.6-86.4 41.6-19.2 12.8-19.2 70.4-19.2 92.8v537.6c0 19.2 0 67.2 19.2 80 28.8 19.2 89.6-6.4 89.6 44.8 0 19.2-6.4 41.6-28.8 41.6z"></path></svg>';
  // 字体颜色
  var FONT_COLOR_SVG = '<svg viewBox="0 0 1024 1024"><path d="M64 864h896v96H64zM360.58 576h302.85l81.53 224h102.16L579.24 64H444.77L176.89 800h102.16l81.53-224zM512 159.96L628.49 480H395.52L512 159.96z"></path></svg>';
  // 背景颜色
  var BG_COLOR_SVG = '<svg viewBox="0 0 1024 1024"><path d="M510.030769 315.076923l84.676923 196.923077h-177.230769l76.8-196.923077h15.753846zM945.230769 157.538462v708.923076c0 43.323077-35.446154 78.769231-78.769231 78.769231H157.538462c-43.323077 0-78.769231-35.446154-78.769231-78.769231V157.538462c0-43.323077 35.446154-78.769231 78.769231-78.769231h708.923076c43.323077 0 78.769231 35.446154 78.769231 78.769231z m-108.307692 643.938461L600.615385 216.615385c-5.907692-11.815385-15.753846-19.692308-29.538462-19.692308h-139.815385c-11.815385 0-23.630769 7.876923-27.56923 19.692308l-216.615385 584.861538c-3.938462 11.815385 3.938462 25.6 17.723077 25.6h80.738462c11.815385 0 23.630769-9.846154 27.56923-21.661538l63.015385-175.261539h263.876923l68.923077 175.261539c3.938462 11.815385 15.753846 21.661538 27.569231 21.661538h80.738461c13.784615 0 23.630769-13.784615 19.692308-25.6z"></path></svg>';
  // 清空（颜色）
  var CLEAN_SVG$1 = '<svg viewBox="0 0 1024 1024"><path d="M236.8 128L896 787.2V128H236.8z m614.4 704L192 172.8V832h659.2zM192 64h704c38.4 0 64 25.6 64 64v704c0 38.4-25.6 64-64 64H192c-38.4 0-64-25.6-64-64V128c0-38.4 25.6-64 64-64z"></path></svg>';
  // 图片
  var IMAGE_SVG$1 = '<svg viewBox="0 0 1024 1024"><path d="M959.877 128l0.123 0.123v767.775l-0.123 0.122H64.102l-0.122-0.122V128.123l0.122-0.123h895.775zM960 64H64C28.795 64 0 92.795 0 128v768c0 35.205 28.795 64 64 64h896c35.205 0 64-28.795 64-64V128c0-35.205-28.795-64-64-64zM832 288.01c0 53.023-42.988 96.01-96.01 96.01s-96.01-42.987-96.01-96.01S682.967 192 735.99 192 832 234.988 832 288.01zM896 832H128V704l224.01-384 256 320h64l224.01-192z"></path></svg>';
  // 垃圾桶（删除）
  var TRASH_SVG$1 = '<svg viewBox="0 0 1024 1024"><path d="M826.8032 356.5312c-19.328 0-36.3776 15.6928-36.3776 35.0464v524.2624c0 19.328-16 34.56-35.328 34.56H264.9344c-19.328 0-35.5072-15.3088-35.5072-34.56V390.0416c0-19.328-14.1568-35.0464-33.5104-35.0464s-33.5104 15.6928-33.5104 35.0464V915.712c0 57.9328 44.6208 108.288 102.528 108.288H755.2c57.9328 0 108.0832-50.4576 108.0832-108.288V391.4752c-0.1024-19.2512-17.1264-34.944-36.48-34.944z" p-id="9577"></path><path d="M437.1712 775.7568V390.6048c0-19.328-14.1568-35.0464-33.5104-35.0464s-33.5104 15.616-33.5104 35.0464v385.152c0 19.328 14.1568 35.0464 33.5104 35.0464s33.5104-15.7184 33.5104-35.0464zM649.7024 775.7568V390.6048c0-19.328-17.0496-35.0464-36.3776-35.0464s-36.3776 15.616-36.3776 35.0464v385.152c0 19.328 17.0496 35.0464 36.3776 35.0464s36.3776-15.7184 36.3776-35.0464zM965.0432 217.0368h-174.6176V145.5104c0-57.9328-47.2064-101.76-104.6528-101.76h-350.976c-57.8304 0-105.3952 43.8528-105.3952 101.76v71.5264H54.784c-19.4304 0-35.0464 14.1568-35.0464 33.5104 0 19.328 15.616 33.5104 35.0464 33.5104h910.3616c19.328 0 35.0464-14.1568 35.0464-33.5104 0-19.3536-15.6928-33.5104-35.1488-33.5104z m-247.3728 0H297.3952V145.5104c0-19.328 18.2016-34.7648 37.4272-34.7648h350.976c19.1488 0 31.872 15.1296 31.872 34.7648v71.5264z"></path></svg>';
  // 引用
  var QUOTE_SVG = '<svg viewBox="0 0 1024 1024"><path d="M894.6 907.1H605.4c-32.6 0-59-26.4-59-59V608.2l-4-14.9c0-315.9 125.5-485.1 376.5-507.5v59.8C752.7 180.4 711.3 315.8 711.3 442.4v41.2l31.5 12.3h151.8c32.6 0 59 26.4 59 59v293.2c0 32.5-26.4 59-59 59z m-472 0H133.4c-32.6 0-59-26.4-59-59V608.2l-4-14.9c0-315.9 125.5-485.1 376.5-507.5v59.8C280.7 180.4 239.3 315.8 239.3 442.4v41.2l31.5 12.3h151.8c32.6 0 59 26.4 59 59v293.2c0 32.5-26.4 59-59 59z"></path></svg>';
  // 表情
  var EMOTION_SVG = '<svg viewBox="0 0 1024 1024"><path d="M512 1024C230.4 1024 0 793.6 0 512S230.4 0 512 0s512 230.4 512 512-230.4 512-512 512z m0-102.4c226.742857 0 409.6-182.857143 409.6-409.6S738.742857 102.4 512 102.4 102.4 285.257143 102.4 512s182.857143 409.6 409.6 409.6z m-204.8-358.4h409.6c0 113.371429-91.428571 204.8-204.8 204.8s-204.8-91.428571-204.8-204.8z m0-102.4c-43.885714 0-76.8-32.914286-76.8-76.8s32.914286-76.8 76.8-76.8 76.8 32.914286 76.8 76.8-32.914286 76.8-76.8 76.8z m409.6 0c-43.885714 0-76.8-32.914286-76.8-76.8s32.914286-76.8 76.8-76.8c43.885714 0 76.8 32.914286 76.8 76.8s-32.914286 76.8-76.8 76.8z"></path></svg>';
  // fontSize
  var FONT_SIZE_SVG = '<svg viewBox="0 0 1024 1024"><path d="M64 512h384v128h-128V1024h-128V640h-128z m896-256H708.2496v768h-136.4992V256H320V128h640z"></path></svg>';
  // 字体
  var FONT_FAMILY_SVG = '<svg viewBox="0 0 1024 1024"><path d="M956.788364 152.110545h-24.110546l23.924364 9.029819 0.186182 121.018181h-65.070546l-86.574545-130.048H566.551273v650.14691l130.048 64.977454v65.163636h-390.050909v-65.163636l129.954909-64.977454V152.110545H198.283636L111.429818 282.065455H46.545455V69.259636C46.545455 33.792 82.664727 22.062545 98.955636 22.062545h812.683637c23.738182 0 45.056 15.173818 45.056 41.053091V169.425455v-17.221819z"></path></svg>';
  // 缩进 left
  var INDENT_LEFT_SVG = '<svg viewBox="0 0 1024 1024"><path d="M0 64h1024v128H0z m384 192h640v128H384z m0 192h640v128H384z m0 192h640v128H384zM0 832h1024v128H0z m256-512v384l-256-192z"></path></svg>';
  // 缩进 right
  var INDENT_RIGHT_SVG$1 = '<svg viewBox="0 0 1024 1024"><path d="M0 64h1024v128H0z m384 192h640v128H384z m0 192h640v128H384z m0 192h640v128H384zM0 832h1024v128H0z m0-128V320l256 192z"></path></svg>';
  // 左对齐
  var JUSTIFY_LEFT_SVG$2 = '<svg viewBox="0 0 1024 1024"><path d="M768 793.6v102.4H51.2v-102.4h716.8z m204.8-230.4v102.4H51.2v-102.4h921.6z m-204.8-230.4v102.4H51.2v-102.4h716.8zM972.8 102.4v102.4H51.2V102.4h921.6z"></path></svg>';
  // 右对齐
  var JUSTIFY_RIGHT_SVG$1 = '<svg viewBox="0 0 1024 1024"><path d="M972.8 793.6v102.4H256v-102.4h716.8z m0-230.4v102.4H51.2v-102.4h921.6z m0-230.4v102.4H256v-102.4h716.8zM972.8 102.4v102.4H51.2V102.4h921.6z"></path></svg>';
  // 居中对齐
  var JUSTIFY_CENTER_SVG$1 = '<svg viewBox="0 0 1024 1024"><path d="M870.4 793.6v102.4H153.6v-102.4h716.8z m102.4-230.4v102.4H51.2v-102.4h921.6z m-102.4-230.4v102.4H153.6v-102.4h716.8zM972.8 102.4v102.4H51.2V102.4h921.6z"></path></svg>';
  // 两端对齐
  var JUSTIFY_JUSTIFY_SVG$1 = '<svg viewBox="0 0 1024 1024"><path d="M0 64h1024v128H0z m0 192h1024v128H0z m0 192h1024v128H0z m0 192h1024v128H0z m0 192h1024v128H0z"></path></svg>';
  // 行高
  var LINE_HEIGHT_SVG = '<svg viewBox="0 0 1024 1024"><path d="M964 788a8 8 0 0 1 8 8v98a8 8 0 0 1-8 8H438a8 8 0 0 1-8-8v-98a8 8 0 0 1 8-8h526zM198.93 144.306c6.668-5.798 16.774-5.094 22.573 1.574l122.26 140.582a16 16 0 0 1 3.927 10.5c0 8.836-7.164 16-16 16h-61.8a8 8 0 0 0-8 8v390.077h69.819a16 16 0 0 1 10.502 3.928c6.666 5.8 7.37 15.906 1.57 22.573L221.476 878.123a16 16 0 0 1-1.57 1.57c-6.668 5.8-16.774 5.097-22.574-1.57L75.051 737.538a16 16 0 0 1-3.928-10.5c0-8.837 7.163-16 16-16h69.822V312.96H87.127a16 16 0 0 1-10.502-3.928c-6.666-5.8-7.37-15.906-1.57-22.573l122.303-140.582a16 16 0 0 1 1.572-1.572zM964 465a8 8 0 0 1 8 8v98a8 8 0 0 1-8 8H438a8 8 0 0 1-8-8v-98a8 8 0 0 1 8-8h526z m0-323a8 8 0 0 1 8 8v98a8 8 0 0 1-8 8H438a8 8 0 0 1-8-8v-98a8 8 0 0 1 8-8h526z"></path></svg>';
  // 撤销
  var UNDO_SVG = '<svg viewBox="0 0 1024 1024"><path d="M512 64A510.272 510.272 0 0 0 149.984 213.984L0.032 64v384h384L240.512 304.48A382.784 382.784 0 0 1 512.032 192c212.064 0 384 171.936 384 384 0 114.688-50.304 217.632-130.016 288l84.672 96a510.72 510.72 0 0 0 173.344-384c0-282.784-229.216-512-512-512z"></path></svg>';
  // 重做
  var REDO_SVG = '<svg viewBox="0 0 1024 1024"><path d="M0.00032 576a510.72 510.72 0 0 0 173.344 384l84.672-96A383.136 383.136 0 0 1 128.00032 576C128.00032 363.936 299.93632 192 512.00032 192c106.048 0 202.048 42.976 271.52 112.48L640.00032 448h384V64l-149.984 149.984A510.272 510.272 0 0 0 512.00032 64C229.21632 64 0.00032 293.216 0.00032 576z"></path></svg>';
  // 分割线
  var DIVIDER_SVG = '<svg viewBox="0 0 1092 1024"><path d="M0 51.2m51.2 0l989.866667 0q51.2 0 51.2 51.2l0 0q0 51.2-51.2 51.2l-989.866667 0q-51.2 0-51.2-51.2l0 0q0-51.2 51.2-51.2Z"></path><path d="M0 460.8m51.2 0l170.666667 0q51.2 0 51.2 51.2l0 0q0 51.2-51.2 51.2l-170.666667 0q-51.2 0-51.2-51.2l0 0q0-51.2 51.2-51.2Z"></path><path d="M819.2 460.8m51.2 0l170.666667 0q51.2 0 51.2 51.2l0 0q0 51.2-51.2 51.2l-170.666667 0q-51.2 0-51.2-51.2l0 0q0-51.2 51.2-51.2Z"></path><path d="M409.6 460.8m51.2 0l170.666667 0q51.2 0 51.2 51.2l0 0q0 51.2-51.2 51.2l-170.666667 0q-51.2 0-51.2-51.2l0 0q0-51.2 51.2-51.2Z"></path><path d="M0 870.4m51.2 0l989.866667 0q51.2 0 51.2 51.2l0 0q0 51.2-51.2 51.2l-989.866667 0q-51.2 0-51.2-51.2l0 0q0-51.2 51.2-51.2Z"></path></svg>';
  // 代码块
  var CODE_BLOCK_SVG = '<svg viewBox="0 0 1280 1024"><path d="M832 736l96 96 320-320L928 192l-96 96 224 224zM448 288l-96-96L32 512l320 320 96-96-224-224zM701.312 150.528l69.472 18.944-192 704.032-69.472-18.944 192-704.032z"></path></svg>';
  // 全屏
  var FULL_SCREEN_SVG = '<svg viewBox="0 0 1024 1024"><path d="M133.705143 335.433143V133.851429h201.581714a29.622857 29.622857 0 0 0 29.622857-29.549715V68.754286a29.622857 29.622857 0 0 0-29.622857-29.622857H61.732571A22.893714 22.893714 0 0 0 38.765714 62.025143V335.725714c0 16.310857 13.238857 29.622857 29.622857 29.622857h35.547429a29.842286 29.842286 0 0 0 29.696-29.842285zM690.980571 133.851429h201.581715v201.654857c0 16.310857 13.238857 29.549714 29.622857 29.549714h35.547428a29.622857 29.622857 0 0 0 29.549715-29.549714V61.952a22.893714 22.893714 0 0 0-22.820572-22.893714h-273.554285a29.622857 29.622857 0 0 0-29.549715 29.622857v35.547428c0 16.310857 13.238857 29.696 29.622857 29.696zM335.286857 892.781714H133.705143V691.2a29.622857 29.622857 0 0 0-29.622857-29.622857H68.534857a29.622857 29.622857 0 0 0-29.549714 29.622857v273.554286c0 12.653714 10.24 22.893714 22.820571 22.893714h273.554286a29.622857 29.622857 0 0 0 29.696-29.622857v-35.547429a29.769143 29.769143 0 0 0-29.769143-29.696z m557.348572-201.581714v201.581714H690.907429a29.622857 29.622857 0 0 0-29.622858 29.622857v35.547429c0 16.310857 13.238857 29.622857 29.622858 29.622857h273.554285c12.580571 0 22.893714-10.313143 22.893715-22.893714V691.2a29.622857 29.622857 0 0 0-29.622858-29.622857h-35.547428a29.622857 29.622857 0 0 0-29.696 29.622857z"></path></svg>';
  // 取消全屏
  var CANCEL_FULL_SCREEN_SVG = '<svg t="1723361745825" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="8705" width="200" height="200"><path d="M703.926857 362.642286a42.642286 42.642286 0 0 1-42.642286-42.642286V128a42.642286 42.642286 0 1 1 85.357715 0v149.357714h149.357714c21.211429 0 38.765714 15.433143 42.057143 35.693715l0.585143 6.948571a42.642286 42.642286 0 0 1-42.642286 42.642286H703.926857zM703.926857 938.642286a42.642286 42.642286 0 0 1-42.642286-42.642286V704c0-23.552 19.090286-42.642286 42.642286-42.642286h192.073143a42.642286 42.642286 0 1 1 0 85.284572l-149.357714 0.073143v149.284571c0 21.211429-15.506286 38.765714-35.84 42.130286l-6.875429 0.512zM319.853714 938.642286a42.642286 42.642286 0 0 1-42.642285-42.642286v-149.284571H127.853714a42.642286 42.642286 0 0 1-42.130285-35.84l-0.585143-6.875429c0-23.552 19.163429-42.642286 42.715428-42.642286h192c23.552 0 42.715429 19.017143 42.715429 42.642286v192a42.642286 42.642286 0 0 1-42.715429 42.642286zM127.853714 362.642286a42.642286 42.642286 0 1 1 0-85.284572H277.211429V128c0-21.211429 15.433143-38.765714 35.766857-42.130286l6.875428-0.512c23.552 0 42.715429 19.017143 42.715429 42.642286v192a42.642286 42.642286 0 0 1-42.715429 42.642286H127.853714z" fill="#333333" p-id="8706"></path></svg>';
  // 上标
  var SUP_SVG = '<svg viewBox="0 0 1024 1024"><path d="M768 206.016v50.016h128v64h-192V174.016l128-60V64h-128V0h192v146.016zM676 256h-136L352 444 164 256H28l256 256-256 256h136L352 580 540 768h136l-256-256z"></path></svg>';
  // 下标
  var SUB_SVG = '<svg viewBox="0 0 1024 1024"><path d="M768 910.016v50.016h128v64h-192v-146.016l128-60V768h-128v-64h192v146.016zM676 256h-136L352 444 164 256H28l256 256-256 256h136L352 580 540 768h136l-256-256z"></path></svg>';
  // checkbox
  var CHECK_BOX_SVG = '<svg viewBox="0 0 1024 1024"><path d="M278.755556 403.911111l-79.644445 79.644445L455.111111 739.555556l568.888889-568.888889-79.644444-79.644445L455.111111 580.266667l-176.355555-176.355556zM910.222222 910.222222H113.777778V113.777778h568.888889V0H113.777778C51.2 0 0 51.2 0 113.777778v796.444444c0 62.577778 51.2 113.777778 113.777778 113.777778h796.444444c62.577778 0 113.777778-51.2 113.777778-113.777778V455.111111h-113.777778v455.111111z"></path></svg>';
  // 回车
  var ENTER_SVG = '<svg viewBox="0 0 1255 1024"><path d="M1095.111111 731.477333h-625.777778V1024L0 658.318222 469.333333 292.408889v292.636444h625.777778V0h156.444445v731.477333z"></path></svg>';
  // 格式刷
  var FORMAT_PAINTER = '<svg viewBox="0 0 24 24"><path d="M8 19.997v-5h2v5h9v-7H5v7zm-4-9h16v-3h-6v-4h-4v4H4zm-1 10v-8H2v-6a1 1 0 0 1 1-1h5v-3a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v3h5a1 1 0 0 1 1 1v6h-1v8a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1"/></svg>';

  /**
   * @description blockquote menu class
   * @author wangfupeng
   */
  var BlockquoteMenu = /** @class */ (function () {
      function BlockquoteMenu() {
          this.title = t$2('blockQuote.title');
          this.iconSvg = QUOTE_SVG;
          this.tag = 'button';
      }
      BlockquoteMenu.prototype.getValue = function (_editor) {
          // 用不到 getValue
          return '';
      };
      BlockquoteMenu.prototype.isActive = function (editor) {
          var node = DomEditor.getSelectedNodeByType(editor, 'blockquote');
          return !!node;
      };
      BlockquoteMenu.prototype.isDisabled = function (editor) {
          if (editor.selection == null) {
              return true;
          }
          var _a = __read(distExports$1.Editor.nodes(editor, {
              match: function (n) {
                  var type = DomEditor.getNodeType(n);
                  // 只可用于 p 和 blockquote
                  if (type === 'paragraph') {
                      return true;
                  }
                  if (type === 'blockquote') {
                      return true;
                  }
                  return false;
              },
              universal: true,
              mode: 'highest', // 匹配最高层级
          }), 1), nodeEntry = _a[0];
          // 匹配到 p blockquote ，不禁用
          if (nodeEntry) {
              return false;
          }
          // 未匹配到，则禁用
          return true;
      };
      /**
       * 执行命令
       * @param editor editor
       * @param value node.type
       */
      BlockquoteMenu.prototype.exec = function (editor, _value) {
          if (this.isDisabled(editor)) {
              return;
          }
          var active = this.isActive(editor);
          var newType = active ? 'paragraph' : 'blockquote';
          // 执行命令
          distExports$1.Transforms.setNodes(editor, { type: newType }, { mode: 'highest' });
      };
      return BlockquoteMenu;
  }());

  /**
   * @description block quote menu
   * @author wangfupeng
   */
  var blockquoteMenuConf = {
      key: 'blockquote',
      factory: function () {
          return new BlockquoteMenu();
      },
  };

  /**
   * @description DOM 操作
   * @author wangfupeng
   */
  if (css) {
      $$1.fn.css = css;
  }
  if (append) {
      $$1.fn.append = append;
  }
  if (prepend) {
      $$1.fn.prepend = prepend;
  }
  if (addClass) {
      $$1.fn.addClass = addClass;
  }
  if (removeClass) {
      $$1.fn.removeClass = removeClass;
  }
  if (hasClass) {
      $$1.fn.hasClass = hasClass;
  }
  if (on) {
      $$1.fn.on = on;
  }
  if (off) {
      $$1.fn.off = off;
  }
  if (focus) {
      $$1.fn.focus = focus;
  }
  if (attr) {
      $$1.fn.attr = attr;
  }
  if (removeAttr) {
      $$1.fn.removeAttr = removeAttr;
  }
  if (hide) {
      $$1.fn.hide = hide;
  }
  if (show) {
      $$1.fn.show = show;
  }
  if (parents) {
      $$1.fn.parents = parents;
  }
  if (dataset) {
      $$1.fn.dataset = dataset;
  }
  if (val) {
      $$1.fn.val = val;
  }
  if (text) {
      $$1.fn.text = text;
  }
  if (html) {
      $$1.fn.html = html;
  }
  if (children) {
      $$1.fn.children = children;
  }
  if (remove) {
      $$1.fn.remove = remove;
  }
  if (find) {
      $$1.fn.find = find;
  }
  if (width) {
      $$1.fn.width = width;
  }
  if (height) {
      $$1.fn.height = height;
  }
  if (filter) {
      $$1.fn.filter = filter;
  }
  if (empty) {
      $$1.fn.empty = empty;
  }
  /**
   * 判断 str 是不是纯字符串，而不是 html tag
   * @param str str
   */
  function isPlainText(str) {
      var $container = $$1("<div>".concat(str, "</div>"));
      // 获取 children length （过滤 `<br>`）
      var childrenLength = $container.children().filter(function (child) {
          if (child.tagName === 'BR') {
              return false;
          }
          return true;
      }).length;
      return childrenLength === 0;
  }
  /**
   * 获取 outerHTML
   * @param $elem dom7 elem
   */
  function getOuterHTML$1($elem) {
      if ($elem.length === 0) {
          return '';
      }
      return $elem[0].outerHTML;
  }
  /**
   * 获取 tagName lower-case
   * @param $elem $elem
   */
  function getTagName$3($elem) {
      if ($elem.length) {
          return $elem[0].tagName.toLowerCase();
      }
      return '';
  }
  /**
   * 获取 $elem 某一个 style 值
   * @param $elem $elem
   * @param styleKey style key
   */
  function getStyleValue$1($elem, styleKey) {
      var res = '';
      var styleStr = $elem.attr('style') || ''; // 如 'line-height: 2.5; color: red;'
      var styleArr = styleStr.split(';'); // 如 ['line-height: 2.5', ' color: red', '']
      var length = styleArr.length;
      for (var i = 0; i < length; i += 1) {
          var styleItemStr = styleArr[i]; // 如 'line-height: 2.5'
          if (styleItemStr) {
              var arr = styleItemStr.split(':'); // ['line-height', ' 2.5']
              if (arr[0].trim() === styleKey) {
                  res = arr[1].trim();
              }
          }
      }
      return res;
  }

  /**
   * @description parse html
   * @author wangfupeng
   */
  function parseHtml$5(elem, children, editor) {
      var $elem = $$1(elem);
      children = children.filter(function (child) {
          if (distExports$1.Text.isText(child)) {
              return true;
          }
          if (editor.isInline(child)) {
              return true;
          }
          return false;
      });
      // 无 children ，则用纯文本
      if (children.length === 0) {
          children = [{ text: $elem.text().replace(/\s+/gm, ' ') }];
      }
      return {
          type: 'blockquote',
          // @ts-ignore
          children: children,
      };
  }
  var parseHtmlConf$5 = {
      selector: 'blockquote:not([data-w-e-type])', // data-w-e-type 属性，留给自定义元素，保证扩展性
      parseElemHtml: parseHtml$5,
  };

  /**
   * @description editor 插件，重写 editor API
   * @author wangfupeng
   */
  function insertParagraphBeforeNewline(editor) {
      editor.deleteBackward('character'); // 删除最后一个 \n
      // 插入一个 paragraph
      var p = { type: 'paragraph', children: [{ text: '' }] };
      distExports$1.Transforms.insertNodes(editor, p, { mode: 'highest' });
  }
  function withBlockquote(editor) {
      var insertBreak = editor.insertBreak, insertText = editor.insertText;
      var newEditor = editor;
      // 重写 insertBreak - 换行时插入 p
      newEditor.insertBreak = function () {
          var selection = newEditor.selection;
          if (selection == null) {
              return insertBreak();
          }
          var _a = __read(distExports$1.Editor.nodes(editor, {
              match: function (n) { return DomEditor.checkNodeType(n, 'blockquote'); },
              universal: true,
          }), 1), nodeEntry = _a[0];
          if (!nodeEntry) {
              return insertBreak();
          }
          var quoteElem = nodeEntry[0];
          // 如果正在粘贴中，没有 path 可用，则直接换行退出 blockquote
          // TODO: 粘贴未处理其它富文本一个 block 中套两个 div 用作换行的情况
          if (!DomEditor.getParentNode(editor, quoteElem)) {
              insertParagraphBeforeNewline(newEditor);
              return;
          }
          var quotePath = DomEditor.findPath(editor, quoteElem);
          var quoteEndLocation = distExports$1.Editor.end(editor, quotePath);
          if (distExports$1.Point.equals(quoteEndLocation, selection.focus)) {
              // 光标位于 blockquote 最后
              var str = distExports$1.Node.string(quoteElem);
              if (str && str.slice(-1) === '\n') {
                  insertParagraphBeforeNewline(newEditor);
                  return;
              }
          }
          // 情况情况，插入换行符
          insertText('\n');
      };
      // 返回 editor ，重要！
      return newEditor;
  }

  /**
   * @description render elem
   * @author wangfupeng
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  /**
   * render block quote elem
   * @param elemNode slate elem
   * @param children children
   * @param editor editor
   * @returns vnode
   */
  function renderBlockQuote(_elemNode, children, _editor) {
      var vnode = jsx("blockquote", null, children);
      return vnode;
  }
  var renderBlockQuoteConf = {
      type: 'blockquote',
      renderElem: renderBlockQuote,
  };

  /**
   * @description blockquote entry
   * @author wangfupeng
   */
  var blockquote = {
      renderElems: [renderBlockQuoteConf],
      elemsToHtml: [quoteToHtmlConf],
      parseElemsHtml: [parseHtmlConf$5],
      menus: [blockquoteMenuConf],
      editorPlugin: withBlockquote,
  };

  /**
   * @description to html
   * @author wangfupeng
   */
  function codeToHtml$1(elem, childrenHtml) {
      // 代码高亮 `class="language-xxx"` 在 code-highlight 中实现
      return "<code>".concat(childrenHtml, "</code>");
  }
  var codeToHtmlConf$1 = {
      type: 'code',
      elemToHtml: codeToHtml$1,
  };
  function preToHtml(elem, childrenHtml) {
      return "<pre>".concat(childrenHtml, "</pre>");
  }
  var preToHtmlConf = {
      type: 'pre',
      elemToHtml: preToHtml,
  };

  /**
   * @description insert code-block menu
   * @author wangfupeng
   */
  var CodeBlockMenu = /** @class */ (function () {
      function CodeBlockMenu() {
          this.title = t$2('codeBlock.title');
          this.iconSvg = CODE_BLOCK_SVG;
          this.tag = 'button';
      }
      CodeBlockMenu.prototype.getSelectCodeElem = function (editor) {
          var codeNode = DomEditor.getSelectedNodeByType(editor, 'code');
          if (codeNode == null) {
              return null;
          }
          var preNode = DomEditor.getParentNode(editor, codeNode);
          if (preNode == null) {
              return null;
          }
          if (DomEditor.getNodeType(preNode) !== 'pre') {
              return null;
          }
          return codeNode;
      };
      /**
       * 获取语言类型
       * @param editor editor
       */
      CodeBlockMenu.prototype.getValue = function (editor) {
          var elem = this.getSelectCodeElem(editor);
          if (elem == null) {
              return '';
          }
          return elem.language || '';
      };
      CodeBlockMenu.prototype.isActive = function (editor) {
          var elem = this.getSelectCodeElem(editor);
          return !!elem;
      };
      CodeBlockMenu.prototype.isDisabled = function (editor) {
          var selection = editor.selection;
          if (selection == null) {
              return true;
          }
          var selectedElems = DomEditor.getSelectedElems(editor);
          var hasVoid = selectedElems.some(function (elem) { return editor.isVoid(elem); });
          if (hasVoid) {
              return true;
          }
          var isMatch = selectedElems.some(function (elem) {
              var type = DomEditor.getNodeType(elem);
              if (type === 'pre' || type === 'paragraph') {
                  return true;
              }
              return false;
          });
          if (isMatch) {
              return false;
          } // 匹配到，则 enable
          return true; // 否则 disable
      };
      CodeBlockMenu.prototype.exec = function (editor, value) {
          var active = this.isActive(editor);
          if (active) {
              // 当前处于 code-block ，需要转换为普通文本
              this.changeToPlainText(editor);
          }
          else {
              // 当前未处于 code-block ，需要转换为 code-block
              this.changeToCodeBlock(editor, value.toString());
          }
      };
      CodeBlockMenu.prototype.changeToPlainText = function (editor) {
          var elem = this.getSelectCodeElem(editor);
          if (elem == null) {
              return;
          }
          // 获取 code 文本
          var str = distExports$1.Node.string(elem);
          // 删除当前最高层级的节点，即 pre 节点
          distExports$1.Transforms.removeNodes(editor, { mode: 'highest' });
          // 插入 p 节点
          var pList = str.split('\n').map(function (s) {
              return { type: 'paragraph', children: [{ text: s }] };
          });
          distExports$1.Transforms.insertNodes(editor, pList, { mode: 'highest' });
      };
      CodeBlockMenu.prototype.changeToCodeBlock = function (editor, language) {
          var e_1, _a;
          // 汇总选中的最高层级节点的字符串
          var strArr = [];
          var nodeEntries = distExports$1.Editor.nodes(editor, {
              match: function (n) { return editor.children.includes(n); }, // 匹配选中的最高层级的节点
              universal: true,
          });
          try {
              for (var nodeEntries_1 = __values(nodeEntries), nodeEntries_1_1 = nodeEntries_1.next(); !nodeEntries_1_1.done; nodeEntries_1_1 = nodeEntries_1.next()) {
                  var nodeEntry = nodeEntries_1_1.value;
                  var _b = __read(nodeEntry, 1), n = _b[0];
                  if (n) {
                      strArr.push(distExports$1.Node.string(n));
                  }
              }
          }
          catch (e_1_1) { e_1 = { error: e_1_1 }; }
          finally {
              try {
                  if (nodeEntries_1_1 && !nodeEntries_1_1.done && (_a = nodeEntries_1.return)) _a.call(nodeEntries_1);
              }
              finally { if (e_1) throw e_1.error; }
          }
          // 删除选中的最高层级的节点
          distExports$1.Transforms.removeNodes(editor, { mode: 'highest' });
          // 插入 pre 节点
          var newPreNode = {
              type: 'pre',
              children: [
                  {
                      type: 'code',
                      language: language,
                      children: [
                          { text: strArr.join('\n') }, // 选中节点的纯文本
                      ],
                  },
              ],
          };
          distExports$1.Transforms.insertNodes(editor, newPreNode, { mode: 'highest' });
      };
      return CodeBlockMenu;
  }());

  /**
   * @description code-block menu
   * @author wangfupeng
   */
  var codeBlockMenuConf = {
      key: 'codeBlock',
      factory: function () {
          return new CodeBlockMenu();
      },
  };

  /**
   * @description parse html
   * @author wangfupeng
   */
  function parseCodeHtml(elem, _children, _editor) {
      var $elem = $$1(elem);
      return {
          type: 'code',
          language: '', // language 在 code-highlight 中实现
          children: [{ text: $elem[0].textContent || '' }],
      };
  }
  var parseCodeHtmlConf = {
      selector: 'pre:not([data-w-e-type])>code', // 匹配 <pre> 下的 <code>
      parseElemHtml: parseCodeHtml,
  };
  function parsePreHtml(elem, children, _editor) {
      var $elem = $$1(elem);
      children = children.filter(function (child) { return DomEditor.getNodeType(child) === 'code'; });
      if (children.length === 0) {
          children = [{ type: 'code', language: '', children: [{ text: $elem[0].textContent || '' }] }];
      }
      return {
          type: 'pre',
          // @ts-ignore
          children: children.filter(function (child) { return DomEditor.getNodeType(child) === 'code'; }),
      };
  }
  var parsePreHtmlConf = {
      selector: 'pre:not([data-w-e-type])', // data-w-e-type 属性，留给自定义元素，保证扩展性
      parseElemHtml: parsePreHtml,
  };

  /**
   * @description editor 插件，重写 editor API
   * @author wangfupeng
   */
  function getLastTextLineBeforeSelection(codeNode, editor) {
      var selection = editor.selection;
      if (selection == null) {
          return '';
      }
      var codeText = distExports$1.Node.string(codeNode);
      var anchorOffset = selection.anchor.offset;
      var textBeforeAnchor = codeText.slice(0, anchorOffset); // 选区前的 text
      var arr = textBeforeAnchor.split('\n'); // 选区前的 text ，按换行拆分
      var length = arr.length;
      if (length === 0) {
          return '';
      }
      return arr[length - 1];
  }
  function withCodeBlock(editor) {
      var insertBreak = editor.insertBreak, normalizeNode = editor.normalizeNode, insertData = editor.insertData, handleTab = editor.handleTab;
      var newEditor = editor;
      // 重写换行操作
      newEditor.insertBreak = function () {
          var codeNode = DomEditor.getSelectedNodeByType(newEditor, 'code');
          if (codeNode == null) {
              insertBreak(); // 执行默认的换行
              return;
          }
          // 回车时，根据当前行的空格，自动插入空格
          var lastLineBeforeSelection = getLastTextLineBeforeSelection(codeNode, newEditor);
          if (lastLineBeforeSelection) {
              var arr = lastLineBeforeSelection.match(/^\s+/); // 行开始的空格
              if (arr != null && arr[0] != null) {
                  var spaces = arr[0];
                  newEditor.insertText("\n".concat(spaces)); // 换行后插入空格
                  return;
              }
          }
          // 普通换行
          newEditor.insertText('\n');
      };
      // 重写 handleTab 方法
      editor.handleTab = function () {
          var selection = editor.selection;
          if (!selection) {
              return;
          }
          // 检查是否在代码块内
          var codeNode = DomEditor.getSelectedNodeByType(editor, 'code');
          if (!codeNode || distExports$1.Range.isCollapsed(selection)) {
              // 不在代码块内或折叠的选区 ，使用原始的 tab 处理
              handleTab();
              return;
          }
          // 获取选中的文本
          var _a = __read([selection.anchor, selection.focus].sort(function (a, b) { return a.offset - b.offset; }), 2), start = _a[0], end = _a[1];
          // @ts-ignore
          var codeText = (codeNode.children[0]).text;
          var lines = codeText.split('\n');
          // 计算受影响的行
          var startLine = codeText.slice(0, start.offset).split('\n').length - 1;
          var endLine = codeText.slice(0, end.offset).split('\n').length - 1;
          // 处理每一行的缩进
          var newLines = lines.map(function (line, index) {
              if (index >= startLine && index <= endLine) {
                  // 增加缩进（添加 2 个空格）
                  return "  ".concat(line);
              }
              return line;
          });
          // 更新代码块内容
          var newText = newLines.join('\n');
          // 计算新的光标位置
          var newSelection = {
              anchor: { path: start.path, offset: start.offset + 2 },
              focus: { path: end.path, offset: end.offset + 2 },
          };
          distExports$1.Transforms.insertText(editor, newText, {
              at: {
                  anchor: { path: start.path, offset: 0 },
                  focus: { path: end.path, offset: codeText.length },
              },
          });
          // 恢复选区
          distExports$1.Transforms.select(editor, newSelection);
      };
      // 重写 normalizeNode
      newEditor.normalizeNode = function (_a) {
          var _b = __read(_a, 2), node = _b[0], path = _b[1];
          var type = DomEditor.getNodeType(node);
          // -------------- code node 不能是顶层，否则替换为 p --------------
          if (type === 'code' && path.length <= 1) {
              distExports$1.Transforms.setNodes(newEditor, { type: 'paragraph' }, { at: path });
          }
          if (type === 'pre') {
              // -------------- pre 是 editor 最后一个节点，需要后面插入 p --------------
              var isLast = DomEditor.isLastNode(newEditor, node);
              if (isLast) {
                  distExports$1.Transforms.insertNodes(newEditor, DomEditor.genEmptyParagraph(), { at: [path[0] + 1] });
              }
              // -------------- pre 下面必须是 code --------------
              if (DomEditor.getNodeType(node.children[0]) !== 'code') {
                  distExports$1.Transforms.unwrapNodes(newEditor);
                  distExports$1.Transforms.setNodes(newEditor, { type: 'paragraph' }, { mode: 'highest' });
              }
          }
          // 执行默认行为
          return normalizeNode([node, path]);
      };
      // 重写 insertData - 粘贴文本
      newEditor.insertData = function (data) {
          var codeNode = DomEditor.getSelectedNodeByType(newEditor, 'code');
          if (codeNode == null) {
              insertData(data); // 执行默认的 insertData
              return;
          }
          // 获取文本，并插入到代码块
          var text = data.getData('text/plain');
          distExports$1.Editor.insertText(newEditor, text);
      };
      // 返回 editor ，重要！
      return newEditor;
  }

  /**
   * @description pre parse html
   * @author wangfupeng
   */
  /**
   * pre-prase <code> ，去掉其中的 <xmp> （兼容 V4）
   * @param codeElem codeElem
   */
  function preParse$6(codeElem) {
      var $code = $$1(codeElem);
      var tagName = getTagName$3($code);
      if (tagName !== 'code') {
          return codeElem;
      }
      var $xmp = $code.find('xmp');
      if ($xmp.length === 0) {
          return codeElem;
      } // 不是 V4 格式
      var codeText = $xmp.text();
      $xmp.remove();
      $code.text(codeText);
      return $code[0];
  }
  var preParseHtmlConf$5 = {
      selector: 'pre>code', // 匹配 <pre> 下的 <code>
      preParseHtml: preParse$6,
  };

  /**
   * @description render elem
   * @author wangfupeng
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  function renderPre(_elemNode, children, _editor) {
      var vnode = jsx("pre", null, children);
      return vnode;
  }
  function renderCode(_elemNode, children, _editor) {
      // 和 basic/simple-style module 的“行内代码”并不冲突。一个是根据 mark 渲染，一个是根据 node.type 渲染
      var vnode = jsx("code", null, children);
      return vnode;
  }
  var renderPreConf = {
      type: 'pre',
      renderElem: renderPre,
  };
  var renderCodeConf = {
      type: 'code',
      renderElem: renderCode,
  };

  /**
   * @description code block module
   * @author wangfupeng
   */
  var codeBlockModule = {
      menus: [codeBlockMenuConf],
      editorPlugin: withCodeBlock,
      renderElems: [renderPreConf, renderCodeConf],
      elemsToHtml: [codeToHtmlConf$1, preToHtmlConf],
      preParseHtml: [preParseHtmlConf$5],
      parseElemsHtml: [parseCodeHtmlConf, parsePreHtmlConf],
  };

  /**
   * @description color base menu
   * @author wangfupeng
   */
  var BaseMenu$5 = /** @class */ (function () {
      function BaseMenu() {
          this.tag = 'button';
          this.showDropPanel = true; // 点击 button 时显示 dropPanel
          this.$content = null;
      }
      BaseMenu.prototype.exec = function (_editor, _value) {
          // 点击菜单时，弹出 droPanel 之前，不需要执行其他代码
          // 此处空着即可
      };
      BaseMenu.prototype.getValue = function (editor) {
          var mark = this.mark;
          var curMarks = distExports$1.Editor.marks(editor);
          // @ts-ignore
          if (curMarks && curMarks[mark]) {
              return curMarks[mark];
          }
          return '';
      };
      BaseMenu.prototype.isActive = function (editor) {
          var color = this.getValue(editor);
          return !!color;
      };
      BaseMenu.prototype.isDisabled = function (editor) {
          if (editor.selection == null) {
              return true;
          }
          var _a = __read(distExports$1.Editor.nodes(editor, {
              match: function (n) {
                  var type = DomEditor.getNodeType(n);
                  if (type === 'pre') {
                      return true;
                  } // 代码块
                  if (distExports$1.Editor.isVoid(editor, n)) {
                      return true;
                  } // void node
                  return false;
              },
              universal: true,
          }), 1), match = _a[0];
          // 命中，则禁用
          if (match) {
              return true;
          }
          return false;
      };
      BaseMenu.prototype.getPanelContentElem = function (editor) {
          var mark = this.mark;
          if (this.$content == null) {
              // 第一次渲染
              var $content_1 = $$1('<ul class="w-e-panel-content-color"></ul>');
              // 绑定事件（只在第一次绑定，不要重复绑定）
              $content_1.on('click', 'li', function (e) {
                  var target = e.target;
                  if (target == null) {
                      return;
                  }
                  e.preventDefault();
                  var selection = editor.selection;
                  if (selection == null) {
                      return;
                  }
                  var $li = $$1(target);
                  var val = $li.attr('data-value');
                  // 修改文本样式
                  if (val === '0') {
                      distExports$1.Editor.removeMark(editor, mark);
                  }
                  else {
                      distExports$1.Editor.addMark(editor, mark, val);
                  }
              });
              this.$content = $content_1;
          }
          var $content = this.$content;
          if ($content == null) {
              return document.createElement('ul');
          }
          $content.empty(); // 清空之后再重置内容
          // 当前选中文本的颜色之
          var selectedColor = this.getValue(editor);
          // 获取菜单配置
          var colorConf = editor.getMenuConfig(mark);
          var _a = colorConf.colors, colors = _a === void 0 ? [] : _a;
          // 根据菜单配置生成 panel content
          colors.forEach(function (color) {
              var $block = $$1("<div class=\"color-block\" data-value=\"".concat(color, "\"></div>"));
              $block.css('background-color', color);
              var $li = $$1("<li data-value=\"".concat(color, "\"></li>"));
              if (selectedColor === color) {
                  $li.addClass('active');
              }
              $li.append($block);
              $content.append($li);
          });
          // 清除颜色
          var clearText = '';
          if (mark === 'color') {
              clearText = t$2('color.default');
          }
          if (mark === 'bgColor') {
              clearText = t$2('color.clear');
          }
          var $clearLi = $$1("\n      <li data-value=\"0\" class=\"clear\">\n        ".concat(CLEAN_SVG$1, "\n        ").concat(clearText, "\n      </li>\n    "));
          $content.prepend($clearLi);
          return $content[0];
      };
      return BaseMenu;
  }());

  /**
   * @description bg color menu
   * @author wangfupeng
   */
  var BgColorMenu = /** @class */ (function (_super) {
      __extends(BgColorMenu, _super);
      function BgColorMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.title = t$2('color.bgColor');
          _this.iconSvg = BG_COLOR_SVG;
          _this.mark = 'bgColor';
          return _this;
      }
      return BgColorMenu;
  }(BaseMenu$5));

  /**
   * @description color menu
   * @author wangfupeng
   */
  var ColorMenu = /** @class */ (function (_super) {
      __extends(ColorMenu, _super);
      function ColorMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.title = t$2('color.color');
          _this.iconSvg = FONT_COLOR_SVG;
          _this.mark = 'color';
          return _this;
      }
      return ColorMenu;
  }(BaseMenu$5));

  /**
   * @description menu config
   * @author wangfupeng
   */
  var COLORS = [
      'rgb(0, 0, 0)',
      'rgb(38, 38, 38)',
      'rgb(89, 89, 89)',
      'rgb(140, 140, 140)',
      'rgb(191, 191, 191)',
      'rgb(217, 217, 217)',
      'rgb(233, 233, 233)',
      'rgb(245, 245, 245)',
      'rgb(250, 250, 250)',
      'rgb(255, 255, 255)', // 10
      'rgb(225, 60, 57)',
      'rgb(231, 95, 51)',
      'rgb(235, 144, 58)',
      'rgb(245, 219, 77)',
      'rgb(114, 192, 64)',
      'rgb(89, 191, 192)',
      'rgb(66, 144, 247)',
      'rgb(54, 88, 226)',
      'rgb(106, 57, 201)',
      'rgb(216, 68, 147)', // 10
      'rgb(251, 233, 230)',
      'rgb(252, 237, 225)',
      'rgb(252, 239, 212)',
      'rgb(252, 251, 207)',
      'rgb(231, 246, 213)',
      'rgb(218, 244, 240)',
      'rgb(217, 237, 250)',
      'rgb(224, 232, 250)',
      'rgb(237, 225, 248)',
      'rgb(246, 226, 234)', // 10
      'rgb(255, 163, 158)',
      'rgb(255, 187, 150)',
      'rgb(255, 213, 145)',
      'rgb(255, 251, 143)',
      'rgb(183, 235, 143)',
      'rgb(135, 232, 222)',
      'rgb(145, 213, 255)',
      'rgb(173, 198, 255)',
      'rgb(211, 173, 247)',
      'rgb(255, 173, 210)', // 10
      'rgb(255, 77, 79)',
      'rgb(255, 122, 69)',
      'rgb(255, 169, 64)',
      'rgb(255, 236, 61)',
      'rgb(115, 209, 61)',
      'rgb(54, 207, 201)',
      'rgb(64, 169, 255)',
      'rgb(89, 126, 247)',
      'rgb(146, 84, 222)',
      'rgb(247, 89, 171)', // 10
      'rgb(207, 19, 34)',
      'rgb(212, 56, 13)',
      'rgb(212, 107, 8)',
      'rgb(212, 177, 6)',
      'rgb(56, 158, 13)',
      'rgb(8, 151, 156)',
      'rgb(9, 109, 217)',
      'rgb(29, 57, 196)',
      'rgb(83, 29, 171)',
      'rgb(196, 29, 127)', // 10
      'rgb(130, 0, 20)',
      'rgb(135, 20, 0)',
      'rgb(135, 56, 0)',
      'rgb(97, 71, 0)',
      'rgb(19, 82, 0)',
      'rgb(0, 71, 79)',
      'rgb(0, 58, 140)',
      'rgb(6, 17, 120)',
      'rgb(34, 7, 94)',
      'rgb(120, 6, 80)', // 10
  ];
  function genColors() {
      return COLORS;
  }
  function genBgColors() {
      return COLORS;
  }

  /**
   * @description menu entry
   * @author wangfupeng
   */
  var colorMenuConf = {
      key: 'color',
      factory: function () {
          return new ColorMenu();
      },
      // 默认的菜单菜单配置，将存储在 editorConfig.MENU_CONF[key] 中
      // 创建编辑器时，可通过 editorConfig.MENU_CONF[key] = {...} 来修改
      config: {
          colors: genColors(),
      },
  };
  var bgColorMenuConf = {
      key: 'bgColor',
      factory: function () {
          return new BgColorMenu();
      },
      config: {
          colors: genBgColors(),
      },
  };

  /**
   * @description parse style html
   * @author wangfupeng
   */
  function parseStyleHtml$6(text, node, _editor) {
      var $text = $$1(text);
      if (!distExports$1.Text.isText(node)) {
          return node;
      }
      var textNode = node;
      var color = getStyleValue$1($text, 'color');
      if (color) {
          textNode.color = color;
      }
      var bgColor = getStyleValue$1($text, 'background-color');
      if (!bgColor) {
          bgColor = getStyleValue$1($text, 'background');
      } // word 背景色
      if (bgColor) {
          textNode.bgColor = bgColor;
      }
      return textNode;
  }

  /**
   * @description pre-parse html
   * @author wangfupeng
   */
  /**
   * pre-prase font ，兼容 V4
   * @param fontElem fontElem
   */
  function preParse$5(fontElem) {
      var $font = $$1(fontElem);
      var tagName = getTagName$3($font);
      if (tagName !== 'font') {
          return fontElem;
      }
      // 处理 color （V4 使用 <font color="#ccc">xx</font> 格式）
      var color = $font.attr('color') || '';
      if (color) {
          $font.removeAttr('color');
          $font.css('color', color);
      }
      return $font[0];
  }
  var preParseHtmlConf$4 = {
      selector: 'font',
      preParseHtml: preParse$5,
  };

  /**
   * @description vdom utils fn
   * @author wangfupeng
   */
  // /**
  //  * 给 vnode 添加 dataset
  //  * @param vnode vnode
  //  * @param newDataset { key: val }
  //  */
  // export function addVnodeDataset(vnode: VNode, newDataset: Dataset) {
  //   if (vnode.data == null) vnode.data = {}
  //   const data = vnode.data
  //   if (data.dataset == null) data.dataset = {}
  //   Object.assign(data.dataset, newDataset)
  // }
  /**
   * 给 vnode 添加样式
   * @param vnode vnode
   * @param newStyle { key: val }
   */
  function addVnodeStyle$1(vnode, newStyle) {
      if (vnode.data == null) {
          vnode.data = {};
      }
      var data = vnode.data;
      if (data.style == null) {
          data.style = {};
      }
      Object.assign(data.style, newStyle);
  }

  /**
   * @description render color style
   * @author wangfupeng
   */
  /**
   * 添加样式
   * @param node text node
   * @param vnode vnode
   * @returns vnode
   */
  function renderStyle$7(node, vnode) {
      var _a = node, color = _a.color, bgColor = _a.bgColor;
      var styleVnode = vnode;
      if (color) {
          addVnodeStyle$1(styleVnode, { color: color });
      }
      if (bgColor) {
          addVnodeStyle$1(styleVnode, { backgroundColor: bgColor });
      }
      return styleVnode;
  }

  /**
   * @description textStyle to html
   * @author wangfupeng
   */
  /**
   * style to html
   * @param textNode slate text node
   * @param textHtml text html
   * @returns styled html
   */
  function styleToHtml$6(textNode, textHtml) {
      if (!distExports$1.Text.isText(textNode)) {
          return textHtml;
      }
      var _a = textNode, color = _a.color, bgColor = _a.bgColor;
      if (!color && !bgColor) {
          return textHtml;
      }
      var $text;
      if (isPlainText(textHtml)) {
          // textHtml 是纯文本，不是 html tag
          $text = $$1("<span>".concat(textHtml, "</span>"));
      }
      else {
          // textHtml 是 html tag
          $text = $$1(textHtml);
          var tagName = getTagName$3($text);
          if (tagName !== 'span') {
              // 如果不是 span ，则包裹一层，接下来要设置 css
              $text = $$1("<span>".concat(textHtml, "</span>"));
          }
      }
      // 设置样式
      if (color) {
          $text.css('color', color);
      }
      if (bgColor) {
          $text.css('background-color', bgColor);
      }
      // 输出 html
      return getOuterHTML$1($text);
  }

  /**
   * @description color bgColor
   * @author wangfupeng
   */
  var color = {
      renderStyle: renderStyle$7,
      styleToHtml: styleToHtml$6,
      preParseHtml: [preParseHtmlConf$4],
      parseStyleHtml: parseStyleHtml$6,
      menus: [colorMenuConf, bgColorMenuConf],
  };

  /**
   * @description enter menu
   * @author wangfupeng
   */
  var EnterMenu = /** @class */ (function () {
      function EnterMenu() {
          this.title = t$2('common.enter');
          this.iconSvg = ENTER_SVG;
          this.tag = 'button';
      }
      EnterMenu.prototype.getValue = function (_editor) {
          return '';
      };
      EnterMenu.prototype.isActive = function (_editor) {
          return false;
      };
      EnterMenu.prototype.isDisabled = function (editor) {
          var selection = editor.selection;
          if (selection == null) {
              return true;
          }
          if (distExports$1.Range.isExpanded(selection)) {
              return true;
          }
          return false;
      };
      EnterMenu.prototype.exec = function (editor, _value) {
          var selection = editor.selection;
          if (selection == null) {
              return;
          }
          var anchor = selection.anchor;
          var path = anchor.path;
          // 在当前位置插入空行，当前元素下移
          var newElem = { type: 'paragraph', children: [{ text: '' }] };
          var newPath = [path[0]];
          distExports$1.Transforms.insertNodes(editor, newElem, { at: newPath });
          editor.select(distExports$1.Editor.start(editor, newPath));
      };
      return EnterMenu;
  }());

  /**
   * @description common menu config
   * @author wangfupeng
   */
  var enterMenuConf = {
      key: 'enter',
      factory: function () {
          return new EnterMenu();
      },
  };

  var commonModule = {
      menus: [enterMenuConf],
  };

  /**
   * @description to html
   * @author wangfupeng
   */
  function dividerToHtml(_elem, _childrenHtml) {
      return '<hr/>';
  }
  var dividerToHtmlConf = {
      type: 'divider',
      elemToHtml: dividerToHtml,
  };

  /**
   * @description insert divider menu
   * @author wangfupeng
   */
  var InsertDividerMenu = /** @class */ (function () {
      function InsertDividerMenu() {
          this.title = t$2('divider.title');
          this.iconSvg = DIVIDER_SVG;
          this.tag = 'button';
      }
      InsertDividerMenu.prototype.getValue = function (_editor) {
          return '';
      };
      InsertDividerMenu.prototype.isActive = function (_editor) {
          // 不需要 active
          return false;
      };
      InsertDividerMenu.prototype.isDisabled = function (editor) {
          var selection = editor.selection;
          if (selection == null) {
              return true;
          }
          var selectedElems = DomEditor.getSelectedElems(editor);
          var hasVoidOrTableOrPre = selectedElems.some(function (elem) {
              if (editor.isVoid(elem)) {
                  return true;
              }
              var type = DomEditor.getNodeType(elem);
              if (type === 'table') {
                  return true;
              }
              if (type === 'pre') {
                  return true;
              }
              return false;
          });
          if (hasVoidOrTableOrPre) {
              return true;
          } // 匹配，则 disable
          return false;
      };
      InsertDividerMenu.prototype.exec = function (editor, _value) {
          var node = {
              type: 'divider',
              children: [{ text: '' }], // 【注意】void node 需要一个空 text 作为 children
          };
          // 如果当前是空 p ，则删除该 p
          if (DomEditor.isSelectedEmptyParagraph(editor)) {
              distExports$1.Transforms.removeNodes(editor, { mode: 'highest' });
          }
          distExports$1.Transforms.insertNodes(editor, node, { mode: 'highest' });
      };
      return InsertDividerMenu;
  }());

  /**
   * @description divider menu
   * @author wangfupeng
   */
  // import DeleteDividerMenu from './DeleteDividerMenu.ts'
  var insertDividerMenuConf = {
      key: 'divider',
      factory: function () {
          return new InsertDividerMenu();
      },
  };
  // export const deleteDividerMenuConf = {
  //   key: 'deleteDivider',
  //   factory() {
  //     return new DeleteDividerMenu()
  //   },
  // }
  // divider 可用键盘删除了，所以注释掉该菜单 wangfupeng 22.02.23

  /**
   * @description parse html
   * @author wangfupeng
   */
  function parseHtml$4(_elem, _children, _editor) {
      return {
          type: 'divider',
          children: [{ text: '' }], // void node 有一个空白 text
      };
  }
  var parseHtmlConf$4 = {
      selector: 'hr:not([data-w-e-type])', // data-w-e-type 属性，留给自定义元素，保证扩展性
      parseElemHtml: parseHtml$4,
  };

  /**
   * @description editor 插件，重写 editor API
   * @author wangfupeng
   */
  function withDivider(editor) {
      var isVoid = editor.isVoid, normalizeNode = editor.normalizeNode;
      var newEditor = editor;
      // 重写 isVoid
      newEditor.isVoid = function (elem) {
          var type = elem.type;
          if (type === 'divider') {
              return true;
          }
          return isVoid(elem);
      };
      // 重新 normalize
      newEditor.normalizeNode = function (_a) {
          var _b = __read(_a, 2), node = _b[0], path = _b[1];
          var type = DomEditor.getNodeType(node);
          if (type !== 'divider') {
              // 未命中 divider ，执行默认的 normalizeNode
              return normalizeNode([node, path]);
          }
          // -------------- divider 是 editor 最后一个节点，需要后面插入 p --------------
          var isLast = DomEditor.isLastNode(newEditor, node);
          if (isLast) {
              distExports$1.Transforms.insertNodes(newEditor, DomEditor.genEmptyParagraph(), { at: [path[0] + 1] });
          }
      };
      // 返回 editor ，重要！
      return newEditor;
  }

  /**
   * @description render divider elem
   * @author wangfupeng
   */
  function renderDivider(elemNode, children, editor) {
      var renderStyle = {};
      // 是否选中
      var selected = DomEditor.isNodeSelected(editor, elemNode);
      var vnode = h$1('div', {
          props: {
              contentEditable: false,
              className: 'w-e-textarea-divider',
          },
          dataset: {
              selected: selected ? 'true' : '',
          },
          style: renderStyle,
          on: {
              mousedown: function (event) { return event.preventDefault(); },
          },
      }, [h$1('hr')]);
      // 【注意】void node 中，renderElem 不用处理 children 。core 会统一处理。
      return vnode;
  }
  var renderDividerConf = {
      type: 'divider', // 和 elemNode.type 一致
      renderElem: renderDivider,
  };

  /**
   * @description divider module
   * @author wangfupeng
   */
  var image$1 = {
      renderElems: [renderDividerConf],
      elemsToHtml: [dividerToHtmlConf],
      parseElemsHtml: [parseHtmlConf$4],
      menus: [insertDividerMenuConf],
      editorPlugin: withDivider,
  };

  /**
   * @description menu config
   * @author wangfupeng
   */
  function genConfig() {
      var emotions = '😀 😃 😄 😁 😆 😅 😂 🤣 😊 😇 🙂 🙃 😉 😌 😍 😘 😗 😙 😚 😋 😛 😝 😜 🤓 😎 😏 😒 😞 😔 😟 😕 🙁 😣 😖 😫 😩 😢 😭 😤 😠 😡 😳 😱 😨 🤗 🤔 😶 😑 😬 🙄 😯 😴 😷 🤑 😈 🤡 💩 👻 💀 👀 👣 👐 🙌 👏 🤝 👍 👎 👊 ✊ 🤛 🤜 🤞 ✌️ 🤘 👌 👈 👉 👆 👇 ☝️ ✋ 🤚 🖐 🖖 👋 🤙 💪 🖕 ✍️ 🙏';
      return emotions.split(' ');
  }

  /**
   * @description emotion menu
   * @author wangfupeng
   */
  var EmotionMenu = /** @class */ (function () {
      function EmotionMenu() {
          this.title = t$2('emotion.title');
          this.iconSvg = EMOTION_SVG;
          this.tag = 'button';
          this.showDropPanel = true; // 点击 button 时显示 dropPanel
          this.$content = null;
      }
      EmotionMenu.prototype.exec = function (_editor, _value) {
          // 点击菜单时，弹出 droPanel 之前，不需要执行其他代码
          // 此处空着即可
      };
      EmotionMenu.prototype.getValue = function (_editor) {
          // 不需要 getValue
          return '';
      };
      EmotionMenu.prototype.isActive = function (_editor) {
          // 不需要 active
          return false;
      };
      EmotionMenu.prototype.isDisabled = function (editor) {
          if (editor.selection == null) {
              return true;
          }
          var _a = __read(distExports$1.Editor.nodes(editor, {
              match: function (n) {
                  var type = DomEditor.getNodeType(n);
                  if (type === 'pre') {
                      return true;
                  } // 代码块
                  if (distExports$1.Editor.isVoid(editor, n)) {
                      return true;
                  } // void node
                  return false;
              },
              universal: true,
          }), 1), match = _a[0];
          if (match) {
              return true;
          }
          return false;
      };
      EmotionMenu.prototype.getPanelContentElem = function (editor) {
          if (this.$content == null) {
              // 第一次渲染
              var $content_1 = $$1('<ul class="w-e-panel-content-emotion"></ul>');
              // 绑定事件（仅第一次绑定，不可重复绑定）
              $content_1.on('click', 'li', function (e) {
                  var target = e.target;
                  if (target == null) {
                      return;
                  }
                  e.preventDefault();
                  var $li = $$1(target);
                  var emotionStr = $li.text();
                  editor.insertText(emotionStr);
              });
              this.$content = $content_1;
          }
          var $content = this.$content;
          if ($content == null) {
              return document.createElement('ul');
          }
          $content.empty(); // 清空之后再重置内容
          // 获取菜单配置
          var colorConf = editor.getMenuConfig('emotion');
          var _a = colorConf.emotions, emotions = _a === void 0 ? [] : _a;
          // 根据菜单配置生成 panel content
          emotions.forEach(function (emotion) {
              var $li = $$1("<li>".concat(emotion, "</li>"));
              $content.append($li);
          });
          return $content[0];
      };
      return EmotionMenu;
  }());

  /**
   * @description emotion menu
   * @author wangfupeng
   */
  var emotionMenuConf = {
      key: 'emotion',
      factory: function () {
          return new EmotionMenu();
      },
      // 默认的菜单菜单配置，将存储在 editorConfig.MENU_CONF[key] 中
      // 创建编辑器时，可通过 editorConfig.MENU_CONF[key] = {...} 来修改
      config: {
          emotions: genConfig(),
      },
  };

  /**
   * @description emotion entry
   * @author wangfupeng
   */
  var emotion = {
      menus: [emotionMenuConf],
  };

  /**
   * @description font-size font-family config
   * @author wangfupeng
   */
  function genFontSizeConfig() {
      var fontSizeList = [
          // 元素支持两种形式：1. 字符串；2. { name: 'xxx', value: 'xxx' }
          '12px',
          { name: '13px', value: '13px' },
          '14px',
          '15px',
          '16px',
          '19px',
          { name: '22px', value: '22px' },
          '24px',
          '29px',
          '32px',
          '40px',
          '48px',
      ];
      return fontSizeList;
  }
  function getFontFamilyConfig() {
      var fontFamilyList = [
          // 元素支持两种形式：1. 字符串；2. { name: 'xxx', value: 'xxx' }
          '黑体',
          { name: '仿宋', value: '仿宋' },
          '楷体',
          '标楷体',
          '华文仿宋',
          '华文楷体',
          { name: '宋体', value: '宋体' },
          '微软雅黑',
          'Arial',
          'Tahoma',
          'Verdana',
          'Times New Roman',
          'Courier New',
      ];
      return fontFamilyList;
  }

  /**
   * @description header menu
   * @author wangfupeng
   */
  var BaseMenu$4 = /** @class */ (function () {
      function BaseMenu() {
          this.tag = 'select';
          this.width = 80;
      }
      BaseMenu.prototype.isActive = function (_editor) {
          // select menu 会显示 selected value ，用不到 active
          return false;
      };
      BaseMenu.prototype.getValue = function (editor) {
          var mark = this.mark;
          var curMarks = distExports$1.Editor.marks(editor);
          // @ts-ignore
          if (curMarks && curMarks[mark]) {
              return curMarks[mark];
          }
          return '';
      };
      BaseMenu.prototype.isDisabled = function (editor) {
          if (editor.selection == null) {
              return true;
          }
          var _a = __read(distExports$1.Editor.nodes(editor, {
              match: function (n) {
                  var type = DomEditor.getNodeType(n);
                  if (type === 'pre') {
                      return true;
                  } // 代码块
                  if (distExports$1.Editor.isVoid(editor, n)) {
                      return true;
                  } // void node
                  return false;
              },
              universal: true,
          }), 1), match = _a[0];
          // 匹配到，则禁用
          if (match) {
              return true;
          }
          return false;
      };
      BaseMenu.prototype.exec = function (editor, value) {
          var mark = this.mark;
          if (value) {
              editor.addMark(mark, value);
          }
          else {
              editor.removeMark(mark);
          }
      };
      return BaseMenu;
  }());

  /**
   * @description font-family menu
   * @author wangfupeng
   */
  var FontFamilyMenu = /** @class */ (function (_super) {
      __extends(FontFamilyMenu, _super);
      function FontFamilyMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.title = t$2('fontFamily.title');
          _this.iconSvg = FONT_FAMILY_SVG;
          _this.mark = 'fontFamily';
          _this.selectPanelWidth = 150;
          return _this;
      }
      FontFamilyMenu.prototype.getOptions = function (editor) {
          var options = [];
          // 获取配置，参考 './config.ts'
          var _a = editor.getMenuConfig(this.mark).fontFamilyList, fontFamilyList = _a === void 0 ? [] : _a;
          // 生成 options
          options.push({
              text: t$2('fontFamily.default'),
              value: '', // this.getValue(editor) 未找到结果时，会返回 '' ，正好对应到这里
          });
          fontFamilyList.forEach(function (family) {
              if (typeof family === 'string') {
                  options.push({
                      text: family,
                      value: family,
                      styleForRenderMenuList: { 'font-family': family },
                  });
              }
              else if (typeof family === 'object') {
                  var name_1 = family.name, value = family.value;
                  options.push({
                      text: name_1,
                      value: value,
                      styleForRenderMenuList: { 'font-family': value },
                  });
              }
          });
          // 设置 selected
          var curValue = this.getValue(editor);
          var flag = false;
          options.forEach(function (opt) {
              if (opt.value === curValue) {
                  flag = true;
                  opt.selected = true;
              }
              else {
                  opt.selected = undefined;
              }
          });
          if (!flag && typeof curValue === 'string') {
              options.push({
                  text: curValue,
                  value: curValue,
                  selected: true,
              });
          }
          return options;
      };
      return FontFamilyMenu;
  }(BaseMenu$4));

  /**
   * @description font-size menu
   * @author wangfupeng
   */
  var FontSizeMenu = /** @class */ (function (_super) {
      __extends(FontSizeMenu, _super);
      function FontSizeMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.title = t$2('fontSize.title');
          _this.iconSvg = FONT_SIZE_SVG;
          _this.mark = 'fontSize';
          return _this;
      }
      FontSizeMenu.prototype.getOptions = function (editor) {
          var options = [];
          // 获取配置，参考 './config.ts'
          var _a = editor.getMenuConfig(this.mark).fontSizeList, fontSizeList = _a === void 0 ? [] : _a;
          // 生成 options
          options.push({
              text: t$2('fontSize.default'),
              value: '', // this.getValue(editor) 未找到结果时，会返回 '' ，正好对应到这里
          });
          fontSizeList.forEach(function (size) {
              if (typeof size === 'string') {
                  options.push({
                      text: size,
                      value: size,
                  });
              }
              else if (typeof size === 'object') {
                  var name_1 = size.name, value = size.value;
                  options.push({
                      text: name_1,
                      value: value,
                  });
              }
          });
          // 设置 selected
          var curValue = this.getValue(editor);
          var flag = false;
          options.forEach(function (opt) {
              if (opt.value === curValue) {
                  flag = true;
                  opt.selected = true;
              }
              else {
                  opt.selected = undefined;
              }
          });
          // @ts-ignore
          if (!flag && typeof curValue === 'string') {
              options.push({
                  text: curValue,
                  value: curValue,
                  selected: true,
              });
          }
          return options;
      };
      return FontSizeMenu;
  }(BaseMenu$4));

  /**
   * @description font-size font-family menu entry
   * @author wangfupeng
   */
  var fontSizeMenuConf = {
      key: 'fontSize',
      factory: function () {
          return new FontSizeMenu();
      },
      // 默认的菜单菜单配置，将存储在 editorConfig.MENU_CONF[key] 中
      // 创建编辑器时，可通过 editorConfig.MENU_CONF[key] = {...} 来修改
      config: {
          fontSizeList: genFontSizeConfig(),
      },
  };
  var fontFamilyMenuConf = {
      key: 'fontFamily',
      factory: function () {
          return new FontFamilyMenu();
      },
      config: {
          fontFamilyList: getFontFamilyConfig(),
      },
  };

  /**
   * @description parse style html
   * @author wangfupeng
   */
  function parseStyleHtml$5(text, node, _editor) {
      var $text = $$1(text);
      if (!distExports$1.Text.isText(node)) {
          return node;
      }
      var textNode = node;
      // -------- 处理 font-size --------
      var fontSize = getStyleValue$1($text, 'font-size');
      if (fontSize) {
          textNode.fontSize = fontSize;
      }
      // 这里需要替换掉 "， css 设置 font-family，会将有空格的字体使用 " 包裹
      var fontFamily = getStyleValue$1($text, 'font-family').replace(/"/g, '');
      if (fontFamily) {
          textNode.fontFamily = fontFamily;
      }
      return textNode;
  }

  /**
   * @description pre-parse html
   * @author wangfupeng
   */
  // V4 font-size 对应关系（V4 使用 <font size="1">xxx</font> 格式）
  var FONT_SIZE_MAP_FOR_V4 = {
      1: '12px',
      2: '14px',
      3: '16px',
      4: '19px',
      5: '24px',
      6: '32px',
      7: '48px',
  };
  /**
   * pre-prase font ，兼容 V4
   * @param fontElem fontElem
   */
  function preParse$4(fontElem) {
      var $font = $$1(fontElem);
      var tagName = getTagName$3($font);
      if (tagName !== 'font') {
          return fontElem;
      }
      // 处理 size （V4 使用 <font size="1">xxx</font> 格式）
      var size = $font.attr('size') || '';
      if (size) {
          $font.removeAttr('size');
          $font.css('font-size', FONT_SIZE_MAP_FOR_V4[size]);
      }
      // 处理 face （V4 使用 <font face="黑体">xx</font> 格式）
      var face = $font.attr('face') || '';
      if (face) {
          $font.removeAttr('face');
          $font.css('font-family', face);
      }
      return $font[0];
  }
  var preParseHtmlConf$3 = {
      selector: 'font',
      preParseHtml: preParse$4,
  };

  /**
   * @description render font-size font-family style
   * @author wangfupeng
   */
  /**
   * 添加样式
   * @param node slate elem
   * @param vnode vnode
   * @returns vnode
   */
  function renderStyle$6(node, vnode) {
      var _a = node, fontSize = _a.fontSize, fontFamily = _a.fontFamily;
      var styleVnode = vnode;
      if (fontSize) {
          addVnodeStyle$1(styleVnode, { fontSize: fontSize });
      }
      if (fontFamily) {
          addVnodeStyle$1(styleVnode, { fontFamily: fontFamily });
      }
      return styleVnode;
  }

  /**
   * @description textStyle to html
   * @author wangfupeng
   */
  /**
   * style to html
   * @param textNode slate text node
   * @param textHtml text html
   * @returns styled html
   */
  function styleToHtml$5(textNode, textHtml) {
      if (!distExports$1.Text.isText(textNode)) {
          return textHtml;
      }
      var _a = textNode, fontSize = _a.fontSize, fontFamily = _a.fontFamily;
      if (!fontSize && !fontFamily) {
          return textHtml;
      }
      var $text;
      if (isPlainText(textHtml)) {
          // textHtml 是纯文本，不是 html tag
          $text = $$1("<span>".concat(textHtml, "</span>"));
      }
      else {
          // textHtml 是 html tag
          $text = $$1(textHtml);
          var tagName = getTagName$3($text);
          if (tagName !== 'span') {
              // 如果不是 span ，则包裹一层，接下来要设置 css
              $text = $$1("<span>".concat(textHtml, "</span>"));
          }
      }
      if (fontSize) {
          $text.css('font-size', fontSize);
      }
      if (fontFamily) {
          $text.css('font-family', fontFamily);
      }
      return getOuterHTML$1($text);
  }

  /**
   * @description font-size font-family
   * @author wangfupeng
   */
  var fontSizeAndFamily = {
      renderStyle: renderStyle$6,
      styleToHtml: styleToHtml$5,
      preParseHtml: [preParseHtmlConf$3],
      parseStyleHtml: parseStyleHtml$5,
      menus: [fontSizeMenuConf, fontFamilyMenuConf],
  };

  /** 清空所有标记（文本样式） */
  function clearAllMarks(editor) {
      var marks = distExports$1.Editor.marks(editor);
      if (marks) {
          Object.keys(marks).forEach(function (mark) {
              editor.removeMark(mark);
          });
      }
  }

  /**
   * @description Format Painter
   * @author CodePencil
   */
  var FormatPainter = /** @class */ (function () {
      function FormatPainter() {
          this.title = t$2('formatPainter.title');
          this.iconSvg = FORMAT_PAINTER;
          this.tag = 'button';
      }
      FormatPainter.prototype.getValue = function (_editor) {
          return '';
      };
      FormatPainter.prototype.isActive = function (_editor) {
          return FormatPainter.attrs.isSelect;
      };
      FormatPainter.prototype.isDisabled = function (_editor) {
          return false;
      };
      FormatPainter.prototype.setFormatHtml = function (editor) {
          var e_1, _a;
          var selectionText = editor.getSelectionText();
          if (!selectionText.length) {
              return;
          }
          if (FormatPainter.attrs.formatStyle) {
              clearAllMarks(editor);
              try {
                  for (var _b = __values(Object.entries(FormatPainter.attrs.formatStyle)), _c = _b.next(); !_c.done; _c = _b.next()) {
                      var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
                      editor.addMark(key, value);
                  }
              }
              catch (e_1_1) { e_1 = { error: e_1_1 }; }
              finally {
                  try {
                      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                  }
                  finally { if (e_1) throw e_1.error; }
              }
          }
          FormatPainter.attrs.formatStyle = null;
          FormatPainter.attrs.isSelect = false;
      };
      FormatPainter.prototype.exec = function (editor) {
          // 如果已经选中了格式刷则取消选中，反之保存已经选中文本的样式
          if (FormatPainter.attrs.isSelect) {
              FormatPainter.attrs.isSelect = false;
              FormatPainter.attrs.formatStyle = null;
          }
          else {
              var selectionText = editor.getSelectionText();
              // 判断是否选中文本
              if (selectionText.length) {
                  FormatPainter.attrs.formatStyle = distExports$1.Editor.marks(editor);
                  FormatPainter.attrs.isSelect = true;
              }
          }
          editor.blur();
          editor.focus();
      };
      FormatPainter.attrs = {
          isSelect: false,
          formatStyle: null,
      };
      return FormatPainter;
  }());

  /**
   * @description menu entry
   * @author CodePencil
   */
  var formatPainterConf = {
      key: 'formatPainter',
      factory: function () {
          return new FormatPainter();
      },
  };

  /**
   * @description editor 插件，重写 editor API
   * @author CodePencil
   */
  function withFormatPainter(editor) {
      var formatPainter = new FormatPainter();
      var onChange = editor.onChange;
      var newEditor = editor;
      var handleMouseUp = function () {
          formatPainter.setFormatHtml(newEditor);
          document.removeEventListener('mouseup', handleMouseUp);
      };
      newEditor.onChange = function () {
          onChange();
          if (FormatPainter.attrs.isSelect) {
              // 避免重复绑定 mouseup 事件
              document.removeEventListener('mouseup', handleMouseUp);
              document.addEventListener('mouseup', handleMouseUp);
          }
      };
      // 返回 editor ，重要！
      return newEditor;
  }

  /**
   * @description format painter
   * @author CodePencil
   */
  var formatPainter = {
      menus: [formatPainterConf],
      editorPlugin: withFormatPainter,
  };

  /**
   * @description redo menu
   * @author wangfupeng
   */
  var FullScreen = /** @class */ (function () {
      function FullScreen() {
          this.title = t$2('fullScreen.title');
          this.iconSvg = FULL_SCREEN_SVG;
          this.tag = 'button';
          this.alwaysEnable = true;
      }
      FullScreen.prototype.getValue = function (_editor) {
          return '';
      };
      FullScreen.prototype.isActive = function (editor) {
          return editor.isFullScreen;
      };
      FullScreen.prototype.isDisabled = function (_editor) {
          return false;
      };
      FullScreen.prototype.getIcon = function (editor) {
          if (editor.isFullScreen) {
              return FULL_SCREEN_SVG;
          }
          return CANCEL_FULL_SCREEN_SVG;
      };
      FullScreen.prototype.getTitle = function (editor) {
          if (editor.isFullScreen) {
              return t$2('fullScreen.title');
          }
          return t$2('fullScreen.cancelTitle');
      };
      FullScreen.prototype.exec = function (editor, _value) {
          if (editor.isFullScreen) {
              editor.unFullScreen();
          }
          else {
              editor.fullScreen();
          }
      };
      return FullScreen;
  }());

  /**
   * @description menu entry
   * @author wangfupeng
   */
  var fullScreenConf = {
      key: 'fullScreen',
      factory: function () {
          return new FullScreen();
      },
  };

  /**
   * @description 全屏
   * @author wangfupeng
   */
  var fullScreen = {
      menus: [fullScreenConf],
  };

  /**
   * @description to html
   * @author wangfupeng
   */
  function genToHtmlFn(level) {
      function headerToHtml(elem, childrenHtml) {
          return "<h".concat(level, ">").concat(childrenHtml, "</h").concat(level, ">");
      }
      return headerToHtml;
  }
  var header1ToHtmlConf = {
      type: 'header1',
      elemToHtml: genToHtmlFn(1),
  };
  var header2ToHtmlConf = {
      type: 'header2',
      elemToHtml: genToHtmlFn(2),
  };
  var header3ToHtmlConf = {
      type: 'header3',
      elemToHtml: genToHtmlFn(3),
  };
  var header4ToHtmlConf = {
      type: 'header4',
      elemToHtml: genToHtmlFn(4),
  };
  var header5ToHtmlConf = {
      type: 'header5',
      elemToHtml: genToHtmlFn(5),
  };
  var header6ToHtmlConf = {
      type: 'header6',
      elemToHtml: genToHtmlFn(6),
  };

  /**
   * @description header helper
   * @author wangfupeng
   */
  /**
   * 获取 node type（'header1' 'header2' 等），未匹配则返回 'paragraph'
   */
  function getHeaderType(editor) {
      var _a = __read(distExports$1.Editor.nodes(editor, {
          match: function (n) {
              var type = DomEditor.getNodeType(n);
              return type.startsWith('header'); // 匹配 node.type 是 header 开头的 node
          },
          universal: true,
      }), 1), match = _a[0];
      // 未匹配到 header
      if (match == null) {
          return 'paragraph';
      }
      // 匹配到 header
      var _b = __read(match, 1), n = _b[0];
      return DomEditor.getNodeType(n);
  }
  function isMenuDisabled$2(editor) {
      if (editor.selection == null) {
          return true;
      }
      var _a = __read(distExports$1.Editor.nodes(editor, {
          match: function (n) {
              var type = DomEditor.getNodeType(n);
              // 只可用于 p 和 header
              if (type === 'paragraph') {
                  return true;
              }
              if (type.startsWith('header')) {
                  return true;
              }
              return false;
          },
          universal: true,
          mode: 'highest', // 匹配最高层级
      }), 1), nodeEntry = _a[0];
      // 匹配到 p header ，不禁用
      if (nodeEntry) {
          return false;
      }
      // 未匹配到 p header ，则禁用
      return true;
  }
  /**
   * 设置 node type （'header1' 'header2' 'paragraph' 等）
   */
  function setHeaderType(editor, type) {
      if (!type) {
          return;
      }
      // 执行命令
      distExports$1.Transforms.setNodes(editor, {
          type: type,
      });
  }

  /**
   * @description button menu base
   * @author wangfupeng
   */
  var HeaderButtonMenuBase = /** @class */ (function () {
      function HeaderButtonMenuBase() {
          this.tag = 'button';
      }
      /**
       * 获取选中节点的 node.type
       * @param editor editor
       */
      HeaderButtonMenuBase.prototype.getValue = function (editor) {
          return getHeaderType(editor);
      };
      HeaderButtonMenuBase.prototype.isActive = function (editor) {
          return this.getValue(editor) === this.type;
      };
      HeaderButtonMenuBase.prototype.isDisabled = function (editor) {
          return isMenuDisabled$2(editor);
      };
      HeaderButtonMenuBase.prototype.exec = function (editor, value) {
          var type = this.type;
          var newType;
          if (value === type) {
              // 选中的 node.type 和当前 type 一样，则取消
              newType = 'paragraph';
          }
          else {
              // 否则，则设置
              newType = type;
          }
          setHeaderType(editor, newType);
      };
      return HeaderButtonMenuBase;
  }());

  /**
   * @description header1 button menu
   * @author wangfupeng
   */
  var Header1ButtonMenu = /** @class */ (function (_super) {
      __extends(Header1ButtonMenu, _super);
      function Header1ButtonMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.title = 'H1';
          _this.type = 'header1';
          return _this;
      }
      return Header1ButtonMenu;
  }(HeaderButtonMenuBase));

  /**
   * @description header2 button menu
   * @author wangfupeng
   */
  var Header2ButtonMenu = /** @class */ (function (_super) {
      __extends(Header2ButtonMenu, _super);
      function Header2ButtonMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.title = 'H2';
          _this.type = 'header2';
          return _this;
      }
      return Header2ButtonMenu;
  }(HeaderButtonMenuBase));

  /**
   * @description header3 button menu
   * @author wangfupeng
   */
  var Header3ButtonMenu = /** @class */ (function (_super) {
      __extends(Header3ButtonMenu, _super);
      function Header3ButtonMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.title = 'H3';
          _this.type = 'header3';
          return _this;
      }
      return Header3ButtonMenu;
  }(HeaderButtonMenuBase));

  /**
   * @description header4 button menu
   * @author wangfupeng
   */
  var Header4ButtonMenu = /** @class */ (function (_super) {
      __extends(Header4ButtonMenu, _super);
      function Header4ButtonMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.title = 'H4';
          _this.type = 'header4';
          return _this;
      }
      return Header4ButtonMenu;
  }(HeaderButtonMenuBase));

  /**
   * @description header5 button menu
   * @author wangfupeng
   */
  var Header5ButtonMenu = /** @class */ (function (_super) {
      __extends(Header5ButtonMenu, _super);
      function Header5ButtonMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.title = 'H5';
          _this.type = 'header5';
          return _this;
      }
      return Header5ButtonMenu;
  }(HeaderButtonMenuBase));

  /**
   * @description header6 button menu
   * @author cycleccc
   */
  var Header6ButtonMenu = /** @class */ (function (_super) {
      __extends(Header6ButtonMenu, _super);
      function Header6ButtonMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.title = 'H6';
          _this.type = 'header6';
          return _this;
      }
      return Header6ButtonMenu;
  }(HeaderButtonMenuBase));

  /**
   * @description header menu
   * @author wangfupeng
   */
  var HeaderSelectMenu = /** @class */ (function () {
      function HeaderSelectMenu() {
          this.title = t$2('header.title');
          this.iconSvg = HEADER_SVG;
          this.tag = 'select';
          this.width = 60;
      }
      HeaderSelectMenu.prototype.getOptions = function (editor) {
          // 基本的 options 列表
          var options = [
              // value 和 elemNode.type 对应
              {
                  value: 'header1',
                  text: 'H1',
                  styleForRenderMenuList: { 'font-size': '32px', 'font-weight': 'bold' },
              },
              {
                  value: 'header2',
                  text: 'H2',
                  styleForRenderMenuList: { 'font-size': '24px', 'font-weight': 'bold' },
              },
              {
                  value: 'header3',
                  text: 'H3',
                  styleForRenderMenuList: { 'font-size': '18px', 'font-weight': 'bold' },
              },
              {
                  value: 'header4',
                  text: 'H4',
                  styleForRenderMenuList: { 'font-size': '16px', 'font-weight': 'bold' },
              },
              {
                  value: 'header5',
                  text: 'H5',
                  styleForRenderMenuList: { 'font-size': '13px', 'font-weight': 'bold' },
              },
              {
                  value: 'header6',
                  text: 'H6',
                  styleForRenderMenuList: { 'font-size': '11px', 'font-weight': 'bold' },
              },
              { value: 'paragraph', text: t$2('header.text') },
          ];
          // 获取 value ，设置 selected
          var curValue = this.getValue(editor).toString();
          options.forEach(function (opt) {
              if (opt.value === curValue) {
                  opt.selected = true;
              }
              else {
                  opt.selected = undefined;
              }
          });
          return options;
      };
      HeaderSelectMenu.prototype.isActive = function (_editor) {
          // select menu 会显示 selected value ，用不到 active
          return false;
      };
      /**
       * 获取选中节点的 node.type
       * @param editor editor
       */
      HeaderSelectMenu.prototype.getValue = function (editor) {
          return getHeaderType(editor);
      };
      HeaderSelectMenu.prototype.isDisabled = function (editor) {
          return isMenuDisabled$2(editor);
      };
      /**
       * 执行命令
       * @param editor editor
       * @param value node.type
       */
      HeaderSelectMenu.prototype.exec = function (editor, value) {
          // 【注意】value 是 select change 时获取的，并不是 this.getValue 的值
          setHeaderType(editor, value.toString());
      };
      return HeaderSelectMenu;
  }());

  /**
   * @description menu entry
   * @author wangfupeng
   */
  var HeaderSelectMenuConf = {
      key: 'headerSelect',
      factory: function () {
          return new HeaderSelectMenu();
      },
  };
  var Header1ButtonMenuConf = {
      key: 'header1',
      factory: function () {
          return new Header1ButtonMenu();
      },
  };
  var Header2ButtonMenuConf = {
      key: 'header2',
      factory: function () {
          return new Header2ButtonMenu();
      },
  };
  var Header3ButtonMenuConf = {
      key: 'header3',
      factory: function () {
          return new Header3ButtonMenu();
      },
  };
  var Header4ButtonMenuConf = {
      key: 'header4',
      factory: function () {
          return new Header4ButtonMenu();
      },
  };
  var Header5ButtonMenuConf = {
      key: 'header5',
      factory: function () {
          return new Header5ButtonMenu();
      },
  };
  var Header6ButtonMenuConf = {
      key: 'header6',
      factory: function () {
          return new Header6ButtonMenu();
      },
  };

  /**
   * @description parse html
   * @author wangfupeng
   */
  function genParser(level) {
      function parseHtml(elem, children, editor) {
          var $elem = $$1(elem);
          children = children.filter(function (child) {
              if (distExports$1.Text.isText(child)) {
                  return true;
              }
              if (editor.isInline(child)) {
                  return true;
              }
              return false;
          });
          // 无 children ，则用纯文本
          if (children.length === 0) {
              children = [{ text: $elem.text().replace(/\s+/gm, ' ') }];
          }
          var headerNode = {
              type: "header".concat(level),
              children: children,
          };
          return headerNode;
      }
      return parseHtml;
  }
  var parseHeader1HtmlConf = {
      selector: 'h1:not([data-w-e-type])', // data-w-e-type 属性，留给自定义元素，保证扩展性
      parseElemHtml: genParser(1),
  };
  var parseHeader2HtmlConf = {
      selector: 'h2:not([data-w-e-type])', // data-w-e-type 属性，留给自定义元素，保证扩展性
      parseElemHtml: genParser(2),
  };
  var parseHeader3HtmlConf = {
      selector: 'h3:not([data-w-e-type])', // data-w-e-type 属性，留给自定义元素，保证扩展性
      parseElemHtml: genParser(3),
  };
  var parseHeader4HtmlConf = {
      selector: 'h4:not([data-w-e-type])', // data-w-e-type 属性，留给自定义元素，保证扩展性
      parseElemHtml: genParser(4),
  };
  var parseHeader5HtmlConf = {
      selector: 'h5:not([data-w-e-type])', // data-w-e-type 属性，留给自定义元素，保证扩展性
      parseElemHtml: genParser(5),
  };
  var parseHeader6HtmlConf = {
      selector: 'h6:not([data-w-e-type])', // data-w-e-type 属性，留给自定义元素，保证扩展性
      parseElemHtml: genParser(6),
  };

  /**
   * @description editor 插件，重写 editor API
   * @author wangfupeng
   */
  function withHeader(editor) {
      var insertBreak = editor.insertBreak;
      var newEditor = editor;
      // 重写 insertBreak - header 末尾回车时要插入 paragraph
      newEditor.insertBreak = function () {
          var _a = __read(distExports$1.Editor.nodes(newEditor, {
              match: function (n) {
                  var type = DomEditor.getNodeType(n);
                  return type.startsWith('header'); // 匹配 node.type 是 header 开头的 node
              },
              universal: true,
          }), 1), match = _a[0];
          if (!match) {
              // 未匹配到
              insertBreak();
              return;
          }
          var isAtLineEnd = DomEditor.isSelectionAtLineEnd(editor, match[1]);
          // 如果在行末则插入一个空 p，否则正常换行
          if (isAtLineEnd) {
              var p = { type: 'paragraph', children: [{ text: '' }] };
              distExports$1.Transforms.insertNodes(newEditor, p, { mode: 'highest' });
          }
          else {
              insertBreak();
          }
      };
      // 返回 editor ，重要！
      return newEditor;
  }

  /**
   * @description render header
   * @author wangfupeng
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  function genRenderElem(level) {
      /**
       * render header elem
       * @param elemNode slate elem
       * @param children children
       * @param editor editor
       * @returns vnode
       */
      function renderHeader(elemNode, children, _editor) {
          var Tag = "h".concat(level);
          var vnode = jsx(Tag, null, children);
          return vnode;
      }
      return renderHeader;
  }
  var renderHeader1Conf = {
      type: 'header1', // 和 elemNode.type 一致
      renderElem: genRenderElem(1),
  };
  var renderHeader2Conf = {
      type: 'header2',
      renderElem: genRenderElem(2),
  };
  var renderHeader3Conf = {
      type: 'header3',
      renderElem: genRenderElem(3),
  };
  var renderHeader4Conf = {
      type: 'header4',
      renderElem: genRenderElem(4),
  };
  var renderHeader5Conf = {
      type: 'header5',
      renderElem: genRenderElem(5),
  };
  var renderHeader6Conf = {
      type: 'header6',
      renderElem: genRenderElem(6),
  };

  /**
   * @description header entry
   * @author wangfupeng
   */
  var header = {
      renderElems: [
          renderHeader1Conf,
          renderHeader2Conf,
          renderHeader3Conf,
          renderHeader4Conf,
          renderHeader5Conf,
          renderHeader6Conf,
      ],
      elemsToHtml: [
          header1ToHtmlConf,
          header2ToHtmlConf,
          header3ToHtmlConf,
          header4ToHtmlConf,
          header5ToHtmlConf,
          header6ToHtmlConf,
      ],
      parseElemsHtml: [
          parseHeader1HtmlConf,
          parseHeader2HtmlConf,
          parseHeader3HtmlConf,
          parseHeader4HtmlConf,
          parseHeader5HtmlConf,
          parseHeader6HtmlConf,
      ],
      menus: [
          HeaderSelectMenuConf,
          Header1ButtonMenuConf,
          Header2ButtonMenuConf,
          Header3ButtonMenuConf,
          Header4ButtonMenuConf,
          Header5ButtonMenuConf,
          Header6ButtonMenuConf,
      ],
      editorPlugin: withHeader,
  };

  /**
   * @description to html
   * @author wangfupeng
   */
  function imageToHtml(elemNode, _childrenHtml) {
      var _a = elemNode, src = _a.src, _b = _a.alt, alt = _b === void 0 ? '' : _b, _c = _a.href, href = _c === void 0 ? '' : _c, _d = _a.width, width = _d === void 0 ? '' : _d, _e = _a.height, height = _e === void 0 ? '' : _e, _f = _a.style, style = _f === void 0 ? {} : _f;
      var _g = style.width, styleWidth = _g === void 0 ? '' : _g, _h = style.height, styleHeight = _h === void 0 ? '' : _h;
      var styleStr = '';
      if (styleWidth) {
          styleStr += "width: ".concat(styleWidth, ";");
      }
      if (styleHeight) {
          styleStr += "height: ".concat(styleHeight, ";");
      }
      return "<img src=\"".concat(src, "\" alt=\"").concat(alt, "\" data-href=\"").concat(href, "\" width=\"").concat(width, "\" height=\"").concat(height, "\" style=\"").concat(styleStr, "\"/>");
  }
  var imageToHtmlConf = {
      type: 'image',
      elemToHtml: imageToHtml,
  };

  /**
   * @description 图片菜单配置
   * @author wangfupeng
   */
  function genImageMenuConfig() {
      return {
          /**
           * 插入图片之后的回调
           * @param imageElem ImageElement
           */
          onInsertedImage: function (_imageElem) {
              /* 自定义 */
          },
          /**
           * 更新图片之后的回调
           * @param node image node
           */
          onUpdatedImage: function (_node) {
              /* 自定义 */
          },
          /**
           * 检查图片信息，支持 async fn
           * @param src image src
           * @param alt image alt
           * @param href image href
           */
          checkImage: function (_src, _alt, _href) {
              // 1. 返回 true ，说明检查通过
              // 2. 返回一个字符串，说明检查未通过，编辑器会阻止图片插入。会 alert 出错误信息（即返回的字符串）
              // 3. 返回 undefined（即没有任何返回），说明检查未通过，编辑器会阻止图片插入
              return true;
          },
          /**
           * parse image src
           * @param src image src
           * @returns new src
           */
          parseImageSrc: function (src) {
              return src;
          },
      };
  }

  /**
   * @description delete image menu
   * @author wangfupeng
   */
  var DeleteImage = /** @class */ (function () {
      function DeleteImage() {
          this.title = t$2('image.delete');
          this.iconSvg = TRASH_SVG$1;
          this.tag = 'button';
      }
      DeleteImage.prototype.getValue = function (_editor) {
          // 无需获取 val
          return '';
      };
      DeleteImage.prototype.isActive = function (_editor) {
          // 无需 active
          return false;
      };
      DeleteImage.prototype.isDisabled = function (editor) {
          if (editor.selection == null) {
              return true;
          }
          var imageNode = DomEditor.getSelectedNodeByType(editor, 'image');
          if (imageNode == null) {
              // 选区未处于 image node ，则禁用
              return true;
          }
          return false;
      };
      DeleteImage.prototype.exec = function (editor, _value) {
          if (this.isDisabled(editor)) {
              return;
          }
          // 删除图片
          distExports$1.Transforms.removeNodes(editor, {
              match: function (n) { return DomEditor.checkNodeType(n, 'image'); },
          });
      };
      return DeleteImage;
  }());

  /**
   * @description 工具函数
   * @author wangfupeng
   */
  /**
   * 获取随机数字符串
   * @param prefix 前缀
   * @returns 随机数字符串
   */
  function genRandomStr$1(prefix) {
      if (prefix === void 0) { prefix = 'r'; }
      return "".concat(prefix, "-").concat(nanoid());
  }
  function replaceSymbols$1(str) {
      return str.replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }

  /**
   * @description image menu helper
   * @author wangfupeng
   */
  /**
   * 判断菜单是否要 disabled
   * @param editor editor
   */
  function isInsertImageMenuDisabled(editor) {
      var selection = editor.selection;
      if (selection == null) {
          return true;
      }
      if (!distExports$1.Range.isCollapsed(selection)) {
          return true;
      } // 选区非折叠，禁用
      var _a = __read(distExports$1.Editor.nodes(editor, {
          match: function (n) {
              var type = DomEditor.getNodeType(n);
              if (type === 'code') {
                  return true;
              } // 代码块
              if (type === 'pre') {
                  return true;
              } // 代码块
              if (type === 'link') {
                  return true;
              } // 链接
              if (type === 'list-item') {
                  return true;
              } // list
              if (type.startsWith('header')) {
                  return true;
              } // 标题
              if (type === 'blockquote') {
                  return true;
              } // 引用
              if (distExports$1.Editor.isVoid(editor, n)) {
                  return true;
              } // void
              return false;
          },
          universal: true,
      }), 1), match = _a[0];
      if (match) {
          return true;
      }
      return false;
  }
  function check$1(menuKey_1, editor_1, src_1) {
      return __awaiter(this, arguments, void 0, function (menuKey, editor, src, alt, href) {
          var checkImage, res;
          if (alt === void 0) { alt = ''; }
          if (href === void 0) { href = ''; }
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      checkImage = editor.getMenuConfig(menuKey).checkImage;
                      if (!checkImage) return [3 /*break*/, 2];
                      return [4 /*yield*/, checkImage(src, alt, href)];
                  case 1:
                      res = _a.sent();
                      if (typeof res === 'string') {
                          // 检验未通过，提示信息
                          editor.alert(res, 'error');
                          return [2 /*return*/, false];
                      }
                      if (res == null) {
                          // 检验未通过，不提示信息
                          return [2 /*return*/, false];
                      }
                      _a.label = 2;
                  case 2: return [2 /*return*/, true];
              }
          });
      });
  }
  function parseSrc(menuKey, editor, src) {
      return __awaiter(this, void 0, void 0, function () {
          var parseImageSrc, newSrc;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      parseImageSrc = editor.getMenuConfig(menuKey).parseImageSrc;
                      if (!parseImageSrc) return [3 /*break*/, 2];
                      return [4 /*yield*/, parseImageSrc(src)];
                  case 1:
                      newSrc = _a.sent();
                      return [2 /*return*/, newSrc];
                  case 2: return [2 /*return*/, src];
              }
          });
      });
  }
  function insertImageNode(editor_1, src_1) {
      return __awaiter(this, arguments, void 0, function (editor, src, alt, href) {
          var res, parsedSrc, image, onInsertedImage;
          if (alt === void 0) { alt = ''; }
          if (href === void 0) { href = ''; }
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0: return [4 /*yield*/, check$1('insertImage', editor, src, alt, href)];
                  case 1:
                      res = _a.sent();
                      if (!res) {
                          return [2 /*return*/];
                      } // 检查失败，终止操作
                      return [4 /*yield*/, parseSrc('insertImage', editor, src)
                          // 新建一个 image node
                      ];
                  case 2:
                      parsedSrc = _a.sent();
                      image = {
                          type: 'image',
                          src: replaceSymbols$1(parsedSrc),
                          href: href,
                          alt: alt,
                          style: {},
                          children: [{ text: '' }], // 【注意】void node 需要一个空 text 作为 children
                      };
                      // 如果 blur ，则恢复选区
                      if (editor.selection === null) {
                          editor.restoreSelection();
                      }
                      // 如果当前正好选中了图片，则 move 一下（如：连续上传多张图片时）
                      if (DomEditor.getSelectedNodeByType(editor, 'image')) {
                          editor.move(1);
                      }
                      if (isInsertImageMenuDisabled(editor)) {
                          return [2 /*return*/];
                      }
                      // 插入图片
                      distExports$1.Transforms.insertNodes(editor, image);
                      onInsertedImage = editor.getMenuConfig('insertImage').onInsertedImage;
                      if (onInsertedImage) {
                          onInsertedImage(image);
                      }
                      return [2 /*return*/];
              }
          });
      });
  }
  function updateImageNode(editor_1, src_1) {
      return __awaiter(this, arguments, void 0, function (editor, src, alt, href, style) {
          var res, parsedSrc, selectedImageNode, _a, curStyle, nodeProps, imageNode, onUpdatedImage;
          if (alt === void 0) { alt = ''; }
          if (href === void 0) { href = ''; }
          if (style === void 0) { style = {}; }
          return __generator(this, function (_b) {
              switch (_b.label) {
                  case 0: return [4 /*yield*/, check$1('editImage', editor, src, alt, href)];
                  case 1:
                      res = _b.sent();
                      if (!res) {
                          return [2 /*return*/];
                      } // 检查失败，终止操作
                      return [4 /*yield*/, parseSrc('editImage', editor, src)];
                  case 2:
                      parsedSrc = _b.sent();
                      selectedImageNode = DomEditor.getSelectedNodeByType(editor, 'image');
                      if (selectedImageNode == null) {
                          return [2 /*return*/];
                      }
                      _a = selectedImageNode.style, curStyle = _a === void 0 ? {} : _a;
                      nodeProps = {
                          src: parsedSrc,
                          alt: alt,
                          href: href,
                          style: __assign(__assign({}, curStyle), style),
                      };
                      distExports$1.Transforms.setNodes(editor, nodeProps, {
                          match: function (n) { return DomEditor.checkNodeType(n, 'image'); },
                      });
                      imageNode = DomEditor.getSelectedNodeByType(editor, 'image');
                      onUpdatedImage = editor.getMenuConfig('editImage').onUpdatedImage;
                      if (onUpdatedImage) {
                          onUpdatedImage(imageNode);
                      }
                      return [2 /*return*/];
              }
          });
      });
  }

  /**
   * @description editor image menu
   * @author wangfupeng
   */
  /**
   * 生成唯一的 DOM ID
   */
  function genDomID$7() {
      return genRandomStr$1('w-e-edit-image');
  }
  var EditImage = /** @class */ (function () {
      function EditImage() {
          this.title = t$2('image.edit');
          this.iconSvg = PENCIL_SVG$1;
          this.tag = 'button';
          this.showModal = true; // 点击 button 时显示 modal
          this.modalWidth = 300;
          this.$content = null;
          this.srcInputId = genDomID$7();
          this.altInputId = genDomID$7();
          this.hrefInputId = genDomID$7();
          this.buttonId = genDomID$7();
      }
      EditImage.prototype.getValue = function (_editor) {
          // 编辑图片，用不到 getValue
          return '';
      };
      EditImage.prototype.getImageNode = function (editor) {
          return DomEditor.getSelectedNodeByType(editor, 'image');
      };
      EditImage.prototype.isActive = function (_editor) {
          // 无需 active
          return false;
      };
      EditImage.prototype.exec = function (_editor, _value) {
          // 点击菜单时，弹出 modal 之前，不需要执行其他代码
          // 此处空着即可
      };
      EditImage.prototype.isDisabled = function (editor) {
          var selection = editor.selection;
          if (selection == null) {
              return true;
          }
          if (!distExports$1.Range.isCollapsed(selection)) {
              return true;
          } // 选区非折叠，禁用
          var imageNode = DomEditor.getSelectedNodeByType(editor, 'image');
          // 未匹配到 image node 则禁用
          if (imageNode == null) {
              return true;
          }
          return false;
      };
      EditImage.prototype.getModalPositionNode = function (editor) {
          return this.getImageNode(editor);
      };
      EditImage.prototype.getModalContentElem = function (editor) {
          var _this = this;
          var _a = this, srcInputId = _a.srcInputId, altInputId = _a.altInputId, hrefInputId = _a.hrefInputId, buttonId = _a.buttonId;
          var selectedImageNode = this.getImageNode(editor);
          if (selectedImageNode == null) {
              throw new Error('Not found selected image node');
          }
          // 获取 input button elem
          var _b = __read(genModalInputElems(t$2('image.src'), srcInputId), 2), srcContainerElem = _b[0], inputSrcElem = _b[1];
          var $inputSrc = $$1(inputSrcElem);
          var _c = __read(genModalInputElems(t$2('image.desc'), altInputId), 2), altContainerElem = _c[0], inputAltElem = _c[1];
          var $inputAlt = $$1(inputAltElem);
          var _d = __read(genModalInputElems(t$2('image.link'), hrefInputId), 2), hrefContainerElem = _d[0], inputHrefElem = _d[1];
          var $inputHref = $$1(inputHrefElem);
          var _e = __read(genModalButtonElems(buttonId, t$2('common.ok')), 1), buttonContainerElem = _e[0];
          if (this.$content == null) {
              // 第一次渲染
              var $content_1 = $$1('<div></div>');
              // 绑定事件（第一次渲染时绑定，不要重复绑定）
              $content_1.on('click', "#".concat(buttonId), function (e) {
                  e.preventDefault();
                  var src = $content_1.find("#".concat(srcInputId)).val();
                  var alt = $content_1.find("#".concat(altInputId)).val();
                  var href = $content_1.find("#".concat(hrefInputId)).val();
                  _this.updateImage(editor, src, alt, href);
                  editor.hidePanelOrModal(); // 隐藏 modal
              });
              // 记录属性，重要
              this.$content = $content_1;
          }
          var $content = this.$content;
          $content.empty(); // 先清空内容
          // append inputs and button
          $content.append(srcContainerElem);
          $content.append(altContainerElem);
          $content.append(hrefContainerElem);
          $content.append(buttonContainerElem);
          // 设置 input val
          var _f = selectedImageNode, src = _f.src, _g = _f.alt, alt = _g === void 0 ? '' : _g, _h = _f.href, href = _h === void 0 ? '' : _h;
          $inputSrc.val(src);
          $inputAlt.val(alt);
          $inputHref.val(href);
          // focus 一个 input（异步，此时 DOM 尚未渲染）
          setTimeout(function () {
              $inputSrc.focus();
          });
          return $content[0];
      };
      EditImage.prototype.updateImage = function (editor, src, alt, href, style) {
          if (alt === void 0) { alt = ''; }
          if (href === void 0) { href = ''; }
          if (style === void 0) { style = {}; }
          if (!src) {
              return;
          }
          // 还原选区
          editor.restoreSelection();
          if (this.isDisabled(editor)) {
              return;
          }
          // 修改图片信息
          updateImageNode(editor, src, alt, href, style);
      };
      return EditImage;
  }());

  /**
   * @description 修改图片尺寸
   * @author wangfupeng
   */
  /**
   * 生成唯一的 DOM ID
   */
  function genDomID$6() {
      return genRandomStr$1('w-e-insert-image');
  }
  var EditorImageSizeMenu = /** @class */ (function () {
      function EditorImageSizeMenu() {
          this.title = t$2('image.editSize');
          this.tag = 'button';
          this.showModal = true; // 点击 button 时显示 modal
          this.modalWidth = 320;
          this.$content = null;
          this.widthInputId = genDomID$6();
          this.heightInputId = genDomID$6();
          this.buttonId = genDomID$6();
      }
      EditorImageSizeMenu.prototype.getSelectedImageNode = function (editor) {
          return DomEditor.getSelectedNodeByType(editor, 'image');
      };
      EditorImageSizeMenu.prototype.getValue = function (_editor) {
          // 插入菜单，不需要 value
          return '';
      };
      EditorImageSizeMenu.prototype.isActive = function (_editor) {
          // 任何时候，都不用激活 menu
          return false;
      };
      EditorImageSizeMenu.prototype.exec = function (_editor, _value) {
          // 点击菜单时，弹出 modal 之前，不需要执行其他代码
          // 此处空着即可
      };
      EditorImageSizeMenu.prototype.isDisabled = function (editor) {
          if (editor.selection == null) {
              return true;
          }
          var imageNode = this.getSelectedImageNode(editor);
          if (imageNode == null) {
              // 选区未处于 image node ，则禁用
              return true;
          }
          return false;
      };
      EditorImageSizeMenu.prototype.getModalPositionNode = function (editor) {
          return this.getSelectedImageNode(editor);
      };
      EditorImageSizeMenu.prototype.getModalContentElem = function (editor) {
          // return $('<div><p>修改尺寸</p><p>修改尺寸</p><p>修改尺寸</p><p>修改尺寸</p></div>')[0]
          var _a = this, widthInputId = _a.widthInputId, heightInputId = _a.heightInputId, buttonId = _a.buttonId;
          var _b = __read(genModalInputElems(t$2('image.width'), widthInputId, 'auto'), 2), widthContainerElem = _b[0], inputWidthElem = _b[1];
          var $inputWidth = $$1(inputWidthElem);
          var _c = __read(genModalInputElems(t$2('image.height'), heightInputId, 'auto'), 2), heightContainerElem = _c[0], inputHeightElem = _c[1];
          var $inputHeight = $$1(inputHeightElem);
          var _d = __read(genModalButtonElems(buttonId, t$2('image.ok')), 1), buttonContainerElem = _d[0];
          var imageNode = this.getSelectedImageNode(editor);
          if (this.$content == null) {
              // 第一次渲染
              var $content_1 = $$1('<div></div>');
              // 绑定事件（第一次渲染时绑定，不要重复绑定）
              $content_1.on('click', "#".concat(buttonId), function (e) {
                  e.preventDefault();
                  var rawWidth = $content_1.find("#".concat(widthInputId)).val().trim();
                  var rawHeight = $content_1.find("#".concat(heightInputId)).val().trim();
                  var isPercentage = function (value) { return /^\d+(\.\d+)?%$/.test(value); }; // 检查是否为合法的百分比字符串
                  var isNumeric = function (value) { return /^\d+(\.\d+)?$/.test(value); }; // 检查是否为合法的数字
                  var isPixelValue = function (value) { return /^\d+(\.\d+)?px$/.test(value); }; // 检查是否为合法的 px 值
                  var width = 'auto';
                  var height = 'auto';
                  if (isPercentage(rawWidth)) {
                      width = rawWidth;
                  }
                  else if (isNumeric(rawWidth)) {
                      width = "".concat(parseInt(rawWidth, 10), "px");
                  }
                  else if (isPixelValue(rawWidth)) {
                      width = rawWidth;
                  }
                  if (isPercentage(rawHeight)) {
                      height = rawHeight;
                  }
                  else if (isNumeric(rawHeight)) {
                      height = "".concat(parseInt(rawHeight, 10), "px");
                  }
                  else if (isPixelValue(rawHeight)) {
                      height = rawHeight;
                  }
                  var _a = imageNode.style, style = _a === void 0 ? {} : _a;
                  editor.restoreSelection();
                  var props = __assign(__assign({}, style), { style: {
                          width: width,
                          height: height,
                      } });
                  // 修改尺寸
                  distExports$1.Transforms.setNodes(editor, props, {
                      match: function (n) { return DomEditor.checkNodeType(n, 'image'); },
                  });
                  editor.hidePanelOrModal(); // 隐藏 modal
              });
              this.$content = $content_1;
          }
          var $content = this.$content;
          // 先清空，再重新添加 DOM 内容
          $content.empty();
          $content.append(widthContainerElem);
          $content.append(heightContainerElem);
          $content.append(buttonContainerElem);
          if (imageNode == null) {
              return $content[0];
          }
          // 初始化 input 值
          var _e = imageNode.style, style = _e === void 0 ? {} : _e;
          var _f = style.width, width = _f === void 0 ? 'auto' : _f, _g = style.height, height = _g === void 0 ? 'auto' : _g;
          $inputWidth.val(width);
          $inputHeight.val(height);
          setTimeout(function () {
              $inputWidth.focus();
          });
          return $content[0];
      };
      return EditorImageSizeMenu;
  }());

  /**
   * @description insert image menu
   * @author wangfupeng
   */
  /**
   * 生成唯一的 DOM ID
   */
  function genDomID$5() {
      return genRandomStr$1('w-e-insert-image');
  }
  var InsertImage = /** @class */ (function () {
      function InsertImage() {
          this.title = t$2('image.netImage');
          this.iconSvg = IMAGE_SVG$1;
          this.tag = 'button';
          this.showModal = true; // 点击 button 时显示 modal
          this.modalWidth = 300;
          this.$content = null;
          this.srcInputId = genDomID$5();
          this.altInputId = genDomID$5();
          this.hrefInputId = genDomID$5();
          this.buttonId = genDomID$5();
      }
      InsertImage.prototype.getValue = function (_editor) {
          // 插入菜单，不需要 value
          return '';
      };
      InsertImage.prototype.isActive = function (_editor) {
          // 任何时候，都不用激活 menu
          return false;
      };
      InsertImage.prototype.exec = function (_editor, _value) {
          // 点击菜单时，弹出 modal 之前，不需要执行其他代码
          // 此处空着即可
      };
      InsertImage.prototype.isDisabled = function (editor) {
          return isInsertImageMenuDisabled(editor);
      };
      InsertImage.prototype.getModalPositionNode = function (_editor) {
          return null; // modal 依据选区定位
      };
      InsertImage.prototype.getModalContentElem = function (editor) {
          var _this = this;
          var _a = this, srcInputId = _a.srcInputId, altInputId = _a.altInputId, hrefInputId = _a.hrefInputId, buttonId = _a.buttonId;
          // 获取 input button elem
          var _b = __read(genModalInputElems(t$2('image.src'), srcInputId), 2), srcContainerElem = _b[0], inputSrcElem = _b[1];
          var $inputSrc = $$1(inputSrcElem);
          var _c = __read(genModalInputElems(t$2('image.desc'), altInputId), 2), altContainerElem = _c[0], inputAltElem = _c[1];
          var $inputAlt = $$1(inputAltElem);
          var _d = __read(genModalInputElems(t$2('image.link'), hrefInputId), 2), hrefContainerElem = _d[0], inputHrefElem = _d[1];
          var $inputHref = $$1(inputHrefElem);
          var _e = __read(genModalButtonElems(buttonId, t$2('common.ok')), 1), buttonContainerElem = _e[0];
          if (this.$content == null) {
              // 第一次渲染
              var $content_1 = $$1('<div></div>');
              // 绑定事件（第一次渲染时绑定，不要重复绑定）
              $content_1.on('click', "#".concat(buttonId), function (e) {
                  e.preventDefault();
                  var src = $content_1.find("#".concat(srcInputId)).val().trim();
                  var alt = $content_1.find("#".concat(altInputId)).val().trim();
                  var href = $content_1.find("#".concat(hrefInputId)).val().trim();
                  _this.insertImage(editor, src, alt, href);
                  editor.hidePanelOrModal(); // 隐藏 modal
              });
              // 记录属性，重要
              this.$content = $content_1;
          }
          var $content = this.$content;
          $content.empty(); // 先清空内容
          // append inputs and button
          $content.append(srcContainerElem);
          $content.append(altContainerElem);
          $content.append(hrefContainerElem);
          $content.append(buttonContainerElem);
          // 设置 input val
          $inputSrc.val('');
          $inputAlt.val('');
          $inputHref.val('');
          // focus 一个 input（异步，此时 DOM 尚未渲染）
          setTimeout(function () {
              $inputSrc.focus();
          });
          return $content[0];
      };
      InsertImage.prototype.insertImage = function (editor, src, alt, href) {
          if (alt === void 0) { alt = ''; }
          if (href === void 0) { href = ''; }
          if (!src) {
              return;
          }
          // 还原选区
          editor.restoreSelection();
          if (this.isDisabled(editor)) {
              return;
          }
          // 插入图片
          insertImageNode(editor, src, alt, href);
      };
      return InsertImage;
  }());

  /**
   * @description view image link menu
   * @author wangfupeng
   */
  var ViewImageLink = /** @class */ (function () {
      function ViewImageLink() {
          this.title = t$2('image.viewLink');
          this.iconSvg = EXTERNAL_SVG;
          this.tag = 'button';
      }
      ViewImageLink.prototype.getValue = function (editor) {
          var imageNode = DomEditor.getSelectedNodeByType(editor, 'image');
          if (imageNode) {
              // 选区处于 image node
              return imageNode.href || '';
          }
          return '';
      };
      ViewImageLink.prototype.isActive = function (_editor) {
          // 无需 active
          return false;
      };
      ViewImageLink.prototype.isDisabled = function (editor) {
          if (editor.selection == null) {
              return true;
          }
          var href = this.getValue(editor);
          if (href) {
              // 有 image href ，则不禁用
              return false;
          }
          return true;
      };
      ViewImageLink.prototype.exec = function (editor, value) {
          if (this.isDisabled(editor)) {
              return;
          }
          if (!value || typeof value !== 'string') {
              throw new Error("View image link failed, image.href is '".concat(value, "'"));
          }
          // 查看链接
          window.open(value, '_blank');
      };
      return ViewImageLink;
  }());

  /**
   * @description image width base class
   * @author wangfupeng
   */
  var ImageWidthBaseClass = /** @class */ (function () {
      function ImageWidthBaseClass() {
          this.tag = 'button';
      }
      ImageWidthBaseClass.prototype.getValue = function (_editor) {
          // 无需获取 val
          return '';
      };
      ImageWidthBaseClass.prototype.isActive = function (_editor) {
          // 无需 active
          return false;
      };
      ImageWidthBaseClass.prototype.getSelectedNode = function (editor) {
          return DomEditor.getSelectedNodeByType(editor, 'image');
      };
      ImageWidthBaseClass.prototype.isDisabled = function (editor) {
          if (editor.selection == null) {
              return true;
          }
          var imageNode = this.getSelectedNode(editor);
          if (imageNode == null) {
              // 选区未处于 image node ，则禁用
              return true;
          }
          return false;
      };
      ImageWidthBaseClass.prototype.exec = function (editor, _value) {
          if (this.isDisabled(editor)) {
              return;
          }
          var imageNode = this.getSelectedNode(editor);
          if (imageNode == null) {
              return;
          }
          // 隐藏 hoverbar
          var hoverbar = DomEditor.getHoverbar(editor);
          if (hoverbar) {
              hoverbar.hideAndClean();
          }
          var _a = imageNode.style, style = _a === void 0 ? {} : _a;
          var props = {
              style: __assign(__assign({}, style), { width: this.value, height: '' }),
          };
          distExports$1.Transforms.setNodes(editor, props, {
              match: function (n) { return DomEditor.checkNodeType(n, 'image'); },
          });
      };
      return ImageWidthBaseClass;
  }());

  /**
   * @description image width 30%
   * @author wangfupeng
   */
  var ImageWidth30 = /** @class */ (function (_super) {
      __extends(ImageWidth30, _super);
      function ImageWidth30() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.title = '30%'; // 菜单标题
          _this.value = '30%'; // css width 的值
          return _this;
      }
      return ImageWidth30;
  }(ImageWidthBaseClass));

  /**
   * @description image width 50%
   * @author wangfupeng
   */
  var ImageWidth50 = /** @class */ (function (_super) {
      __extends(ImageWidth50, _super);
      function ImageWidth50() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.title = '50%'; // 菜单标题
          _this.value = '50%'; // css width 的值
          return _this;
      }
      return ImageWidth50;
  }(ImageWidthBaseClass));

  /**
   * @description image width 100%
   * @author wangfupeng
   */
  var ImageWidth100 = /** @class */ (function (_super) {
      __extends(ImageWidth100, _super);
      function ImageWidth100() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.title = '100%'; // 菜单标题
          _this.value = '100%'; // css width 的值
          return _this;
      }
      return ImageWidth100;
  }(ImageWidthBaseClass));

  /**
   * @description image menu entry
   * @author wangfupeng
   */
  var config$1 = genImageMenuConfig(); // menu config
  var insertImageMenuConf = {
      key: 'insertImage',
      factory: function () {
          return new InsertImage();
      },
      // 默认的菜单菜单配置，将存储在 editorConfig.MENU_CONF[key] 中
      // 创建编辑器时，可通过 editorConfig.MENU_CONF[key] = {...} 来修改
      config: config$1,
  };
  var deleteImageMenuConf = {
      key: 'deleteImage',
      factory: function () {
          return new DeleteImage();
      },
  };
  var editImageMenuConf = {
      key: 'editImage',
      factory: function () {
          return new EditImage();
      },
      config: config$1,
  };
  var viewImageLinkMenuConf = {
      key: 'viewImageLink',
      factory: function () {
          return new ViewImageLink();
      },
  };
  var imageWidth30MenuConf = {
      key: 'imageWidth30',
      factory: function () {
          return new ImageWidth30();
      },
  };
  var imageWidth50MenuConf = {
      key: 'imageWidth50',
      factory: function () {
          return new ImageWidth50();
      },
  };
  var imageWidth100MenuConf = {
      key: 'imageWidth100',
      factory: function () {
          return new ImageWidth100();
      },
  };
  var EditorImageSizeMenuConf = {
      key: 'editorImageSizeMenu',
      factory: function () {
          return new EditorImageSizeMenu();
      },
  };

  /**
   * @description parse html
   * @author wangfupeng
   */
  function parseHtml$3(elem, _children, _editor) {
      var $elem = $$1(elem);
      var href = $elem.attr('data-href') || '';
      href = decodeURIComponent(href); // 兼容 V4
      return {
          type: 'image',
          src: $elem.attr('src') || '',
          alt: $elem.attr('alt') || '',
          href: href,
          style: {
              width: getStyleValue$1($elem, 'width'),
              height: getStyleValue$1($elem, 'height'),
          },
          width: $elem.attr('width') || '',
          height: $elem.attr('height') || '',
          children: [{ text: '' }], // void node 有一个空白 text
      };
  }
  var parseHtmlConf$3 = {
      selector: 'img:not([data-w-e-type])', // data-w-e-type 属性，留给自定义元素，保证扩展性
      parseElemHtml: parseHtml$3,
  };

  /**
   * @description editor 插件，重写 editor API
   * @author wangfupeng
   */
  function withImage(editor) {
      var isInline = editor.isInline, isVoid = editor.isVoid;
      var newEditor = editor;
      // 重写 isInline
      newEditor.isInline = function (elem) {
          var type = elem.type;
          if (type === 'image') {
              return true;
          }
          return isInline(elem);
      };
      // 重写 isVoid
      newEditor.isVoid = function (elem) {
          var type = elem.type;
          if (type === 'image') {
              return true;
          }
          return isVoid(elem);
      };
      // 返回 editor ，重要！
      return newEditor;
  }

  /**
   * @description image render elem
   * @author wangfupeng
   */
  function genContainerId(editor, elemNode) {
      var id = DomEditor.findKey(editor, elemNode).id; // node 唯一 id
      return "w-e-image-container-".concat(id);
  }
  /**
   * 未选中时，渲染 image container
   */
  function renderContainer(editor, elemNode, imageVnode, imageInfo) {
      var width = imageInfo.width, height = imageInfo.height;
      var style = {};
      if (width) {
          style.width = width;
      }
      /** 不强制设置高度 */
      if (height) {
          style.height = height;
      }
      var containerId = genContainerId(editor, elemNode);
      return (jsx("div", { id: containerId, style: style, className: "w-e-image-container" }, imageVnode));
  }
  /**
   * 选中状态下，渲染 image container（渲染拖拽容器，修改图片尺寸）
   */
  function renderResizeContainer(editor, elemNode, imageVnode, imageInfo) {
      var $body = $$1('body');
      var containerId = genContainerId(editor, elemNode);
      var width = imageInfo.width, height = imageInfo.height;
      var originalX = 0;
      var originalWith = 0;
      var originalHeight = 0;
      var maxWidth = 0; // 最大宽度
      var revers = false; // 是否反转。如向右拖拽 right-top 需增加宽度（非反转），但向右拖拽 left-top 则需要减少宽度（反转）
      var $container = null;
      function getContainerElem() {
          var $containerFromDom = $$1("#".concat(containerId));
          if ($containerFromDom.length === 0) {
              throw new Error('Cannot find image container elem');
          }
          return $containerFromDom;
      }
      // mouseover callback （节流）
      var onMousemove = throttle(function (e) {
          e.preventDefault();
          var clientX = e.clientX;
          var gap = revers ? originalX - clientX : clientX - originalX; // 考虑是否反转
          var newWidth = originalWith + gap;
          var newHeight = originalHeight * (newWidth / originalWith); // 根据 width ，按比例计算 height
          /**
           * 图片有左右3px margin
           */
          if (newWidth > maxWidth - 6) {
              return;
          } // 超过最大宽度，不处理
          // 实时修改 img 宽高 -【注意】这里只修改 DOM ，mouseup 时再统一不修改 node
          if ($container == null) {
              return;
          }
          if (newWidth <= 15 || newHeight <= 15) {
              return;
          } // 最小就是 15px
          $container.css('width', "".concat(newWidth, "px"));
          $container.css('height', "".concat(newHeight, "px"));
      }, 100);
      function onMouseup(_e) {
          // 取消监听 mousemove
          $body.off('mousemove', onMousemove);
          if ($container == null) {
              return;
          }
          var newWidth = $container.width().toFixed(2);
          var newHeight = $container.height().toFixed(2);
          // 修改 node
          var props = {
              style: __assign(__assign({}, elemNode.style), { width: "".concat(newWidth, "px"), height: "".concat(newHeight, "px") }),
          };
          distExports$1.Transforms.setNodes(editor, props, { at: DomEditor.findPath(editor, elemNode) });
          // 取消监听 mouseup
          $body.off('mouseup', onMouseup);
      }
      /**
       * 初始化。监听事件，记录原始数据
       */
      function init(clientX, parentNodeWidth) {
          $container = getContainerElem();
          // 记录当前 x 坐标值
          originalX = clientX;
          maxWidth = parentNodeWidth;
          // 记录 img 原始宽高
          var $img = $container.find('img');
          if ($img.length === 0) {
              throw new Error('Cannot find image elem');
          }
          originalWith = $img.width();
          originalHeight = $img.height();
          // 监听 mousemove
          $body.on('mousemove', onMousemove);
          // 监听 mouseup
          $body.on('mouseup', onMouseup);
          // 隐藏 hoverbar
          var hoverbar = DomEditor.getHoverbar(editor);
          if (hoverbar) {
              hoverbar.hideAndClean();
          }
      }
      var divStyle = {};
      if (width) {
          divStyle.width = width;
      }
      if (height) {
          divStyle.height = height;
      }
      divStyle.boxShadow = '0 0 0 1px #B4D5FF'; // 自定义 selected 样式，因为有拖拽触手
      return (jsx("div", { id: containerId, style: divStyle, className: "w-e-image-container w-e-selected-image-container", on: {
              // 统一绑定拖拽触手的 mousedown 事件
              mousedown: function (e) {
                  var $target = $$1(e.target);
                  if (!$target.hasClass('w-e-image-dragger')) {
                      // target 不是 .w-e-image-dragger 拖拽触手，则忽略
                      return;
                  }
                  e.preventDefault();
                  if ($target.hasClass('left-top') || $target.hasClass('left-bottom')) {
                      revers = true; // 反转。向右拖拽，减少宽度
                  }
                  // 获取 image 父容器宽度
                  var parentNode = DomEditor.getParentNode(editor, elemNode);
                  if (parentNode == null) {
                      return;
                  }
                  var parentNodeDom = DomEditor.toDOMNode(editor, parentNode);
                  var rect = parentNodeDom.getBoundingClientRect ? parentNodeDom.getBoundingClientRect() : { width: 0 };
                  // 获取元素的计算样式
                  var style = window.getComputedStyle(parentNodeDom);
                  // 获取左右 padding 和 border 的宽度
                  var paddingLeft = parseFloat(style.paddingLeft);
                  var paddingRight = parseFloat(style.paddingRight);
                  var borderLeft = parseFloat(style.borderLeftWidth);
                  var borderRight = parseFloat(style.borderRightWidth);
                  init(e.clientX, rect.width - paddingLeft - paddingRight - borderLeft - borderRight); // 初始化
              },
          } },
          imageVnode,
          jsx("div", { className: "w-e-image-dragger left-top" }),
          jsx("div", { className: "w-e-image-dragger right-top" }),
          jsx("div", { className: "w-e-image-dragger left-bottom" }),
          jsx("div", { className: "w-e-image-dragger right-bottom" })));
  }
  function renderImage(elemNode, children, editor) {
      var _a = elemNode, src = _a.src, _b = _a.alt, alt = _b === void 0 ? '' : _b, _c = _a.href, href = _c === void 0 ? '' : _c, _d = _a.style, style = _d === void 0 ? {} : _d;
      var _f = style.width, width = _f === void 0 ? '' : _f, _g = style.height, height = _g === void 0 ? '' : _g;
      var selected = DomEditor.isNodeSelected(editor, elemNode); // 图片是否选中
      var imageStyle = { maxWidth: '100%' };
      if (width) {
          imageStyle.width = '100%';
      }
      if (height) {
          imageStyle.height = '100%';
      }
      // 【注意】void node 中，renderElem 不用处理 children 。core 会统一处理。
      var vnode = jsx("img", { style: imageStyle, src: src, alt: alt, "data-href": href });
      var isDisabled = editor.isDisabled();
      if (selected && !isDisabled) {
          // 选中，未禁用 - 渲染 resize container
          return renderResizeContainer(editor, elemNode, vnode, { width: width, height: height });
      }
      // 其他，渲染普通 image container
      return renderContainer(editor, elemNode, vnode, { width: width, height: height });
  }
  var renderImageConf = {
      type: 'image', // 和 elemNode.type 一致
      renderElem: renderImage,
  };

  /**
   * @description image module entry
   * @author wangfupeng
   */
  var image = {
      renderElems: [renderImageConf],
      elemsToHtml: [imageToHtmlConf],
      parseElemsHtml: [parseHtmlConf$3],
      menus: [
          insertImageMenuConf,
          deleteImageMenuConf,
          editImageMenuConf,
          viewImageLinkMenuConf,
          imageWidth30MenuConf,
          imageWidth50MenuConf,
          imageWidth100MenuConf,
          EditorImageSizeMenuConf,
      ],
      editorPlugin: withImage,
  };

  /**
   * @description indent base menu
   * @author wangfupeng
   */
  var BaseMenu$3 = /** @class */ (function () {
      function BaseMenu() {
          this.tag = 'button';
      }
      /**
       * 获取 node.indent 的值，如 `2em`
       * @param editor editor
       */
      BaseMenu.prototype.getValue = function (editor) {
          var _a = __read(distExports$1.Editor.nodes(editor, {
              // @ts-ignore
              match: function (n) { return !!n.indent; },
              universal: true,
          }), 1), nodeEntry = _a[0];
          if (nodeEntry == null) {
              return '';
          }
          var _b = __read(nodeEntry, 1), n = _b[0];
          // @ts-ignore
          return n.indent || '';
      };
      BaseMenu.prototype.isActive = function (_editor) {
          // 不需要 active
          return false;
      };
      /**
       * 获取 node 节点
       * @param editor editor
       */
      BaseMenu.prototype.getMatchNode = function (editor) {
          var _a = __read(distExports$1.Editor.nodes(editor, {
              match: function (n) {
                  var type = DomEditor.getNodeType(n);
                  // 只可用于 p 和 header
                  if (type === 'paragraph') {
                      return true;
                  }
                  if (type.startsWith('header')) {
                      return true;
                  }
                  return false;
              },
              universal: true,
              mode: 'highest', // 匹配最高层级
          }), 1), nodeEntry = _a[0];
          if (nodeEntry == null) {
              return null;
          }
          return nodeEntry[0];
      };
      return BaseMenu;
  }());

  /**
   * @description 减少缩进
   * @author wangfupeng
   */
  var DecreaseIndentMenu = /** @class */ (function (_super) {
      __extends(DecreaseIndentMenu, _super);
      function DecreaseIndentMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.title = t$2('indent.decrease');
          _this.iconSvg = INDENT_LEFT_SVG;
          return _this;
      }
      DecreaseIndentMenu.prototype.isDisabled = function (editor) {
          var matchNode = this.getMatchNode(editor);
          if (matchNode == null) {
              return true;
          } // 未匹配 p header 等，则禁用
          var indent = matchNode.indent;
          if (!indent) {
              // 没有 indent ，则禁用
              return true;
          }
          return false; // 其他情况，不禁用
      };
      DecreaseIndentMenu.prototype.exec = function (editor, _value) {
          distExports$1.Transforms.setNodes(editor, {
              indent: null,
          }, { match: function (n) { return distExports$1.Element.isElement(n); } });
      };
      return DecreaseIndentMenu;
  }(BaseMenu$3));

  /**
   * @description 增加缩进
   * @author wangfupeng
   */
  var IncreaseIndentMenu = /** @class */ (function (_super) {
      __extends(IncreaseIndentMenu, _super);
      function IncreaseIndentMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.title = t$2('indent.increase');
          _this.iconSvg = INDENT_RIGHT_SVG$1;
          _this.DEFAULT_INDENT_VALUE = '2em';
          return _this;
      }
      IncreaseIndentMenu.prototype.isDisabled = function (editor) {
          var matchNode = this.getMatchNode(editor);
          if (matchNode == null) {
              return true;
          } // 未匹配 p header 等，则禁用
          var indent = matchNode.indent;
          if (indent) {
              // 有 indent ，则禁用
              return true;
          }
          return false;
      };
      IncreaseIndentMenu.prototype.getIndentValue = function (editor) {
          var matchNode = this.getMatchNode(editor);
          if (!matchNode) {
              return this.DEFAULT_INDENT_VALUE;
          }
          var textChildren = matchNode.children.filter(distExports$1.Text.isText);
          var lastTextNode = textChildren[0];
          if (!lastTextNode || !lastTextNode.fontSize) {
              return this.DEFAULT_INDENT_VALUE;
          }
          // 如果段落的第一个 Text 节点 设置了 fontSize 样式，indent 值需要根据 fontSize 进行计算
          var fontSize = lastTextNode.fontSize;
          var value = parseInt(lastTextNode.fontSize, 10);
          var unit = fontSize.replace("".concat(value), '');
          return "".concat(value * 2).concat(unit);
      };
      IncreaseIndentMenu.prototype.exec = function (editor, _value) {
          var indent = this.getIndentValue(editor);
          distExports$1.Transforms.setNodes(editor, {
              indent: indent,
          }, {
              match: function (n) { return distExports$1.Element.isElement(n); },
              mode: 'highest',
          });
      };
      return IncreaseIndentMenu;
  }(BaseMenu$3));

  /**
   * @description indent menu entry
   * @author wangfupeng
   */
  var indentMenuConf = {
      key: 'indent',
      factory: function () {
          return new IncreaseIndentMenu();
      },
  };
  var delIndentMenuConf = {
      key: 'delIndent',
      factory: function () {
          return new DecreaseIndentMenu();
      },
  };

  /**
   * @description parse style html
   * @author wangfupeng
   */
  function parseStyleHtml$4(elem, node, _editor) {
      var $elem = $$1(elem);
      if (!distExports$1.Element.isElement(node)) {
          return node;
      }
      var elemNode = node;
      var indent = getStyleValue$1($elem, 'text-indent');
      var indentNumber = parseInt(indent, 10);
      if (indent && indentNumber > 0) {
          elemNode.indent = indent;
      }
      return elemNode;
  }

  /**
   * @description pre-parse html
   * @author wangfupeng
   */
  /**
   * pre-prase text-indent 兼容 V4 和 V5 早期格式（都使用 padding-left）
   * @param elem elem
   */
  function preParse$3(elem) {
      var $elem = $$1(elem);
      var paddingLeft = getStyleValue$1($elem, 'padding-left');
      if (/^[1-9]\d*em$/.test(paddingLeft)) {
          // 如 '2em' ，V4 格式
          $elem.css('text-indent', '2em');
      }
      if (/^[1-9]\d*px$/.test(paddingLeft)) {
          var num = parseInt(paddingLeft, 10);
          if (num % 32 === 0) {
              // 如 32px 64px ，V5 早期格式
              $elem.css('text-indent', '2em');
          }
      }
      return $elem[0];
  }
  var preParseHtmlConf$2 = {
      selector: 'p,h1,h2,h3,h4,h5',
      preParseHtml: preParse$3,
  };

  /**
   * @description render indent style
   * @author wangfupeng
   */
  /**
   * 添加样式
   * @param node slate elem
   * @param vnode vnode
   * @returns vnode
   */
  function renderStyle$5(node, vnode) {
      if (!distExports$1.Element.isElement(node)) {
          return vnode;
      }
      var indent = node.indent; // 如 '2em'
      var styleVnode = vnode;
      if (indent) {
          addVnodeStyle$1(styleVnode, { textIndent: indent });
      }
      return styleVnode;
  }

  /**
   * @description textStyle to html
   * @author wangfupeng
   */
  function styleToHtml$4(node, elemHtml) {
      if (!distExports$1.Element.isElement(node)) {
          return elemHtml;
      }
      var indent = node.indent; // 如 '2em'
      if (!indent) {
          return elemHtml;
      }
      // 设置样式
      var $elem = $$1(elemHtml);
      $elem.css('text-indent', indent);
      // 输出 html
      return getOuterHTML$1($elem);
  }

  /**
   * @description indent entry
   * @author wangfupeng
   */
  var indent = {
      renderStyle: renderStyle$5,
      styleToHtml: styleToHtml$4,
      preParseHtml: [preParseHtmlConf$2],
      parseStyleHtml: parseStyleHtml$4,
      menus: [indentMenuConf, delIndentMenuConf],
  };

  /**
   * @description justify base menu
   * @author wangfupeng
   */
  var BaseMenu$2 = /** @class */ (function () {
      function BaseMenu() {
          this.tag = 'button';
      }
      BaseMenu.prototype.getValue = function (_editor) {
          // 不需要 value
          return '';
      };
      BaseMenu.prototype.isActive = function (_editor) {
          // 不需要 active
          return false;
      };
      BaseMenu.prototype.isDisabled = function (editor) {
          if (editor.selection == null) {
              return true;
          }
          var selectedElems = DomEditor.getSelectedElems(editor);
          var notMatch = selectedElems.some(function (elem) {
              var type = elem.type;
              if (distExports$1.Editor.isVoid(editor, elem) && distExports$1.Editor.isBlock(editor, elem) && type !== 'video') {
                  return true;
              }
              if (['pre', 'code'].includes(type)) {
                  return true;
              }
              return false;
          });
          if (notMatch) {
              return true;
          }
          return false;
      };
      return BaseMenu;
  }());

  /**
   * @description justify center menu
   * @author wangfupeng
   */
  var JustifyCenterMenu = /** @class */ (function (_super) {
      __extends(JustifyCenterMenu, _super);
      function JustifyCenterMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.title = t$2('justify.center');
          _this.iconSvg = JUSTIFY_CENTER_SVG$1;
          return _this;
      }
      JustifyCenterMenu.prototype.exec = function (editor, _value) {
          distExports$1.Transforms.setNodes(editor, {
              textAlign: 'center',
          }, { match: function (n) { return distExports$1.Element.isElement(n) && !editor.isInline(n); } });
      };
      return JustifyCenterMenu;
  }(BaseMenu$2));

  /**
   * @description 两端对齐
   * @author wangfupeng
   */
  var JustifyJustifyMenu = /** @class */ (function (_super) {
      __extends(JustifyJustifyMenu, _super);
      function JustifyJustifyMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.title = t$2('justify.justify');
          _this.iconSvg = JUSTIFY_JUSTIFY_SVG$1;
          return _this;
      }
      JustifyJustifyMenu.prototype.exec = function (editor, _value) {
          distExports$1.Transforms.setNodes(editor, {
              textAlign: 'justify',
          }, { match: function (n) { return distExports$1.Element.isElement(n) && !editor.isInline(n); } });
      };
      return JustifyJustifyMenu;
  }(BaseMenu$2));

  /**
   * @description justify left menu
   * @author wangfupeng
   */
  var JustifyLeftMenu = /** @class */ (function (_super) {
      __extends(JustifyLeftMenu, _super);
      function JustifyLeftMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.title = t$2('justify.left');
          _this.iconSvg = JUSTIFY_LEFT_SVG$2;
          return _this;
      }
      JustifyLeftMenu.prototype.exec = function (editor, _value) {
          distExports$1.Transforms.setNodes(editor, {
              textAlign: 'left',
          }, { match: function (n) { return distExports$1.Element.isElement(n) && !editor.isInline(n); } });
      };
      return JustifyLeftMenu;
  }(BaseMenu$2));

  /**
   * @description justify right menu
   * @author wangfupeng
   */
  var JustifyRightMenu = /** @class */ (function (_super) {
      __extends(JustifyRightMenu, _super);
      function JustifyRightMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.title = t$2('justify.right');
          _this.iconSvg = JUSTIFY_RIGHT_SVG$1;
          return _this;
      }
      JustifyRightMenu.prototype.exec = function (editor, _value) {
          distExports$1.Transforms.setNodes(editor, {
              textAlign: 'right',
          }, { match: function (n) { return distExports$1.Element.isElement(n) && !editor.isInline(n); } });
      };
      return JustifyRightMenu;
  }(BaseMenu$2));

  /**
   * @description justify menu entry
   * @author wangfupeng
   */
  var justifyLeftMenuConf = {
      key: 'justifyLeft',
      factory: function () {
          return new JustifyLeftMenu();
      },
  };
  var justifyRightMenuConf = {
      key: 'justifyRight',
      factory: function () {
          return new JustifyRightMenu();
      },
  };
  var justifyCenterMenuConf = {
      key: 'justifyCenter',
      factory: function () {
          return new JustifyCenterMenu();
      },
  };
  var justifyJustifyMenuConf = {
      key: 'justifyJustify',
      factory: function () {
          return new JustifyJustifyMenu();
      },
  };

  /**
   * @description parse style html
   * @author wangfupeng
   */
  function parseStyleHtml$3(elem, node, _editor) {
      var $elem = $$1(elem);
      if (!distExports$1.Element.isElement(node)) {
          return node;
      }
      var elemNode = node;
      var textAlign = getStyleValue$1($elem, 'text-align');
      if (textAlign) {
          elemNode.textAlign = textAlign;
      }
      return elemNode;
  }

  /**
   * @description render justify style
   * @author wangfupeng
   */
  /**
   * 添加样式
   * @param node slate elem
   * @param vnode vnode
   * @returns vnode
   */
  function renderStyle$4(node, vnode) {
      if (!distExports$1.Element.isElement(node)) {
          return vnode;
      }
      var textAlign = node.textAlign; // 如 'left'/'right'/'center' 等
      var styleVnode = vnode;
      if (textAlign) {
          addVnodeStyle$1(styleVnode, { textAlign: textAlign });
      }
      return styleVnode;
  }

  /**
   * @description textStyle to html
   * @author wangfupeng
   */
  function styleToHtml$3(node, elemHtml) {
      if (!distExports$1.Element.isElement(node)) {
          return elemHtml;
      }
      var textAlign = node.textAlign; // 如 'left'/'right'/'center' 等
      if (!textAlign) {
          return elemHtml;
      }
      // 设置样式
      var $elem = $$1(elemHtml);
      $elem.css('text-align', textAlign);
      // 输出 html
      var outerHtml = getOuterHTML$1($elem);
      return outerHtml;
  }

  /**
   * @description justify module entry
   * @author wangfupeng
   */
  var justify = {
      renderStyle: renderStyle$4,
      styleToHtml: styleToHtml$3,
      parseStyleHtml: parseStyleHtml$3,
      menus: [justifyLeftMenuConf, justifyRightMenuConf, justifyCenterMenuConf, justifyJustifyMenuConf],
  };

  /**
   * @description line-height config
   * @author wangfupeng
   */
  function genLineHeightConfig() {
      return ['1', '1.15', '1.5', '2', '2.5', '3'];
  }

  /**
   * @description header menu
   * @author wangfupeng
   */
  var LineHeightMenu = /** @class */ (function () {
      function LineHeightMenu() {
          this.title = t$2('lineHeight.title');
          this.iconSvg = LINE_HEIGHT_SVG;
          this.tag = 'select';
          this.width = 80;
      }
      LineHeightMenu.prototype.getOptions = function (editor) {
          var options = [];
          // 获取配置，参考 './config.ts'
          var _a = editor.getMenuConfig('lineHeight').lineHeightList, lineHeightList = _a === void 0 ? [] : _a;
          // 生成 options
          options.push({
              text: t$2('lineHeight.default'),
              value: '', // this.getValue(editor) 未找到结果时，会返回 '' ，正好对应到这里
          });
          lineHeightList.forEach(function (height) {
              options.push({
                  text: height,
                  value: height,
              });
          });
          // 设置 selected
          var curValue = this.getValue(editor);
          options.forEach(function (opt) {
              if (opt.value === curValue) {
                  opt.selected = true;
              }
              else {
                  opt.selected = undefined;
              }
          });
          return options;
      };
      /**
       * 获取匹配的 node 节点
       * @param editor editor
       */
      LineHeightMenu.prototype.getMatchNode = function (editor) {
          var _a = __read(distExports$1.Editor.nodes(editor, {
              match: function (n) {
                  var type = DomEditor.getNodeType(n);
                  // line-height 匹配如下类型的 node
                  if (type.startsWith('header')) {
                      return true;
                  }
                  if (['paragraph', 'blockquote', 'list-item'].includes(type)) {
                      return true;
                  }
                  return false;
              },
              universal: true,
              mode: 'highest', // 匹配最高层级
          }), 1), nodeEntry = _a[0];
          if (nodeEntry == null) {
              return null;
          }
          return nodeEntry[0];
      };
      LineHeightMenu.prototype.isActive = function (_editor) {
          // select menu 会显示 selected value ，用不到 active
          return false;
      };
      /**
       * 获取 node.lineHeight 的值（如 '1' '1.5'），没有则返回 ''
       * @param editor editor
       */
      LineHeightMenu.prototype.getValue = function (editor) {
          var node = this.getMatchNode(editor);
          if (node == null) {
              return '';
          }
          if (!distExports$1.Element.isElement(node)) {
              return '';
          }
          return node.lineHeight || '';
      };
      LineHeightMenu.prototype.isDisabled = function (editor) {
          if (editor.selection == null) {
              return true;
          } // 禁用
          var node = this.getMatchNode(editor);
          if (node == null) {
              return true;
          } // 未匹配到指定 node ，禁用
          return false;
      };
      LineHeightMenu.prototype.exec = function (editor, value) {
          distExports$1.Transforms.setNodes(editor, {
              lineHeight: value.toString(),
          }, { mode: 'highest' });
      };
      return LineHeightMenu;
  }());

  /**
   * @description line-height menu entry
   * @author wangfupeng
   */
  var lineHeightMenuConf = {
      key: 'lineHeight',
      factory: function () {
          return new LineHeightMenu();
      },
      // 默认的菜单菜单配置，将存储在 editorConfig.MENU_CONF[key] 中
      // 创建编辑器时，可通过 editorConfig.MENU_CONF[key] = {...} 来修改
      config: {
          lineHeightList: genLineHeightConfig(),
      },
  };

  /**
   * @description parse style html
   * @author wangfupeng
   */
  function parseStyleHtml$2(elem, node, editor) {
      var $elem = $$1(elem);
      if (!distExports$1.Element.isElement(node)) {
          return node;
      }
      var elemNode = node;
      var _a = editor.getMenuConfig('lineHeight').lineHeightList, lineHeightList = _a === void 0 ? [] : _a;
      var lineHeight = getStyleValue$1($elem, 'line-height');
      if (lineHeight && lineHeightList.includes(lineHeight)) {
          elemNode.lineHeight = lineHeight;
      }
      return elemNode;
  }

  /**
   * @description render line-height style
   * @author wangfupeng
   */
  /**
   * 添加样式
   * @param node slate elem
   * @param vnode vnode
   * @returns vnode
   */
  function renderStyle$3(node, vnode) {
      if (!distExports$1.Element.isElement(node)) {
          return vnode;
      }
      var lineHeight = node.lineHeight; // 如 '1' '1.5'
      var styleVnode = vnode;
      if (lineHeight) {
          addVnodeStyle$1(styleVnode, { lineHeight: lineHeight });
      }
      return styleVnode;
  }

  /**
   * @description textStyle to html
   * @author wangfupeng
   */
  function styleToHtml$2(node, elemHtml) {
      if (!distExports$1.Element.isElement(node)) {
          return elemHtml;
      }
      var lineHeight = node.lineHeight; // 如 '1' '1.5'
      if (!lineHeight) {
          return elemHtml;
      }
      // 设置样式
      var $elem = $$1(elemHtml);
      $elem.css('line-height', lineHeight);
      // 输出 html
      return getOuterHTML$1($elem);
  }

  /**
   * @description line-height module entry
   * @author wangfupeng
   */
  var lineHeight = {
      renderStyle: renderStyle$3,
      styleToHtml: styleToHtml$2,
      parseStyleHtml: parseStyleHtml$2,
      menus: [lineHeightMenuConf],
  };

  /**
   * @description to html
   * @author wangfupeng
   */
  function linkToHtml(elem, childrenHtml) {
      var _a = elem, url = _a.url, _b = _a.target, target = _b === void 0 ? '_blank' : _b;
      return "<a href=\"".concat(url, "\" target=\"").concat(target, "\">").concat(childrenHtml, "</a>");
  }
  var linkToHtmlConf = {
      type: 'link',
      elemToHtml: linkToHtml,
  };

  /**
   * @description link menu config
   * @author wangfupeng
   */
  function genLinkMenuConfig() {
      return {
          /**
           * 检查链接，支持 async fn
           * @param text link text
           * @param url link url
           */
          checkLink: function (_text, _url) {
              // 1. 返回 true ，说明检查通过
              // 2. 返回一个字符串，说明检查未通过，编辑器会阻止插入。会 alert 出错误信息（即返回的字符串）
              // 3. 返回 undefined（即没有任何返回），说明检查未通过，编辑器会阻止插入
              return true;
          },
          /**
           * parse link url
           * @param url url
           * @returns newUrl
           */
          parseLinkUrl: function (url) {
              return url;
          },
      };
  }

  /**
   * @description link helper
   * @author wangfupeng
   */
  /**
   * 校验 link
   * @param menuKey menu key
   * @param editor editor
   * @param text menu text
   * @param url menu url
   */
  function check(menuKey, editor, text, url) {
      return __awaiter(this, void 0, void 0, function () {
          var checkLink, res;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      checkLink = editor.getMenuConfig(menuKey).checkLink;
                      if (!checkLink) return [3 /*break*/, 2];
                      return [4 /*yield*/, checkLink(text, url)];
                  case 1:
                      res = _a.sent();
                      if (typeof res === 'string') {
                          // 检验未通过，提示信息
                          editor.alert(res, 'error');
                          return [2 /*return*/, false];
                      }
                      if (res == null) {
                          // 检验未通过，不提示信息
                          return [2 /*return*/, false];
                      }
                      _a.label = 2;
                  case 2: return [2 /*return*/, true]; // 校验通过
              }
          });
      });
  }
  /**
   * 转换链接 url
   * @param menuKey menu key
   * @param editor editor
   * @param url url
   * @returns parsedUrl
   */
  function parse(menuKey, editor, url) {
      return __awaiter(this, void 0, void 0, function () {
          var parseLinkUrl, newUrl;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      parseLinkUrl = editor.getMenuConfig(menuKey).parseLinkUrl;
                      if (!parseLinkUrl) return [3 /*break*/, 2];
                      return [4 /*yield*/, parseLinkUrl(url)];
                  case 1:
                      newUrl = _a.sent();
                      return [2 /*return*/, newUrl];
                  case 2: return [2 /*return*/, url];
              }
          });
      });
  }
  function isMenuDisabled$1(editor) {
      if (editor.selection == null) {
          return true;
      }
      var selectedElems = DomEditor.getSelectedElems(editor);
      var notMatch = selectedElems.some(function (elem) {
          var type = elem.type;
          if (editor.isVoid(elem)) {
              return true;
          }
          if (['pre', 'code', 'link'].includes(type)) {
              return true;
          }
          return false;
      });
      if (notMatch) {
          return true;
      } // disabled
      return false; // enable
  }
  /**
   * 生成 link node
   * @param url url
   * @param text text
   */
  function genLinkNode(url, text) {
      var linkNode = {
          type: 'link',
          url: replaceSymbols$1(url),
          children: text ? [{ text: text }] : [],
      };
      return linkNode;
  }
  /**
   * 插入 link
   * @param editor editor
   * @param text text
   * @param url url
   */
  function insertLink(editor, text, url) {
      return __awaiter(this, void 0, void 0, function () {
          var checkRes, parsedUrl, selection, isCollapsed, leftLength, linkNode, selectedText, leftLength, linkNode, linkNode;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      if (!url) {
                          return [2 /*return*/];
                      }
                      if (!text) {
                          text = url;
                      } // 无 text 则用 url 代替
                      // 还原选区
                      editor.restoreSelection();
                      if (isMenuDisabled$1(editor)) {
                          return [2 /*return*/];
                      }
                      return [4 /*yield*/, check('insertLink', editor, text, url)];
                  case 1:
                      checkRes = _a.sent();
                      if (!checkRes) {
                          return [2 /*return*/];
                      } // 校验未通过
                      return [4 /*yield*/, parse('insertLink', editor, url)
                          // 判断选区是否折叠
                      ];
                  case 2:
                      parsedUrl = _a.sent();
                      selection = editor.selection;
                      if (selection == null) {
                          return [2 /*return*/];
                      }
                      isCollapsed = distExports$1.Range.isCollapsed(selection);
                      // 执行：插入链接
                      if (isCollapsed) {
                          leftLength = DomEditor.getLeftLengthOfMaxLength(editor);
                          if (leftLength <= 0) {
                              // 已经触发 maxLength ，不再输入文字
                              return [2 /*return*/];
                          }
                          // 链接前后插入空格，方便操作
                          editor.insertText(' ');
                          if (leftLength < text.length + 1) {
                              // 剩余长度小于 text 长度，则截取 text
                              text = text.slice(0, leftLength - 1);
                          }
                          linkNode = genLinkNode(parsedUrl, text);
                          distExports$1.Transforms.insertNodes(editor, linkNode);
                          // https://github.com/wangeditor-team/wangeditor/issues/332
                          // 不能直接使用 insertText, 会造成添加的空格被添加到链接文本中，参考上面 issue，替换为 insertFragment 方式添加空格
                          editor.insertFragment([{ text: ' ' }]);
                      }
                      else {
                          selectedText = distExports$1.Editor.string(editor, selection) // 选中的文字
                          ;
                          if (selectedText !== text) {
                              leftLength = DomEditor.getLeftLengthOfMaxLength(editor);
                              if (leftLength <= 0) {
                                  // 已经触发 maxLength ，不再输入文字
                                  return [2 /*return*/];
                              }
                              if (leftLength < selectedText.length - text.length) {
                                  // 剩余长度小于 text 长度，则截取 text
                                  text = text.slice(0, leftLength);
                              }
                              editor.deleteFragment();
                              linkNode = genLinkNode(parsedUrl, text);
                              distExports$1.Transforms.insertNodes(editor, linkNode);
                          }
                          else {
                              linkNode = genLinkNode(parsedUrl);
                              distExports$1.Transforms.wrapNodes(editor, linkNode, { split: true });
                              distExports$1.Transforms.collapse(editor, { edge: 'end' });
                          }
                      }
                      return [2 /*return*/];
              }
          });
      });
  }
  /**
   * 修改 link url
   * @param editor editor
   * @param text text
   * @param url link url
   */
  function updateLink(editor, text, url) {
      return __awaiter(this, void 0, void 0, function () {
          var checkRes, parsedUrl, props;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      if (!url) {
                          return [2 /*return*/];
                      }
                      return [4 /*yield*/, check('editLink', editor, text, url)];
                  case 1:
                      checkRes = _a.sent();
                      if (!checkRes) {
                          return [2 /*return*/];
                      } // 校验未通过
                      return [4 /*yield*/, parse('editLink', editor, url)
                          // 修改链接
                      ];
                  case 2:
                      parsedUrl = _a.sent();
                      props = { url: replaceSymbols$1(parsedUrl) };
                      distExports$1.Transforms.setNodes(editor, props, {
                          match: function (n) { return DomEditor.checkNodeType(n, 'link'); },
                      });
                      return [2 /*return*/];
              }
          });
      });
  }

  /**
   * @description update link menu
   * @author wangfupeng
   */
  /**
   * 生成唯一的 DOM ID
   */
  function genDomID$4() {
      return genRandomStr$1('w-e-update-link');
  }
  var EditLinkMenu = /** @class */ (function () {
      function EditLinkMenu() {
          this.title = t$2('link.edit');
          this.iconSvg = PENCIL_SVG$1;
          this.tag = 'button';
          this.showModal = true; // 点击 button 时显示 modal
          this.modalWidth = 300;
          this.$content = null;
          this.urlInputId = genDomID$4();
          this.buttonId = genDomID$4();
      }
      EditLinkMenu.prototype.getSelectedLinkElem = function (editor) {
          var node = DomEditor.getSelectedNodeByType(editor, 'link');
          if (node == null) {
              return null;
          }
          return node;
      };
      /**
       * 获取 node.url
       * @param editor editor
       */
      EditLinkMenu.prototype.getValue = function (editor) {
          var linkElem = this.getSelectedLinkElem(editor);
          if (linkElem) {
              return linkElem.url || '';
          }
          return '';
      };
      EditLinkMenu.prototype.isActive = function (_editor) {
          // 无需 active
          return false;
      };
      EditLinkMenu.prototype.exec = function (_editor, _value) {
          // 点击菜单时，弹出 modal 之前，不需要执行其他代码
          // 此处空着即可
      };
      EditLinkMenu.prototype.isDisabled = function (editor) {
          if (editor.selection == null) {
              return true;
          }
          var linkElem = this.getSelectedLinkElem(editor);
          // 未匹配到 link node 则禁用
          if (linkElem == null) {
              return true;
          }
          return false;
      };
      // modal 定位
      EditLinkMenu.prototype.getModalPositionNode = function (editor) {
          return DomEditor.getSelectedNodeByType(editor, 'link');
      };
      EditLinkMenu.prototype.getModalContentElem = function (editor) {
          var _a = this, urlInputId = _a.urlInputId, buttonId = _a.buttonId;
          // 获取 input button elem
          var _b = __read(genModalInputElems(t$2('link.url'), urlInputId), 2), urlContainerElem = _b[0], inputUrlElem = _b[1];
          var $inputUrl = $$1(inputUrlElem);
          var _c = __read(genModalButtonElems(buttonId, t$2('common.ok')), 1), buttonContainerElem = _c[0];
          if (this.$content == null) {
              // 第一次渲染
              var $content_1 = $$1('<div></div>');
              // 绑定事件（第一次渲染时绑定，不要重复绑定）
              $content_1.on('click', "#".concat(buttonId), function (e) {
                  e.preventDefault();
                  editor.restoreSelection(); // 还原选区
                  var n = DomEditor.getSelectedNodeByType(editor, 'link');
                  var text = n ? distExports$1.Node.string(n) : '';
                  var url = $content_1.find("#".concat(urlInputId)).val();
                  updateLink(editor, text, url); // 修改链接
                  editor.hidePanelOrModal(); // 隐藏 modal
              });
              // 记录属性，重要
              this.$content = $content_1;
          }
          var $content = this.$content;
          $content.empty(); // 先清空内容
          // append input and button
          $content.append(urlContainerElem);
          $content.append(buttonContainerElem);
          // 设置 input val
          var url = this.getValue(editor);
          $inputUrl.val(url);
          // focus 一个 input（异步，此时 DOM 尚未渲染）
          setTimeout(function () {
              $inputUrl.focus();
          });
          return $content[0];
      };
      return EditLinkMenu;
  }());

  /**
   * @description insert link menu
   * @author wangfupeng
   */
  /**
   * 生成唯一的 DOM ID
   */
  function genDomID$3() {
      return genRandomStr$1('w-e-insert-link');
  }
  var InsertLinkMenu = /** @class */ (function () {
      function InsertLinkMenu() {
          this.title = t$2('link.insert');
          this.iconSvg = LINK_SVG;
          this.tag = 'button';
          this.showModal = true; // 点击 button 时显示 modal
          this.modalWidth = 300;
          this.$content = null;
          this.textInputId = genDomID$3();
          this.urlInputId = genDomID$3();
          this.buttonId = genDomID$3();
      }
      InsertLinkMenu.prototype.getValue = function (_editor) {
          // 插入菜单，不需要 value
          return '';
      };
      InsertLinkMenu.prototype.isActive = function (_editor) {
          // 任何时候，都不用激活 menu
          return false;
      };
      InsertLinkMenu.prototype.exec = function (_editor, _value) {
          // 点击菜单时，弹出 modal 之前，不需要执行其他代码
          // 此处空着即可
      };
      InsertLinkMenu.prototype.isDisabled = function (editor) {
          return isMenuDisabled$1(editor);
      };
      InsertLinkMenu.prototype.getModalPositionNode = function (_editor) {
          return null; // modal 依据选区定位
      };
      InsertLinkMenu.prototype.getModalContentElem = function (editor) {
          var selection = editor.selection;
          var _a = this, textInputId = _a.textInputId, urlInputId = _a.urlInputId, buttonId = _a.buttonId;
          // 获取 input button elem
          var _b = __read(genModalInputElems(t$2('link.text'), textInputId), 2), textContainerElem = _b[0], inputTextElem = _b[1];
          var $inputText = $$1(inputTextElem);
          var _c = __read(genModalInputElems(t$2('link.url'), urlInputId), 2), urlContainerElem = _c[0], inputUrlElem = _c[1];
          var $inputUrl = $$1(inputUrlElem);
          var _d = __read(genModalButtonElems(buttonId, t$2('common.ok')), 1), buttonContainerElem = _d[0];
          if (this.$content == null) {
              // 第一次渲染
              var $content_1 = $$1('<div></div>');
              // 绑定事件（第一次渲染时绑定，不要重复绑定）
              $content_1.on('click', "#".concat(buttonId), function (e) {
                  e.preventDefault();
                  var text = $content_1.find("#".concat(textInputId)).val();
                  var url = $content_1.find("#".concat(urlInputId)).val();
                  insertLink(editor, text, url); // 插入链接
                  editor.hidePanelOrModal(); // 隐藏 modal
              });
              // 记录属性，重要
              this.$content = $content_1;
          }
          var $content = this.$content;
          $content.empty(); // 先清空内容
          // append inputs and button
          $content.append(textContainerElem);
          $content.append(urlContainerElem);
          $content.append(buttonContainerElem);
          // 设置 input val
          if (selection == null || distExports$1.Range.isCollapsed(selection)) {
              // 选区无内容
              $inputText.val('');
          }
          else {
              // 选区有内容
              var selectionText = distExports$1.Editor.string(editor, selection);
              $inputText.val(selectionText);
          }
          $inputUrl.val('');
          // focus 一个 input（异步，此时 DOM 尚未渲染）
          setTimeout(function () {
              $inputText.focus();
          });
          return $content[0];
      };
      return InsertLinkMenu;
  }());

  /**
   * @description unlink menu
   * @author wangfupeng
   */
  var UnLink = /** @class */ (function () {
      function UnLink() {
          this.title = t$2('link.unLink');
          this.iconSvg = UN_LINK_SVG;
          this.tag = 'button';
      }
      UnLink.prototype.getValue = function (_editor) {
          // 无需获取 val
          return '';
      };
      UnLink.prototype.isActive = function (_editor) {
          // 无需 active
          return false;
      };
      UnLink.prototype.isDisabled = function (editor) {
          if (editor.selection == null) {
              return true;
          }
          var linkNode = DomEditor.getSelectedNodeByType(editor, 'link');
          if (linkNode == null) {
              // 选区未处于 link node ，则禁用
              return true;
          }
          return false;
      };
      UnLink.prototype.exec = function (editor, _value) {
          if (this.isDisabled(editor)) {
              return;
          }
          // 取消链接
          distExports$1.Transforms.unwrapNodes(editor, {
              match: function (n) { return DomEditor.checkNodeType(n, 'link'); },
          });
      };
      return UnLink;
  }());

  /**
   * @description view link menu
   * @author wangfupeng
   */
  var ViewLink = /** @class */ (function () {
      function ViewLink() {
          this.title = t$2('link.view');
          this.iconSvg = EXTERNAL_SVG;
          this.tag = 'button';
      }
      ViewLink.prototype.getSelectedLinkElem = function (editor) {
          var node = DomEditor.getSelectedNodeByType(editor, 'link');
          if (node == null) {
              return null;
          }
          return node;
      };
      ViewLink.prototype.getValue = function (editor) {
          var linkElem = this.getSelectedLinkElem(editor);
          if (linkElem) {
              return linkElem.url || '';
          }
          return '';
      };
      ViewLink.prototype.isActive = function (_editor) {
          // 无需 active
          return false;
      };
      ViewLink.prototype.isDisabled = function (editor) {
          if (editor.selection == null) {
              return true;
          }
          var linkElem = this.getSelectedLinkElem(editor);
          if (linkElem == null) {
              // 选区未处于 link node ，则禁用
              return true;
          }
          return false;
      };
      ViewLink.prototype.exec = function (editor, value) {
          if (this.isDisabled(editor)) {
              return;
          }
          if (!value || typeof value !== 'string') {
              throw new Error("View link failed, link url is '".concat(value, "'"));
          }
          // 查看链接
          window.open(value, '_blank');
      };
      return ViewLink;
  }());

  /**
   * @description link menu entry
   * @author wangfupeng
   */
  var config = genLinkMenuConfig(); // menu config
  var insertLinkMenuConf = {
      key: 'insertLink',
      factory: function () {
          return new InsertLinkMenu();
      },
      // 默认的菜单菜单配置，将存储在 editorConfig.MENU_CONF[key] 中
      // 创建编辑器时，可通过 editorConfig.MENU_CONF[key] = {...} 来修改
      config: config,
  };
  var editLinkMenuConf = {
      key: 'editLink',
      factory: function () {
          return new EditLinkMenu();
      },
      config: config,
  };
  var unLinkMenuConf = {
      key: 'unLink',
      factory: function () {
          return new UnLink();
      },
  };
  var viewLinkMenuConf = {
      key: 'viewLink',
      factory: function () {
          return new ViewLink();
      },
  };

  /**
   * @description parse html
   * @author wangfupeng
   */
  function parseHtml$2(elem, children, editor) {
      var $elem = $$1(elem);
      children = children.filter(function (child) {
          if (distExports$1.Text.isText(child)) {
              return true;
          }
          if (editor.isInline(child)) {
              return true;
          }
          return false;
      });
      // 无 children ，则用纯文本
      if (children.length === 0) {
          children = [{ text: $elem.text().replace(/\s+/gm, ' ') }];
      }
      return {
          type: 'link',
          url: $elem.attr('href') || '',
          target: $elem.attr('target') || '',
          // @ts-ignore
          children: children,
      };
  }
  var parseHtmlConf$2 = {
      selector: 'a:not([data-w-e-type])', // data-w-e-type 属性，留给自定义元素，保证扩展性
      parseElemHtml: parseHtml$2,
  };

  var isUrl_1;
  var hasRequiredIsUrl;

  function requireIsUrl () {
  	if (hasRequiredIsUrl) return isUrl_1;
  	hasRequiredIsUrl = 1;
  	/**
  	 * Expose `isUrl`.
  	 */

  	isUrl_1 = isUrl;

  	/**
  	 * RegExps.
  	 * A URL must match #1 and then at least one of #2/#3.
  	 * Use two levels of REs to avoid REDOS.
  	 */

  	var protocolAndDomainRE = /^(?:\w+:)?\/\/(\S+)$/;

  	var localhostDomainRE = /^localhost[\:?\d]*(?:[^\:?\d]\S*)?$/;
  	var nonLocalhostDomainRE = /^[^\s\.]+\.\S{2,}$/;

  	/**
  	 * Loosely validate a URL `string`.
  	 *
  	 * @param {String} string
  	 * @return {Boolean}
  	 */

  	function isUrl(string){
  	  if (typeof string !== 'string') {
  	    return false;
  	  }

  	  var match = string.match(protocolAndDomainRE);
  	  if (!match) {
  	    return false;
  	  }

  	  var everythingAfterProtocol = match[1];
  	  if (!everythingAfterProtocol) {
  	    return false;
  	  }

  	  if (localhostDomainRE.test(everythingAfterProtocol) ||
  	      nonLocalhostDomainRE.test(everythingAfterProtocol)) {
  	    return true;
  	  }

  	  return false;
  	}
  	return isUrl_1;
  }

  var isUrlExports = requireIsUrl();
  var isUrl = /*@__PURE__*/getDefaultExportFromCjs(isUrlExports);

  /**
   * @description editor 插件，重写 editor API
   * @author wangfupeng
   */
  function withLink(editor) {
      var isInline = editor.isInline, insertData = editor.insertData, normalizeNode = editor.normalizeNode;
      var newEditor = editor;
      // 重写 isInline
      newEditor.isInline = function (elem) {
          var type = elem.type;
          if (type === 'link') {
              return true;
          }
          return isInline(elem);
      };
      // 重写 insertData ，粘贴插入链接
      newEditor.insertData = function (data) {
          var text = data.getData('text/plain');
          if (!isUrl(text)) {
              // 非链接
              insertData(data);
              return;
          }
          // 单图拖拽插入
          if (/<img[^>]+>/.test(data.getData('text/html'))) {
              insertData(data);
              return;
          }
          // 插入链接
          if (isMenuDisabled$1(newEditor)) {
              return;
          } // disabled
          var selection = newEditor.selection;
          if (selection == null) {
              return;
          }
          var selectedText = distExports$1.Editor.string(newEditor, selection); // 获取选中的文字
          insertLink(newEditor, selectedText, text);
      };
      newEditor.normalizeNode = function (_a) {
          var _b = __read(_a, 2), node = _b[0], path = _b[1];
          var type = DomEditor.getNodeType(node);
          if (type !== 'link') {
              // 未命中 link ，执行默认的 normalizeNode
              return normalizeNode([node, path]);
          }
          // 如果链接内容为空，则删除
          var str = distExports$1.Node.string(node);
          if (str === '') {
              return distExports$1.Transforms.removeNodes(newEditor, { at: path });
          }
          return normalizeNode([node, path]);
      };
      // 返回 editor ，重要！
      return newEditor;
  }

  /**
   * @description render link elem
   * @author wangfupeng
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  /**
   * render link elem
   * @param elemNode slate elem
   * @param children children
   * @param editor editor
   * @returns vnode
   */
  function renderLink(elemNode, children, _editor) {
      var _a = elemNode, url = _a.url, _b = _a.target, target = _b === void 0 ? '_blank' : _b;
      var vnode = (jsx("a", { href: url, target: target }, children));
      return vnode;
  }
  var renderLinkConf = {
      type: 'link', // 和 elemNode.type 一致
      renderElem: renderLink,
  };

  /**
   * @description link entry
   * @author wangfupeng
   */
  var link = {
      renderElems: [renderLinkConf],
      elemsToHtml: [linkToHtmlConf],
      parseElemsHtml: [parseHtmlConf$2],
      menus: [insertLinkMenuConf, editLinkMenuConf, unLinkMenuConf, viewLinkMenuConf],
      editorPlugin: withLink,
  };

  /**
   * @description to html
   * @author wangfupeng
   */
  function pToHtml(elem, childrenHtml) {
      if (childrenHtml === '') {
          return '<p><br></p>';
      }
      return "<p>".concat(childrenHtml, "</p>");
  }
  var pToHtmlConf = {
      type: 'paragraph',
      elemToHtml: pToHtml,
  };

  /**
   * @description parse html
   * @author wangfupeng
   */
  function parseParagraphHtml(elem, children, editor) {
      var $elem = $$1(elem);
      children = children.filter(function (child) {
          if (distExports$1.Text.isText(child)) {
              return true;
          }
          if (editor.isInline(child)) {
              return true;
          }
          return false;
      });
      // 无 children ，则用纯文本
      if (children.length === 0) {
          children = [{ text: $elem.text().replace(/\s+/gm, ' ') }];
      }
      return {
          type: 'paragraph',
          // @ts-ignore
          children: children,
      };
  }
  var parseParagraphHtmlConf = {
      selector: 'p:not([data-w-e-type])', // data-w-e-type 属性，留给自定义元素，保证扩展性
      parseElemHtml: parseParagraphHtml,
  };

  /**
   * @description editor 插件，重写 editor API
   * @author wangfupeng
   */
  function deleteHandler$1(newEditor) {
      var _a = __read(distExports$1.Editor.nodes(newEditor, {
          match: function (n) { return newEditor.children[0] === n; }, // editor 第一个节点
          mode: 'highest', // 最高层级
      }), 1), nodeEntry = _a[0];
      if (nodeEntry == null) {
          return false;
      }
      var n = nodeEntry[0];
      if (!distExports$1.Element.isElement(n)) {
          return false;
      }
      if (n.type === 'paragraph') {
          return false;
      } // 命中了 paragraph ，则不再继续判断
      if (distExports$1.Node.string(n) !== '') {
          return false;
      } // 未删除全部内容，则不再继续判断
      var _b = n.children, children = _b === void 0 ? [] : _b;
      if (!distExports$1.Text.isText(children[0])) {
          return false;
      } // n.children 不是 text （如 table），则不再继续判断
      // 至此，就命中了一个（非 paragraph）+（children 都是 text）+（内容为空）的顶级 node ，如 header blockQuote 等
      // 然后，将其却换为 paragraph
      distExports$1.Transforms.setNodes(newEditor, {
          type: 'paragraph',
      });
      return true;
  }
  function withParagraph(editor) {
      var deleteBackward = editor.deleteBackward, deleteForward = editor.deleteForward;
      var newEditor = editor;
      // 删除非 p 的文本 elem（如 header blockQuote 等），删除没有内容时，切换为 p
      newEditor.deleteBackward = function (unit) {
          var res = deleteHandler$1(newEditor);
          if (res) {
              return;
          } // 命中结果，则 return
          // 执行默认的删除
          deleteBackward(unit);
      };
      newEditor.deleteForward = function (unit) {
          var res = deleteHandler$1(newEditor);
          if (res) {
              return;
          } // 命中结果，则 return
          // 执行默认的删除
          deleteForward(unit);
      };
      // 返回 editor ，重要！
      return newEditor;
  }

  /**
   * @description render paragraph elem
   * @author wangfupeng
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  /**
   * render paragraph elem
   * @param elemNode slate elem
   * @param children children
   * @param editor editor
   * @returns vnode
   */
  function renderParagraph(elemNode, children, _editor) {
      var vnode = jsx("p", null, children);
      return vnode;
  }
  var renderParagraphConf = {
      type: 'paragraph',
      renderElem: renderParagraph,
  };

  /**
   * @description paragraph entry
   * @author wangfupeng
   */
  var p = {
      renderElems: [renderParagraphConf],
      elemsToHtml: [pToHtmlConf],
      parseElemsHtml: [parseParagraphHtmlConf],
      editorPlugin: withParagraph,
  };

  /**
   * @description helper
   * @author wangfupeng
   */
  function isMenuDisabled(editor, _mark) {
      if (editor.selection == null) {
          return true;
      }
      var _a = __read(distExports$1.Editor.nodes(editor, {
          match: function (n) {
              var type = DomEditor.getNodeType(n);
              if (type === 'pre') {
                  return true;
              } // 代码块
              if (distExports$1.Editor.isVoid(editor, n)) {
                  return true;
              } // void node
              return false;
          },
          universal: true,
      }), 1), match = _a[0];
      // 命中，则禁用
      if (match) {
          return true;
      }
      return false;
  }
  function removeMarks(editor, textNode) {
      // 遍历 text node 属性，清除样式
      var keys = Object.keys(textNode);
      keys.forEach(function (key) {
          if (key === 'text') {
              // 保留 text 属性，text node 必须的
              return;
          }
          // 其他属性，全部清除
          distExports$1.Editor.removeMark(editor, key);
      });
  }

  /**
   * @description simply style base menu
   * @author wangfupeng
   */
  var BaseMenu$1 = /** @class */ (function () {
      function BaseMenu() {
          this.marksNeedToRemove = []; // 增加 mark 的同时，需要移除哪些 mark （互斥，不能共存的）
          this.tag = 'button';
      }
      /**
       * 获取：是否有 mark
       * @param editor editor
       */
      BaseMenu.prototype.getValue = function (editor) {
          var mark = this.mark;
          var curMarks = distExports$1.Editor.marks(editor);
          // 当 curMarks 存在时，说明用户手动设置，以 curMarks 为准
          if (curMarks) {
              return curMarks[mark];
          }
          var _a = __read(distExports$1.Editor.nodes(editor, {
              // @ts-ignore
              match: function (n) { return n[mark] === true; },
          }), 1), match = _a[0];
          return !!match;
      };
      BaseMenu.prototype.isActive = function (editor) {
          var isMark = this.getValue(editor);
          return !!isMark;
      };
      BaseMenu.prototype.isDisabled = function (editor) {
          return isMenuDisabled(editor, this.mark);
      };
      /**
       * 执行命令
       * @param editor editor
       * @param value 是否有 mark
       */
      BaseMenu.prototype.exec = function (editor, value) {
          var _a = this, mark = _a.mark, marksNeedToRemove = _a.marksNeedToRemove;
          if (value) {
              // 已，则取消
              editor.removeMark(mark);
          }
          else {
              // 没有，则执行
              editor.addMark(mark, true);
              // 移除互斥、不能共存的 marks
              if (marksNeedToRemove) {
                  marksNeedToRemove.forEach(function (m) { return editor.removeMark(m); });
              }
          }
      };
      return BaseMenu;
  }());

  /**
   * @description bold menu
   * @author wangfupeng
   */
  var BoldMenu = /** @class */ (function (_super) {
      __extends(BoldMenu, _super);
      function BoldMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.mark = 'bold';
          _this.title = t$2('textStyle.bold');
          _this.iconSvg = BOLD_SVG;
          _this.hotkey = 'mod+b';
          return _this;
      }
      return BoldMenu;
  }(BaseMenu$1));

  /**
   * @description clear style menu
   * @author wangfupeng
   */
  var ClearStyleMenu = /** @class */ (function () {
      function ClearStyleMenu() {
          this.title = t$2('textStyle.clear');
          this.iconSvg = ERASER_SVG;
          this.tag = 'button';
      }
      ClearStyleMenu.prototype.getValue = function (_editor) {
          return '';
      };
      ClearStyleMenu.prototype.isActive = function (_editor) {
          return false;
      };
      ClearStyleMenu.prototype.isDisabled = function (editor) {
          return isMenuDisabled(editor);
      };
      /**
       * 执行命令
       * @param editor editor
       * @param value 是否有 mark
       */
      ClearStyleMenu.prototype.exec = function (editor, _value) {
          var e_1, _a;
          // 获取所有 text node
          var nodeEntries = distExports$1.Editor.nodes(editor, {
              match: function (n) { return distExports$1.Text.isText(n); },
              universal: true,
          });
          try {
              for (var nodeEntries_1 = __values(nodeEntries), nodeEntries_1_1 = nodeEntries_1.next(); !nodeEntries_1_1.done; nodeEntries_1_1 = nodeEntries_1.next()) {
                  var nodeEntry = nodeEntries_1_1.value;
                  // 单个 text node
                  var n = nodeEntry[0];
                  removeMarks(editor, n);
              }
          }
          catch (e_1_1) { e_1 = { error: e_1_1 }; }
          finally {
              try {
                  if (nodeEntries_1_1 && !nodeEntries_1_1.done && (_a = nodeEntries_1.return)) _a.call(nodeEntries_1);
              }
              finally { if (e_1) throw e_1.error; }
          }
      };
      return ClearStyleMenu;
  }());

  /**
   * @description code menu
   * @author wangfupeng
   */
  var CodeMenu = /** @class */ (function (_super) {
      __extends(CodeMenu, _super);
      function CodeMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.mark = 'code';
          _this.title = t$2('textStyle.code');
          _this.iconSvg = CODE_SVG;
          _this.hotkey = 'mod+e';
          return _this;
      }
      return CodeMenu;
  }(BaseMenu$1));

  /**
   * @description italic menu
   * @author wangfupeng
   */
  var ItalicMenu = /** @class */ (function (_super) {
      __extends(ItalicMenu, _super);
      function ItalicMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.mark = 'italic';
          _this.title = t$2('textStyle.italic');
          _this.iconSvg = ITALIC_SVG;
          _this.hotkey = 'mod+i';
          return _this;
      }
      return ItalicMenu;
  }(BaseMenu$1));

  /**
   * @description sub menu
   * @author wangfupeng
   */
  var SubMenu = /** @class */ (function (_super) {
      __extends(SubMenu, _super);
      function SubMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.mark = 'sub';
          _this.marksNeedToRemove = ['sup']; // sub 和 sup 不能共存
          _this.title = t$2('textStyle.sub');
          _this.iconSvg = SUB_SVG;
          _this.hotkey = '';
          return _this;
      }
      return SubMenu;
  }(BaseMenu$1));

  /**
   * @description sup menu
   * @author wangfupeng
   */
  var SupMenu = /** @class */ (function (_super) {
      __extends(SupMenu, _super);
      function SupMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.mark = 'sup';
          _this.marksNeedToRemove = ['sub']; // sup 和 sub 不能共存
          _this.title = t$2('textStyle.sup');
          _this.iconSvg = SUP_SVG;
          _this.hotkey = '';
          return _this;
      }
      return SupMenu;
  }(BaseMenu$1));

  /**
   * @description through menu
   * @author wangfupeng
   */
  var ThroughMenu = /** @class */ (function (_super) {
      __extends(ThroughMenu, _super);
      function ThroughMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.mark = 'through';
          _this.title = t$2('textStyle.through');
          _this.iconSvg = THROUGH_SVG;
          _this.hotkey = 'mod+shift+x';
          return _this;
      }
      return ThroughMenu;
  }(BaseMenu$1));

  /**
   * @description underline menu
   * @author wangfupeng
   */
  var UnderlineMenu = /** @class */ (function (_super) {
      __extends(UnderlineMenu, _super);
      function UnderlineMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.mark = 'underline';
          _this.title = t$2('textStyle.underline');
          _this.iconSvg = UNDER_LINE_SVG;
          _this.hotkey = 'mod+u';
          return _this;
      }
      return UnderlineMenu;
  }(BaseMenu$1));

  /**
   * @description menu entry
   * @author wangfupeng
   */
  var boldMenuConf = {
      key: 'bold',
      factory: function () {
          return new BoldMenu();
      },
  };
  var codeMenuConf = {
      key: 'code',
      factory: function () {
          return new CodeMenu();
      },
  };
  var italicMenuConf = {
      key: 'italic',
      factory: function () {
          return new ItalicMenu();
      },
  };
  var throughMenuConf = {
      key: 'through',
      factory: function () {
          return new ThroughMenu();
      },
  };
  var underlineMenuConf = {
      key: 'underline',
      factory: function () {
          return new UnderlineMenu();
      },
  };
  var supMenuConf = {
      key: 'sup',
      factory: function () {
          return new SupMenu();
      },
  };
  var subMenuConf = {
      key: 'sub',
      factory: function () {
          return new SubMenu();
      },
  };
  var clearStyleMenuConf = {
      key: 'clearStyle',
      factory: function () {
          return new ClearStyleMenu();
      },
  };

  /**
   * @description parse style html
   * @author wangfupeng
   */
  /**
   * $text 是否匹配 tags
   * @param $text $text
   * @param selector selector 如 'b,strong' 或 'sub'
   */
  function isMatch($text, selector) {
      if ($text.length === 0) {
          return false;
      }
      if ($text[0].matches(selector)) {
          return true;
      }
      if ($text.find(selector).length > 0) {
          return true;
      }
      return false;
  }
  function parseStyleHtml$1(textElem, node, _editor) {
      var $text = $$1(textElem);
      if (!distExports$1.Text.isText(node)) {
          return node;
      }
      var textNode = node;
      // bold
      if (isMatch($text, 'b,strong')) {
          textNode.bold = true;
      }
      // italic
      if (isMatch($text, 'i,em')) {
          textNode.italic = true;
      }
      // underline
      if (isMatch($text, 'u')) {
          textNode.underline = true;
      }
      // through
      if (isMatch($text, 's,strike')) {
          textNode.through = true;
      }
      // sub
      if (isMatch($text, 'sub')) {
          textNode.sub = true;
      }
      // sup
      if (isMatch($text, 'sup')) {
          textNode.sup = true;
      }
      // code
      if (isMatch($text, 'code')) {
          textNode.code = true;
      }
      return textNode;
  }

  /**
   * @description render text style
   * @author wangfupeng
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  /**
   * 添加样式
   * @param node slate text
   * @param vnode vnode
   * @returns vnode
   */
  function renderStyle$2(node, vnode) {
      var _a = node, bold = _a.bold, italic = _a.italic, underline = _a.underline, code = _a.code, through = _a.through, sub = _a.sub, sup = _a.sup;
      var styleVnode = vnode;
      // color bgColor 在另外的菜单
      if (bold) {
          styleVnode = jsx("strong", null, styleVnode);
      }
      if (code) {
          styleVnode = jsx("code", null, styleVnode);
      }
      if (italic) {
          styleVnode = jsx("em", null, styleVnode);
      }
      if (underline) {
          styleVnode = jsx("u", null, styleVnode);
      }
      if (through) {
          styleVnode = jsx("s", null, styleVnode);
      }
      if (sub) {
          styleVnode = jsx("sub", null, styleVnode);
      }
      if (sup) {
          styleVnode = jsx("sup", null, styleVnode);
      }
      return styleVnode;
  }

  /**
   * @description text to html
   * @author wangfupeng
   */
  // 【注意】color bgColor fontSize fontFamily 在另外的菜单
  /**
   * 生成加了样式的 text html
   * @param textNode textNode
   * @param html text html
   */
  function genStyledHtml(textNode, html) {
      var styledHtml = html;
      var _a = textNode, bold = _a.bold, italic = _a.italic, underline = _a.underline, code = _a.code, through = _a.through, sub = _a.sub, sup = _a.sup;
      if (bold) {
          styledHtml = "<strong>".concat(styledHtml, "</strong>");
      }
      if (code) {
          styledHtml = "<code>".concat(styledHtml, "</code>");
      }
      if (italic) {
          styledHtml = "<em>".concat(styledHtml, "</em>");
      }
      if (underline) {
          styledHtml = "<u>".concat(styledHtml, "</u>");
      }
      if (through) {
          styledHtml = "<s>".concat(styledHtml, "</s>");
      }
      if (sub) {
          styledHtml = "<sub>".concat(styledHtml, "</sub>");
      }
      if (sup) {
          styledHtml = "<sup>".concat(styledHtml, "</sup>");
      }
      return styledHtml;
  }
  /**
   * style to html
   * @param textNode slate text node
   * @param textHtml text html
   * @returns styled html
   */
  function styleToHtml$1(textNode, textHtml) {
      if (!distExports$1.Text.isText(textNode)) {
          return textHtml;
      }
      if (isPlainText(textHtml)) {
          // textHtml 是纯文本，而不是 html tag
          return genStyledHtml(textNode, textHtml);
      }
      // textHtml 是 html tag
      var $text = $$1(textHtml);
      var innerHtml = $text.html();
      innerHtml = genStyledHtml(textNode, innerHtml);
      $text.html(innerHtml);
      return getOuterHTML$1($text);
  }

  /**
   * @description text style entry
   * @author wangfupeng
   */
  var textStyle = {
      renderStyle: renderStyle$2,
      menus: [
          boldMenuConf,
          underlineMenuConf,
          italicMenuConf,
          throughMenuConf,
          codeMenuConf,
          subMenuConf,
          supMenuConf,
          clearStyleMenuConf,
      ],
      styleToHtml: styleToHtml$1,
      parseStyleHtml: parseStyleHtml$1,
  };

  /**
   * @description to html
   * @author wangfupeng
   */
  function todoToHtml(elem, childrenHtml) {
      var checked = elem.checked;
      var checkedAttr = checked ? 'checked' : '';
      return "<div data-w-e-type=\"todo\"><input type=\"checkbox\" disabled ".concat(checkedAttr, ">").concat(childrenHtml, "</div>");
  }
  var todoToHtmlConf = {
      type: 'todo',
      elemToHtml: todoToHtml,
  };

  /**
   * @description Todo menu
   * @author wangfupeng
   */
  var TodoMenu = /** @class */ (function () {
      function TodoMenu() {
          this.title = t$2('todo.todo');
          this.iconSvg = CHECK_BOX_SVG;
          this.tag = 'button';
      }
      TodoMenu.prototype.getValue = function (_editor) {
          // 无需获取 val
          return '';
      };
      TodoMenu.prototype.isActive = function (editor) {
          return !!DomEditor.getSelectedNodeByType(editor, 'todo');
      };
      TodoMenu.prototype.isDisabled = function (editor) {
          if (editor.selection == null) {
              return true;
          }
          var selectedElems = DomEditor.getSelectedElems(editor);
          var notMatch = selectedElems.some(function (elem) {
              if (distExports$1.Editor.isVoid(editor, elem) && distExports$1.Editor.isBlock(editor, elem)) {
                  return true;
              }
              var type = elem.type;
              if (['pre', 'table', 'list-item'].includes(type)) {
                  return true;
              }
              return false;
          });
          if (notMatch) {
              return true;
          }
          return false;
      };
      TodoMenu.prototype.exec = function (editor, _value) {
          var active = this.isActive(editor);
          distExports$1.Transforms.setNodes(editor, { type: active ? 'paragraph' : 'todo' });
      };
      return TodoMenu;
  }());

  /**
   * @description todo menu entry
   * @author wangfupeng
   */
  var todoMenuConf = {
      key: 'todo',
      factory: function () {
          return new TodoMenu();
      },
  };

  /**
   * @description parse html
   * @author wangfupeng
   */
  function parseHtml$1(elem, children, editor) {
      var $elem = $$1(elem);
      children = children.filter(function (child) {
          if (distExports$1.Text.isText(child)) {
              return true;
          }
          if (editor.isInline(child)) {
              return true;
          }
          return false;
      });
      // 无 children ，则用纯文本
      if (children.length === 0) {
          children = [{ text: $elem.text().replace(/\s+/gm, ' ') }];
      }
      // 获取 checked
      var checked = false;
      var $input = $elem.find('input[type="checkbox"]');
      if ($input.attr('checked') != null) {
          checked = true;
      }
      return {
          type: 'todo',
          checked: checked,
          // @ts-ignore
          children: children,
      };
  }
  var parseHtmlConf$1 = {
      selector: 'div[data-w-e-type="todo"]',
      parseElemHtml: parseHtml$1,
  };

  /**
   * @description editor 插件，重写 editor API
   * @author wangfupeng
   */
  function withTodo(editor) {
      var deleteBackward = editor.deleteBackward;
      var newEditor = editor;
      /**
       * 删除 todo 无内容时，变为 paragraph
       */
      newEditor.deleteBackward = function (unit) {
          var selection = editor.selection;
          if (selection && distExports$1.Range.isCollapsed(selection)) {
              // 获取选中的 todo
              var selectedTodo = DomEditor.getSelectedNodeByType(editor, 'todo');
              if (selectedTodo) {
                  if (distExports$1.Node.string(selectedTodo).length === 0) {
                      // 当前 todo 已经没有文字，则转换为 paragraph
                      distExports$1.Transforms.setNodes(editor, { type: 'paragraph' }, { mode: 'highest' });
                      return;
                  }
              }
          }
          deleteBackward(unit);
      };
      return newEditor;
  }

  /**
   * @description pre parse html
   * @author wangfupeng
   */
  /**
   * pre-prase todo ，兼容 V4
   * @param elem elem
   */
  function preParse$2(elem) {
      var $elem = $$1(elem);
      // $elem 格式如
      // <ul class="w-e-todo"><li><span contenteditable="false"><input type="checkbox"/></span>hello <b>world</b></li></ul>
      var $li = $elem.find('li');
      var $container = $$1('<div data-w-e-type="todo"></div>');
      // 1. 把 input 移动到 $container
      var $input = $li.find('input[type]');
      $container.append($input);
      // 2. 删除之前包裹 input 的 span
      var $spanForInput = $li.children()[0];
      $spanForInput.remove();
      // 3. 再把剩余的内容移动到 $container （有纯文本内容，不能用 children ，得用 innerHTML）
      $container[0].innerHTML += $li[0].innerHTML;
      return $container[0];
  }
  var preParseHtmlConf$1 = {
      selector: 'ul.w-e-todo', // 匹配 v4 todo
      preParseHtml: preParse$2,
  };

  /**
   * @description render todo
   * @author wangfupeng
   */
  /**
   * render todo elem
   * @param elemNode slate elem
   * @param children children
   * @param editor editor
   * @returns vnode
   */
  function renderTodo(elemNode, children, editor) {
      // 判断 disabled
      var disabled = false;
      if (editor.isDisabled()) {
          disabled = true;
      }
      var checked = elemNode.checked;
      var vnode = (jsx("div", { style: { margin: '5px 0' } },
          jsx("span", { contentEditable: false, style: { marginRight: '0.5em' } },
              jsx("input", { type: "checkbox", checked: checked, disabled: disabled, on: {
                      change: function (event) {
                          var path = DomEditor.findPath(editor, elemNode);
                          var newProps = {
                              // @ts-ignore
                              checked: event.target.checked,
                          };
                          distExports$1.Transforms.setNodes(editor, newProps, { at: path });
                      },
                  } })),
          jsx("span", null, children)));
      return vnode;
  }
  var renderTodoConf = {
      type: 'todo', // 和 elemNode.type 一致
      renderElem: renderTodo,
  };

  /**
   * @description todo entry
   * @author wangfupeng
   */
  var todo = {
      renderElems: [renderTodoConf],
      elemsToHtml: [todoToHtmlConf],
      preParseHtml: [preParseHtmlConf$1],
      parseElemsHtml: [parseHtmlConf$1],
      menus: [todoMenuConf],
      editorPlugin: withTodo,
  };

  /**
   * @description redo menu
   * @author wangfupeng
   */
  var RedoMenu = /** @class */ (function () {
      function RedoMenu() {
          this.title = t$2('undo.redo');
          this.iconSvg = REDO_SVG;
          this.tag = 'button';
      }
      RedoMenu.prototype.getValue = function (_editor) {
          return '';
      };
      RedoMenu.prototype.isActive = function (_editor) {
          return false;
      };
      RedoMenu.prototype.isDisabled = function (editor) {
          if (editor.selection == null) {
              return true;
          }
          return false;
      };
      RedoMenu.prototype.exec = function (editor, _value) {
          if (typeof editor.redo === 'function') {
              editor.redo();
          }
      };
      return RedoMenu;
  }());

  /**
   * @description undo menu
   * @author wangfupeng
   */
  var UndoMenu = /** @class */ (function () {
      function UndoMenu() {
          this.title = t$2('undo.undo');
          this.iconSvg = UNDO_SVG;
          this.tag = 'button';
      }
      UndoMenu.prototype.getValue = function (_editor) {
          return '';
      };
      UndoMenu.prototype.isActive = function (_editor) {
          return false;
      };
      UndoMenu.prototype.isDisabled = function (editor) {
          if (editor.selection == null) {
              return true;
          }
          return false;
      };
      UndoMenu.prototype.exec = function (editor, _value) {
          if (typeof editor.undo === 'function') {
              editor.undo();
          }
      };
      return UndoMenu;
  }());

  /**
   * @description menu entry
   * @author wangfupeng
   */
  var undoMenuConf = {
      key: 'undo',
      factory: function () {
          return new UndoMenu();
      },
  };
  var redoMenuConf = {
      key: 'redo',
      factory: function () {
          return new RedoMenu();
      },
  };

  /**
   * @description undo redo
   * @author wangfupeng
   */
  var undoRedo = {
      menus: [redoMenuConf, undoMenuConf],
  };

  /**
   * @description basic index
   * @author wangfupeng
   */
  var basicModules = [
      // text style
      textStyle,
      color,
      fontSizeAndFamily,
      // elem style
      indent,
      justify,
      lineHeight,
      // void node
      image,
      image$1,
      // inline node
      emotion,
      link,
      // block node —— 【注意】要放在 void-node 和 inline-node 后面！！！
      codeBlockModule,
      blockquote,
      header,
      p,
      todo,
      // command
      formatPainter,
      undoRedo,
      fullScreen,
      commonModule,
  ];

  /**
   * @description i18n en
   * @author wangfupeng
   */
  var enResources$4 = {
      listModule: {
          unOrderedList: 'Unordered list',
          orderedList: 'Ordered list',
      },
  };

  /**
   * @description i18n zh-CN
   * @author wangfupeng
   */
  var zhResources$4 = {
      listModule: {
          unOrderedList: '无序列表',
          orderedList: '有序列表',
      },
  };

  /**
   * @description i18n entry
   * @author wangfupeng
   */
  i18nAddResources('en', enResources$4);
  i18nAddResources('zh-CN', zhResources$4);

  /**
   * @description maps
   * @author wangfupeng
   */
  var ELEM_TO_EDITOR = new WeakMap();

  /**
   * 获取第一个 text-node 的颜色
   * @param elem elem
   */
  function getListItemColor(elem) {
      var children = elem.children || [];
      var length = children.length;
      if (length === 0) {
          return '';
      }
      var firstTextNode;
      for (var i = 0; i < length; i += 1) {
          if (firstTextNode) {
              break;
          } // 已找到第一个 text-node ，则退出
          var child = children[i];
          if (distExports$1.Text.isText(child)) {
              firstTextNode = child;
          }
      }
      if (firstTextNode == null) {
          return '';
      }
      return firstTextNode.color || '';
  }

  /**
   * @description table menu helpers
   * @author wangfupeng
   */
  /**
   * 获取上一个同一 level 的 list item
   * @param editor 编辑器实例
   * @param elem elem
   */
  function getBrotherListNodeByLevel(editor, elem, level) {
      var type = elem.type, otherProps = __rest(elem
      // level 可能是 退格前的值,所以这里需要判断
      , ["type"]);
      // level 可能是 退格前的值,所以这里需要判断
      var elemLevel = level !== undefined ? level : otherProps.level || 0;
      var path = DomEditor.findPath(editor, elem);
      var brotherPath = path;
      // eslint-disable-next-line no-constant-condition
      while (true) {
          if (brotherPath.length === 0 || path[path.length - 1] === 0) {
              return null; // 已经是最后一个节点或没有找到有效的前一个 list 节点
          }
          brotherPath = distExports$1.Path.previous(brotherPath);
          var brotherEntry = distExports$1.Editor.node(editor, brotherPath);
          if (!brotherEntry) {
              return null; // 没有找到有效的前一个节点
          }
          var _a = __read(brotherEntry, 1), brotherElem = _a[0];
          var _b = brotherElem.level, brotherLevel = _b === void 0 ? 0 : _b;
          var brotherType = DomEditor.getNodeType(brotherElem);
          // 验证兄弟节点是否是期望的类型和层级
          if (brotherType !== type) {
              return null;
          }
          if (brotherLevel === elemLevel) {
              return brotherElem;
          }
      }
  }
  function hasSameOrderWithBrother(editor, elem, level) {
      var brotherElem = getBrotherListNodeByLevel(editor, elem, level);
      return brotherElem ? brotherElem.ordered === elem.ordered : false;
  }

  /**
   * @description to html
   * @author wangfupeng
   */
  /**
   * 当前 list-item 前面需要拼接几个 <ol> 或 <ul>
   * @param elem elem
   */
  function getStartContainerTagNumber(elem) {
      var editor = ELEM_TO_EDITOR.get(elem);
      if (editor == null) {
          return 0;
      }
      var _a = elem, type = _a.type, _b = _a.ordered, ordered = _b === void 0 ? false : _b, _c = _a.level, level = _c === void 0 ? 0 : _c;
      var path = DomEditor.findPath(editor, elem);
      if (path[0] === 0) {
          // list-item 是第一个元素，再往前没有了。需要拼接 <ol> 或 <ul>
          return level + 1;
      }
      // 获取上一个 elem
      var prevPath = distExports$1.Path.previous(path);
      var prevEntry = distExports$1.Editor.node(editor, prevPath);
      if (!prevEntry) {
          return 0;
      }
      var _d = __read(prevEntry, 1), prevElem = _d[0];
      var prevType = DomEditor.getNodeType(prevElem);
      if (prevType !== type) {
          // 上一个 elem 不是 list-item ，需要拼接 <ol> 或 <ul>
          return level + 1;
      }
      // 上一个 elem 是 list-item
      var _e = prevElem, _f = _e.ordered, prevOrdered = _f === void 0 ? false : _f, _g = _e.level, prevLevel = _g === void 0 ? 0 : _g;
      if (prevLevel < level) {
          // 上一个 level 小于当前 level ，需要拼接 <ol> 或 <ul>
          return level - prevLevel;
      }
      if (prevLevel > level) {
          // 此处需要看上一个同级兄弟节点 ordered 是否一致，如果一致则不需要拼接，否则需要拼接
          return hasSameOrderWithBrother(editor, elem) ? 0 : 1;
      }
      if (prevLevel === level) {
          // 上一个 level 等于当前 level
          if (prevOrdered === ordered) {
              // ordered 一致，则不需要拼接 <ol> 或 <ul>
              return 0;
          }
          /// ordered 不一致，则需要拼接 <ol> 或 <ul>
          return 1;
      }
      // 其他情况
      return 0;
  }
  /**
   * 当前 list-item 后面面需要拼接几个 </ol> 或 </ul>
   * @param elem elem
   */
  function getEndContainerTagNumber(elem) {
      var editor = ELEM_TO_EDITOR.get(elem);
      if (editor == null) {
          return 0;
      }
      var _a = elem, type = _a.type, _b = _a.ordered, ordered = _b === void 0 ? false : _b, _c = _a.level, level = _c === void 0 ? 0 : _c;
      var path = DomEditor.findPath(editor, elem);
      if (path[0] === editor.children.length - 1) {
          // list-item 是最后一个元素，再往后没有了。需要拼接 </ol> 或 </ul>
          return level + 1;
      }
      // 获取下一个 elem
      var nextPath = distExports$1.Path.next(path);
      var nextEntry = distExports$1.Editor.node(editor, nextPath);
      if (!nextEntry) {
          return 0;
      }
      var _d = __read(nextEntry, 1), nextElem = _d[0];
      var nextType = DomEditor.getNodeType(nextElem);
      if (nextType !== type) {
          // 下一个 elem 不是 list-item ，需要拼接 <ol> 或 <ul>
          return level + 1;
      }
      // 下一个 elem 是 list-item
      var _e = nextElem, _f = _e.ordered, nextOrdered = _f === void 0 ? false : _f, _g = _e.level, nextLevel = _g === void 0 ? 0 : _g;
      if (nextLevel < level) {
          // 下一个 level 小于当前 level，此处需要看上一个同级兄弟节点 ordered 是否一致，如果一致则不需要拼接，否则需要拼接
          if (hasSameOrderWithBrother(editor, nextElem)) {
              // ordered 一致，则不需要额外拼接 </ol> 或 </ul>
              return level - nextLevel;
          }
          // ordered 不一致，则需要额外拼接 </ol> 或 </ul>
          return level - nextLevel + 1;
      }
      if (nextLevel > level) {
          // 下一个 level 大于当前 level ，不需要拼接 </ol> 或 </ul>
          return 0;
      }
      if (nextLevel === level) {
          // 下一个 level 等于当前 level
          if (nextOrdered === ordered) {
              // ordered 一致，则不需要拼接 </ol> 或 </ul>
              return 0;
          }
          /// ordered 不一致，则需要拼接 </ol> 或 </ul>
          return 1;
      }
      // 其他情况
      return 0;
  }
  // ol ul 栈
  var CONTAINER_TAG_STACK = [];
  function elemToHtml(elem, childrenHtml) {
      var startContainerStr = '';
      var endContainerStr = '';
      var _a = elem.ordered, ordered = _a === void 0 ? false : _a;
      var containerTag = ordered ? 'ol' : 'ul';
      // 前面需要拼接几个 <ol> 或 <ul>
      var startContainerTagNumber = getStartContainerTagNumber(elem);
      if (startContainerTagNumber > 0) {
          for (var i = 0; i < startContainerTagNumber; i += 1) {
              startContainerStr += "<".concat(containerTag, ">"); // 记录 start container tag ，如 `<ul>`
              CONTAINER_TAG_STACK.push(containerTag); // tag 压栈
          }
      }
      // 后面需要拼接几个 </ol> 或 </ul>
      var endContainerTagNumber = getEndContainerTagNumber(elem);
      if (endContainerTagNumber > 0) {
          for (var i = 0; i < endContainerTagNumber; i += 1) {
              var tag = CONTAINER_TAG_STACK.pop(); // tag 从栈中获取
              endContainerStr += "</".concat(tag, ">"); // 记录 end container tag ，如 `</ul>`
          }
      }
      // 获取前缀颜色
      var prefixColor = getListItemColor(elem);
      var colorStyle = prefixColor ? " style=\"color:".concat(prefixColor, "\"") : '';
      return {
          html: "<li".concat(colorStyle, ">").concat(childrenHtml, "</li>"),
          prefix: startContainerStr,
          suffix: endContainerStr,
      };
  }
  var listItemToHtmlConf = {
      type: 'list-item',
      elemToHtml: elemToHtml,
  };

  /**
   * @description icon svg
   * @author wangfupeng
   */
  /**
   * 【注意】svg 字符串的长度 ，否则会导致代码体积过大
   * 尽量选择 https://www.iconfont.cn/collections/detail?spm=a313x.7781069.0.da5a778a4&cid=20293
   * 找不到再从 iconfont.com 搜索
   */
  // 无序列表
  var BULLETED_LIST_SVG = '<svg viewBox="0 0 1024 1024"><path d="M384 64h640v128H384V64z m0 384h640v128H384v-128z m0 384h640v128H384v-128zM0 128a128 128 0 1 1 256 0 128 128 0 0 1-256 0z m0 384a128 128 0 1 1 256 0 128 128 0 0 1-256 0z m0 384a128 128 0 1 1 256 0 128 128 0 0 1-256 0z"></path></svg>';
  // 有序列表
  var NUMBERED_LIST_SVG = '<svg viewBox="0 0 1024 1024"><path d="M384 832h640v128H384z m0-384h640v128H384z m0-384h640v128H384zM192 0v256H128V64H64V0zM128 526.016v50.016h128v64H64v-146.016l128-60V384H64v-64h192v146.016zM256 704v320H64v-64h128v-64H64v-64h128v-64H64v-64z"></path></svg>';

  /**
   * @description base menu
   * @author wangfupeng
   */
  var BaseMenu = /** @class */ (function () {
      function BaseMenu() {
          this.type = 'list-item';
          this.tag = 'button';
      }
      BaseMenu.prototype.getListNode = function (editor) {
          var type = this.type;
          return DomEditor.getSelectedNodeByType(editor, type);
      };
      BaseMenu.prototype.getValue = function (_editor) {
          return '';
      };
      BaseMenu.prototype.isActive = function (editor) {
          var node = this.getListNode(editor);
          if (node == null) {
              return false;
          }
          var _a = node.ordered, ordered = _a === void 0 ? false : _a;
          return ordered === this.ordered;
      };
      BaseMenu.prototype.isDisabled = function (editor) {
          if (editor.selection == null) {
              return true;
          }
          var selectedElems = DomEditor.getSelectedElems(editor);
          var notMatch = selectedElems.some(function (elem) {
              if (distExports$1.Editor.isVoid(editor, elem) && distExports$1.Editor.isBlock(editor, elem)) {
                  return true;
              }
              var type = elem.type;
              if (['pre', 'code', 'table'].includes(type)) {
                  return true;
              }
              return false;
          });
          if (notMatch) {
              return true;
          }
          return false;
      };
      BaseMenu.prototype.exec = function (editor, _value) {
          var active = this.isActive(editor);
          if (active) {
              // 如果当前 active ，则转换为 p 标签
              distExports$1.Transforms.setNodes(editor, {
                  type: 'paragraph',
                  // @ts-ignore
                  ordered: undefined,
                  level: undefined,
              });
          }
          else {
              // 否则，转换为 list-item
              distExports$1.Transforms.setNodes(editor, {
                  type: 'list-item',
                  ordered: this.ordered, // 有序/无序
                  indent: undefined,
              });
          }
      };
      return BaseMenu;
  }());

  /**
   * @description bulleted list menu
   * @author wangfupeng
   */
  var BulletedListMenu = /** @class */ (function (_super) {
      __extends(BulletedListMenu, _super);
      function BulletedListMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.ordered = false;
          _this.title = t$2('listModule.unOrderedList');
          _this.iconSvg = BULLETED_LIST_SVG;
          return _this;
      }
      return BulletedListMenu;
  }(BaseMenu));

  /**
   * @description numbered list menu
   * @author wangfupeng
   */
  var NumberedListMenu = /** @class */ (function (_super) {
      __extends(NumberedListMenu, _super);
      function NumberedListMenu() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.ordered = true;
          _this.title = t$2('listModule.orderedList');
          _this.iconSvg = NUMBERED_LIST_SVG;
          return _this;
      }
      return NumberedListMenu;
  }(BaseMenu));

  /**
   * @description menu entry
   * @author wangfupeng
   */
  var bulletedListMenuConf = {
      key: 'bulletedList',
      factory: function () {
          return new BulletedListMenu();
      },
  };
  var numberedListMenuConf = {
      key: 'numberedList',
      factory: function () {
          return new NumberedListMenu();
      },
  };

  /**
   * @description DOM 操作
   * @author wangfupeng
   */
  if (append) {
      $$1.fn.append = append;
  }
  // if (on) $.fn.on = on
  // if (focus) $.fn.focus = focus
  if (attr) {
      $$1.fn.attr = attr;
  }
  // if (val) $.fn.val = val
  // if (html) $.fn.html = html
  if (parent) {
      $$1.fn.parent = parent;
  }
  /**
   * 获取 tagName lower-case
   * @param $elem $elem
   */
  function getTagName$2($elem) {
      if ($elem.length) {
          return $elem[0].tagName.toLowerCase();
      }
      return '';
  }

  /**
   * @description parse elem html
   * @author wangfupeng
   */
  /**
   * 获取 ordered
   * @param $elem list $elem
   */
  function getOrdered($elem) {
      var $list = $elem.parent();
      var listTagName = getTagName$2($list);
      if (listTagName === 'ol') {
          return true;
      }
      return false;
  }
  /**
   * 获取 level
   * @param $elem list $elem
   */
  function getLevel($elem) {
      var level = 0;
      var $cur = $elem.parent();
      var tagName = getTagName$2($cur);
      while (tagName === 'ul' || tagName === 'ol') {
          $cur = $cur.parent();
          tagName = getTagName$2($cur);
          level += 1;
      }
      return level - 1;
  }
  function parseItemHtml(elem, children, editor) {
      var $elem = $$1(elem);
      children = children.filter(function (child) {
          if (distExports$1.Text.isText(child)) {
              return true;
          }
          if (editor.isInline(child)) {
              return true;
          }
          return false;
      });
      // 无 children ，则用纯文本
      if (children.length === 0) {
          children = [{ text: $elem.text().replace(/\s+/gm, ' ') }];
      }
      var ordered = getOrdered($elem);
      var level = getLevel($elem);
      return {
          type: 'list-item',
          ordered: ordered,
          level: level,
          // @ts-ignore
          children: children,
      };
  }
  var parseItemHtmlConf = {
      selector: 'li:not([data-w-e-type])', // data-w-e-type 属性，留给自定义元素，保证扩展性
      parseElemHtml: parseItemHtml,
  };
  function parseListHtml(_elem, children, _editor) {
      // @ts-ignore flatten 因为可能有 ul/ol 嵌套，重要！！！
      return children.flat(Infinity);
  }
  var parseListHtmlConf = {
      selector: 'ul:not([data-w-e-type]),ol:not([data-w-e-type])', // data-w-e-type 属性，留给自定义元素，保证扩展性
      parseElemHtml: parseListHtml,
  };

  /**
   * @description editor 插件，重写 editor API
   * @author wangfupeng
   */
  /**
   * 获取选中的 top elems
   * @param editor editor
   */
  function getTopSelectedElemsBySelection(editor) {
      return distExports$1.Editor.nodes(editor, {
          at: editor.selection || undefined,
          match: function (n) { return DomEditor.findPath(editor, n).length === 1; }, // 只匹配顶级元素
      });
  }
  function withList(editor) {
      var deleteBackward = editor.deleteBackward, handleTab = editor.handleTab, normalizeNode = editor.normalizeNode, insertBreak = editor.insertBreak;
      var newEditor = editor;
      // 重写 insertBreak - 空 list 点击回车时删除该空 list
      newEditor.insertBreak = function () {
          var _a = __read(distExports$1.Editor.nodes(editor, {
              match: function (n) { return DomEditor.checkNodeType(n, 'list-item'); },
              universal: true,
          }), 1), nodeEntry = _a[0];
          if (!nodeEntry) {
              return insertBreak();
          }
          var listElem = nodeEntry[0];
          if (listElem.children[0].text === '') {
              distExports$1.Transforms.setNodes(newEditor, {
                  type: 'paragraph',
                  // @ts-ignore
                  ordered: undefined,
                  level: undefined,
              });
              return;
          }
          return insertBreak();
      };
      // 重写 deleteBackward - 降低 level 或者转换为 p 元素
      newEditor.deleteBackward = function (unit) {
          var selection = newEditor.selection;
          if (selection == null) {
              deleteBackward(unit);
              return;
          }
          if (distExports$1.Range.isExpanded(selection)) {
              deleteBackward(unit);
              return;
          }
          var listItemElem = DomEditor.getSelectedNodeByType(newEditor, 'list-item');
          if (listItemElem == null) {
              // 未匹配到 list-item
              deleteBackward(unit);
              return;
          }
          if (selection.focus.offset === 0) {
              // 选中了当前 list-item 文本的开头，此时按删除键，应该降低 level 或转换为 p 元素
              var _a = listItemElem, _b = _a.level, level = _b === void 0 ? 0 : _b, _c = _a.ordered, ordered = _c === void 0 ? false : _c;
              if (level > 0) {
                  // 如果有兄弟节点，则判断 ordered 是否一致，不一致需要切换 ordered
                  var brotherElem = getBrotherListNodeByLevel(editor, listItemElem, level - 1);
                  if (brotherElem && brotherElem.ordered !== ordered) {
                      distExports$1.Transforms.setNodes(newEditor, { level: level - 1, ordered: !ordered });
                  }
                  else {
                      distExports$1.Transforms.setNodes(newEditor, { level: level - 1 });
                  }
              }
              else {
                  // 转换为 p 元素
                  distExports$1.Transforms.setNodes(newEditor, {
                      type: 'paragraph',
                      // @ts-ignore
                      ordered: undefined,
                      level: undefined,
                  });
              }
              return;
          }
          // 其他情况
          deleteBackward(unit);
      };
      // 重写 tab - 当选中 list-item 文本开头时，增加 level
      newEditor.handleTab = function () {
          var e_1, _a, e_2, _b;
          var selection = newEditor.selection;
          if (selection == null) {
              handleTab();
              return;
          }
          // 选区是合并的，判断单个 list-item 即可
          if (distExports$1.Range.isCollapsed(selection)) {
              var listItemElem = DomEditor.getSelectedNodeByType(newEditor, 'list-item');
              if (listItemElem == null) {
                  // 未匹配到 list-item
                  handleTab();
                  return;
              }
              if (selection.focus.offset === 0) {
                  // 选中了当前 list-item 文本的开头，此时按 tab 应该增加 level
                  var _c = listItemElem.level, level = _c === void 0 ? 0 : _c;
                  distExports$1.Transforms.setNodes(newEditor, { level: level + 1 });
                  return;
              }
          }
          // 选区是展开的，要判断多个 list-item
          if (distExports$1.Range.isExpanded(selection)) {
              var listItemNum = 0; // 选中的 list-item 有几个
              var hasOtherElem = false; // 是否有其他元素
              try {
                  for (var _d = __values(getTopSelectedElemsBySelection(newEditor)), _e = _d.next(); !_e.done; _e = _d.next()) {
                      var entry = _e.value;
                      var _f = __read(entry, 1), elem = _f[0];
                      var type = DomEditor.getNodeType(elem);
                      if (type === 'list-item') {
                          listItemNum += 1;
                      }
                      else {
                          hasOtherElem = true;
                      }
                  }
              }
              catch (e_1_1) { e_1 = { error: e_1_1 }; }
              finally {
                  try {
                      if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                  }
                  finally { if (e_1) throw e_1.error; }
              }
              if (hasOtherElem || listItemNum <= 1) {
                  // 选中了其他元素，或者只选中一个 list-item ，则执行默认行为
                  handleTab();
                  return;
              }
              try {
                  // 未选中其他元素，且选中多个 list-item ，则增加 level
                  for (var _g = __values(getTopSelectedElemsBySelection(newEditor)), _h = _g.next(); !_h.done; _h = _g.next()) {
                      var entry = _h.value;
                      var _j = __read(entry, 2), elem = _j[0], path = _j[1];
                      var _k = elem.level, level = _k === void 0 ? 0 : _k;
                      distExports$1.Transforms.setNodes(newEditor, { level: level + 1 }, { at: path });
                  }
              }
              catch (e_2_1) { e_2 = { error: e_2_1 }; }
              finally {
                  try {
                      if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                  }
                  finally { if (e_2) throw e_2.error; }
              }
              return;
          }
          // 其他情况
          handleTab();
      };
      // 兼容之前的 JSON 格式 `numbered-list` 和 `bulleted-list` （之前的 list 没有嵌套功能）
      newEditor.normalizeNode = function (_a) {
          var _b = __read(_a, 2), node = _b[0], path = _b[1];
          var type = DomEditor.getNodeType(node);
          if (type === 'bulleted-list' || type === 'numbered-list') {
              distExports$1.Transforms.unwrapNodes(newEditor, { at: path });
          }
          // 执行默认行为
          return normalizeNode([node, path]);
      };
      return newEditor;
  }

  /**
   * @description render list elem
   * @author wangfupeng
   */
  /**
   * 无序列表：根据 level 获取的前置符号
   * @param level 层级
   */
  function genPreSymbol(level) {
      if (level === void 0) { level = 0; }
      var s = '';
      switch (level) {
          case 0:
              s = '•'; // 第一层级
              break;
          case 1:
              s = '◦'; // 第一层级
              break;
          case 2:
              s = '▪'; // 第三层级
              break;
          default:
              s = '▪'; // 其他层级
      }
      return s;
  }
  /**
   * 有序列表：获取前缀 number
   * @param editor editor
   * @param elem listItem elem
   */
  function getOrderedItemNumber(editor, elem) {
      var _a = elem, type = _a.type, _b = _a.level, level = _b === void 0 ? 0 : _b, _c = _a.ordered, ordered = _c === void 0 ? false : _c;
      var num = 1; // 默认值 1
      var curElem = elem;
      var curPath = DomEditor.findPath(editor, curElem);
      // 第一个元素，直接返回 1
      if (curPath[0] === 0) {
          return 1;
      }
      while (curPath[0] > 0) {
          var prevPath = distExports$1.Path.previous(curPath);
          var prevEntry = distExports$1.Editor.node(editor, prevPath);
          if (prevEntry == null) {
              break;
          }
          var prevElem = prevEntry[0]; // 上一个节点
          var _d = prevElem.level, prevLevel = _d === void 0 ? 0 : _d, prevType = prevElem.type, prevOrdered = prevElem.ordered;
          // type 不一致，退出循环，不再累加 num
          if (prevType !== type) {
              break;
          }
          // prevLevel 更小，退出循环，不再累加 num
          if (prevLevel < level) {
              break;
          }
          if (prevLevel === level) {
              // level 一样，如果 ordered 不一样，则退出循环，不再累加 num
              if (prevOrdered !== ordered) {
                  break;
              }
              else {
                  // level 一样，order 一样，则累加 num
                  num += 1;
              }
          }
          // prevLevel 更大，不累加 num ，继续向前
          curElem = prevElem;
          curPath = prevPath;
      }
      return num;
  }
  function renderListElem(elemNode, children, editor) {
      ELEM_TO_EDITOR.set(elemNode, editor); // 记录 elem 和 editor 关系，elem-to-html 时要用
      var _a = elemNode, _b = _a.level, level = _b === void 0 ? 0 : _b, _c = _a.ordered, ordered = _c === void 0 ? false : _c;
      // 根据 level 增加 margin-left
      var listStyle = {
          margin: "5px 0 5px ".concat(level * 20, "px"),
          display: 'flex',
          alignItems: 'flex-start',
      };
      // list-item 前缀
      var prefix = '';
      if (ordered) {
          // 有序列表：获取前缀 number
          var orderedNumber = getOrderedItemNumber(editor, elemNode);
          prefix = "".concat(orderedNumber, ".");
      }
      else {
          // 无序列表：根据层级，使用不同的前缀符号
          prefix = genPreSymbol(level);
      }
      // 获取前缀颜色
      var prefixColor = getListItemColor(elemNode);
      var vnode = (jsx("div", { style: listStyle },
          jsx("span", { contentEditable: false, style: { marginRight: '0.5em', color: prefixColor }, "data-w-e-reserve": true }, prefix),
          jsx("span", { style: {
                  flex: '1',
                  wordBreak: 'break-word',
              } }, children)));
      return vnode;
  }
  var renderListItemConf = {
      type: 'list-item',
      renderElem: renderListElem,
  };

  /**
   * @description list module entry
   * @author wangfupeng
   */
  var list = {
      renderElems: [renderListItemConf],
      editorPlugin: withList,
      menus: [bulletedListMenuConf, numberedListMenuConf],
      elemsToHtml: [listItemToHtmlConf],
      parseElemsHtml: [parseListHtmlConf, parseItemHtmlConf],
  };

  /**
   * @description i18n en
   * @author wangfupeng
   */
  var enResources$3 = {
      tableModule: {
          modal: {
              border: 'Border',
              borderWidth: 'Width',
              bgColor: 'Back color',
              align: 'Text Align',
              ok: 'OK',
          },
          color: {
              default: 'Default color',
              clear: 'Clear back color',
          },
          borderStyle: {
              none: 'None',
              solid: 'Solid',
              dotted: 'Dotted',
              dashed: 'Dashed',
              double: 'Double',
              groove: 'Groove',
              ridge: 'Ridge',
              inset: 'Inset',
              outset: 'Outset',
          },
          deleteCol: 'Delete column',
          deleteRow: 'Delete row',
          deleteTable: 'Delete table',
          widthAuto: 'Width auto',
          insertCol: 'Insert column',
          insertRow: 'Insert row',
          insertTable: 'Insert table',
          header: 'Header',
          mergeCell: 'merge cell',
          splitCell: 'split cell',
          tableProperty: 'Table property',
          cellProperty: 'Cell property',
      },
  };

  /**
   * @description i18n zh-CN
   * @author wangfupeng
   */
  var zhResources$3 = {
      tableModule: {
          modal: {
              border: '边框',
              borderWidth: '宽度',
              bgColor: '背景色',
              align: '对齐方式',
              ok: '确定',
          },
          color: {
              default: '默认颜色',
              clear: '清除背景色',
          },
          borderStyle: {
              none: '无样式',
              solid: '实线',
              dotted: '点状虚线',
              dashed: '虚线',
              double: '双线',
              groove: '凹槽边框',
              ridge: '菱形边框',
              inset: '凹边框',
              outset: '凸边框',
          },
          deleteCol: '删除列',
          deleteRow: '删除行',
          deleteTable: '删除表格',
          widthAuto: '宽度自适应',
          insertCol: '插入列',
          insertRow: '插入行',
          insertTable: '插入表格',
          header: '表头',
          mergeCell: '合并单元格',
          splitCell: '拆分单元格',
          tableProperty: '表格属性',
          cellProperty: '单元格属性',
      },
  };

  /**
   * @description i18n entry
   * @author wangfupeng
   */
  i18nAddResources('en', enResources$3);
  i18nAddResources('zh-CN', zhResources$3);

  /**
   * @description to html
   * @author wangfupeng
   */
  function tableToHtml(elemNode, childrenHtml) {
      var _a = elemNode, _b = _a.width, width = _b === void 0 ? 'auto' : _b, columnWidths = _a.columnWidths, _c = _a.height, height = _c === void 0 ? 'auto' : _c;
      var cols = columnWidths === null || columnWidths === void 0 ? void 0 : columnWidths.map(function (colWidth) {
          return "<col width=".concat(colWidth, "></col>");
      }).join('');
      var colgroupStr = cols ? "<colgroup contentEditable=\"false\">".concat(cols, "</colgroup>") : '';
      return "<table style=\"width: ".concat(width, ";table-layout: fixed;height:").concat(height, "\">").concat(colgroupStr, "<tbody>").concat(childrenHtml, "</tbody></table>");
  }
  function tableRowToHtml(elem, childrenHtml) {
      return "<tr>".concat(childrenHtml, "</tr>");
  }
  function tableCellToHtml(cellNode, childrenHtml) {
      var _a = cellNode, _b = _a.colSpan, colSpan = _b === void 0 ? 1 : _b, _c = _a.rowSpan, rowSpan = _c === void 0 ? 1 : _c, _d = _a.isHeader, isHeader = _d === void 0 ? false : _d, _e = _a.width, width = _e === void 0 ? 'auto' : _e, _f = _a.hidden, hidden = _f === void 0 ? false : _f;
      var tag = isHeader ? 'th' : 'td';
      var style = hidden ? 'display:none' : '';
      return "<".concat(tag, " colSpan=\"").concat(colSpan, "\" rowSpan=\"").concat(rowSpan, "\" width=\"").concat(width, "\" style=\"").concat(style, "\">").concat(childrenHtml, "</").concat(tag, ">");
  }
  var tableToHtmlConf = {
      type: 'table',
      elemToHtml: tableToHtml,
  };
  var tableRowToHtmlConf = {
      type: 'table-row',
      elemToHtml: tableRowToHtml,
  };
  var tableCellToHtmlConf = {
      type: 'table-cell',
      elemToHtml: tableCellToHtml,
  };

  /**
   * @description icon svg
   * @author wangfupeng
   */
  /**
   * 【注意】svg 字符串的长度 ，否则会导致代码体积过大
   * 尽量选择 https://www.iconfont.cn/collections/detail?spm=a313x.7781069.0.da5a778a4&cid=20293
   * 找不到再从 iconfont.com 搜索
   */
  // 表格
  var TABLE_SVG = '<svg viewBox="0 0 1024 1024"><path d="M0 64v896h1024V64H0z m384 576v-192h256v192h-256z m256 64v192h-256v-192h256z m0-512v192h-256V192h256zM320 192v192H64V192h256z m-256 256h256v192H64v-192z m640 0h256v192h-256v-192z m0-64V192h256v192h-256zM64 704h256v192H64v-192z m640 192v-192h256v192h-256z"></path></svg>';
  // 垃圾桶（删除）
  var TRASH_SVG = '<svg viewBox="0 0 1024 1024"><path d="M826.8032 356.5312c-19.328 0-36.3776 15.6928-36.3776 35.0464v524.2624c0 19.328-16 34.56-35.328 34.56H264.9344c-19.328 0-35.5072-15.3088-35.5072-34.56V390.0416c0-19.328-14.1568-35.0464-33.5104-35.0464s-33.5104 15.6928-33.5104 35.0464V915.712c0 57.9328 44.6208 108.288 102.528 108.288H755.2c57.9328 0 108.0832-50.4576 108.0832-108.288V391.4752c-0.1024-19.2512-17.1264-34.944-36.48-34.944z" p-id="9577"></path><path d="M437.1712 775.7568V390.6048c0-19.328-14.1568-35.0464-33.5104-35.0464s-33.5104 15.616-33.5104 35.0464v385.152c0 19.328 14.1568 35.0464 33.5104 35.0464s33.5104-15.7184 33.5104-35.0464zM649.7024 775.7568V390.6048c0-19.328-17.0496-35.0464-36.3776-35.0464s-36.3776 15.616-36.3776 35.0464v385.152c0 19.328 17.0496 35.0464 36.3776 35.0464s36.3776-15.7184 36.3776-35.0464zM965.0432 217.0368h-174.6176V145.5104c0-57.9328-47.2064-101.76-104.6528-101.76h-350.976c-57.8304 0-105.3952 43.8528-105.3952 101.76v71.5264H54.784c-19.4304 0-35.0464 14.1568-35.0464 33.5104 0 19.328 15.616 33.5104 35.0464 33.5104h910.3616c19.328 0 35.0464-14.1568 35.0464-33.5104 0-19.3536-15.6928-33.5104-35.1488-33.5104z m-247.3728 0H297.3952V145.5104c0-19.328 18.2016-34.7648 37.4272-34.7648h350.976c19.1488 0 31.872 15.1296 31.872 34.7648v71.5264z"></path></svg>';
  // 表格 添加行
  var ADD_ROW_SVG = '<svg viewBox="0 0 1048 1024"><path d="M707.7888 521.0112h-147.456v-147.456H488.2432v147.456h-147.456v68.8128h147.456v147.456h72.0896v-147.456h147.456zM0 917.504V0h1048.576v917.504H0zM327.68 65.536H65.536v196.608H327.68V65.536z m327.68 0H393.216v196.608h262.144V65.536z m327.68 0h-262.144v196.608h262.144V65.536z m0 258.8672H65.536v462.0288H983.04V324.4032z"></path></svg>';
  // 表格 删除行
  var DEL_ROW_SVG = '<svg viewBox="0 0 1048 1024"><path d="M907.6736 586.5472L747.1104 425.984l163.84-163.84-78.6432-78.6432-163.84 163.84L507.904 186.7776 429.2608 262.144l163.84 163.84-167.1168 167.1168 78.6432 78.6432 167.1168-167.1168 160.5632 160.5632 75.3664-78.6432zM0 917.504V0h1048.576v917.504H0z m983.04-327.68h-22.9376l-65.536-65.536H983.04V327.68h-91.7504l65.536-65.536h26.2144V65.536H65.536v196.608h317.8496l65.536 65.536H65.536v196.608h380.1088l-65.536 65.536H65.536v196.608H983.04v-196.608z"></path></svg>';
  // 表格 添加列
  var ADD_COL_SVG = '<svg viewBox="0 0 1048 1024"><path d="M327.68 193.3312v186.7776H140.9024v91.7504H327.68v186.7776h88.4736V471.8592h190.0544V380.1088H416.1536V193.3312zM0 917.504V0h1048.576v917.504H0zM655.36 65.536H65.536v720.896H655.36V65.536z m327.68 0h-262.144v196.608h262.144V65.536z m0 262.144h-262.144v196.608h262.144V327.68z m0 262.144h-262.144v196.608h262.144v-196.608z"></path></svg>';
  // 表格 删除列
  var DEL_COL_SVG = '<svg viewBox="0 0 1048 1024"><path d="M327.68 510.976L393.216 445.44v-13.1072L327.68 366.7968V510.976z m327.68-78.4384l65.536-65.536V507.904L655.36 442.368v-9.8304z m393.216 484.9664V0H0v917.504h1048.576z m-65.536-131.072h-262.144v-52.4288l-13.1072 13.1072-52.4288-52.4288v91.7504H393.216v-91.7504l-52.4288 52.4288-13.1072-13.1072v52.4288H65.536V65.536H327.68v121.2416l36.0448-36.0448 29.4912 29.4912V62.2592h262.144V180.224l49.152-49.152 16.384 16.384V62.2592h262.144V786.432z m-294.912-108.1344l-160.5632-160.5632-167.1168 167.1168-78.6432-78.6432 167.1168-167.1168L288.3584 278.528l78.6432-78.6432 160.5632 160.5632 163.84-163.84 78.6432 78.6432-163.84 163.84 160.5632 160.5632-78.6432 78.6432z"></path></svg>';
  // 表头
  var TABLE_HEADER_SVG = '<svg viewBox="0 0 1024 1024"><path d="M704 128l-64 0L384 128 320 128 0 128l0 256 0 64 0 192 0 64 0 256 320 0 64 0 256 0 64 0 320 0 0-256 0-64L1024 448 1024 384 1024 128 704 128zM640 640 384 640 384 448l256 0L640 640zM64 448l256 0 0 192L64 640 64 448zM320 896 64 896l0-192 256 0L320 896zM640 896 384 896l0-192 256 0L640 896zM960 896l-256 0 0-192 256 0L960 896zM960 640l-256 0L704 448l256 0L960 640z"></path></svg>';
  // 宽度
  var FULL_WIDTH_SVG = '<svg viewBox="0 0 1228 1024"><path d="M862.514337 563.200461H404.581995v121.753478a13.311987 13.311987 0 0 1-6.655993 11.468789 10.23999 10.23999 0 0 1-12.083188-1.433599l-204.799795-179.199821a13.721586 13.721586 0 0 1 0-20.479979l204.799795-179.302221a10.23999 10.23999 0 0 1 12.185588-1.535998 13.209587 13.209587 0 0 1 6.553593 11.673588v115.097485h457.932342V319.693504a11.571188 11.571188 0 0 1 18.841582-10.239989l204.799795 179.19982a13.721586 13.721586 0 0 1 0 20.47998l-204.799795 179.199821a10.23999 10.23999 0 0 1-12.185588 1.535998 13.311987 13.311987 0 0 1-6.655994-11.571188V563.200461zM136.499064 14.951409v993.893406a15.257585 15.257585 0 0 1-15.155185 15.052785H15.155185A15.155185 15.155185 0 0 1 0 1008.844815V14.951409a15.257585 15.257585 0 0 1 15.155185-15.052785h106.086294a15.155185 15.155185 0 0 1 15.257585 15.155185zM1228.798771 14.951409v993.893406a15.257585 15.257585 0 0 1-15.155185 15.052785h-106.188693a15.155185 15.155185 0 0 1-15.155185-15.052785V14.951409a15.257585 15.257585 0 0 1 15.155185-15.052785h106.086293A15.155185 15.155185 0 0 1 1228.798771 15.053809z"></path></svg>';
  // 合并单元格
  var MERGE_CELL_SVG = '<svg viewBox="0 0 1024 1024"><path d="M482.2 508.4 331.3 389c-3-2.4-7.3-.2-7.3 3.6V478H184V184h204v128c0 2.2 1.8 4 4 4h60c2.2 0 4-1.8 4-4V144c0-15.5-12.5-28-28-28H144c-15.5 0-28 12.5-28 28v736c0 15.5 12.5 28 28 28h284c15.5 0 28-12.5 28-28V712c0-2.2-1.8-4-4-4h-60c-2.2 0-4 1.8-4 4v128H184V546h140v85.4c0 3.8 4.4 6 7.3 3.6l150.9-119.4c2.4-1.8 2.4-5.4 0-7.2zM880 116H596c-15.5 0-28 12.5-28 28v168c0 2.2 1.8 4 4 4h60c2.2 0 4-1.8 4-4V184h204v294H700v-85.4c0-3.8-4.3-6-7.3-3.6l-151 119.4c-2.3 1.8-2.3 5.3 0 7.1l151 119.5c2.9 2.3 7.3.2 7.3-3.6V546h140v294H636V712c0-2.2-1.8-4-4-4h-60c-2.2 0-4 1.8-4 4v168c0 15.5 12.5 28 28 28h284c15.5 0 28-12.5 28-28V144c0-15.5-12.5-28-28-28z"/></svg>';
  // 拆分单元格
  var SPLIT_CELL_SVG = '<svg viewBox="0 0 1024 1024"><path d="M362.667 494.933v53.334l25.6-25.6zm0-241.066L460.8 352V78.933H57.6v98.134h305.067zm0 535.466v57.6H57.6v98.134h403.2V691.2zM661.333 494.933v53.334l-25.6-25.6zm0-241.066L563.2 352V78.933h403.2v98.134H661.333zm0 535.466v57.6H966.4v98.134H563.2V691.2z"/><path d="M753.067 341.333 693.333 281.6 512 460.8 330.667 281.6l-59.734 59.733 181.334 181.334L270.933 704l59.734 59.733L512 582.4l181.333 181.333L753.067 704 571.733 522.667z"/></svg>';
  // 表格属性
  var TABLE_PROPERTY_SVG = '<svg viewBox="0 0 20 20"><path d="M8 2v5h4V2h1v5h5v1h-5v4h.021l-.172.351-1.916.28-.151.027c-.287.063-.54.182-.755.341L8 13v5H7v-5H2v-1h5V8H2V7h5V2h1zm4 6H8v4h4V8z" opacity=".6"/><path d="m15.5 11.5 1.323 2.68 2.957.43-2.14 2.085.505 2.946L15.5 18.25l-2.645 1.39.505-2.945-2.14-2.086 2.957-.43L15.5 11.5zM17 1a2 2 0 0 1 2 2v9.475l-.85-.124-.857-1.736a2.048 2.048 0 0 0-.292-.44L17 3H3v14h7.808l.402.392L10.935 19H3a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h14z"/></svg>';
  // 单元格属性
  var CELL_PROPERTY_SVG = '<svg viewBox="0 0 20 20"><path d="m11.105 18-.17 1H2.5A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1h15A1.5 1.5 0 0 1 19 2.5v9.975l-.85-.124-.15-.302V8h-5v4h.021l-.172.351-1.916.28-.151.027c-.287.063-.54.182-.755.341L8 13v5h3.105zM2 12h5V8H2v4zm10-4H8v4h4V8zM2 2v5h5V2H2zm0 16h5v-5H2v5zM13 7h5V2h-5v5zM8 2v5h4V2H8z" opacity=".6"/><path d="m15.5 11.5 1.323 2.68 2.957.43-2.14 2.085.505 2.946L15.5 18.25l-2.645 1.39.505-2.945-2.14-2.086 2.957-.43L15.5 11.5zM13 6a1 1 0 0 1 1 1v3.172a2.047 2.047 0 0 0-.293.443l-.858 1.736-1.916.28-.151.027A1.976 1.976 0 0 0 9.315 14H7a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h6zm-1 2H8v4h4V8z"/></svg>';
  // 左对齐
  var JUSTIFY_LEFT_SVG$1 = '<svg viewBox="0 0 1024 1024"><path d="M768 793.6v102.4H51.2v-102.4h716.8z m204.8-230.4v102.4H51.2v-102.4h921.6z m-204.8-230.4v102.4H51.2v-102.4h716.8zM972.8 102.4v102.4H51.2V102.4h921.6z"></path></svg>';
  // 右对齐
  var JUSTIFY_RIGHT_SVG = '<svg viewBox="0 0 1024 1024"><path d="M972.8 793.6v102.4H256v-102.4h716.8z m0-230.4v102.4H51.2v-102.4h921.6z m0-230.4v102.4H256v-102.4h716.8zM972.8 102.4v102.4H51.2V102.4h921.6z"></path></svg>';
  // 居中对齐
  var JUSTIFY_CENTER_SVG = '<svg viewBox="0 0 1024 1024"><path d="M870.4 793.6v102.4H153.6v-102.4h716.8z m102.4-230.4v102.4H51.2v-102.4h921.6z m-102.4-230.4v102.4H153.6v-102.4h716.8zM972.8 102.4v102.4H51.2V102.4h921.6z"></path></svg>';
  // 两端对齐
  var JUSTIFY_JUSTIFY_SVG = '<svg viewBox="0 0 1024 1024"><path d="M0 64h1024v128H0z m0 192h1024v128H0z m0 192h1024v128H0z m0 192h1024v128H0z m0 192h1024v128H0z"></path></svg>';
  // 清空（颜色）
  var CLEAN_SVG = '<svg viewBox="0 0 1024 1024"><path d="M236.8 128L896 787.2V128H236.8z m614.4 704L192 172.8V832h659.2zM192 64h704c38.4 0 64 25.6 64 64v704c0 38.4-25.6 64-64 64H192c-38.4 0-64-25.6-64-64V128c0-38.4 25.6-64 64-64z"></path></svg>';

  var DEFAULT_WITH_TABLE_OPTIONS = {
      blocks: {
          td: 'table-cell',
          th: 'table-cell',
          content: 'paragraph',
          tr: 'table-row',
          table: 'table',
          tbody: 'table-body',
          // tfoot: "table-footer",
          // thead: "table-head",
      },
  };

  function isElement(node) {
      return !distExports$1.Editor.isEditor(node) && distExports$1.Element.isElement(node) && 'type' in node;
  }
  /** @returns a `NodeMatch` function which is used to match the elements of a specific `type`. */
  function isOfType(editor) {
      var types = [];
      for (var _i = 1; _i < arguments.length; _i++) {
          types[_i - 1] = arguments[_i];
      }
      var options = DEFAULT_WITH_TABLE_OPTIONS;
      var elementTypes = types.map(function (type) { var _a; return (_a = options === null || options === void 0 ? void 0 : options.blocks) === null || _a === void 0 ? void 0 : _a[type]; });
      return function (node) { return isElement(node) && elementTypes.includes(node.type); };
  }

  /**
   * Determines whether two paths belong to the same types by checking
   * if they share a common ancestor node of type table
   */
  function hasCommon(editor, _a) {
      var _b = __read(_a, 2), path = _b[0], another = _b[1];
      var types = [];
      for (var _i = 2; _i < arguments.length; _i++) {
          types[_i - 2] = arguments[_i];
      }
      var _c = __read(distExports$1.Node.common(editor, path, another), 2), node = _c[0], commonPath = _c[1];
      if (isOfType.apply(void 0, __spreadArray([editor], __read(types), false))(node, commonPath)) {
          return true;
      }
      // Warning: returns the common ancestor but will return `undefined` if the
      // `commonPath` is equal to the specified types path
      return !!distExports$1.Editor.above(editor, {
          match: isOfType.apply(void 0, __spreadArray([editor], __read(types), false)),
          at: commonPath,
      });
  }

  /** Generates a matrix for each table section (`thead`, `tbody`, `tfoot`) */
  function matrices(editor, options) {
      var _a, table, _b, tablePath, _c, _d, _e, path, matrix, _f, _g, _h, trPath, e_1_1;
      var e_1, _j, e_2, _k;
      if (options === void 0) { options = {}; }
      return __generator(this, function (_l) {
          switch (_l.label) {
              case 0:
                  _a = __read(distExports$1.Editor.nodes(editor, {
                      match: isOfType(editor, 'table'),
                      at: options.at,
                  }), 1), table = _a[0];
                  if (!table) {
                      return [2 /*return*/, []];
                  }
                  _b = __read(table, 2), tablePath = _b[1];
                  _l.label = 1;
              case 1:
                  _l.trys.push([1, 6, 7, 8]);
                  _c = __values(distExports$1.Editor.nodes(editor, {
                      // match: isOfType(editor, "thead", "tbody", "tfoot"),
                      match: isOfType(editor, 'table'),
                      at: tablePath,
                  })), _d = _c.next();
                  _l.label = 2;
              case 2:
                  if (!!_d.done) return [3 /*break*/, 5];
                  _e = __read(_d.value, 2), path = _e[1];
                  matrix = [];
                  try {
                      for (_f = (e_2 = void 0, __values(distExports$1.Editor.nodes(editor, {
                          match: isOfType(editor, 'tr'),
                          at: path,
                      }))), _g = _f.next(); !_g.done; _g = _f.next()) {
                          _h = __read(_g.value, 2), trPath = _h[1];
                          matrix.push(__spreadArray([], __read(distExports$1.Editor.nodes(editor, {
                              match: isOfType(editor, 'th', 'td'),
                              at: trPath,
                          })), false));
                      }
                  }
                  catch (e_2_1) { e_2 = { error: e_2_1 }; }
                  finally {
                      try {
                          if (_g && !_g.done && (_k = _f.return)) _k.call(_f);
                      }
                      finally { if (e_2) throw e_2.error; }
                  }
                  return [4 /*yield*/, matrix];
              case 3:
                  _l.sent();
                  _l.label = 4;
              case 4:
                  _d = _c.next();
                  return [3 /*break*/, 2];
              case 5: return [3 /*break*/, 8];
              case 6:
                  e_1_1 = _l.sent();
                  e_1 = { error: e_1_1 };
                  return [3 /*break*/, 8];
              case 7:
                  try {
                      if (_d && !_d.done && (_j = _c.return)) _j.call(_c);
                  }
                  finally { if (e_1) throw e_1.error; }
                  return [7 /*endfinally*/];
              case 8: return [2 /*return*/];
          }
      });
  }
  function filledMatrix(editor, options) {
      var e_3, _a;
      if (options === void 0) { options = {}; }
      var filled = [];
      try {
          // Expand each section separately to avoid sections collapsing into each other.
          for (var _b = __values(matrices(editor, { at: options.at })), _c = _b.next(); !_c.done; _c = _b.next()) {
              var matrix = _c.value;
              var filledSection = [];
              for (var x = 0; x < matrix.length; x += 1) {
                  if (!filledSection[x]) {
                      filledSection[x] = [];
                  }
                  for (var y = 0; y < matrix[x].length; y += 1) {
                      var _d = __read(matrix[x][y], 1), _e = _d[0], _f = _e.rowSpan, rowSpan = _f === void 0 ? 1 : _f, _g = _e.colSpan, colSpan = _g === void 0 ? 1 : _g;
                      for (var c = 0, occupied = 0; c < colSpan + occupied; c += 1) {
                          for (var r = 0; r < rowSpan; r += 1) {
                              if (!filledSection[x + r]) {
                                  filledSection[x + r] = [];
                              }
                              if (filledSection[x + r][y + c]) {
                                  continue;
                              }
                              filledSection[x + r][y + c] = [
                                  matrix[x + r][y + c],
                                  {
                                      rtl: c - occupied + 1,
                                      ltr: colSpan - c + occupied,
                                      ttb: r + 1,
                                      btt: rowSpan - r,
                                  },
                              ];
                          }
                      }
                  }
              }
              filled.push.apply(filled, __spreadArray([], __read(filledSection), false));
          }
      }
      catch (e_3_1) { e_3 = { error: e_3_1 }; }
      finally {
          try {
              if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
          }
          finally { if (e_3) throw e_3.error; }
      }
      return filled;
  }

  var Point = /** @class */ (function () {
      function Point(x, y) {
          this.x = x;
          this.y = y;
      }
      Point.valueOf = function (x, y) {
          return new this(x, y);
      };
      Point.equals = function (point, another) {
          return point.x === another.x && point.y === another.y;
      };
      return Point;
  }());

  /**
   * @description DOM 操作
   * @author wangfupeng
   */
  if (append && $$1.fn) {
      $$1.fn.append = append;
  }
  if (on && $$1.fn) {
      $$1.fn.on = on;
  }
  if (focus && $$1.fn) {
      $$1.fn.focus = focus;
  }
  if (attr && $$1.fn) {
      $$1.fn.attr = attr;
  }
  if (val && $$1.fn) {
      $$1.fn.val = val;
  }
  if (html && $$1.fn) {
      $$1.fn.html = html;
  }
  if (dataset && $$1.fn) {
      $$1.fn.dataset = dataset;
  }
  if (addClass && $$1.fn) {
      $$1.fn.addClass = addClass;
  }
  if (removeClass && $$1.fn) {
      $$1.fn.removeClass = removeClass;
  }
  if (children && $$1.fn) {
      $$1.fn.children = children;
  }
  if (each && $$1.fn) {
      $$1.fn.each = each;
  }
  if (find && $$1.fn) {
      $$1.fn.find = find;
  }
  if (data && $$1.fn) {
      $$1.fn.data = data;
  }
  if (hide && $$1.fn) {
      $$1.fn.hide = hide;
  }
  if (show && $$1.fn) {
      $$1.fn.show = show;
  }
  /**
   * 获取 tagName lower-case
   * @param $elem $elem
   */
  function getTagName$1($elem) {
      if ($elem.length) {
          return $elem[0].tagName.toLowerCase();
      }
      return '';
  }
  /**
   * 获取 $elem 某一个 style 值
   * @param $elem $elem
   * @param styleKey style key
   */
  function getStyleValue($elem, styleKey) {
      var res = '';
      var styleStr = $elem.attr('style') || ''; // 如 'line-height: 2.5; color: red;'
      var styleArr = styleStr.split(';'); // 如 ['line-height: 2.5', ' color: red', '']
      var length = styleArr.length;
      for (var i = 0; i < length; i += 1) {
          var styleItemStr = styleArr[i]; // 如 'line-height: 2.5'
          if (styleItemStr) {
              var arr = styleItemStr.split(':'); // ['line-height', ' 2.5']
              if (arr[0].trim() === styleKey) {
                  res = arr[1].trim();
              }
          }
      }
      return res;
  }
  /**
   * 获取 outerHTML
   * @param $elem dom7 elem
   */
  function getOuterHTML($elem) {
      if ($elem.length === 0) {
          return '';
      }
      return $elem[0].outerHTML;
  }

  /** Weak reference between the `Editor` and the selected elements */
  var EDITOR_TO_SELECTION = new WeakMap();
  /** Weak reference between the `Editor` and a set of the selected elements */
  var EDITOR_TO_SELECTION_SET = new WeakMap();

  /**
   * @description set cell property menu
   * @author hsuna
   */
  var TableProperty = /** @class */ (function () {
      function TableProperty() {
          this.title = t$2('tableModule.tableProperty');
          this.iconSvg = TABLE_PROPERTY_SVG;
          this.tag = 'button';
          this.showModal = true;
          this.modalWidth = 300;
          this.menu = 'table';
          this.borderStyle = [
              { value: 'none', label: t$2('tableModule.borderStyle.none') },
              { value: 'solid', label: t$2('tableModule.borderStyle.solid') },
              { value: 'dotted', label: t$2('tableModule.borderStyle.dotted') },
              { value: 'dashed', label: t$2('tableModule.borderStyle.dashed') },
              { value: 'double', label: t$2('tableModule.borderStyle.double') },
              { value: 'groove', label: t$2('tableModule.borderStyle.groove') },
              { value: 'ridge', label: t$2('tableModule.borderStyle.ridge') },
              { value: 'inset', label: t$2('tableModule.borderStyle.inset') },
              { value: 'outset', label: t$2('tableModule.borderStyle.outset') },
          ];
          this.textAlignOptions = [
              { value: 'left', label: t$2('justify.left'), svg: JUSTIFY_LEFT_SVG$1 },
              { value: 'center', label: t$2('justify.center'), svg: JUSTIFY_CENTER_SVG },
              { value: 'right', label: t$2('justify.right'), svg: JUSTIFY_RIGHT_SVG },
              { value: 'justify', label: t$2('justify.justify'), svg: JUSTIFY_JUSTIFY_SVG },
          ];
      }
      TableProperty.prototype.getValue = function (_editor) {
          return '';
      };
      TableProperty.prototype.isActive = function (_editor) {
          return false;
      };
      TableProperty.prototype.isDisabled = function (editor) {
          var tableNode = DomEditor.getSelectedNodeByType(editor, 'table');
          if (tableNode == null) {
              return true;
          }
          return false;
      };
      TableProperty.prototype.exec = function (_editor, _value) {
          // 此处空着即可
      };
      TableProperty.prototype.getModalContentNode = function (editor) {
          var _a = __read(distExports$1.Editor.nodes(editor, {
              match: isOfType(editor, 'table'),
          }), 1), node = _a[0];
          return node;
      };
      TableProperty.prototype.getModalPositionNode = function (_editor) {
          return null;
      };
      TableProperty.prototype.getModalContentElem = function (editor) {
          var _this = this;
          var node = this.getModalContentNode(editor);
          if (!node) {
              return null;
          }
          var _a = __read(node, 2), data = _a[0], path = _a[1];
          var $content = $$1("<div>\n      <label class=\"babel-container\">\n        <span>".concat(t$2('tableModule.modal.border'), "</span>\n        <span class=\"babel-container-border\">\n          <select name=\"borderStyle\">\n            ").concat(this.borderStyle
              .map(function (item) { return "<option value=\"".concat(item.value, "\">").concat(item.label, "</option>"); })
              .join(''), "\n          </select>\n          <span class=\"color-group\" data-mark=\"color\">\n            <span class=\"color-group-block\"></span>\n            <input name=\"borderColor\" type=\"hidden\">\n          </span>\n          <input name=\"borderWidth\" type=\"number\" placeholder=\"").concat(t$2('tableModule.modal.borderWidth'), "\">\n        </span>\n      </label>\n      <div class=\"babel-container\">\n        <span>").concat(t$2('tableModule.modal.bgColor'), "</span>\n        <span class=\"babel-container-background\">\n          <span class=\"color-group\" data-mark=\"bgColor\">\n            <span class=\"color-group-block\"></span>\n            <input name=\"backgroundColor\" type=\"hidden\">\n          </span>\n        </span>\n      </div>\n      <label class=\"babel-container\">\n        <span>").concat(t$2('tableModule.modal.align'), "</span>\n        <span class=\"babel-container-align\">\n          <select name=\"textAlign\">\n            ").concat(this.textAlignOptions
              .map(function (item) { return "<option value=\"".concat(item.value, "\">").concat(item.label, "</option>"); })
              .join(''), "\n          </select>\n        </span>\n      </label>\n      <div class=\"button-container\">\n        <button type=\"button\">").concat(t$2('tableModule.modal.ok'), "</button>\n      </div>\n    </div>"));
          // 初始化所有表单的值
          $content.find('[name]').each(function (elem) {
              $$1(elem).val(data[$$1(elem).attr('name')]);
          });
          var setSelectedColor = function (elem, color) {
              if (color) {
                  $$1('.color-group-block', elem).css('background-color', color).empty();
              }
              else {
                  $$1('.color-group-block', elem).css('background-color', '').html(CLEAN_SVG);
              }
          };
          $content.find('.color-group').each(function (elem) {
              var selectedColor = $$1('[type="hidden"]', elem).val() || '';
              setSelectedColor(elem, selectedColor);
              var $elem = $$1(elem);
              $elem.on('click', function () {
                  $content.find('.color-group .w-e-drop-panel').hide();
                  var $panel = $elem.data('panel');
                  if (!$panel) {
                      $panel = _this.getPanelContentElem(editor, {
                          mark: $elem.data('mark'),
                          selectedColor: selectedColor,
                          callback: function (color) {
                              $$1('[type="hidden"]', elem).val(color || '');
                              setSelectedColor(elem, color);
                              $panel.hide();
                          },
                      });
                      $elem.append($panel);
                      $elem.data('panel', $panel);
                  }
                  else {
                      $panel.show();
                  }
              });
          });
          var $button = $content.find('button');
          $button.on('click', function () {
              var props = Array.from($content.find('[name]')).reduce(function (obj, elem) {
                  obj[$$1(elem).attr('name')] = $$1(elem).val();
                  return obj;
              }, {});
              var selection = EDITOR_TO_SELECTION.get(editor);
              if (_this.menu === 'cell' && !!(selection === null || selection === void 0 ? void 0 : selection.length)) {
                  selection.forEach(function (row) {
                      row.forEach(function (cell) {
                          distExports$1.Transforms.setNodes(editor, props, { at: cell[0][1] });
                      });
                  });
              }
              else {
                  distExports$1.Transforms.setNodes(editor, props, { at: path });
              }
              setTimeout(function () {
                  editor.focus();
              });
          });
          return $content[0];
      };
      TableProperty.prototype.getPanelContentElem = function (editor, _a) {
          var mark = _a.mark, selectedColor = _a.selectedColor, callback = _a.callback;
          var $colorPanel = $$1('<ul class="w-e-panel-content-color"></ul>');
          $colorPanel.on('click', 'li', function (e) {
              var target = e.target;
              if (!target) {
                  return;
              }
              e.preventDefault();
              e.stopPropagation();
              var $li = $$1(target);
              var val = $li.attr('data-value');
              callback(val);
          });
          var colorConf = editor.getMenuConfig(mark);
          var _b = colorConf.colors, colors = _b === void 0 ? [] : _b;
          colors.forEach(function (color) {
              var $block = $$1("<div class=\"color-block\" data-value=\"".concat(color, "\"></div>"));
              $block.css('background-color', color);
              var $li = $$1("<li data-value=\"".concat(color, "\"></li>"));
              if (selectedColor === color) {
                  $li.addClass('active');
              }
              $li.append($block);
              $colorPanel.append($li);
          });
          var clearText = '';
          if (mark === 'color') {
              clearText = t$2('tableModule.color.default');
          }
          if (mark === 'bgColor') {
              clearText = t$2('tableModule.color.clear');
          }
          var $clearLi = $$1("\n      <li data-value=\"\" class=\"clear\">\n        ".concat(CLEAN_SVG, "\n        ").concat(clearText, "\n      </li>\n    "));
          $colorPanel.prepend($clearLi);
          var $panel = $$1('<div class="w-e-drop-panel"></div>');
          $panel.append($colorPanel);
          return $panel;
      };
      return TableProperty;
  }());

  var CellProperty = /** @class */ (function (_super) {
      __extends(CellProperty, _super);
      function CellProperty() {
          var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
          _this.title = t$2('tableModule.cellProperty');
          _this.iconSvg = CELL_PROPERTY_SVG;
          _this.tag = 'button';
          _this.showModal = true;
          _this.modalWidth = 300;
          _this.menu = 'cell';
          return _this;
      }
      CellProperty.prototype.getModalContentNode = function (editor) {
          var _a = __read(distExports$1.Editor.nodes(editor, {
              match: isOfType(editor, 'td'),
          }), 1), node = _a[0];
          return node;
      };
      return CellProperty;
  }(TableProperty));

  /**
   * @description del col menu
   * @author wangfupeng
   */
  var DeleteCol = /** @class */ (function () {
      function DeleteCol() {
          this.title = t$2('tableModule.deleteCol');
          this.iconSvg = DEL_COL_SVG;
          this.tag = 'button';
      }
      DeleteCol.prototype.getValue = function (_editor) {
          // 无需获取 val
          return '';
      };
      DeleteCol.prototype.isActive = function (_editor) {
          // 无需 active
          return false;
      };
      DeleteCol.prototype.isDisabled = function (editor) {
          var selection = editor.selection;
          if (selection == null) {
              return true;
          }
          if (!distExports$1.Range.isCollapsed(selection)) {
              return true;
          }
          var cellNode = DomEditor.getSelectedNodeByType(editor, 'table-cell');
          if (cellNode == null) {
              // 选区未处于 table cell node ，则禁用
              return true;
          }
          return false;
      };
      DeleteCol.prototype.exec = function (editor, _value) {
          if (this.isDisabled(editor)) {
              return;
          }
          var _a = __read(distExports$1.Editor.nodes(editor, {
              match: function (n) { return DomEditor.checkNodeType(n, 'table-cell'); },
              universal: true,
          }), 1), cellEntry = _a[0];
          var _b = __read(cellEntry, 2), selectedCellNode = _b[0], selectedCellPath = _b[1];
          // 如果只有一列，则删除整个表格
          var rowNode = DomEditor.getParentNode(editor, selectedCellNode);
          var colLength = (rowNode === null || rowNode === void 0 ? void 0 : rowNode.children.length) || 0;
          if (!rowNode || colLength <= 1) {
              distExports$1.Transforms.removeNodes(editor, { mode: 'highest' }); // 删除整个表格
              return;
          }
          // ------------------------- 不只有 1 列，则继续 -------------------------
          var tableNode = DomEditor.getParentNode(editor, rowNode);
          if (tableNode == null) {
              return;
          }
          var matrix = filledMatrix(editor);
          var tdIndex = 0;
          // eslint-disable-next-line no-labels
          out: for (var x = 0; x < matrix.length; x += 1) {
              for (var y = 0; y < matrix[x].length; y += 1) {
                  var _c = __read(matrix[x][y], 1), _d = __read(_c[0], 2), path = _d[1];
                  if (distExports$1.Path.equals(selectedCellPath, path)) {
                      tdIndex = y;
                      // eslint-disable-next-line no-labels
                      break out;
                  }
              }
          }
          distExports$1.Editor.withoutNormalizing(editor, function () {
              var e_1, _a;
              for (var x = 0; x < matrix.length; x += 1) {
                  var _b = __read(matrix[x][tdIndex], 2), _c = __read(_b[0], 1), hidden = _c[0].hidden, _d = _b[1], rtl = _d.rtl, ltr = _d.ltr;
                  if (rtl > 1 || ltr > 1) {
                      // 找到显示中 colSpan 节点
                      var _e = __read(matrix[x][tdIndex - (rtl - 1)], 1), _f = __read(_e[0], 2), _g = _f[0], _h = _g.rowSpan, rowSpan = _h === void 0 ? 1 : _h, _j = _g.colSpan, colSpan = _j === void 0 ? 1 : _j, path = _f[1];
                      if (hidden) {
                          distExports$1.Transforms.setNodes(editor, {
                              rowSpan: rowSpan,
                              colSpan: Math.max(colSpan - 1, 1),
                          }, { at: path });
                      }
                      else {
                          var _k = __read(matrix[x][tdIndex + 1], 1), _l = __read(_k[0], 2), rightPath = _l[1];
                          distExports$1.Transforms.setNodes(editor, {
                              rowSpan: rowSpan,
                              colSpan: colSpan - 1,
                              hidden: false,
                          }, { at: rightPath });
                          try {
                              // 移动单元格 文本、图片等元素
                              for (var _m = (e_1 = void 0, __values(distExports$1.Node.children(editor, path, { reverse: true }))), _o = _m.next(); !_o.done; _o = _m.next()) {
                                  var _p = __read(_o.value, 2), childPath = _p[1];
                                  distExports$1.Transforms.moveNodes(editor, {
                                      to: __spreadArray(__spreadArray([], __read(rightPath), false), [0], false),
                                      at: childPath,
                                  });
                              }
                          }
                          catch (e_1_1) { e_1 = { error: e_1_1 }; }
                          finally {
                              try {
                                  if (_o && !_o.done && (_a = _m.return)) _a.call(_m);
                              }
                              finally { if (e_1) throw e_1.error; }
                          }
                      }
                  }
              }
              // 挨个删除 cell
              for (var x = 0; x < matrix.length; x += 1) {
                  var _q = __read(matrix[x][tdIndex], 1), _r = __read(_q[0], 2), path = _r[1];
                  distExports$1.Transforms.removeNodes(editor, { at: path });
              }
              // 需要调整 columnWidths
              var _s = __read(distExports$1.Editor.nodes(editor, {
                  match: function (n) { return DomEditor.checkNodeType(n, 'table'); },
                  universal: true,
              }), 1), tableEntry = _s[0];
              if (tableEntry) {
                  var _t = __read(tableEntry, 2), elemNode = _t[0], tablePath = _t[1];
                  var _u = elemNode.columnWidths, columnWidths = _u === void 0 ? [] : _u;
                  var adjustColumnWidths = __spreadArray([], __read(columnWidths), false);
                  adjustColumnWidths.splice(tdIndex, 1);
                  distExports$1.Transforms.setNodes(editor, { columnWidths: adjustColumnWidths }, {
                      at: tablePath,
                  });
              }
          });
      };
      return DeleteCol;
  }());

  /**
   * @description del row menu
   * @author wangfupeng
   */
  var DeleteRow = /** @class */ (function () {
      function DeleteRow() {
          this.title = t$2('tableModule.deleteRow');
          this.iconSvg = DEL_ROW_SVG;
          this.tag = 'button';
      }
      DeleteRow.prototype.getValue = function (_editor) {
          // 无需获取 val
          return '';
      };
      DeleteRow.prototype.isActive = function (_editor) {
          // 无需 active
          return false;
      };
      DeleteRow.prototype.isDisabled = function (editor) {
          var selection = editor.selection;
          if (selection == null) {
              return true;
          }
          if (!distExports$1.Range.isCollapsed(selection)) {
              return true;
          }
          var rowNode = DomEditor.getSelectedNodeByType(editor, 'table-row');
          if (rowNode == null) {
              // 选区未处于 table row node ，则禁用
              return true;
          }
          return false;
      };
      DeleteRow.prototype.exec = function (editor, _value) {
          if (this.isDisabled(editor)) {
              return;
          }
          var _a = __read(distExports$1.Editor.nodes(editor, {
              match: function (n) { return DomEditor.checkNodeType(n, 'table-row'); },
              universal: true,
          }), 1), rowEntry = _a[0];
          var _b = __read(rowEntry, 2), rowNode = _b[0], rowPath = _b[1];
          var tableNode = DomEditor.getParentNode(editor, rowNode);
          var rowsLength = (tableNode === null || tableNode === void 0 ? void 0 : tableNode.children.length) || 0;
          if (rowsLength <= 1) {
              // row 只有一行，则删掉整个表格
              distExports$1.Transforms.removeNodes(editor, { mode: 'highest' });
              return;
          }
          // row > 1 行，则删掉这一行
          var _c = __read(distExports$1.Editor.nodes(editor, {
              match: function (n) { return DomEditor.checkNodeType(n, 'table-cell'); },
              universal: true,
          }), 1), cellEntry = _c[0];
          var _d = __read(cellEntry, 2), cellPath = _d[1];
          var matrix = filledMatrix(editor);
          var trIndex = 0;
          // eslint-disable-next-line no-labels
          outer: for (var x = 0; x < matrix.length; x += 1) {
              for (var y = 0; y < matrix[x].length; y += 1) {
                  var _e = __read(matrix[x][y], 1), _f = __read(_e[0], 2), path = _f[1];
                  if (!distExports$1.Path.equals(cellPath, path)) {
                      continue;
                  }
                  trIndex = x;
                  // eslint-disable-next-line no-labels
                  break outer;
              }
          }
          distExports$1.Editor.withoutNormalizing(editor, function () {
              var e_1, _a;
              for (var y = 0; y < matrix[trIndex].length; y += 1) {
                  var _b = __read(matrix[trIndex][y], 2), _c = __read(_b[0], 1), hidden = _c[0].hidden, _d = _b[1], ttb = _d.ttb, btt = _d.btt;
                  // 寻找跨行行为
                  if (ttb > 1 || btt > 1) {
                      // 找到显示中 rowSpan 节点
                      var _e = __read(matrix[trIndex - (ttb - 1)][y], 1), _f = __read(_e[0], 2), _g = _f[0], _h = _g.rowSpan, rowSpan = _h === void 0 ? 1 : _h, _j = _g.colSpan, colSpan = _j === void 0 ? 1 : _j, path = _f[1];
                      // 如果当前选中节点为隐藏节点，则向上寻找处理 rowSpan 逻辑
                      if (hidden) {
                          distExports$1.Transforms.setNodes(editor, {
                              rowSpan: Math.max(rowSpan - 1, 1),
                              colSpan: colSpan,
                          }, { at: path });
                      }
                      else {
                          var _k = __read(matrix[trIndex + 1][y], 1), _l = __read(_k[0], 2), belowPath = _l[1];
                          distExports$1.Transforms.setNodes(editor, {
                              rowSpan: rowSpan - 1,
                              colSpan: colSpan,
                              hidden: false,
                          }, { at: belowPath });
                          try {
                              // 移动单元格 文本、图片等元素
                              for (var _m = (e_1 = void 0, __values(distExports$1.Node.children(editor, path, { reverse: true }))), _o = _m.next(); !_o.done; _o = _m.next()) {
                                  var _p = __read(_o.value, 2), childPath = _p[1];
                                  distExports$1.Transforms.moveNodes(editor, {
                                      to: __spreadArray(__spreadArray([], __read(belowPath), false), [0], false),
                                      at: childPath,
                                  });
                              }
                          }
                          catch (e_1_1) { e_1 = { error: e_1_1 }; }
                          finally {
                              try {
                                  if (_o && !_o.done && (_a = _m.return)) _a.call(_m);
                              }
                              finally { if (e_1) throw e_1.error; }
                          }
                      }
                  }
              }
              distExports$1.Transforms.removeNodes(editor, { at: rowPath });
          });
      };
      return DeleteRow;
  }());

  /**
   * @description del table menu
   * @author wangfupeng
   */
  var DeleteTable = /** @class */ (function () {
      function DeleteTable() {
          this.title = t$2('tableModule.deleteTable');
          this.iconSvg = TRASH_SVG;
          this.tag = 'button';
      }
      DeleteTable.prototype.getValue = function (_editor) {
          // 无需获取 val
          return '';
      };
      DeleteTable.prototype.isActive = function (_editor) {
          // 无需 active
          return false;
      };
      DeleteTable.prototype.isDisabled = function (editor) {
          if (editor.selection == null) {
              return true;
          }
          var tableNode = DomEditor.getSelectedNodeByType(editor, 'table');
          if (tableNode == null) {
              // 选区未处于 table node ，则禁用
              return true;
          }
          return false;
      };
      DeleteTable.prototype.exec = function (editor, _value) {
          if (this.isDisabled(editor)) {
              return;
          }
          // 删除表格
          distExports$1.Transforms.removeNodes(editor, { mode: 'highest' });
      };
      return DeleteTable;
  }());

  /**
   * @description table full width menu
   * @author wangfupeng
   */
  var TableFullWidth = /** @class */ (function () {
      function TableFullWidth() {
          this.title = t$2('tableModule.widthAuto');
          this.iconSvg = FULL_WIDTH_SVG;
          this.tag = 'button';
      }
      // 是否已设置 宽度自适应
      TableFullWidth.prototype.getValue = function (editor) {
          var tableNode = DomEditor.getSelectedNodeByType(editor, 'table');
          if (tableNode == null) {
              return false;
          }
          return tableNode.width === '100%';
      };
      TableFullWidth.prototype.isActive = function (editor) {
          return !!this.getValue(editor);
      };
      TableFullWidth.prototype.isDisabled = function (editor) {
          var selection = editor.selection;
          if (selection == null) {
              return true;
          }
          if (!distExports$1.Range.isCollapsed(selection)) {
              return true;
          }
          var tableNode = DomEditor.getSelectedNodeByType(editor, 'table');
          if (tableNode == null) {
              // 选区未处于 table node ，则禁用
              return true;
          }
          return false;
      };
      TableFullWidth.prototype.exec = function (editor, value) {
          if (this.isDisabled(editor)) {
              return;
          }
          var props = {
              width: value ? 'auto' : '100%', // 切换 'auto' 和 '100%'
          };
          distExports$1.Transforms.setNodes(editor, props, { mode: 'highest' });
      };
      return TableFullWidth;
  }());

  /**
   * @description table menu helpers
   * @author wangfupeng
   */
  /**
   * 获取第一行所有 cells
   * @param tableNode table node
   */
  function getFirstRowCells(tableNode) {
      var rows = tableNode.children || []; // 所有行
      if (rows.length === 0) {
          return [];
      }
      var firstRow = rows[0] || {}; // 第一行
      var cells = firstRow.children || []; // 第一行所有 cell
      return cells;
  }
  /**
   * 表格是否带有表头？
   * @param tableNode table node
   */
  function isTableWithHeader(tableNode) {
      var firstRowCells = getFirstRowCells(tableNode);
      return firstRowCells.every(function (cell) { return !!cell.isHeader; });
  }
  /**
   * 单元格是否在第一行
   * @param editor editor
   * @param cellNode cell node
   */
  function isCellInFirstRow(editor, cellNode) {
      var rowNode = DomEditor.getParentNode(editor, cellNode);
      if (rowNode == null) {
          return false;
      }
      var tableNode = DomEditor.getParentNode(editor, rowNode);
      if (tableNode == null) {
          return false;
      }
      var firstRowCells = getFirstRowCells(tableNode);
      return firstRowCells.some(function (c) { return c === cellNode; });
  }

  /**
   * @description insert col menu
   * @author wangfupeng
   */
  var InsertCol = /** @class */ (function () {
      function InsertCol() {
          this.title = t$2('tableModule.insertCol');
          this.iconSvg = ADD_COL_SVG;
          this.tag = 'button';
      }
      InsertCol.prototype.getValue = function (_editor) {
          // 无需获取 val
          return '';
      };
      InsertCol.prototype.isActive = function (_editor) {
          // 无需 active
          return false;
      };
      InsertCol.prototype.isDisabled = function (editor) {
          var selection = editor.selection;
          if (selection == null) {
              return true;
          }
          if (!distExports$1.Range.isCollapsed(selection)) {
              return true;
          }
          var tableNode = DomEditor.getSelectedNodeByType(editor, 'table');
          if (tableNode == null) {
              // 选区未处于 table cell node ，则禁用
              return true;
          }
          return false;
      };
      InsertCol.prototype.exec = function (editor, _value) {
          if (this.isDisabled(editor)) {
              return;
          }
          var _a = __read(distExports$1.Editor.nodes(editor, {
              match: function (n) { return DomEditor.checkNodeType(n, 'table-cell'); },
              universal: true,
          }), 1), cellEntry = _a[0];
          var _b = __read(cellEntry, 2), selectedCellNode = _b[0], selectedCellPath = _b[1];
          var rowNode = DomEditor.getParentNode(editor, selectedCellNode);
          if (rowNode == null) {
              return;
          }
          var tableNode = DomEditor.getParentNode(editor, rowNode);
          if (tableNode == null) {
              return;
          }
          var matrix = filledMatrix(editor);
          var tdIndex = 0;
          for (var x = 0; x < matrix.length; x += 1) {
              for (var y = 0; y < matrix[x].length; y += 1) {
                  var _c = __read(matrix[x][y], 1), _d = __read(_c[0], 2), path = _d[1];
                  if (distExports$1.Path.equals(selectedCellPath, path)) {
                      tdIndex = y;
                      break;
                  }
              }
          }
          distExports$1.Editor.withoutNormalizing(editor, function () {
              var exitMerge = [];
              for (var x = 0; x < matrix.length; x += 1) {
                  var _a = __read(matrix[x][tdIndex], 2), _b = _a[1], ltr = _b.ltr, rtl = _b.rtl;
                  // 向左找到 1 元素为止
                  if (ltr > 1 || rtl > 1) {
                      if (rtl === 1) {
                          continue;
                      }
                      var _c = __read(matrix[x][tdIndex - (rtl - 1)], 1), _d = __read(_c[0], 2), element = _d[0], path = _d[1];
                      var colSpan = element.colSpan || 1;
                      exitMerge.push(x);
                      if (!element.hidden) {
                          distExports$1.Transforms.setNodes(editor, {
                              colSpan: colSpan + 1,
                          }, { at: path });
                      }
                  }
              }
              // 遍历所有 rows ，挨个添加 cell
              for (var x = 0; x < matrix.length; x += 1) {
                  var newCell = {
                      type: 'table-cell',
                      hidden: exitMerge.includes(x),
                      children: [{ text: '' }],
                  };
                  if (x === 0 && isTableWithHeader(tableNode)) {
                      newCell.isHeader = true;
                  }
                  var _e = __read(matrix[x][tdIndex], 1), _f = __read(_e[0], 2), insertPath = _f[1];
                  distExports$1.Transforms.insertNodes(editor, newCell, { at: insertPath });
              }
              // 需要调整 columnWidths
              var _g = __read(distExports$1.Editor.nodes(editor, {
                  match: function (n) { return DomEditor.checkNodeType(n, 'table'); },
                  universal: true,
              }), 1), tableEntry = _g[0];
              if (tableEntry) {
                  var _h = __read(tableEntry, 2), elemNode = _h[0], tablePath = _h[1];
                  var _j = elemNode.columnWidths, columnWidths = _j === void 0 ? [] : _j;
                  var adjustColumnWidths = __spreadArray([], __read(columnWidths), false);
                  var _k = editor.getMenuConfig('insertTable').minWidth, minWidth = _k === void 0 ? 60 : _k;
                  adjustColumnWidths.splice(tdIndex, 0, parseInt(minWidth, 10) || 60);
                  distExports$1.Transforms.setNodes(editor, { columnWidths: adjustColumnWidths }, {
                      at: tablePath,
                  });
              }
          });
      };
      return InsertCol;
  }());

  /**
   * @description insert row menu
   * @author wangfupeng
   */
  var InsertRow = /** @class */ (function () {
      function InsertRow() {
          this.title = t$2('tableModule.insertRow');
          this.iconSvg = ADD_ROW_SVG;
          this.tag = 'button';
      }
      InsertRow.prototype.getValue = function (_editor) {
          // 无需获取 val
          return '';
      };
      InsertRow.prototype.isActive = function (_editor) {
          // 无需 active
          return false;
      };
      InsertRow.prototype.isDisabled = function (editor) {
          var selection = editor.selection;
          if (selection == null) {
              return true;
          }
          if (!distExports$1.Range.isCollapsed(selection)) {
              return true;
          }
          var tableNode = DomEditor.getSelectedNodeByType(editor, 'table');
          if (tableNode == null) {
              // 选区未处于 table cell node ，则禁用
              return true;
          }
          return false;
      };
      InsertRow.prototype.exec = function (editor, _value) {
          if (this.isDisabled(editor)) {
              return;
          }
          var _a = __read(distExports$1.Editor.nodes(editor, {
              match: function (n) { return DomEditor.checkNodeType(n, 'table-cell'); },
              universal: true,
          }), 1), cellEntry = _a[0];
          var _b = __read(cellEntry, 2), cellNode = _b[0], cellPath = _b[1];
          // 获取 cell length ，即多少列
          var rowNode = DomEditor.getParentNode(editor, cellNode);
          var cellsLength = (rowNode === null || rowNode === void 0 ? void 0 : rowNode.children.length) || 0;
          if (cellsLength === 0) {
              return;
          }
          var matrix = filledMatrix(editor);
          // 向下插入行为，先找到
          // 当前选区所在的 tr 索引
          var trIndex = 0;
          /* eslint-disable no-labels */
          outer: for (var x = 0; x < matrix.length; x += 1) {
              for (var y = 0; y < matrix[x].length; y += 1) {
                  var _c = __read(matrix[x][y], 1), _d = __read(_c[0], 2), path = _d[1];
                  if (!distExports$1.Path.equals(cellPath, path)) {
                      continue;
                  }
                  trIndex = x;
                  // eslint-disable-next-line no-labels
                  break outer;
              }
          }
          /* eslint-disable no-labels */
          distExports$1.Editor.withoutNormalizing(editor, function () {
              // 向下添加 tr 索引
              var destIndex = trIndex + 1;
              var isWithinBounds = destIndex >= 0 && destIndex < matrix.length;
              var exitMerge = [];
              for (var y = 0; isWithinBounds && y < matrix[trIndex].length; y += 1) {
                  var _a = __read(matrix[trIndex][y], 2), _b = _a[1], ttb = _b.ttb, btt = _b.btt;
                  // 向上找到 1 元素为止
                  if (ttb > 1 || btt > 1) {
                      if (btt === 1) {
                          continue;
                      }
                      var _c = __read(matrix[trIndex - (ttb - 1)][y], 1), _d = __read(_c[0], 2), element = _d[0], path = _d[1];
                      var rowSpan = element.rowSpan || 1;
                      exitMerge.push(y);
                      if (!element.hidden) {
                          distExports$1.Transforms.setNodes(editor, {
                              rowSpan: rowSpan + 1,
                          }, { at: path });
                      }
                  }
              }
              // 拼接新的 row
              var newRow = { type: 'table-row', children: [] };
              for (var i = 0; i < cellsLength; i += 1) {
                  var cell = {
                      type: 'table-cell',
                      hidden: exitMerge.includes(i),
                      children: [{ text: '' }],
                  };
                  newRow.children.push(cell);
              }
              // 插入 row
              var rowPath = distExports$1.Path.parent(cellPath); // 获取 tr 的 path
              var newRowPath = distExports$1.Path.next(rowPath);
              distExports$1.Transforms.insertNodes(editor, newRow, { at: newRowPath });
          });
      };
      return InsertRow;
  }());

  /**
   * @description insert table menu
   * @author wangfupeng
   */
  function genTableNode(editor, rowNum, colNum) {
      var _a;
      // 拼接 rows
      var rows = [];
      var _b = editor.getMenuConfig('insertTable'), _c = _b.minWidth, minWidth = _c === void 0 ? 60 : _c, tableFullWidth = _b.tableFullWidth, tableHeader = _b.tableHeader;
      var columnWidths = Array(colNum).fill(parseInt(minWidth, 10) || 60);
      for (var i = 0; i < rowNum; i += 1) {
          // 拼接 cells
          var cells = [];
          for (var j = 0; j < colNum; j += 1) {
              var cellNode = {
                  type: 'table-cell',
                  children: [{ text: '' }],
              };
              if (i === 0) {
                  cellNode.isHeader = (_a = tableHeader === null || tableHeader === void 0 ? void 0 : tableHeader.selected) !== null && _a !== void 0 ? _a : true; // 第一行默认是 th
              }
              cells.push(cellNode);
          }
          // 生成 row
          rows.push({
              type: 'table-row',
              children: cells,
          });
      }
      return {
          type: 'table',
          width: (tableFullWidth === null || tableFullWidth === void 0 ? void 0 : tableFullWidth.selected) ? '100%' : 'auto',
          children: rows,
          columnWidths: columnWidths,
      };
  }
  var InsertTable = /** @class */ (function () {
      function InsertTable() {
          this.title = t$2('tableModule.insertTable');
          this.iconSvg = TABLE_SVG;
          this.tag = 'button';
          this.showDropPanel = true; // 点击 button 时显示 dropPanel
          this.$content = null;
      }
      InsertTable.prototype.getValue = function (_editor) {
          // 插入菜单，不需要 value
          return '';
      };
      InsertTable.prototype.isActive = function (_editor) {
          // 任何时候，都不用激活 menu
          return false;
      };
      InsertTable.prototype.exec = function (_editor, _value) {
          // 点击菜单时，弹出 modal 之前，不需要执行其他代码
          // 此处空着即可
      };
      InsertTable.prototype.isDisabled = function (editor) {
          var selection = editor.selection;
          if (selection == null) {
              return true;
          }
          if (!distExports$1.Range.isCollapsed(selection)) {
              return true;
          } // 选区非折叠，禁用
          var selectedElems = DomEditor.getSelectedElems(editor);
          var hasVoidOrPreOrTable = selectedElems.some(function (elem) {
              var type = DomEditor.getNodeType(elem);
              if (type === 'pre') {
                  return true;
              }
              if (type === 'table') {
                  return true;
              }
              if (type === 'list-item') {
                  return true;
              }
              if (editor.isVoid(elem)) {
                  return true;
              }
              return false;
          });
          if (hasVoidOrPreOrTable) {
              return true;
          } // 匹配到，禁用
          return false;
      };
      /**
       *  获取 panel 内容
       * @param editor editor
       */
      InsertTable.prototype.getPanelContentElem = function (editor) {
          var _this = this;
          // 已有，直接返回
          if (this.$content) {
              return this.$content[0];
          }
          // 初始化
          var $content = $$1('<div class="w-e-panel-content-table"></div>');
          var $info = $$1('<span>0 &times; 0</span>'); // 显示行列数量
          // 渲染 10 * 10 table ，以快速创建表格
          var $table = $$1('<table></table>');
          for (var i = 0; i < 10; i += 1) {
              var $tr = $$1('<tr></tr>');
              for (var j = 0; j < 10; j += 1) {
                  var $td = $$1('<td></td>');
                  $td.attr('data-x', j.toString());
                  $td.attr('data-y', i.toString());
                  $tr.append($td);
                  // 绑定 mouseenter
                  $td.on('mouseenter', function (e) {
                      var target = e.target;
                      if (target == null) {
                          return;
                      }
                      var $focusTd = $$1(target);
                      var _a = $focusTd.dataset(), focusX = _a.x, focusY = _a.y;
                      // 显示行列数量
                      $info[0].innerHTML = "".concat(focusX + 1, " &times; ").concat(focusY + 1);
                      // 修改 table td 样式
                      $table.children().each(function (tr) {
                          $$1(tr)
                              .children()
                              .each(function (td) {
                              var $newTd = $$1(td);
                              var _a = $newTd.dataset(), x = _a.x, y = _a.y;
                              if (x <= focusX && y <= focusY) {
                                  $newTd.addClass('active');
                              }
                              else {
                                  $newTd.removeClass('active');
                              }
                          });
                      });
                  });
                  // 绑定 click
                  $td.on('click', function (e) {
                      e.preventDefault();
                      var target = e.target;
                      if (target == null) {
                          return;
                      }
                      // eslint-disable-next-line @typescript-eslint/no-shadow
                      var $td = $$1(target);
                      var _a = $td.dataset(), x = _a.x, y = _a.y;
                      _this.insertTable(editor, y + 1, x + 1);
                  });
              }
              $table.append($tr);
          }
          $content.append($table);
          $content.append($info);
          // 记录，并返回
          this.$content = $content;
          return $content[0];
      };
      InsertTable.prototype.insertTable = function (editor, rowNumStr, colNumStr) {
          var rowNum = parseInt(rowNumStr, 10);
          var colNum = parseInt(colNumStr, 10);
          if (!rowNum || !colNum) {
              return;
          }
          if (rowNum <= 0 || colNum <= 0) {
              return;
          }
          // 如果当前是空 p ，则删除该 p
          if (DomEditor.isSelectedEmptyParagraph(editor)) {
              distExports$1.Transforms.removeNodes(editor, { mode: 'highest' });
          }
          if (editor.children.length === 0) {
              // table 作为第一个 children 时会导致无法正常删除
              // 在当前位置插入空行，当前元素下移
              var newElem = { type: 'paragraph', children: [{ text: '' }] };
              distExports$1.Transforms.insertNodes(editor, newElem, { mode: 'highest' });
          }
          // 插入表格
          var tableNode = genTableNode(editor, rowNum, colNum);
          distExports$1.Transforms.insertNodes(editor, tableNode, { mode: 'highest' });
      };
      return InsertTable;
  }());

  var TableCursor = {
      /** @returns {boolean} `true` if the selection is inside a table, otherwise `false`. */
      isInTable: function (editor, options) {
          if (options === void 0) { options = {}; }
          var _a = __read(distExports$1.Editor.nodes(editor, {
              match: isOfType(editor, 'table'),
              at: options.at,
          }), 1), table = _a[0];
          return !!table;
      },
      /**
       * Retrieves a matrix representing the selected cells within a table.
       * @returns {NodeEntry<T>[][]} A matrix containing the selected cells.
       */
      selection: function (editor) {
          var matrix, x, cells, y, _a, entry, _b, colSpan, ttb;
          return __generator(this, function (_c) {
              switch (_c.label) {
                  case 0:
                      matrix = EDITOR_TO_SELECTION.get(editor);
                      x = 0;
                      _c.label = 1;
                  case 1:
                      if (!(matrix && x < matrix.length)) return [3 /*break*/, 4];
                      cells = [];
                      for (y = 0; y < matrix[x].length; y += 1) {
                          _a = __read(matrix[x][y], 2), entry = _a[0], _b = _a[1], colSpan = _b.ltr, ttb = _b.ttb;
                          if (ttb === 1) {
                              cells.push(entry);
                          }
                          y += colSpan - 1;
                      }
                      return [4 /*yield*/, cells];
                  case 2:
                      _c.sent();
                      _c.label = 3;
                  case 3:
                      x += 1;
                      return [3 /*break*/, 1];
                  case 4: return [2 /*return*/];
              }
          });
      },
      /** Clears the selection from the table */
      unselect: function (editor) {
          // const matrix = EDITOR_TO_SELECTION.get(editor);
          // if (!matrix?.length) {
          //   return;
          // }
          // for (let x = 0; x < matrix.length; x+=1) {
          //   for (let y = 0; y < matrix[x].length; y+=1) {
          //     const [[, path], { ltr: colSpan, ttb }] = matrix[x][y];
          //     y += colSpan - 1;
          //     if (ttb > 1) {
          //       continue;
          //     }
          //     // no-op since the paths are the same
          //     const noop: Operation = {
          //       type: "move_node",
          //       newPath: path,
          //       path: path,
          //     };
          //     Transforms.transform(editor, noop);
          //   }
          // }
          EDITOR_TO_SELECTION_SET.delete(editor);
          EDITOR_TO_SELECTION.delete(editor);
          // 清除选区
          // document.getSelection()?.removeAllRanges()
      },
      /**
       * Checks whether a given cell is part of the current table selection.
       * @returns {boolean} - Returns true if the cell is selected, otherwise false.
       */
      isSelected: function (editor, element) {
          var selectedElements = EDITOR_TO_SELECTION_SET.get(editor);
          if (!selectedElements) {
              return false;
          }
          return selectedElements.has(element);
      },
  };

  var MergeCell = /** @class */ (function () {
      function MergeCell() {
          this.title = t$2('tableModule.mergeCell');
          this.iconSvg = MERGE_CELL_SVG;
          this.tag = 'button';
      }
      MergeCell.prototype.needKeepCell = function (editor, trPath) {
          // 检查同行是否有其他单元格
          var _a = __read(distExports$1.Node.children(editor, trPath), 2), rowSibling = _a[1];
          // 检查同列是否有其他单元格
          var parentTable = distExports$1.Editor.parent(editor, trPath);
          var hasOtherRows = parentTable[0].children.length > 1;
          return !!rowSibling || hasOtherRows;
      };
      MergeCell.prototype.getValue = function (_editor) {
          // 无需获取 val
          return '';
      };
      MergeCell.prototype.isActive = function (_editor) {
          // 无需 active
          return false;
      };
      MergeCell.prototype.isDisabled = function (editor) {
          return !this.canMerge(editor);
      };
      MergeCell.prototype.exec = function (editor, _value) {
          if (this.isDisabled(editor)) {
              return;
          }
          this.merge(editor);
          // 释放选区
          TableCursor.unselect(editor);
      };
      /**
       * Checks if the current selection can be merged. Merging is not possible when any of the following conditions are met:
       * - The selection is empty.
       * - The selection is not within the same "thead", "tbody," or "tfoot" section.
       * @returns {boolean} `true` if the selection can be merged, otherwise `false`.
       */
      MergeCell.prototype.canMerge = function (editor) {
          var matrix = EDITOR_TO_SELECTION.get(editor);
          // cannot merge when selection is empty
          if (!matrix || !matrix.length) {
              return false;
          }
          // prettier-ignore
          var _a = __read(matrix[matrix.length - 1][matrix[matrix.length - 1].length - 1], 1), _b = __read(_a[0], 2), lastPath = _b[1];
          var _c = __read(matrix[0][0], 1), _d = __read(_c[0], 2), firstPath = _d[1];
          // cannot merge when selection is not in common section
          if (!hasCommon(editor, [firstPath, lastPath], 'table')) {
              return false;
          }
          return true;
      };
      /**
       * Merges the selected cells in the table.
       * @returns void
       */
      MergeCell.prototype.merge = function (editor) {
          var _this = this;
          if (!this.canMerge(editor)) {
              return;
          }
          var selection = EDITOR_TO_SELECTION.get(editor);
          if (!selection || !selection.length) {
              return;
          }
          var _a = __read(selection[0][0], 1), _b = __read(_a[0], 2), basePath = _b[1];
          var _c = __read(distExports$1.Node.children(editor, basePath, { reverse: true }), 1), _d = __read(_c[0], 2), lastPath = _d[1];
          distExports$1.Editor.withoutNormalizing(editor, function () {
              var e_1, _a;
              var rowSpan = 0;
              var colSpan = 0;
              for (var x = selection.length - 1; x >= 0; x -= 1, rowSpan += 1) {
                  colSpan = 0;
                  for (var y = selection[x].length - 1; y >= 0; y -= 1, colSpan += 1) {
                      var _b = __read(selection[x][y], 2), _c = __read(_b[0], 2), path = _c[1], ttb = _b[1].ttb;
                      // skip first cell and "fake" cells which belong to a cell with a `rowspan`
                      if (distExports$1.Path.equals(basePath, path) || ttb > 1) {
                          continue;
                      }
                      try {
                          // prettier-ignore
                          for (var _d = (e_1 = void 0, __values(distExports$1.Node.children(editor, path, { reverse: true }))), _e = _d.next(); !_e.done; _e = _d.next()) {
                              var _f = __read(_e.value, 2), childPath = _f[1];
                              distExports$1.Transforms.moveNodes(editor, {
                                  to: distExports$1.Path.next(lastPath),
                                  at: childPath,
                              });
                          }
                      }
                      catch (e_1_1) { e_1 = { error: e_1_1 }; }
                      finally {
                          try {
                              if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                          }
                          finally { if (e_1) throw e_1.error; }
                      }
                      var _g = __read(distExports$1.Editor.nodes(editor, {
                          match: isOfType(editor, 'tr'),
                          at: path,
                      }), 1), _h = __read(_g[0], 2), trPath = _h[1];
                      if (_this.needKeepCell(editor, trPath)) {
                          distExports$1.Transforms.setNodes(editor, { hidden: true }, { at: path });
                          continue;
                      }
                  }
              }
              distExports$1.Transforms.setNodes(editor, { rowSpan: rowSpan, colSpan: colSpan }, { at: basePath });
          });
      };
      return MergeCell;
  }());

  // import { DEFAULT_WITH_TABLE_OPTIONS } from "../../utils/options";
  var SplitCell = /** @class */ (function () {
      function SplitCell() {
          this.title = t$2('tableModule.splitCell');
          this.iconSvg = SPLIT_CELL_SVG;
          this.tag = 'button';
      }
      SplitCell.prototype.getValue = function (_editor) {
          // 无需获取 val
          return '';
      };
      SplitCell.prototype.isActive = function (_editor) {
          // 无需 active
          return false;
      };
      SplitCell.prototype.isDisabled = function (editor) {
          var _a = __read(distExports$1.Editor.nodes(editor, {
              match: isOfType(editor, 'td'),
          }), 1), td = _a[0];
          var _b = __read(td, 1), _c = _b[0], _d = _c.rowSpan, rowSpan = _d === void 0 ? 1 : _d, _e = _c.colSpan, colSpan = _e === void 0 ? 1 : _e;
          if (rowSpan > 1 || colSpan > 1) {
              return false;
          }
          return true;
      };
      SplitCell.prototype.exec = function (editor, _value) {
          if (this.isDisabled(editor)) {
              return;
          }
          this.split(editor);
      };
      /**
       * Splits either the cell at the current selection or a specified location. If a range
       * selection is present, all cells within the range will be split.
       * @param {Location} [options.at] - Splits the cell at the specified location. If no
       * location is specified it will split the cell at the current selection
       * @param {boolean} [options.all] - If true, splits all cells in the table
       * @returns void
       */
      SplitCell.prototype.split = function (editor, options) {
          if (options === void 0) { options = {}; }
          var _a = __read(distExports$1.Editor.nodes(editor, {
              match: isOfType(editor, 'table', 'th', 'td'),
              // @ts-ignore
              at: options.at,
          }), 2), table = _a[0], td = _a[1];
          if (!table || !td) {
              return;
          }
          var selection = EDITOR_TO_SELECTION.get(editor) || [];
          // @ts-ignore
          var matrix = filledMatrix(editor, { at: options.at });
          // const { blocks } = DEFAULT_WITH_TABLE_OPTIONS;
          distExports$1.Editor.withoutNormalizing(editor, function () {
              for (var x = matrix.length - 1; x >= 0; x -= 1) {
                  for (var y = matrix[x].length - 1; y >= 0; y -= 1) {
                      var _a = __read(matrix[x][y], 2), _b = __read(_a[0], 2), path = _b[1], context = _a[1];
                      var colSpan = context.ltr, rtl = context.rtl, rowSpan = context.btt, ttb = context.ttb;
                      if (rtl > 1) {
                          // get to the start of the colspan
                          y -= rtl - 2;
                          continue;
                      }
                      if (ttb > 1) {
                          continue;
                      }
                      if (rowSpan === 1 && colSpan === 1) {
                          continue;
                      }
                      var found = !!options.all;
                      if (selection.length) {
                          // eslint-disable-next-line no-labels
                          outer: for (var i = 0; !options.all && i < selection.length; i += 1) {
                              for (var j = 0; j < selection[i].length; j += 1) {
                                  var _c = __read(selection[i][j], 1), _d = __read(_c[0], 2), tdPath = _d[1];
                                  if (distExports$1.Path.equals(tdPath, path)) {
                                      found = true;
                                      // eslint-disable-next-line no-labels
                                      break outer;
                                  }
                              }
                          }
                      }
                      else {
                          var _e = __read(td, 2), tdPath = _e[1];
                          if (distExports$1.Path.equals(tdPath, path)) {
                              found = true;
                          }
                      }
                      if (!found) {
                          continue;
                      }
                      // eslint-disable-next-line no-labels
                      out: for (var r = 1; r < rowSpan; r += 1) {
                          for (var i = y; i >= 0; i -= 1) {
                              // eslint-disable-next-line @typescript-eslint/no-shadow
                              var _f = __read(matrix[x + r][i], 2), ttb_1 = _f[1].ttb;
                              if (ttb_1 === 1) {
                                  continue;
                              }
                              for (var c = 0; c < colSpan; c += 1) {
                                  var _g = __read(matrix[x + r][i + c], 1), _h = __read(_g[0], 2), nextPath = _h[1];
                                  distExports$1.Transforms.unsetNodes(editor, ['hidden', 'colSpan', 'rowSpan'], { at: nextPath });
                              }
                              // eslint-disable-next-line no-labels
                              continue out;
                          }
                      }
                      for (var c = 1; c < colSpan; c += 1) {
                          var _j = __read(matrix[x][y + c], 1), _k = __read(_j[0], 2), nextPath = _k[1];
                          distExports$1.Transforms.unsetNodes(editor, ['hidden', 'colSpan', 'rowSpan'], { at: nextPath });
                      }
                      distExports$1.Transforms.setNodes(editor, { rowSpan: 1, colSpan: 1 }, { at: path });
                  }
              }
          });
      };
      return SplitCell;
  }());

  /**
   * @description table header menu
   * @author wangfupeng
   */
  var TableHeader = /** @class */ (function () {
      function TableHeader() {
          this.title = t$2('tableModule.header');
          this.iconSvg = TABLE_HEADER_SVG;
          this.tag = 'button';
      }
      // 是否已设置表头
      TableHeader.prototype.getValue = function (editor) {
          var tableNode = DomEditor.getSelectedNodeByType(editor, 'table');
          if (tableNode == null) {
              return false;
          }
          return isTableWithHeader(tableNode);
      };
      TableHeader.prototype.isActive = function (editor) {
          return !!this.getValue(editor);
      };
      TableHeader.prototype.isDisabled = function (editor) {
          var selection = editor.selection;
          if (selection == null) {
              return true;
          }
          if (!distExports$1.Range.isCollapsed(selection)) {
              return true;
          }
          var tableNode = DomEditor.getSelectedNodeByType(editor, 'table');
          if (tableNode == null) {
              // 选区未处于 table node ，则禁用
              return true;
          }
          return false;
      };
      TableHeader.prototype.exec = function (editor, value) {
          if (this.isDisabled(editor)) {
              return;
          }
          // 已经设置了表头，则取消。未设置表头，则设置
          var newValue = !value;
          // 获取第一行所有 cell
          var tableNode = DomEditor.getSelectedNodeByType(editor, 'table');
          if (tableNode == null) {
              return;
          }
          var firstRowCells = getFirstRowCells(tableNode);
          // 设置 isHeader 属性
          firstRowCells.forEach(function (cell) { return distExports$1.Transforms.setNodes(editor, { isHeader: newValue }, {
              at: DomEditor.findPath(editor, cell),
          }); });
      };
      return TableHeader;
  }());

  /**
   * @description table menu
   * @author wangfupeng
   */
  var insertTableMenuConf = {
      key: 'insertTable',
      factory: function () {
          return new InsertTable();
      },
  };
  var deleteTableMenuConf = {
      key: 'deleteTable',
      factory: function () {
          return new DeleteTable();
      },
  };
  var insertTableRowConf = {
      key: 'insertTableRow',
      factory: function () {
          return new InsertRow();
      },
  };
  var deleteTableRowConf = {
      key: 'deleteTableRow',
      factory: function () {
          return new DeleteRow();
      },
  };
  var insertTableColConf = {
      key: 'insertTableCol',
      factory: function () {
          return new InsertCol();
      },
  };
  var deleteTableColConf = {
      key: 'deleteTableCol',
      factory: function () {
          return new DeleteCol();
      },
  };
  var tableHeaderMenuConf = {
      key: 'tableHeader',
      factory: function () {
          return new TableHeader();
      },
  };
  var tableFullWidthMenuConf = {
      key: 'tableFullWidth',
      factory: function () {
          return new TableFullWidth();
      },
  };
  /** Meger / Split conf */
  var mergeTableCellConf = {
      key: 'mergeTableCell',
      factory: function () {
          return new MergeCell();
      },
  };
  var splitTableCellConf = {
      key: 'splitTableCell',
      factory: function () {
          return new SplitCell();
      },
  };
  /** set property conf */
  var setTablePropertyConf = {
      key: 'setTableProperty',
      factory: function () {
          return new TableProperty();
      },
  };
  var setTableCellPropertyConf = {
      key: 'setTableCellProperty',
      factory: function () {
          return new CellProperty();
      },
  };

  /**
   * @description parse html
   * @author wangfupeng
   */
  function parseCellHtml(elem, children, editor) {
      var $elem = $$1(elem);
      children = children.filter(function (child) {
          if (DomEditor.getNodeType(child) === 'paragraph') {
              return true;
          }
          if (distExports$1.Text.isText(child)) {
              return true;
          }
          if (editor.isInline(child)) {
              return true;
          }
          return false;
      });
      // 无 children ，则用纯文本
      if (children.length === 0) {
          children = [{ text: $elem.text().replace(/\s+/gm, ' ') }];
      }
      var colSpan = parseInt($elem.attr('colSpan') || '1', 10);
      var rowSpan = parseInt($elem.attr('rowSpan') || '1', 10);
      var hidden = getStyleValue($elem, 'display') === 'none';
      var width = $elem.attr('width') || 'auto';
      return {
          type: 'table-cell',
          isHeader: getTagName$1($elem) === 'th',
          colSpan: colSpan,
          rowSpan: rowSpan,
          width: width,
          // @ts-ignore
          children: children,
          hidden: hidden,
      };
  }
  var parseCellHtmlConf = {
      selector: 'td:not([data-w-e-type]),th:not([data-w-e-type])', // data-w-e-type 属性，留给自定义元素，保证扩展性
      parseElemHtml: parseCellHtml,
  };
  function parseRowHtml(_elem, children, _editor) {
      var tableCellChildren = [];
      for (var i = 0; i < children.length; i += 1) {
          var child = children[i];
          // 确保是 table-cell 类型
          if (DomEditor.getNodeType(child) === 'table-cell') {
              var tableCell = child;
              var colSpan = tableCell.colSpan || 1;
              tableCellChildren.push(tableCell); // 先添加当前单元格
              // 如果 colSpan > 1，检查是否存在足够的隐藏 table-cell
              for (var j = 1; j < colSpan; j += 1) {
                  var nextChild = children[i + j];
                  if (nextChild
                      && DomEditor.getNodeType(nextChild) === 'table-cell'
                      && nextChild.hidden) {
                      // 已有隐藏的 table-cell，无需补充
                      continue;
                  }
                  else {
                      // 补齐缺少的隐藏 table-cell
                      tableCellChildren.push({
                          type: 'table-cell',
                          children: [{ text: '' }],
                          hidden: true,
                      });
                  }
              }
          }
      }
      return {
          type: 'table-row',
          children: tableCellChildren,
      };
  }
  var parseRowHtmlConf = {
      selector: 'tr:not([data-w-e-type])', // data-w-e-type 属性，留给自定义元素，保证扩展性
      parseElemHtml: parseRowHtml,
  };
  function parseTableHtml(elem, children, _editor) {
      var _a, _b;
      var $elem = $$1(elem);
      // 计算宽度
      var tableWidth = 'auto';
      if (getStyleValue($elem, 'width') === '100%') {
          tableWidth = '100%';
      }
      if ($elem.attr('width') === '100%') {
          tableWidth = '100%';
      } // 兼容 v4 格式
      // 计算高度
      var height = parseInt(getStyleValue($elem, 'height') || '0', 10);
      var tableELement = {
          type: 'table',
          width: tableWidth,
          height: height,
          // @ts-ignore
          children: children.filter(function (child) { return DomEditor.getNodeType(child) === 'table-row'; }),
      };
      var tdList = ((_a = $elem.find('tr')[0]) === null || _a === void 0 ? void 0 : _a.children) || [];
      var colgroupElments = ((_b = $elem.find('colgroup')[0]) === null || _b === void 0 ? void 0 : _b.children) || null;
      // @ts-ignore
      var colLength = children[children.length - 1].children.length;
      if (colgroupElments && colgroupElments.length === colLength) {
          tableELement.columnWidths = Array.from(colgroupElments).map(function (col) {
              return parseInt(col.getAttribute('width'), 10);
          });
      }
      else if (tdList.length > 0) {
          var columnWidths_1 = [];
          Array.from(tdList).forEach(function (td) {
              var colSpan = parseInt($$1(td).attr('colSpan') || '1', 10); // 获取 colSpan，默认为 1
              var width = parseInt(getStyleValue($$1(td), 'width') || '90', 10); // 获取 width，默认为 90
              // 根据 colSpan 的值来填充 columnWidths 数组
              columnWidths_1.push(width);
              for (var i = 1; i < colSpan; i += 1) {
                  columnWidths_1.push(90);
              }
          });
          tableELement.columnWidths = columnWidths_1;
      }
      return tableELement;
  }
  var parseTableHtmlConf = {
      selector: 'table:not([data-w-e-type])', // data-w-e-type 属性，留给自定义元素，保证扩展性
      parseElemHtml: parseTableHtml,
  };

  var _a;
  // 获取 var(--w-e-textarea-border-color) 变量的实际样式值
  var DEFAULT_BORDER_COLOR = (_a = window === null || window === void 0 ? void 0 : window.getComputedStyle(document.documentElement)) === null || _a === void 0 ? void 0 : _a.getPropertyValue('--w-e-textarea-border-color');
  function parseStyleHtml(elem, node, _editor) {
      if (!['TABLE', 'TD', 'TH'].includes(elem.tagName)) {
          return node;
      }
      var $elem = $$1(elem);
      var tableNode = node;
      var backgroundColor = getStyleValue($elem, 'background-color');
      if (!backgroundColor) {
          backgroundColor = getStyleValue($elem, 'background');
      } // word 背景色
      if (backgroundColor) {
          tableNode.backgroundColor = backgroundColor;
      }
      var border = getStyleValue($elem, 'border');
      if (!border && elem.tagName === 'TD') {
          // https://github.com/wangeditor-next/wangEditor-next/blob/master/packages/table-module/src/assets/index.less#L20
          // TD存在默认的css样式，尝试用getComputedStyle获取不到，只能写死
          border = "1px solid ".concat(DEFAULT_BORDER_COLOR);
      }
      var _a = __read((border === null || border === void 0 ? void 0 : border.split(' ')) || [], 3), borderWidth = _a[0], borderStyle = _a[1], borderColor = _a[2];
      borderWidth = getStyleValue($elem, 'border-width') || borderWidth; // border 宽度
      if (borderWidth) {
          tableNode.borderWidth = borderWidth.replace(/[^\d]/g, '');
      }
      borderStyle = getStyleValue($elem, 'border-style') || borderStyle; // border 样式
      if (borderStyle) {
          tableNode.borderStyle = borderStyle === 'none' ? '' : borderStyle;
      }
      borderColor = getStyleValue($elem, 'border-color') || borderColor; // border 颜色
      if (borderColor) {
          tableNode.borderColor = borderColor;
      }
      var textAlign = getStyleValue($elem, 'text-align');
      textAlign = getStyleValue($elem, 'text-align') || textAlign; // 文本 对齐
      if (textAlign) {
          tableNode.textAlign = textAlign;
      }
      return node;
  }

  function withSelection(editor) {
      var apply = editor.apply;
      editor.apply = function (op) {
          if (!distExports$1.Operation.isSelectionOperation(op) || !op.newProperties) {
              // TableCursor.unselect(editor);
              // 仿飞书效果，拖动单元格宽度时，选区不消失
              return apply(op);
          }
          var selection = __assign(__assign({}, editor.selection), op.newProperties);
          if (!distExports$1.Range.isRange(selection)) {
              TableCursor.unselect(editor);
              return apply(op);
          }
          var _a = __read(distExports$1.Editor.nodes(editor, {
              match: isOfType(editor, 'th', 'td'),
              at: distExports$1.Range.start(selection),
          }), 1), fromEntry = _a[0];
          var _b = __read(distExports$1.Editor.nodes(editor, {
              match: isOfType(editor, 'th', 'td'),
              at: distExports$1.Range.end(selection),
          }), 1), toEntry = _b[0];
          if (!fromEntry || !toEntry) {
              TableCursor.unselect(editor);
              return apply(op);
          }
          var _c = __read(fromEntry, 2), fromPath = _c[1];
          var _d = __read(toEntry, 2), toPath = _d[1];
          if (distExports$1.Path.equals(fromPath, toPath) || !hasCommon(editor, [fromPath, toPath], 'table')) {
              TableCursor.unselect(editor);
              return apply(op);
          }
          // TODO: perf: could be improved by passing a Span [fromPath, toPath]
          var filled = filledMatrix(editor, { at: fromPath });
          // find initial bounds
          var from = Point.valueOf(0, 0);
          var to = Point.valueOf(0, 0);
          for (var x = 0; x < filled.length; x += 1) {
              for (var y = 0; y < filled[x].length; y += 1) {
                  var _e = __read(filled[x][y], 1), _f = __read(_e[0], 2), path = _f[1];
                  if (distExports$1.Path.equals(fromPath, path)) {
                      from.x = x;
                      from.y = y;
                  }
                  if (distExports$1.Path.equals(toPath, path)) {
                      to.x = x;
                      to.y = y;
                      break;
                  }
              }
          }
          var start = Point.valueOf(Math.min(from.x, to.x), Math.min(from.y, to.y));
          var end = Point.valueOf(Math.max(from.x, to.x), Math.max(from.y, to.y));
          // expand the selection based on rowspan and colspan
          for (;;) {
              var nextStart = Point.valueOf(start.x, start.y);
              var nextEnd = Point.valueOf(end.x, end.y);
              for (var x = nextStart.x; x <= nextEnd.x; x += 1) {
                  for (var y = nextStart.y; y <= nextEnd.y; y += 1) {
                      var _g = __read(filled[x][y], 2), _h = _g[1], rtl = _h.rtl, ltr = _h.ltr, btt = _h.btt, ttb = _h.ttb;
                      nextStart.x = Math.min(nextStart.x, x - (ttb - 1));
                      nextStart.y = Math.min(nextStart.y, y - (rtl - 1));
                      nextEnd.x = Math.max(nextEnd.x, x + (btt - 1));
                      nextEnd.y = Math.max(nextEnd.y, y + (ltr - 1));
                  }
              }
              if (Point.equals(start, nextStart) && Point.equals(end, nextEnd)) {
                  break;
              }
              start = nextStart;
              end = nextEnd;
          }
          var selected = [];
          var selectedSet = new WeakSet();
          for (var x = start.x; x <= end.x; x += 1) {
              var cells = [];
              for (var y = start.y; y <= end.y; y += 1) {
                  var _j = __read(filled[x][y], 1), _k = __read(_j[0], 1), element = _k[0];
                  selectedSet.add(element);
                  cells.push(filled[x][y]);
              }
              selected.push(cells);
          }
          EDITOR_TO_SELECTION.set(editor, selected);
          EDITOR_TO_SELECTION_SET.set(editor, selectedSet);
          apply(op);
      };
      return editor;
  }

  /**
   * @description editor 插件，重写 editor API
   * @author wangfupeng
   */
  // table cell 内部的删除处理
  function deleteHandler(newEditor) {
      var selection = newEditor.selection;
      if (selection == null) {
          return false;
      }
      var _a = __read(distExports$1.Editor.nodes(newEditor, {
          match: function (n) { return DomEditor.checkNodeType(n, 'table-cell'); },
      }), 1), cellNodeEntry = _a[0];
      if (cellNodeEntry) {
          var _b = __read(cellNodeEntry, 2), cellPath = _b[1];
          var start = distExports$1.Editor.start(newEditor, cellPath);
          if (distExports$1.Point.equals(selection.anchor, start)) {
              return true; // 阻止删除 cell
          }
      }
      return false;
  }
  // #region 删除 cell 内的换行
  /**
   * 判断光标是否在换行符中间 \n|\r
   * @param newEditor
   * @param location
   */
  function isHalfBreak(newEditor, location) {
      var offset = location.offset;
      if (offset === 0) {
          return false;
      }
      var node = distExports$1.Editor.node(newEditor, location);
      if (!distExports$1.Text.isText(node[0])) {
          return false;
      }
      var text = distExports$1.Node.string((node[0]));
      if (offset >= text.length) {
          return false;
      }
      return text[offset - 1] === '\n' && text[offset] === '\r';
  }
  /**
   * 删除 cell 内的换行，光标首尾在同一个位置的情况
   * @param newEditor
   * @returns 是否在内部处理了删除
   */
  function deleteCellBreak(newEditor, unit, direction) {
      var selection = newEditor.selection;
      if (selection == null || unit === 'line') {
          return false;
      }
      // 判断目标位置是否在同一个 cell 内，不在同一个 cell 内不处理
      var _a = __read(distExports$1.Editor.nodes(newEditor, {
          match: function (n) { return DomEditor.checkNodeType(n, 'table-cell'); },
      }), 1), cellNodeEntry = _a[0];
      // 根据删除的方向及当前的光标位置，获取到真实的删除位置
      var targetPoint = selection.anchor;
      if (direction === 'backward' && selection.anchor.offset === 0) {
          targetPoint = distExports$1.Editor.before(newEditor, selection);
      }
      if (direction === 'forward' && distExports$1.Editor.isEnd(newEditor, selection.anchor, selection.anchor.path)) {
          targetPoint = distExports$1.Editor.after(newEditor, selection);
      }
      if (targetPoint == null) {
          return false;
      }
      var aboveCell = distExports$1.Editor.above(newEditor, {
          at: targetPoint,
          match: function (n) { return DomEditor.checkNodeType(n, 'table-cell'); },
      });
      if (aboveCell == null || cellNodeEntry == null || !distExports$1.Path.equals(aboveCell[1], cellNodeEntry[1])) {
          return false;
      }
      var targetNode = distExports$1.Editor.node(newEditor, targetPoint);
      if (!distExports$1.Text.isText(targetNode[0]) || targetNode[0].text.length < 2) {
          return false;
      } // 如果存在\n\r，那长度必定大于2
      // 处理光标在换行符首/尾的情况,|表示光标  |\n\r   \n\r|
      var parameters = direction === 'backward'
          ? [targetPoint.offset - 2, targetPoint.offset]
          : [targetPoint.offset, targetPoint.offset + 2];
      var nodeText = distExports$1.Node.string(targetNode[0]);
      var isBreak = nodeText.slice.apply(nodeText, __spreadArray([], __read(parameters), false)) === '\n\r';
      if (isBreak) {
          distExports$1.Transforms.insertText(newEditor, nodeText.slice(0, parameters[0]) + nodeText.slice(parameters[1]), {
              at: {
                  anchor: distExports$1.Editor.start(newEditor, targetPoint.path),
                  focus: distExports$1.Editor.end(newEditor, targetPoint.path),
              },
          });
          return true;
      }
      // 处理光标在换行符中间的情况
      if (isHalfBreak(newEditor, targetPoint)) {
          distExports$1.Transforms.insertText(newEditor, nodeText.slice(0, selection.anchor.offset - 1) + nodeText.slice(selection.anchor.offset + 1), {
              at: {
                  anchor: distExports$1.Editor.start(newEditor, targetPoint.path),
                  focus: distExports$1.Editor.end(newEditor, targetPoint.path),
              },
          });
          return true;
      }
      return false;
  }
  // #endregion
  /**
   * 判断该 location 有没有命中 table
   * @param editor editor
   * @param location location
   */
  function isTableLocation(editor, location) {
      var tables = distExports$1.Editor.nodes(editor, {
          at: location,
          match: function (n) {
              var type = DomEditor.getNodeType(n);
              return type === 'table';
          },
      });
      var hasTable = !!__spreadArray([], __read(tables), false).find(function () { return true; });
      return hasTable;
  }
  function withTable(editor) {
      var insertBreak = editor.insertBreak, deleteBackward = editor.deleteBackward, deleteForward = editor.deleteForward, deleteFragment = editor.deleteFragment, normalizeNode = editor.normalizeNode, insertData = editor.insertData, handleTab = editor.handleTab, selectAll = editor.selectAll;
      var newEditor = editor;
      // 重写 insertBreak - cell 内换行，只换行文本，不拆分 node
      newEditor.insertBreak = function () {
          var selectedNode = DomEditor.getSelectedNodeByType(newEditor, 'table');
          if (selectedNode != null) {
              // 选中了 table ，则在 cell 内换行
              newEditor.insertText('\n\r');
              return;
          }
          // 未选中 table ，默认的换行
          insertBreak();
      };
      // 重写 delete - cell 内删除，只删除文字，不删除 node
      newEditor.deleteBackward = function (unit) {
          var res = deleteHandler(newEditor);
          if (res) {
              return;
          } // 命中 table cell ，自己处理删除
          if (deleteCellBreak(newEditor, unit, 'backward')) {
              return;
          } // 命中了 cell 内删除换行符，自行处理删除
          // 防止从 table 后面的 p 删除时，删除最后一个 cell - issues/4221
          var selection = newEditor.selection;
          if (selection) {
              var before = distExports$1.Editor.before(newEditor, selection); // 前一个 location
              var tableCell = distExports$1.Editor.above(newEditor, {
                  at: selection,
                  match: function (n) { return DomEditor.checkNodeType(n, 'table-cell'); },
              });
              if (before) {
                  var isTableOnBeforeLocation = isTableLocation(newEditor, before); // before 是否是 table
                  // 如果前面是 table, 当前是 paragraph ，则不执行删除。否则会删除 table 最后一个 cell
                  // 兼容了 table 嵌套 p标签元素 selection数组五层的情况 - issues/342
                  if (!tableCell && isTableOnBeforeLocation && DomEditor.getSelectedNodeByType(newEditor, 'paragraph')) {
                      return;
                  }
              }
          }
          // 执行默认的删除
          deleteBackward(unit);
      };
      // 重写 handleTab 在table内按tab时跳到下一个单元格
      newEditor.handleTab = function () {
          var _a;
          var selectedNode = DomEditor.getSelectedNodeByType(newEditor, 'table');
          if (selectedNode) {
              var above = distExports$1.Editor.above(editor);
              // 常规情况下选中文字外层 table-cell 进行跳转
              if (DomEditor.checkNodeType(above[0], 'table-cell')) {
                  distExports$1.Transforms.select(editor, above[1]);
              }
              var next = distExports$1.Editor.next(editor);
              if (next) {
                  if (next[0] && next[0].text) {
                      // 多个单元格同时选中按 tab 导致错位修复
                      next = (_a = distExports$1.Editor.above(editor, { at: next[1] })) !== null && _a !== void 0 ? _a : next;
                  }
                  distExports$1.Transforms.select(editor, next[1]);
              }
              else {
                  var topLevelNodes = newEditor.children || [];
                  var topLevelNodesLength = topLevelNodes.length;
                  // 在最后一个单元格按tab时table末尾如果没有p则插入p后光标切到p上
                  if (DomEditor.checkNodeType(topLevelNodes[topLevelNodesLength - 1], 'table')) {
                      var p = DomEditor.genEmptyParagraph();
                      distExports$1.Transforms.insertNodes(newEditor, p, { at: [topLevelNodesLength] });
                      // 在表格末尾插入p后再次执行使光标切到p上
                      newEditor.handleTab();
                  }
              }
              return;
          }
          handleTab();
      };
      newEditor.deleteForward = function (unit) {
          var res = deleteHandler(newEditor);
          if (res) {
              return;
          }
          if (deleteCellBreak(newEditor, unit, 'forward')) {
              return;
          }
          // 防止从 table 前面的 p 删除时，删除第一个 cell
          var selection = newEditor.selection;
          if (selection) {
              var after = distExports$1.Editor.after(newEditor, selection); // 后一个 location
              var tableCell = distExports$1.Editor.above(newEditor, {
                  at: selection,
                  match: function (n) { return DomEditor.checkNodeType(n, 'table-cell'); },
              });
              if (after) {
                  var isTableOnAfterLocation = isTableLocation(newEditor, after); // after 是否是 table
                  // 如果后面是 table, 当前是 paragraph，则不执行删除
                  if (!tableCell && isTableOnAfterLocation && DomEditor.getSelectedNodeByType(newEditor, 'paragraph')) {
                      return;
                  }
              }
          }
          // 执行默认的删除
          deleteForward(unit);
      };
      // 重写区域选中的删除，修正可能半选的换行符
      newEditor.deleteFragment = function (unit) {
          var selection = newEditor.selection;
          if (!selection) {
              return;
          }
          var hasChange = false;
          var newSelection = {
              anchor: selection.anchor,
              focus: selection.focus,
          };
          // 是否是从左到右的选区
          var isLeftToRight = distExports$1.Point.isBefore(newSelection.anchor, newSelection.focus);
          if (isHalfBreak(newEditor, selection.anchor)) {
              var nv = distExports$1.Editor[isLeftToRight ? 'before' : 'after'](newEditor, selection.anchor);
              if (nv) {
                  newSelection.anchor = nv;
              }
              hasChange = true;
          }
          if (isHalfBreak(newEditor, selection.focus)) {
              var nv = distExports$1.Editor[isLeftToRight ? 'after' : 'before'](newEditor, selection.focus);
              if (nv) {
                  newSelection.focus = nv;
              }
              hasChange = true;
          }
          if (hasChange) {
              distExports$1.Transforms.setSelection(newEditor, newSelection);
          }
          deleteFragment(unit);
      };
      // 重新 normalize
      newEditor.normalizeNode = function (_a) {
          var _b = __read(_a, 2), node = _b[0], path = _b[1];
          var type = DomEditor.getNodeType(node);
          if (type !== 'table') {
              // 未命中 table ，执行默认的 normalizeNode
              return normalizeNode([node, path]);
          }
          // -------------- table 是 editor 最后一个节点，需要后面插入 p --------------
          var isLast = DomEditor.isLastNode(newEditor, node);
          if (isLast) {
              var p = DomEditor.genEmptyParagraph();
              distExports$1.Transforms.insertNodes(newEditor, p, { at: [path[0] + 1] });
          }
      };
      // 重写 insertData - 粘贴文本
      newEditor.insertData = function (data) {
          var tableNode = DomEditor.getSelectedNodeByType(newEditor, 'table');
          if (tableNode == null) {
              insertData(data); // 执行默认的 insertData
              return;
          }
          // 获取文本，并插入到 cell
          var text = data.getData('text/plain');
          // 单图或图文 插入
          if (text === '\n' || /<img[^>]+>/.test(data.getData('text/html'))) {
              insertData(data);
              return;
          }
          distExports$1.Editor.insertText(newEditor, text);
      };
      // 重写 table-cell 中的全选
      newEditor.selectAll = function () {
          var selection = newEditor.selection;
          if (selection == null) {
              selectAll();
              return;
          }
          var cell = DomEditor.getSelectedNodeByType(newEditor, 'table-cell');
          if (cell == null) {
              selectAll();
              return;
          }
          var anchor = selection.anchor, focus = selection.focus;
          if (!distExports$1.Path.equals(anchor.path.slice(0, 3), focus.path.slice(0, 3))) {
              // 选中了多个 cell ，忽略
              selectAll();
              return;
          }
          var text = distExports$1.Node.string(cell);
          var textLength = text.length;
          if (textLength === 0) {
              selectAll();
              return;
          }
          var path = DomEditor.findPath(newEditor, cell);
          var start = distExports$1.Editor.start(newEditor, path);
          var end = distExports$1.Editor.end(newEditor, path);
          var newSelection = {
              anchor: start,
              focus: end,
          };
          newEditor.select(newSelection); // 选中 table-cell 内部的全部文字
      };
      /**
       * 光标选区行为新增
       */
      withSelection(newEditor);
      /**
       * 添加获取表格批量选择的方法
       */
      newEditor.getTableSelection = function () {
          return EDITOR_TO_SELECTION.get(newEditor) || null;
      };
      /**
       * 重写mark和node操作方法以支持表格批量选择
       */
      var originalAddMark = newEditor.addMark, originalRemoveMark = newEditor.removeMark;
      var originalTransforms = __assign({}, distExports$1.Transforms);
      newEditor.addMark = function (key, value) {
          var tableSelection = EDITOR_TO_SELECTION.get(newEditor);
          if (tableSelection && tableSelection.length > 0) {
              // 表格批量选择：对每个选中的单元格应用mark
              // 保存当前选择状态
              var originalSelection = newEditor.selection;
              tableSelection.forEach(function (row) {
                  row.forEach(function (cell) {
                      var _a = __read(cell[0], 2), cellPath = _a[1];
                      // 为每个单元格设置选择范围（选中整个单元格的内容）
                      var start = distExports$1.Editor.start(newEditor, cellPath);
                      var end = distExports$1.Editor.end(newEditor, cellPath);
                      // 设置选择范围到当前单元格
                      distExports$1.Transforms.select(newEditor, { anchor: start, focus: end });
                      // 在当前单元格范围内应用原始的 addMark 方法
                      originalAddMark(key, value);
                  });
              });
              // 恢复原始选择状态
              if (originalSelection) {
                  distExports$1.Transforms.select(newEditor, originalSelection);
              }
          }
          else {
              // 常规选择：使用原有逻辑
              originalAddMark(key, value);
          }
      };
      newEditor.removeMark = function (key) {
          var tableSelection = EDITOR_TO_SELECTION.get(newEditor);
          if (tableSelection && tableSelection.length > 0) {
              // 表格批量选择：对每个选中的单元格移除mark
              // 保存当前选择状态
              var originalSelection = newEditor.selection;
              tableSelection.forEach(function (row) {
                  row.forEach(function (cell) {
                      var _a = __read(cell[0], 2), cellPath = _a[1];
                      // 为每个单元格设置选择范围（选中整个单元格的内容）
                      var start = distExports$1.Editor.start(newEditor, cellPath);
                      var end = distExports$1.Editor.end(newEditor, cellPath);
                      // 设置选择范围到当前单元格
                      distExports$1.Transforms.select(newEditor, { anchor: start, focus: end });
                      // 在当前单元格范围内应用原始的 removeMark 方法
                      originalRemoveMark(key);
                  });
              });
              // 恢复原始选择状态
              if (originalSelection) {
                  distExports$1.Transforms.select(newEditor, originalSelection);
              }
          }
          else {
              // 常规选择：使用原有逻辑
              originalRemoveMark(key);
          }
      };
      /**
       * 重写Transforms.setNodes以支持表格批量选择（如对齐功能）
       */
      distExports$1.Transforms.setNodes = function (targetEditor, props, options) {
          if (options === void 0) { options = {}; }
          // 只有当传入的editor是当前newEditor且有表格选择时才特殊处理
          if (targetEditor === newEditor) {
              var tableSelection = EDITOR_TO_SELECTION.get(newEditor);
              if (tableSelection && tableSelection.length > 0) {
                  // 排除合并单元格操作
                  if ('hidden' in props || 'rowSpan' in props || 'colSpan' in props) {
                      originalTransforms.setNodes(targetEditor, props, options);
                      return;
                  }
                  // 表格批量选择：对所有选中的单元格应用属性
                  tableSelection.forEach(function (row) {
                      row.forEach(function (cell) {
                          var _a = __read(cell[0], 2), cellPath = _a[1];
                          originalTransforms.setNodes(targetEditor, props, __assign(__assign({}, options), { at: cellPath }));
                      });
                  });
                  return;
              }
          }
          // 常规情况：使用原有逻辑
          originalTransforms.setNodes(targetEditor, props, options);
      };
      // 可继续修改其他 newEditor API ...
      // 返回 editor ，重要！
      return newEditor;
  }

  /**
   * @description pre parse html
   * @author wangfupeng
   */
  /**
   * pre-prase table ，去掉 <tbody>
   * @param table table elem
   */
  function preParse$1(tableElem) {
      var $table = $$1(tableElem);
      var tagName = getTagName$1($table);
      if (tagName !== 'table') {
          return tableElem;
      }
      // 没有 <tbody> 则直接返回
      var $tbody = $table.find('tbody');
      if ($tbody.length === 0) {
          return tableElem;
      }
      // 去掉 <tbody> ，把 <tr> 移动到 <table> 下面
      var $tr = $table.find('tr');
      $table.append($tr);
      $tbody.remove();
      return $table[0];
  }
  var preParseTableHtmlConf = {
      selector: 'table',
      preParseHtml: preParse$1,
  };

  /**
   * @description render cell
   * @author wangfupeng
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  function renderTableCell(cellNode, children, editor) {
      var isFirstRow = isCellInFirstRow(editor, cellNode);
      var _a = cellNode, _b = _a.colSpan, colSpan = _b === void 0 ? 1 : _b, _c = _a.rowSpan, rowSpan = _c === void 0 ? 1 : _c, _d = _a.isHeader, isHeader = _d === void 0 ? false : _d, _e = _a.hidden, hidden = _e === void 0 ? false : _e;
      var selected = TableCursor.isSelected(editor, cellNode);
      // ------------------ 不是第一行，直接渲染 <td> ------------------
      if (!isFirstRow) {
          return (jsx("td", { colSpan: colSpan, rowSpan: rowSpan, "data-block-type": "table-cell", className: selected ? 'w-e-selected' : '', style: { display: hidden ? 'none' : '' } }, children));
      }
      // ------------------ 是第一行：1. 判断 th ；2. 拖拽列宽 ------------------
      var Tag = isHeader ? 'th' : 'td';
      var vnode = (jsx(Tag, { colSpan: colSpan, rowSpan: rowSpan, "data-block-type": "table-cell", className: selected ? 'w-e-selected' : '', style: { display: hidden ? 'none' : '' } }, children));
      return vnode;
  }

  /**
   * @description render row
   * @author wangfupeng
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  function renderTableRow(_elemNode, children, _editor) {
      var vnode = jsx("tr", null, children);
      return vnode;
  }

  /** *
   * 计算 cell border 距离 table 左侧距离
   */
  function getCumulativeWidths(columnWidths) {
      var e_1, _a;
      var cumulativeWidths = [];
      var totalWidth = 0;
      try {
          for (var columnWidths_1 = __values(columnWidths), columnWidths_1_1 = columnWidths_1.next(); !columnWidths_1_1.done; columnWidths_1_1 = columnWidths_1.next()) {
              var width = columnWidths_1_1.value;
              totalWidth += width;
              cumulativeWidths.push(totalWidth);
          }
      }
      catch (e_1_1) { e_1 = { error: e_1_1 }; }
      finally {
          try {
              if (columnWidths_1_1 && !columnWidths_1_1.done && (_a = columnWidths_1.return)) _a.call(columnWidths_1);
          }
          finally { if (e_1) throw e_1.error; }
      }
      return cumulativeWidths;
  }
  /** *
   * 用于计算拖动 cell 时，cell 宽度变化的比例
   */
  function getColumnWidthRatios(columnWidths) {
      var e_2, _a;
      var columnWidthsRatio = [];
      var totalWidth = columnWidths.reduce(function (a, b) { return a + b; }, 0);
      try {
          for (var columnWidths_2 = __values(columnWidths), columnWidths_2_1 = columnWidths_2.next(); !columnWidths_2_1.done; columnWidths_2_1 = columnWidths_2.next()) {
              var width = columnWidths_2_1.value;
              columnWidthsRatio.push(width / totalWidth);
          }
      }
      catch (e_2_1) { e_2 = { error: e_2_1 }; }
      finally {
          try {
              if (columnWidths_2_1 && !columnWidths_2_1.done && (_a = columnWidths_2.return)) _a.call(columnWidths_2);
          }
          finally { if (e_2) throw e_2.error; }
      }
      return columnWidthsRatio;
  }
  /**
   * 监听 table 内部变化，如新增行、列，删除行列等操作，引起的高度变化。
   * ResizeObserver 需要即时释放，以免引起内存泄露
   */
  var resizeObserver = null;
  function observerTableResize(editor, elm) {
      if (isHTMLElememt(elm)) {
          var table = elm.querySelector('table');
          if (table) {
              resizeObserver = new ResizeObserver(function (_a) {
                  var _b = __read(_a, 1), contentRect = _b[0].contentRect;
                  // 当非拖动引起的宽度变化，需要调整 columnWidths
                  distExports$1.Transforms.setNodes(editor, {
                      scrollWidth: contentRect.width,
                      height: contentRect.height,
                  }, { mode: 'highest' });
              });
              resizeObserver.observe(table);
          }
      }
  }
  function unObserveTableResize() {
      if (resizeObserver) {
          resizeObserver === null || resizeObserver === void 0 ? void 0 : resizeObserver.disconnect();
          resizeObserver = null;
      }
  }
  // 是否为光标选区行为
  var isSelectionOperation = false;
  // 拖拽列宽相关信息
  var isMouseDownForResize = false;
  var clientXWhenMouseDown = 0;
  var cellWidthWhenMouseDown = 0;
  var editorWhenMouseDown = null;
  var $window = $$1(window);
  function onMouseDown(event) {
      var elem = event.target;
      // 判断是否为光标选区行为，对列宽变更行为进行过滤
      // console.log('onMouseDown', elem)
      if (elem.closest('[data-block-type="table-cell"]')) {
          isSelectionOperation = true;
      }
      else if (elem.tagName === 'DIV' && elem.closest('.column-resizer-item')) {
          if (editorWhenMouseDown === null) {
              return;
          }
          var _a = __read(distExports$1.Editor.nodes(editorWhenMouseDown, {
              match: isOfType(editorWhenMouseDown, 'table'),
          }), 1), _b = __read(_a[0], 1), elemNode = _b[0];
          var _c = elemNode, _d = _c.columnWidths, columnWidths = _d === void 0 ? [] : _d, _e = _c.resizingIndex, resizingIndex = _e === void 0 ? -1 : _e;
          // 记录必要信息
          isMouseDownForResize = true;
          var clientX = event.clientX;
          clientXWhenMouseDown = clientX;
          cellWidthWhenMouseDown = columnWidths[resizingIndex];
          document.body.style.cursor = 'col-resize';
          event.preventDefault();
      }
      // eslint-disable-next-line @typescript-eslint/no-use-before-define
      $window.on('mousemove', onMouseMove);
      // eslint-disable-next-line @typescript-eslint/no-use-before-define
      $window.on('mouseup', onMouseUp);
  }
  $window.on('mousedown', onMouseDown);
  var onMouseMove = throttle(function (event) {
      if (!isMouseDownForResize) {
          return;
      }
      if (editorWhenMouseDown === null) {
          return;
      }
      event.preventDefault();
      var clientX = event.clientX;
      var newWith = cellWidthWhenMouseDown + (clientX - clientXWhenMouseDown); // 计算新宽度
      newWith = Math.floor(newWith * 100) / 100; // 保留小数点后两位
      if (newWith < 30) {
          newWith = 30;
      } // 最小宽度
      var _a = __read(distExports$1.Editor.nodes(editorWhenMouseDown, {
          match: isOfType(editorWhenMouseDown, 'table'),
      }), 1), _b = __read(_a[0], 1), elemNode = _b[0];
      var _c = elemNode, _d = _c.columnWidths, columnWidths = _d === void 0 ? [] : _d, _e = _c.resizingIndex, resizingIndex = _e === void 0 ? -1 : _e;
      var cumulativeTotalWidth = columnWidths.reduce(function (a, b) { return a + b; }, 0);
      var remainWidth = cumulativeTotalWidth - columnWidths[resizingIndex];
      // 如果拖动引起的宽度超过容器宽度，则不调整
      var containerElement = document.querySelector('.table-container');
      if (containerElement && newWith > cellWidthWhenMouseDown) {
          // 允许缩小，但不允许放大
          if (remainWidth + newWith > containerElement.clientWidth) {
              newWith = Math.max(30, cellWidthWhenMouseDown); // 确保不小于最小宽度
          }
      }
      var adjustColumnWidths = __spreadArray([], __read(columnWidths), false).map(function (width) { return Math.floor(width); });
      adjustColumnWidths[resizingIndex] = newWith;
      // 这是宽度
      distExports$1.Transforms.setNodes(editorWhenMouseDown, { columnWidths: adjustColumnWidths }, {
          mode: 'highest',
      });
  }, 100);
  function onMouseUp(_event) {
      isSelectionOperation = false;
      isMouseDownForResize = false;
      editorWhenMouseDown = null;
      document.body.style.cursor = '';
      // 解绑事件
      // eslint-disable-next-line @typescript-eslint/no-use-before-define
      $window.off('mousemove', onMouseMove);
      // eslint-disable-next-line @typescript-eslint/no-use-before-define
      $window.off('mouseup', onMouseUp);
  }
  /**
   * 鼠标移动时，判断在哪个 Cell border 上
   * Class 先 visible 后 highlight @跟随飞书
   * 避免光标选区功能收到干扰
   */
  function handleCellBorderVisible(editor, elemNode, e, scrollWidth) {
      if (editor.isDisabled()) {
          return;
      }
      if (isSelectionOperation || isMouseDownForResize) {
          return;
      }
      var _a = elemNode, _b = _a.width, tableWidth = _b === void 0 ? 'auto' : _b, _c = _a.columnWidths, columnWidths = _c === void 0 ? [] : _c, isHoverCellBorder = _a.isHoverCellBorder, resizingIndex = _a.resizingIndex;
      // Cell Border 宽度为 10px
      var clientX = e.clientX, target = e.target;
      // 当单元格合并的时候，鼠标在 cell 中间，则不显示 cell border
      if (isHTMLElememt(target)) {
          var rect = target.getBoundingClientRect();
          if (clientX > rect.x + 5 && clientX < rect.x + rect.width - 5) {
              if (isHoverCellBorder) {
                  distExports$1.Transforms.setNodes(editor, { isHoverCellBorder: false, resizingIndex: -1 }, { mode: 'highest' });
              }
              return;
          }
      }
      if (isHTMLElememt(target)) {
          var parent_1 = target.closest('.table');
          if (parent_1) {
              // eslint-disable-next-line @typescript-eslint/no-shadow
              var clientX_1 = e.clientX;
              var rect = parent_1.getBoundingClientRect();
              var widths = tableWidth === '100%'
                  ? getColumnWidthRatios(columnWidths).map(function (v) { return v * scrollWidth; })
                  : columnWidths;
              var cumulativeWidths = getCumulativeWidths(widths);
              // 鼠标移动时，计算当前鼠标位置，判断在哪个 Cell border 上
              for (var i = 0; i < cumulativeWidths.length; i += 1) {
                  if (clientX_1 - rect.x >= cumulativeWidths[i] - 5
                      && clientX_1 - rect.x < cumulativeWidths[i] + 5) {
                      // 节流，防止多次引起Transforms.setNodes重绘
                      if (resizingIndex === i) {
                          return;
                      }
                      distExports$1.Transforms.setNodes(editor, { isHoverCellBorder: true, resizingIndex: i }, { mode: 'highest' });
                      return;
                  }
              }
          }
      }
      // 鼠标移出时，重置
      if (isHoverCellBorder === true) {
          distExports$1.Transforms.setNodes(editor, { isHoverCellBorder: false, resizingIndex: -1 }, {
              mode: 'highest',
          });
      }
  }
  /**
   * 设置 class highlight
   * 将 render-cell.tsx 拖动功能迁移至 div.column-resize
   */
  function handleCellBorderHighlight(editor, e) {
      if (e.type === 'mouseenter') {
          distExports$1.Transforms.setNodes(editor, { isResizing: true }, { mode: 'highest' });
      }
      else {
          distExports$1.Transforms.setNodes(editor, { isResizing: false }, { mode: 'highest' });
      }
  }
  function handleCellBorderMouseDown(editor, _elemNode) {
      if (isMouseDownForResize) {
          return;
      } // 此时正在修改列宽
      editorWhenMouseDown = editor;
  }

  /**
   * @description render table
   * @author wangfupeng
   */
  /**
   * 计算 table 是否可编辑。如果选区跨域 table 和外部内容，删除，会导致 table 结构打乱。所以，有时要让 table 不可编辑
   * @param editor editor
   * @param tableElem table elem
   */
  function getContentEditable(editor, tableElem) {
      if (editor.isDisabled()) {
          return false;
      }
      var selection = editor.selection;
      if (selection == null) {
          return true;
      }
      if (distExports$1.Range.isCollapsed(selection)) {
          return true;
      }
      var anchor = selection.anchor, focus = selection.focus;
      var tablePath = DomEditor.findPath(editor, tableElem);
      var tableStart = distExports$1.Editor.start(editor, tablePath);
      var tableEnd = distExports$1.Editor.end(editor, tablePath);
      var isAnchorInTable = distExports$1.Point.compare(anchor, tableEnd) <= 0 && distExports$1.Point.compare(anchor, tableStart) >= 0;
      var isFocusInTable = distExports$1.Point.compare(focus, tableEnd) <= 0 && distExports$1.Point.compare(focus, tableStart) >= 0;
      // 选区在 table 内部，且选中了同一个单元格。表格可以编辑
      if (isAnchorInTable && isFocusInTable) {
          if (distExports$1.Path.equals(anchor.path.slice(0, 3), focus.path.slice(0, 3))) {
              return true;
          }
      }
      return false;
  }
  function renderTable(elemNode, children, editor) {
      // 是否可编辑
      var editable = getContentEditable(editor, elemNode);
      // 宽度
      var _a = elemNode, _b = _a.width, tableWidth = _b === void 0 ? 'auto' : _b, height = _a.height, _c = _a.columnWidths, columnWidths = _c === void 0 ? [] : _c, _d = _a.scrollWidth, scrollWidth = _d === void 0 ? 0 : _d, isHoverCellBorder = _a.isHoverCellBorder, resizingIndex = _a.resizingIndex, isResizing = _a.isResizing;
      // 光标是否选中
      var selected = DomEditor.isNodeSelected(editor, elemNode);
      // 光标是否有选区
      var _f = __read(TableCursor.selection(editor), 1), isSelecting = _f[0];
      // 列宽之间比值
      var columnWidthRatios = getColumnWidthRatios(columnWidths);
      var vnode = (jsx("div", { className: "table-container", "data-selected": selected, on: {
              mousedown: function (e) {
                  // @ts-ignore 阻止光标定位到 table 后面
                  if (e.target.tagName === 'DIV') {
                      e.preventDefault();
                  }
                  if (editor.isDisabled()) {
                      return;
                  }
                  // @ts-ignore 如果用户行为是获取焦点输入文本时，需释放选区
                  if (e.target.closest('[data-block-type="table-cell"]')) {
                      TableCursor.unselect(editor);
                  }
                  // 是否需要定位到 table 内部
                  var tablePath = DomEditor.findPath(editor, elemNode);
                  var tableStart = distExports$1.Editor.start(editor, tablePath);
                  var selection = editor.selection;
                  if (selection == null) {
                      editor.select(tableStart); // 选中 table 内部
                      return;
                  }
                  var path = selection.anchor.path;
                  if (path[0] === tablePath[0]) {
                      return;
                  } // 当前选区，就在 table 内部
                  // @ts-ignore
                  if (e.target.tagName === 'DIV') {
                      editor.select(tableStart);
                  } // 选中 table 内部
              },
          } },
          jsx("table", { width: tableWidth, contentEditable: editable, 
              /**
               * 1. 当表格处于选区状态，屏蔽 Chrome 自带的样式
               * 2. table 宽度为 auto 时，宽度为 列宽之和
               * 3. 鼠标移动到 单元格 边缘，设置 visible className
               */
              className: "table ".concat(isSelecting ? 'table-selection-none' : ''), style: {
                  width: tableWidth === '100%' ? tableWidth : "".concat(columnWidths.reduce(function (a, b) { return a + b; }, 0), "px"),
              }, on: {
                  mousemove: debounce(function (e) { return handleCellBorderVisible(editor, elemNode, e, scrollWidth); }, 25),
              } },
              jsx("colgroup", { contentEditable: false }, 
              /**
               * 剔除 firstRowCells，因单元格合并 表头 th，会计算错误。
               * 使用 columnWidth 数组长度代表列数
               * 拖动行为及变量设置均参考 飞书
               */
              columnWidths.map(function (width) {
                  return jsx("col", { width: width });
              })),
              jsx("tbody", null, children)),
          jsx("div", { className: "column-resizer", contentEditable: false }, columnWidths.map(function (width, index) {
              var minWidth = width;
              /**
               * table width 为 100% 模式时
               * columnWidths 表示的是比例
               * 1. 需要计算出真实的宽度
               */
              if (tableWidth === '100%') {
                  minWidth = columnWidthRatios[index] * scrollWidth;
              }
              return (jsx("div", { className: "column-resizer-item", style: { minWidth: "".concat(minWidth, "px") } },
                  jsx("div", { className: "resizer-line-hotzone ".concat(isHoverCellBorder && index === resizingIndex ? 'visible ' : '').concat(isResizing && index === resizingIndex ? 'highlight' : ''), style: { height: "".concat(height, "px") }, on: {
                          mouseenter: function (e) { return handleCellBorderHighlight(editor, e); },
                          mouseleave: function (e) { return handleCellBorderHighlight(editor, e); },
                          mousedown: function (_e) { return handleCellBorderMouseDown(editor); },
                      } },
                      jsx("div", { className: "resizer-line" }))));
          }))));
      /**
       * 移出直接返回 vnode
       * 添加 ObserverResize 监听行为
       * 监听 table 内部变化，更新 table resize-bar 高度
       */
      var containerVnode = h$1('div', {
          hook: {
              insert: function (_a) {
                  var elm = _a.elm;
                  return observerTableResize(editor, elm);
              },
              destroy: function () {
                  unObserveTableResize();
              },
          },
      }, vnode);
      return containerVnode;
  }

  /**
   * @description render elem
   * @author wangfupeng
   */
  var renderTableConf = {
      type: 'table',
      renderElem: renderTable,
  };
  var renderTableRowConf = {
      type: 'table-row',
      renderElem: renderTableRow,
  };
  var renderTableCellConf = {
      type: 'table-cell',
      renderElem: renderTableCell,
  };

  /**
   * @description vdom utils fn
   * @author wangfupeng
   */
  // /**
  //  * 给 vnode 添加 dataset
  //  * @param vnode vnode
  //  * @param newDataset { key: val }
  //  */
  // export function addVnodeDataset(vnode: VNode, newDataset: Dataset) {
  //   if (vnode.data == null) vnode.data = {}
  //   const data = vnode.data
  //   if (data.dataset == null) data.dataset = {}
  //   Object.assign(data.dataset, newDataset)
  // }
  /**
   * 给 vnode 添加样式
   * @param vnode vnode
   * @param newStyle { key: val }
   */
  function addVnodeStyle(vnode, newStyle) {
      if (vnode.data == null) {
          vnode.data = {};
      }
      var data = vnode.data;
      if (data.style == null) {
          data.style = {};
      }
      Object.assign(data.style, newStyle);
  }

  /**
   * 添加样式
   * @param node slate elem
   * @param vnode vnode
   * @returns vnode
   */
  function renderStyle$1(node, vnode) {
      var _a, _b;
      if (!distExports$1.Element.isElement(node)) {
          return vnode;
      }
      var _c = node, backgroundColor = _c.backgroundColor, borderWidth = _c.borderWidth, borderStyle = _c.borderStyle, borderColor = _c.borderColor, textAlign = _c.textAlign;
      var props = {};
      if (backgroundColor) {
          props.backgroundColor = backgroundColor;
      }
      if (borderWidth) {
          props.borderWidth = "".concat(borderWidth, "px");
      }
      if (borderStyle) {
          props.borderStyle = borderStyle === 'none' ? '' : borderStyle;
      }
      if (borderColor) {
          props.borderColor = borderColor;
      }
      if (textAlign) {
          props.textAlign = textAlign;
      }
      var styleVnode = vnode;
      if (node.type === 'table') {
          addVnodeStyle((_b = ((_a = styleVnode.children) === null || _a === void 0 ? void 0 : _a[0]).children) === null || _b === void 0 ? void 0 : _b[0], props);
      }
      else {
          addVnodeStyle(styleVnode, props);
      }
      return styleVnode;
  }

  /**
   * @description style to html
   * @author hsuna
   */
  function styleToHtml(node, elemHtml) {
      if (node.type !== 'table' && node.type !== 'table-cell') {
          return elemHtml;
      }
      var backgroundColor = node.backgroundColor, borderWidth = node.borderWidth, borderStyle = node.borderStyle, borderColor = node.borderColor, textAlign = node.textAlign;
      if (!(backgroundColor || borderWidth || borderStyle || borderColor || textAlign)) {
          return elemHtml;
      }
      // 设置样式
      var $elem = $$1(elemHtml);
      if (backgroundColor) {
          $elem.css('background-color', backgroundColor);
      }
      if (borderWidth) {
          $elem.css('border-width', "".concat(borderWidth, "px"));
      }
      if (borderStyle) {
          $elem.css('border-style', borderStyle === 'none' ? '' : borderStyle);
      }
      if (borderColor) {
          $elem.css('border-color', borderColor);
      }
      if (textAlign) {
          $elem.css('text-align', textAlign);
      }
      // 输出 html
      return getOuterHTML($elem);
  }

  /**
   * @description table module
   * @author wangfupeng
   */
  var table = {
      renderStyle: renderStyle$1,
      styleToHtml: styleToHtml,
      parseStyleHtml: parseStyleHtml,
      renderElems: [renderTableConf, renderTableRowConf, renderTableCellConf],
      elemsToHtml: [tableToHtmlConf, tableRowToHtmlConf, tableCellToHtmlConf],
      preParseHtml: [preParseTableHtmlConf],
      parseElemsHtml: [parseCellHtmlConf, parseRowHtmlConf, parseTableHtmlConf],
      menus: [
          insertTableMenuConf,
          deleteTableMenuConf,
          insertTableRowConf,
          deleteTableRowConf,
          insertTableColConf,
          deleteTableColConf,
          tableHeaderMenuConf,
          tableFullWidthMenuConf,
          mergeTableCellConf,
          splitTableCellConf,
          setTablePropertyConf,
          setTableCellPropertyConf,
      ],
      editorPlugin: withTable,
  };

  /**
   * @description i18n en
   * @author wangfupeng
   */
  var enResources$2 = {
      videoModule: {
          delete: 'Delete',
          uploadVideo: 'Upload video',
          insertVideo: 'Insert video',
          videoSrc: 'Video source',
          videoSrcPlaceHolder: 'Video file url, or third-party <iframe>',
          videoPoster: 'Video poster',
          videoPosterPlaceHolder: 'Poster image url',
          ok: 'Ok',
          editSize: 'Edit size',
          edit: 'Edit video',
          width: 'Width',
          height: 'Height',
      },
  };

  /**
   * @description i18n zh-CN
   * @author wangfupeng
   */
  var zhResources$2 = {
      videoModule: {
          delete: '删除视频',
          uploadVideo: '上传视频',
          insertVideo: '插入视频',
          videoSrc: '视频地址',
          videoSrcPlaceHolder: '视频文件 url 或第三方 <iframe>',
          videoPoster: '视频封面',
          videoPosterPlaceHolder: '封面图片 url',
          ok: '确定',
          editSize: '修改尺寸',
          edit: '编辑视频',
          width: '宽度',
          height: '高度',
      },
  };

  /**
   * @description i18n entry
   * @author wangfupeng
   */
  i18nAddResources('en', enResources$2);
  i18nAddResources('zh-CN', zhResources$2);

  /**
   * @description DOM 操作
   * @author wangfupeng
   */
  if (append) {
      $$1.fn.append = append;
  }
  if (on) {
      $$1.fn.on = on;
  }
  if (focus) {
      $$1.fn.focus = focus;
  }
  if (attr) {
      $$1.fn.attr = attr;
  }
  if (val) {
      $$1.fn.val = val;
  }
  if (html) {
      $$1.fn.html = html;
  }
  if (parent) {
      $$1.fn.parent = parent;
  }
  if (hasClass) {
      $$1.fn.hasClass = hasClass;
  }
  if (empty) {
      $$1.fn.empty = empty;
  }
  /**
   * 获取 tagName lower-case
   * @param $elem $elem
   */
  function getTagName($elem) {
      if ($elem.length) {
          return $elem[0].tagName.toLowerCase();
      }
      return '';
  }
  /**
   * 生成带 size 样式的 iframe html
   * @param iframeHtml iframe html string
   * @param width width
   * @param height height
   * @returns iframe html string with size style
   */
  function genSizeStyledIframeHtml(iframeHtml, width, height, style) {
      if (width === void 0) { width = 'auto'; }
      if (height === void 0) { height = 'auto'; }
      if (style === void 0) { style = {}; }
      var $iframe = $$1(iframeHtml);
      var _a = style.width, styleWidth = _a === void 0 ? '' : _a, _b = style.height, styleHeight = _b === void 0 ? '' : _b;
      var styleStr = '';
      if (styleWidth) {
          styleStr += "width: ".concat(styleWidth, ";");
      }
      if (styleHeight) {
          styleStr += "height: ".concat(styleHeight, ";");
      }
      $iframe.attr('width', width);
      $iframe.attr('height', height);
      $iframe.attr('style', styleStr);
      return $iframe[0].outerHTML;
  }

  /**
   * @description to html
   * @author wangfupeng
   */
  function videoToHtml(elemNode, _childrenHtml) {
      var _a = elemNode, _b = _a.src, src = _b === void 0 ? '' : _b, _c = _a.poster, poster = _c === void 0 ? '' : _c, _d = _a.width, width = _d === void 0 ? 'auto' : _d, _e = _a.height, height = _e === void 0 ? 'auto' : _e, _f = _a.style, style = _f === void 0 ? {} : _f, _g = _a.textAlign, textAlign = _g === void 0 ? 'center' : _g;
      var res = "<div data-w-e-type=\"video\" data-w-e-is-void style=\"text-align: ".concat(textAlign, ";\">\n");
      if (src.trim().indexOf('<iframe ') === 0) {
          // iframe 形式
          var iframeHtml = genSizeStyledIframeHtml(src, width, height, style);
          res += iframeHtml;
      }
      else {
          // 其他，mp4 等 url 格式
          var _h = style.width, styleWidth = _h === void 0 ? '' : _h, _j = style.height, styleHeight = _j === void 0 ? '' : _j;
          var styleStr = '';
          if (styleWidth) {
              styleStr += "width: ".concat(styleWidth, ";");
          }
          if (styleHeight) {
              styleStr += "height: ".concat(styleHeight, ";");
          }
          res += "<video poster=\"".concat(poster, "\" controls=\"true\" width=\"").concat(width, "\" height=\"").concat(height, "\" style=\"").concat(styleStr, "\"><source src=\"").concat(src, "\" type=\"video/mp4\"/></video>");
      }
      res += '\n</div>';
      return res;
  }
  var videoToHtmlConf = {
      type: 'video',
      elemToHtml: videoToHtml,
  };

  /**
   * @description video menu config
   * @author wangfupeng
   */
  function genUploadVideoMenuConfig() {
      return {
          server: '', // server API 地址，需用户配置
          fieldName: 'wangeditor-uploaded-video', // formData 中，文件的 key
          maxFileSize: 10 * 1024 * 1024, // 10M
          maxNumberOfFiles: 5, // 最多上传 xx 个视频
          allowedFileTypes: ['video/*'],
          meta: {
          // 自定义上传参数，例如传递验证的 token 等。参数会被添加到 formData 中，一起上传到服务端。
          // 例如：token: 'xxxxx', x: 100
          },
          metaWithUrl: false,
          // headers: {
          //   // 自定义 http headers
          //   // 例如：Accept: 'text/x-json', a: 100,
          // },
          withCredentials: false,
          timeout: 30 * 1000, // 30s
          onBeforeUpload: function (files) { return files; }, // 返回 false 则终止上传
          onProgress: function (_progress) {
              /* on progress */
          },
          onSuccess: function (_file, _res) {
              /* on success */
          },
          onFailed: function (file, res) {
              /* on failed */
              console.error("'".concat(file.name, "' upload failed"), res);
          },
          onError: function (file, err, res) {
              /* on error */
              /* on timeout */
              console.error("'".concat(file.name, " upload error"), err, res);
          },
          // 自定义插入视频，用户配置
          // customInsert: (res, insertFn) => {},
          // 自定义上传视频，用户配置
          // customUpload: (file, insertFn) => {},
          // 自定义选择，并上传视频，如：图床 （用户配置）
          // customBrowseAndUpload: insertFn => {},
      };
  }
  /**
   * 生成插入网络视频的配置
   */
  function genInsertVideoMenuConfig() {
      return {
          onInsertedVideo: function (_node) {
              // 插入视频之后的 callback
          },
          /**
           * 检查 video ，支持 async
           * @param src src
           * @param poster poster
           */
          checkVideo: function (_src, _poster) {
              // 1. 返回 true ，说明检查通过
              // 2. 返回一个字符串，说明检查未通过，编辑器会阻止插入。会 alert 出错误信息（即返回的字符串）
              // 3. 返回 undefined（即没有任何返回），说明检查未通过，编辑器会阻止插入
              return true;
          },
          /**
           * 转换 video src
           * @param src src
           * @returns new src
           */
          parseVideoSrc: function (src) {
              return src;
          },
      };
  }

  /**
   * @description 工具函数
   * @author wangfupeng
   */
  /**
   * 获取随机数字符串
   * @param prefix 前缀
   * @returns 随机数字符串
   */
  function genRandomStr(prefix) {
      if (prefix === void 0) { prefix = 'r'; }
      return "".concat(prefix, "-").concat(nanoid());
  }
  function replaceSymbols(str) {
      return str.replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }
  function styleStringToObject(styleString) {
      var styleObject = {};
      // 去掉字符串两端的空格，然后按分号分割
      var styles = styleString.trim().split(';');
      // 迭代每一个样式属性对
      styles.forEach(function (style) {
          if (style) {
              // 忽略空字符串
              var _a = __read(style.split(':'), 2), property = _a[0], value = _a[1];
              if (property && value) {
                  // 去掉两端的空格并将结果存储在对象中
                  styleObject[property.trim()] = value.trim();
              }
          }
      });
      return styleObject;
  }

  /**
   * @description 修改视频尺寸
   * @author wangfupeng
   */
  /**
   * 生成唯一的 DOM ID
   */
  function genDomID$2() {
      return genRandomStr('w-e-insert-video');
  }
  var EditorVideoSizeMenu = /** @class */ (function () {
      function EditorVideoSizeMenu() {
          this.title = t$2('videoModule.editSize');
          this.tag = 'button';
          this.showModal = true; // 点击 button 时显示 modal
          this.modalWidth = 320;
          this.$content = null;
          this.widthInputId = genDomID$2();
          this.heightInputId = genDomID$2();
          this.buttonId = genDomID$2();
      }
      EditorVideoSizeMenu.prototype.getSelectedVideoNode = function (editor) {
          return DomEditor.getSelectedNodeByType(editor, 'video');
      };
      EditorVideoSizeMenu.prototype.getValue = function (_editor) {
          // 插入菜单，不需要 value
          return '';
      };
      EditorVideoSizeMenu.prototype.isActive = function (_editor) {
          // 任何时候，都不用激活 menu
          return false;
      };
      EditorVideoSizeMenu.prototype.exec = function (_editor, _value) {
          // 点击菜单时，弹出 modal 之前，不需要执行其他代码
          // 此处空着即可
      };
      EditorVideoSizeMenu.prototype.isDisabled = function (editor) {
          if (editor.selection == null) {
              return true;
          }
          var videoNode = this.getSelectedVideoNode(editor);
          if (videoNode == null) {
              // 选区未处于 video node ，则禁用
              return true;
          }
          return false;
      };
      EditorVideoSizeMenu.prototype.getModalPositionNode = function (editor) {
          return this.getSelectedVideoNode(editor);
      };
      EditorVideoSizeMenu.prototype.getModalContentElem = function (editor) {
          var _a = this, widthInputId = _a.widthInputId, heightInputId = _a.heightInputId, buttonId = _a.buttonId;
          var _b = __read(genModalInputElems(t$2('videoModule.width'), widthInputId, 'auto'), 2), widthContainerElem = _b[0], inputWidthElem = _b[1];
          var $inputWidth = $$1(inputWidthElem);
          var _c = __read(genModalInputElems(t$2('videoModule.height'), heightInputId, 'auto'), 2), heightContainerElem = _c[0], inputHeightElem = _c[1];
          var $inputHeight = $$1(inputHeightElem);
          var _d = __read(genModalButtonElems(buttonId, t$2('videoModule.ok')), 1), buttonContainerElem = _d[0];
          var videoNode = this.getSelectedVideoNode(editor);
          if (this.$content == null) {
              // 第一次渲染
              var $content_1 = $$1('<div></div>');
              // 绑定事件（第一次渲染时绑定，不要重复绑定）
              $content_1.on('click', "#".concat(buttonId), function (e) {
                  e.preventDefault();
                  var rawWidth = $content_1.find("#".concat(widthInputId)).val().trim();
                  var rawHeight = $content_1.find("#".concat(heightInputId)).val().trim();
                  var isPercentage = function (value) { return /^\d+(\.\d+)?%$/.test(value); }; // 检查是否为合法的百分比字符串
                  var isNumeric = function (value) { return /^\d+(\.\d+)?$/.test(value); }; // 检查是否为合法的数字
                  var width = 'auto';
                  var height = 'auto';
                  if (isPercentage(rawWidth)) {
                      width = rawWidth;
                  }
                  else if (isNumeric(rawWidth)) {
                      width = "".concat(parseInt(rawWidth, 10), "px");
                  }
                  if (isPercentage(rawHeight)) {
                      height = rawHeight;
                  }
                  else if (isNumeric(rawHeight)) {
                      height = "".concat(parseInt(rawHeight, 10), "px");
                  }
                  var _a = videoNode.style, style = _a === void 0 ? {} : _a;
                  editor.restoreSelection();
                  var props = {
                      style: __assign(__assign({}, style), { width: width, height: height }),
                  };
                  // 修改尺寸
                  distExports$1.Transforms.setNodes(editor, props, {
                      match: function (n) { return DomEditor.checkNodeType(n, 'video'); },
                  });
                  editor.hidePanelOrModal(); // 隐藏 modal
              });
              this.$content = $content_1;
          }
          var $content = this.$content;
          // 先清空，再重新添加 DOM 内容
          $content.empty();
          $content.append(widthContainerElem);
          $content.append(heightContainerElem);
          $content.append(buttonContainerElem);
          if (videoNode == null) {
              return $content[0];
          }
          // 初始化 input 值
          var _e = videoNode.style, style = _e === void 0 ? {} : _e;
          var _f = style.width, width = _f === void 0 ? '' : _f, _g = style.height, height = _g === void 0 ? '' : _g;
          $inputWidth.val(width);
          $inputHeight.val(height);
          setTimeout(function () {
              $inputWidth.focus();
          });
          return $content[0];
      };
      return EditorVideoSizeMenu;
  }());

  /**
   * @description icon svg
   * @author wangfupeng
   */
  /**
   * 【注意】svg 字符串的长度 ，否则会导致代码体积过大
   * 尽量选择 https://www.iconfont.cn/collections/detail?spm=a313x.7781069.0.da5a778a4&cid=20293
   * 找不到再从 iconfont.com 搜索
   */
  // 视频
  var VIDEO_SVG$1 = '<svg viewBox="0 0 1024 1024"><path d="M981.184 160.096C837.568 139.456 678.848 128 512 128S186.432 139.456 42.816 160.096C15.296 267.808 0 386.848 0 512s15.264 244.16 42.816 351.904C186.464 884.544 345.152 896 512 896s325.568-11.456 469.184-32.096C1008.704 756.192 1024 637.152 1024 512s-15.264-244.16-42.816-351.904zM384 704V320l320 192-320 192z"></path></svg>';
  // 上传视频
  var UPLOAD_VIDEO_SVG = '<svg viewBox="0 0 1056 1024"><path d="M805.902261 521.819882a251.441452 251.441452 0 0 0-251.011972 246.600033 251.051015 251.051015 0 1 0 502.023944 8.823877 253.237463 253.237463 0 0 0-251.011972-255.42391z m59.463561 240.001647v129.898403h-116.701631v-129.898403h-44.041298l101.279368-103.504859 101.279368 103.504859z" p-id="6802"></path><path d="M788.254507 0.000781H99.094092A98.663439 98.663439 0 0 0 0.001171 99.093701v590.067495a98.663439 98.663439 0 0 0 99.092921 99.092921h411.7549a266.434235 266.434235 0 0 1-2.186448-41.815807 275.843767 275.843767 0 0 1 275.180024-270.729042 270.650955 270.650955 0 0 1 103.504859 19.834201V99.093701A101.51363 101.51363 0 0 0 788.254507 0.000781zM295.054441 640.747004V147.507894l394.146189 246.600033z"></path></svg>';
  // 编辑
  var PENCIL_SVG = '<svg viewBox="0 0 1024 1024"><path d="M864 0a160 160 0 0 1 128 256l-64 64-224-224 64-64c26.752-20.096 59.968-32 96-32zM64 736l-64 288 288-64 592-592-224-224L64 736z m651.584-372.416l-448 448-55.168-55.168 448-448 55.168 55.168z"></path></svg>';
  // // 垃圾桶（删除）
  // export const TRASH_SVG =
  //   '<svg viewBox="0 0 1024 1024"><path d="M826.8032 356.5312c-19.328 0-36.3776 15.6928-36.3776 35.0464v524.2624c0 19.328-16 34.56-35.328 34.56H264.9344c-19.328 0-35.5072-15.3088-35.5072-34.56V390.0416c0-19.328-14.1568-35.0464-33.5104-35.0464s-33.5104 15.6928-33.5104 35.0464V915.712c0 57.9328 44.6208 108.288 102.528 108.288H755.2c57.9328 0 108.0832-50.4576 108.0832-108.288V391.4752c-0.1024-19.2512-17.1264-34.944-36.48-34.944z" p-id="9577"></path><path d="M437.1712 775.7568V390.6048c0-19.328-14.1568-35.0464-33.5104-35.0464s-33.5104 15.616-33.5104 35.0464v385.152c0 19.328 14.1568 35.0464 33.5104 35.0464s33.5104-15.7184 33.5104-35.0464zM649.7024 775.7568V390.6048c0-19.328-17.0496-35.0464-36.3776-35.0464s-36.3776 15.616-36.3776 35.0464v385.152c0 19.328 17.0496 35.0464 36.3776 35.0464s36.3776-15.7184 36.3776-35.0464zM965.0432 217.0368h-174.6176V145.5104c0-57.9328-47.2064-101.76-104.6528-101.76h-350.976c-57.8304 0-105.3952 43.8528-105.3952 101.76v71.5264H54.784c-19.4304 0-35.0464 14.1568-35.0464 33.5104 0 19.328 15.616 33.5104 35.0464 33.5104h910.3616c19.328 0 35.0464-14.1568 35.0464-33.5104 0-19.3536-15.6928-33.5104-35.1488-33.5104z m-247.3728 0H297.3952V145.5104c0-19.328 18.2016-34.7648 37.4272-34.7648h350.976c19.1488 0 31.872 15.1296 31.872 34.7648v71.5264z"></path></svg>'

  /**
   * @description editor video menu
   * @author
   */
  /**
   * 生成唯一的 DOM ID
   */
  function genDomID$1() {
      return genRandomStr('w-e-edit-video');
  }
  var Editvideo = /** @class */ (function () {
      function Editvideo() {
          this.title = t$2('videoModule.edit');
          this.iconSvg = PENCIL_SVG;
          this.tag = 'button';
          this.showModal = true; // 点击 button 时显示 modal
          this.modalWidth = 300;
          this.$content = null;
          this.srcInputId = genDomID$1();
          this.posterInputId = genDomID$1();
          this.buttonId = genDomID$1();
      }
      Editvideo.prototype.getSelectedVideoNode = function (editor) {
          return DomEditor.getSelectedNodeByType(editor, 'video');
      };
      Editvideo.prototype.getValue = function (_editor) {
          // 编辑视频，用不到 getValue
          return '';
      };
      Editvideo.prototype.isActive = function (_editor) {
          // 无需 active
          return false;
      };
      Editvideo.prototype.exec = function (_editor, _value) {
          // 点击菜单时，弹出 modal 之前，不需要执行其他代码
          // 此处空着即可
      };
      Editvideo.prototype.isDisabled = function (editor) {
          if (editor.selection == null) {
              return true;
          }
          var videoNode = this.getSelectedVideoNode(editor);
          if (videoNode == null) {
              // 选区未处于 video node ，则禁用
              return true;
          }
          return false;
      };
      Editvideo.prototype.getModalPositionNode = function (editor) {
          return this.getSelectedVideoNode(editor);
      };
      Editvideo.prototype.getModalContentElem = function (editor) {
          var _this = this;
          var _a = this, srcInputId = _a.srcInputId, posterInputId = _a.posterInputId, buttonId = _a.buttonId;
          // 获取 input button elem
          var _b = __read(genModalInputElems(t$2('videoModule.videoSrc'), srcInputId, t$2('videoModule.videoSrcPlaceHolder')), 2), srcContainerElem = _b[0], inputSrcElem = _b[1];
          var _c = __read(genModalInputElems(t$2('videoModule.videoPoster'), posterInputId, t$2('videoModule.videoPosterPlaceHolder')), 2), posterContainerElem = _c[0], inputPosterElem = _c[1];
          var $inputSrc = $$1(inputSrcElem);
          var $inputPoster = $$1(inputPosterElem);
          var _d = __read(genModalButtonElems(buttonId, t$2('videoModule.ok')), 1), buttonContainerElem = _d[0];
          if (this.$content == null) {
              // 第一次渲染
              var $content_1 = $$1('<div></div>');
              // 绑定事件（第一次渲染时绑定，不要重复绑定）
              $content_1.on('click', "#".concat(buttonId), function (e) { return __awaiter(_this, void 0, void 0, function () {
                  var src, poster, videoId, props;
                  return __generator(this, function (_a) {
                      e.preventDefault();
                      src = $content_1.find("#".concat(srcInputId)).val().trim();
                      poster = $content_1.find("#".concat(posterInputId)).val().trim();
                      videoId = genRandomStr('video-');
                      props = {
                          src: src,
                          poster: poster,
                          key: videoId,
                      };
                      editor.restoreSelection();
                      // 修改尺寸
                      distExports$1.Transforms.setNodes(editor, props, {
                          match: function (n) { return DomEditor.checkNodeType(n, 'video'); },
                      });
                      editor.hidePanelOrModal(); // 隐藏 modal
                      return [2 /*return*/];
                  });
              }); });
              // 记录属性，重要
              this.$content = $content_1;
          }
          var $content = this.$content;
          $content.empty(); // 先清空内容
          // append inputs and button
          $content.append(srcContainerElem);
          $content.append(posterContainerElem);
          $content.append(buttonContainerElem);
          var videoNode = this.getSelectedVideoNode(editor);
          if (videoNode == null) {
              return $content[0];
          }
          // 初始化 input 值
          var _e = videoNode.src, src = _e === void 0 ? '' : _e, _f = videoNode.poster, poster = _f === void 0 ? '' : _f;
          $inputSrc.val(src);
          $inputPoster.val(poster);
          // focus 一个 input（异步，此时 DOM 尚未渲染）
          setTimeout(function () {
              $inputSrc.focus();
          });
          return $content[0];
      };
      return Editvideo;
  }());

  /**
   * @description insert video
   * @author wangfupeng
   */
  /**
   * 插入视频
   * @param editor editor
   * @param src video src
   * @param poster video poster
   */
  function insertVideo (editor_1, src_1) {
      return __awaiter(this, arguments, void 0, function (editor, src, poster, width, height) {
          var _a, onInsertedVideo, checkVideo, parseVideoSrc, checkRes, parsedSrc, video;
          if (poster === void 0) { poster = ''; }
          if (width === void 0) { width = ''; }
          if (height === void 0) { height = ''; }
          return __generator(this, function (_b) {
              switch (_b.label) {
                  case 0:
                      if (!src) {
                          return [2 /*return*/];
                      }
                      // 还原选区
                      editor.restoreSelection();
                      _a = editor.getMenuConfig('insertVideo'), onInsertedVideo = _a.onInsertedVideo, checkVideo = _a.checkVideo, parseVideoSrc = _a.parseVideoSrc;
                      return [4 /*yield*/, checkVideo(src, poster)];
                  case 1:
                      checkRes = _b.sent();
                      if (typeof checkRes === 'string') {
                          // 校验失败，给出提示
                          editor.alert(checkRes, 'error');
                          return [2 /*return*/];
                      }
                      if (checkRes == null) {
                          // 校验失败，不给提示
                          return [2 /*return*/];
                      }
                      return [4 /*yield*/, parseVideoSrc(src)];
                  case 2:
                      parsedSrc = _b.sent();
                      if (parsedSrc.trim().indexOf('<iframe ') !== 0) {
                          parsedSrc = replaceSymbols(parsedSrc);
                      }
                      video = {
                          type: 'video',
                          src: parsedSrc,
                          poster: poster,
                          children: [{ text: '' }],
                          style: {
                              width: width,
                              height: height,
                          },
                      };
                      // 插入视频
                      // 不使用此方式会比正常的选区选取先执行
                      Promise.resolve().then(function () {
                          if (DomEditor.isSelectedEmptyParagraph(editor)) {
                              distExports$1.Transforms.removeNodes(editor, { mode: 'highest' });
                          }
                          distExports$1.Transforms.insertNodes(editor, video, { mode: 'highest' });
                      });
                      // 调用 callback
                      onInsertedVideo(video);
                      return [2 /*return*/];
              }
          });
      });
  }

  /**
   * @description insert video menu
   * @author wangfupeng
   */
  /**
   * 生成唯一的 DOM ID
   */
  function genDomID() {
      return genRandomStr('w-e-insert-video');
  }
  var InsertVideoMenu = /** @class */ (function () {
      function InsertVideoMenu() {
          this.title = t$2('videoModule.insertVideo');
          this.iconSvg = VIDEO_SVG$1;
          this.tag = 'button';
          this.showModal = true; // 点击 button 时显示 modal
          this.modalWidth = 320;
          this.$content = null;
          this.srcInputId = genDomID();
          this.posterInputId = genDomID();
          this.buttonId = genDomID();
      }
      InsertVideoMenu.prototype.getValue = function (_editor) {
          // 插入菜单，不需要 value
          return '';
      };
      InsertVideoMenu.prototype.isActive = function (_editor) {
          // 任何时候，都不用激活 menu
          return false;
      };
      InsertVideoMenu.prototype.exec = function (_editor, _value) {
          // 点击菜单时，弹出 modal 之前，不需要执行其他代码
          // 此处空着即可
      };
      InsertVideoMenu.prototype.isDisabled = function (editor) {
          var selection = editor.selection;
          if (selection == null) {
              return true;
          }
          if (!distExports$1.Range.isCollapsed(selection)) {
              return true;
          } // 选区非折叠，禁用
          var selectedElems = DomEditor.getSelectedElems(editor);
          var hasVoidOrPre = selectedElems.some(function (elem) {
              var type = DomEditor.getNodeType(elem);
              if (type === 'pre') {
                  return true;
              }
              if (type === 'list-item') {
                  return true;
              }
              if (editor.isVoid(elem)) {
                  return true;
              }
              return false;
          });
          if (hasVoidOrPre) {
              return true;
          } // void 或 pre ，禁用
          return false;
      };
      InsertVideoMenu.prototype.getModalPositionNode = function (_editor) {
          return null; // modal 依据选区定位
      };
      InsertVideoMenu.prototype.getModalContentElem = function (editor) {
          var _this = this;
          var _a = this, srcInputId = _a.srcInputId, posterInputId = _a.posterInputId, buttonId = _a.buttonId;
          // 获取 input button elem
          var _b = __read(genModalInputElems(t$2('videoModule.videoSrc'), srcInputId, t$2('videoModule.videoSrcPlaceHolder')), 2), srcContainerElem = _b[0], inputSrcElem = _b[1];
          var _c = __read(genModalInputElems(t$2('videoModule.videoPoster'), posterInputId, t$2('videoModule.videoPosterPlaceHolder')), 2), posterContainerElem = _c[0], inputPosterElem = _c[1];
          var $inputSrc = $$1(inputSrcElem);
          var $inputPoster = $$1(inputPosterElem);
          var _d = __read(genModalButtonElems(buttonId, t$2('videoModule.ok')), 1), buttonContainerElem = _d[0];
          if (this.$content == null) {
              // 第一次渲染
              var $content_1 = $$1('<div></div>');
              // 绑定事件（第一次渲染时绑定，不要重复绑定）
              $content_1.on('click', "#".concat(buttonId), function (e) { return __awaiter(_this, void 0, void 0, function () {
                  var src, poster;
                  return __generator(this, function (_a) {
                      switch (_a.label) {
                          case 0:
                              e.preventDefault();
                              src = $content_1.find("#".concat(srcInputId)).val().trim();
                              poster = $content_1.find("#".concat(posterInputId)).val().trim();
                              return [4 /*yield*/, insertVideo(editor, src, poster)];
                          case 1:
                              _a.sent();
                              editor.hidePanelOrModal(); // 隐藏 modal
                              return [2 /*return*/];
                      }
                  });
              }); });
              // 记录属性，重要
              this.$content = $content_1;
          }
          var $content = this.$content;
          $content.empty(); // 先清空内容
          // append inputs and button
          $content.append(srcContainerElem);
          $content.append(posterContainerElem);
          $content.append(buttonContainerElem);
          // 设置 input val
          $inputSrc.val('');
          $inputPoster.val('');
          // focus 一个 input（异步，此时 DOM 尚未渲染）
          setTimeout(function () {
              $inputSrc.focus();
          });
          return $content[0];
      };
      return InsertVideoMenu;
  }());

  /**
   * @description upload video
   * @author wangfupeng
   */
  function getMenuConfig$1(editor) {
      // 获取配置，见 `./config.js`
      return editor.getMenuConfig('uploadVideo');
  }
  // 存储 editor uppy 的关系 - 缓存 uppy ，不重复创建
  var EDITOR_TO_UPPY_MAP$1 = new WeakMap();
  /**
   * 获取 uppy 实例（并通过 editor 缓存）
   * @param editor editor
   */
  function getUppy$1(editor) {
      // 从缓存中获取
      var uppy = EDITOR_TO_UPPY_MAP$1.get(editor);
      if (uppy != null) {
          return uppy;
      }
      var menuConfig = getMenuConfig$1(editor);
      var onSuccess = menuConfig.onSuccess, onProgress = menuConfig.onProgress, onFailed = menuConfig.onFailed, customInsert = menuConfig.customInsert, onError = menuConfig.onError;
      // 上传完成之后
      var successHandler = function (file, res) {
          // 预期 res 格式：
          // 成功：{ errno: 0, data: { url, poster } }
          // 失败：{ errno: !0, message: '失败信息' }
          if (customInsert) {
              // 用户自定义插入视频，此时 res 格式可能不符合预期
              customInsert(res, function (src, poster) { return insertVideo(editor, src, poster); });
              // success 回调
              onSuccess(file, res);
              return;
          }
          var _a = res.errno, errno = _a === void 0 ? 1 : _a, _b = res.data, data = _b === void 0 ? {} : _b;
          if (errno !== 0) {
              // failed 回调
              onFailed(file, res);
              return;
          }
          var _c = data.url, url = _c === void 0 ? '' : _c, _d = data.poster, poster = _d === void 0 ? '' : _d;
          insertVideo(editor, url, poster);
          // success 回调
          onSuccess(file, res);
      };
      // progress 显示进度条
      var progressHandler = function (progress) {
          editor.showProgressBar(progress);
          // 回调函数
          if (onProgress) {
              onProgress(progress);
          }
      };
      // onError 提示错误
      var errorHandler = function (file, err, res) {
          onError(file, err, res);
      };
      // 创建 uppy
      uppy = createUploader(__assign(__assign({}, menuConfig), { onProgress: progressHandler, onSuccess: successHandler, onError: errorHandler }));
      // 缓存 uppy
      EDITOR_TO_UPPY_MAP$1.set(editor, uppy);
      return uppy;
  }
  /**
   * 上传视频文件
   * @param editor editor
   * @param file file
   */
  function uploadFile$1(editor, files) {
      return __awaiter(this, void 0, void 0, function () {
          var uppy, uploadList;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      uppy = getUppy$1(editor);
                      uploadList = files.map(function (file) { return ({
                          name: file.name,
                          type: file.type,
                          size: file.size,
                          data: file,
                      }); });
                      uppy.addFiles(uploadList);
                      return [4 /*yield*/, uppy.upload()];
                  case 1:
                      _a.sent();
                      return [2 /*return*/];
              }
          });
      });
  }
  function uploadVideos (editor, files) {
      return __awaiter(this, void 0, void 0, function () {
          var fileList, uploadFileList, customUpload, _a, fileList_1, fileList_1_1, file, e_1_1;
          var _b, e_1, _c, _d;
          return __generator(this, function (_e) {
              switch (_e.label) {
                  case 0:
                      if (files == null) {
                          return [2 /*return*/];
                      }
                      fileList = Array.prototype.slice.call(files);
                      uploadFileList = [];
                      customUpload = getMenuConfig$1(editor).customUpload;
                      _e.label = 1;
                  case 1:
                      _e.trys.push([1, 8, 9, 14]);
                      _a = true, fileList_1 = __asyncValues(fileList);
                      _e.label = 2;
                  case 2: return [4 /*yield*/, fileList_1.next()];
                  case 3:
                      if (!(fileList_1_1 = _e.sent(), _b = fileList_1_1.done, !_b)) return [3 /*break*/, 7];
                      _d = fileList_1_1.value;
                      _a = false;
                      file = _d;
                      if (!customUpload) return [3 /*break*/, 5];
                      // 自定义上传
                      return [4 /*yield*/, customUpload(file, function (src, poster) { return insertVideo(editor, src, poster); })];
                  case 4:
                      // 自定义上传
                      _e.sent();
                      return [3 /*break*/, 6];
                  case 5:
                      uploadFileList.push(file);
                      _e.label = 6;
                  case 6:
                      _a = true;
                      return [3 /*break*/, 2];
                  case 7: return [3 /*break*/, 14];
                  case 8:
                      e_1_1 = _e.sent();
                      e_1 = { error: e_1_1 };
                      return [3 /*break*/, 14];
                  case 9:
                      _e.trys.push([9, , 12, 13]);
                      if (!(!_a && !_b && (_c = fileList_1.return))) return [3 /*break*/, 11];
                      return [4 /*yield*/, _c.call(fileList_1)];
                  case 10:
                      _e.sent();
                      _e.label = 11;
                  case 11: return [3 /*break*/, 13];
                  case 12:
                      if (e_1) throw e_1.error;
                      return [7 /*endfinally*/];
                  case 13: return [7 /*endfinally*/];
                  case 14:
                      if (!(uploadFileList.length > 0)) return [3 /*break*/, 16];
                      return [4 /*yield*/, uploadFile$1(editor, uploadFileList)];
                  case 15:
                      _e.sent();
                      _e.label = 16;
                  case 16: return [2 /*return*/];
              }
          });
      });
  }

  /**
   * @description upload video menu
   * @author wangfupeng
   */
  var UploadVideoMenu = /** @class */ (function () {
      function UploadVideoMenu() {
          this.title = t$2('videoModule.uploadVideo');
          this.iconSvg = UPLOAD_VIDEO_SVG;
          this.tag = 'button';
      }
      UploadVideoMenu.prototype.getValue = function (_editor) {
          // 无需获取 val
          return '';
      };
      UploadVideoMenu.prototype.isActive = function (_editor) {
          // 任何时候，都不用激活 menu
          return false;
      };
      UploadVideoMenu.prototype.exec = function (editor, _value) {
          var _a = this.getMenuConfig(editor), _b = _a.allowedFileTypes, allowedFileTypes = _b === void 0 ? [] : _b, customBrowseAndUpload = _a.customBrowseAndUpload;
          // 自定义选择图片，并上传，如图床
          if (customBrowseAndUpload) {
              customBrowseAndUpload(function (src, poster) { return insertVideo(editor, src, poster); });
              return;
          }
          // 设置选择文件的类型
          var acceptAttr = '';
          if (allowedFileTypes.length > 0) {
              acceptAttr = "accept=\"".concat(allowedFileTypes.join(', '), "\"");
          }
          // 添加 file input（每次重新创建 input）
          var $body = $$1('body');
          var $inputFile = $$1("<input type=\"file\" ".concat(acceptAttr, " multiple/>"));
          $inputFile.hide();
          $body.append($inputFile);
          $inputFile.click();
          // 选中文件
          $inputFile.on('change', function () {
              var files = $inputFile[0].files;
              uploadVideos(editor, files); // 上传文件
          });
      };
      UploadVideoMenu.prototype.isDisabled = function (editor) {
          var selection = editor.selection;
          if (selection == null) {
              return true;
          }
          if (!distExports$1.Range.isCollapsed(selection)) {
              return true;
          } // 选区非折叠，禁用
          var selectedElems = DomEditor.getSelectedElems(editor);
          var hasVoidOrPre = selectedElems.some(function (elem) {
              var type = DomEditor.getNodeType(elem);
              if (type === 'pre') {
                  return true;
              }
              if (type === 'list-item') {
                  return true;
              }
              if (editor.isVoid(elem)) {
                  return true;
              }
              return false;
          });
          if (hasVoidOrPre) {
              return true;
          } // void 或 pre ，禁用
          return false;
      };
      UploadVideoMenu.prototype.getMenuConfig = function (editor) {
          // 获取配置，见 `./config.js`
          return editor.getMenuConfig('uploadVideo');
      };
      return UploadVideoMenu;
  }());

  /**
   * @description video menu
   * @author wangfupeng
   */
  var insertVideoMenuConf = {
      key: 'insertVideo',
      factory: function () {
          return new InsertVideoMenu();
      },
      // 默认的菜单菜单配置，将存储在 editorConfig.MENU_CONF[key] 中
      // 创建编辑器时，可通过 editorConfig.MENU_CONF[key] = {...} 来修改
      config: genInsertVideoMenuConfig(),
  };
  var uploadVideoMenuConf = {
      key: 'uploadVideo',
      factory: function () {
          return new UploadVideoMenu();
      },
      // 默认的菜单菜单配置，将存储在 editorConfig.MENU_CONF[key] 中
      // 创建编辑器时，可通过 editorConfig.MENU_CONF[key] = {...} 来修改
      config: genUploadVideoMenuConfig(),
  };
  var editorVideoSizeMenuConf = {
      key: 'editVideoSize',
      factory: function () {
          return new EditorVideoSizeMenu();
      },
  };
  var editorVideoSrcMenuConf = {
      key: 'editVideoSrc',
      factory: function () {
          return new Editvideo();
      },
  };
  // export const deleteVideoMenuConf = {
  //   key: 'deleteVideo',
  //   factory() {
  //     return new DeleteVideoMenu()
  //   },
  // }
  // 键盘能删除 video 了，注释掉这个菜单 wangfupeng 22.02.23

  /**
   * @description parse html
   * @author wangfupeng
   */
  function genVideoElem(src, poster, width, height, style, textAlign) {
      if (poster === void 0) { poster = ''; }
      if (width === void 0) { width = 'auto'; }
      if (height === void 0) { height = 'auto'; }
      if (style === void 0) { style = {}; }
      if (textAlign === void 0) { textAlign = 'center'; }
      return {
          type: 'video',
          src: src,
          poster: poster,
          width: width,
          height: height,
          style: style,
          children: [{ text: '' }], // void 元素有一个空 text
          textAlign: textAlign,
      };
  }
  function parseHtml(elem, _children, _editor) {
      var $elem = $$1(elem);
      var src = '';
      var poster = '';
      var width = 'auto';
      var height = 'auto';
      var style = {};
      var textAlign = 'center';
      // <iframe> 形式
      var $iframe = $elem.find('iframe');
      if ($iframe.length > 0) {
          width = $iframe.attr('width') || 'auto';
          height = $iframe.attr('height') || 'auto';
          style = $iframe.attr('style') || '';
          style = styleStringToObject(style);
          src = $iframe[0].outerHTML;
          textAlign = styleStringToObject($elem.attr('style') || '')['text-align'] || 'center';
          return genVideoElem(src, poster, width, height, style, textAlign);
      }
      // <video> 形式
      var $video = $elem.find('video');
      src = $video.attr('src') || '';
      if (!src) {
          if ($video.length > 0) {
              var $source = $video.find('source');
              src = $source.attr('src') || '';
          }
      }
      width = $video.attr('width') || 'auto';
      height = $video.attr('height') || 'auto';
      poster = $video.attr('poster') || '';
      style = $video.attr('style') || '';
      style = styleStringToObject(style);
      textAlign = styleStringToObject($elem.attr('style') || '')['text-align'] || 'center';
      return genVideoElem(src, poster, width, height, style, textAlign);
  }
  var parseHtmlConf = {
      selector: 'div[data-w-e-type="video"]',
      parseElemHtml: parseHtml,
  };

  /**
   * @description editor 插件，重写 editor API
   * @author wangfupeng
   */
  function withVideo(editor) {
      var isVoid = editor.isVoid, normalizeNode = editor.normalizeNode;
      var newEditor = editor;
      // 重写 isVoid
      newEditor.isVoid = function (elem) {
          var type = elem.type;
          if (type === 'video') {
              return true;
          }
          return isVoid(elem);
      };
      // 重写 normalizeNode
      newEditor.normalizeNode = function (_a) {
          var _b = __read(_a, 2), node = _b[0], path = _b[1];
          var type = DomEditor.getNodeType(node);
          // ----------------- video 后面必须跟一个 p header blockquote -----------------
          if (type === 'video') {
              // -------------- video 是 editor 最后一个节点，需要后面插入 p --------------
              var isLast = DomEditor.isLastNode(newEditor, node);
              if (isLast) {
                  distExports$1.Transforms.insertNodes(newEditor, DomEditor.genEmptyParagraph(), { at: [path[0] + 1] });
              }
          }
          // 执行默认的 normalizeNode ，重要！！！
          return normalizeNode([node, path]);
      };
      // 返回 editor ，重要！
      return newEditor;
  }

  /**
   * @description pre parse html
   * @author wangfupeng
   */
  /**
   * pre-prase video ，兼容 V4
   * @param elem elem
   */
  function preParse(elem) {
      var $elem = $$1(elem);
      var $video = $elem;
      var elemTagName = getTagName($elem);
      if (elemTagName === 'p') {
          // v4 的 video 或 iframe 是被 p 包裹的
          var children = $elem.children();
          if (children.length === 1) {
              var firstChild = children[0];
              var firstChildTagName = firstChild.tagName.toLowerCase();
              if (['iframe', 'video'].includes(firstChildTagName)) {
                  // p 下面包含 iframe 或 video
                  $video = $$1(firstChild);
              }
          }
      }
      var videoTagName = getTagName($video);
      if (videoTagName !== 'iframe' && videoTagName !== 'video') {
          return $video[0];
      }
      // 已经符合 V5 格式
      var $parent = $video.parent();
      if ($parent.attr('data-w-e-type') === 'video') {
          return $video[0];
      }
      var $container = $$1('<div data-w-e-type="video" data-w-e-is-void style="text-align: center;"></div>');
      $container.append($video);
      return $container[0];
  }
  var preParseHtmlConf = {
      selector: 'iframe,video,p',
      preParseHtml: preParse,
  };

  /**
   * @description video render elem
   * @author wangfupeng
   */
  function renderVideo(elemNode, children, editor) {
      var _a = elemNode, _b = _a.src, src = _b === void 0 ? '' : _b, _c = _a.poster, poster = _c === void 0 ? '' : _c, _d = _a.key, key = _d === void 0 ? '' : _d, _e = _a.width, width = _e === void 0 ? 'auto' : _e, _f = _a.height, height = _f === void 0 ? 'auto' : _f, _g = _a.style, style = _g === void 0 ? {} : _g, _h = _a.textAlign, textAlign = _h === void 0 ? 'center' : _h;
      // 是否选中
      var selected = DomEditor.isNodeSelected(editor, elemNode);
      var vnode;
      if (src.trim().indexOf('<iframe ') === 0) {
          // 增加尺寸样式
          var iframeHtml = genSizeStyledIframeHtml(src, width, height, style);
          // iframe 形式，第三方视频
          vnode = (jsx("div", { className: "w-e-textarea-video-container", "data-selected": selected ? 'true' : '', style: { textAlign: textAlign }, innerHTML: iframeHtml }));
      }
      else {
          // 其他，mp4 格式
          var videoVnode = (jsx("video", { key: key, poster: poster, controls: true, style: style },
              jsx("source", { src: src, type: "video/mp4" }),
              'Sorry, your browser doesn\'t support embedded videos.\n 抱歉，浏览器不支持 video 视频'));
          // @ts-ignore 添加尺寸
          if (width !== 'auto') {
              videoVnode.data.width = width;
          }
          // @ts-ignore
          if (height !== 'auto') {
              videoVnode.data.height = height;
          }
          vnode = (jsx("div", { className: "w-e-textarea-video-container", "data-selected": selected ? 'true' : '', style: { textAlign: textAlign } }, videoVnode));
      }
      // 【注意】void node 中，renderElem 不用处理 children 。core 会统一处理。
      var containerVnode = h$1('div', {
          props: {
              contentEditable: false,
          },
          on: {
              mousedown: function (e) { return e.preventDefault(); },
          },
      }, vnode);
      return containerVnode;
  }
  var renderVideoConf = {
      type: 'video', // 和 elemNode.type 一致
      renderElem: renderVideo,
  };

  /**
   * @description video module
   * @author wangfupeng
   */
  var video = {
      renderElems: [renderVideoConf],
      elemsToHtml: [videoToHtmlConf],
      preParseHtml: [preParseHtmlConf],
      parseElemsHtml: [parseHtmlConf],
      menus: [
          insertVideoMenuConf,
          uploadVideoMenuConf,
          editorVideoSizeMenuConf,
          editorVideoSrcMenuConf,
      ],
      editorPlugin: withVideo,
  };

  /**
   * @description i18n en
   * @author wangfupeng
   */
  var enResources$1 = {
      uploadImgModule: {
          uploadImage: 'Upload Image',
          uploadError: '{{fileName}} upload error',
      },
  };

  /**
   * @description i18n zh-CN
   * @author wangfupeng
   */
  var zhResources$1 = {
      uploadImgModule: {
          uploadImage: '上传图片',
          uploadError: '{{fileName}} 上传出错',
      },
  };

  /**
   * @description i18n entry
   * @author wangfupeng
   */
  i18nAddResources('en', enResources$1);
  i18nAddResources('zh-CN', zhResources$1);

  /**
   * @description upload image config
   * @author wangfupeng
   */
  // 生成默认配置
  function genUploadImageConfig() {
      return {
          server: '', // server API 地址，需用户配置
          fieldName: 'wangeditor-uploaded-image', // formData 中，文件的 key
          maxFileSize: 2 * 1024 * 1024, // 2M
          maxNumberOfFiles: 100, // 最多上传 xx 张图片
          allowedFileTypes: ['image/*'],
          meta: {
          // 自定义上传参数，例如传递验证的 token 等。参数会被添加到 formData 中，一起上传到服务端。
          // 例如：token: 'xxxxx', x: 100
          },
          metaWithUrl: false,
          // headers: {
          //   // 自定义 http headers
          //   // 例如：Accept: 'text/x-json', a: 100,
          // },
          withCredentials: false,
          timeout: 10 * 1000, // 10s
          onBeforeUpload: function (files) { return files; }, // 返回 false 则终止上传
          onProgress: function (_progress) {
              /* on progress */
          },
          onSuccess: function (_file, _res) {
              /* on success */
          },
          onFailed: function (file, res) {
              console.error("'".concat(file.name, "' upload failed"), res);
          },
          onError: function (file, err, res) {
              /* on error */
              /* on timeout */
              console.error("'".concat(file.name, "' upload error"), res);
          },
          // 自定义插入图片，用户配置
          // customInsert: (res, insertFn) => {},
          // 自定义上传图片，用户配置
          // customUpload: (file, insertFn) => {},
          // 小于 xxx 就插入 base64
          base64LimitSize: 0,
          // 自定义选择，并上传图片，如：图床 （用户配置）
          // customBrowseAndUpload: insertFn => {},
      };
  }

  /**
   * @description icon svg
   * @author wangfupeng
   */
  /**
   * 【注意】svg 字符串的长度 ，否则会导致代码体积过大
   * 尽量选择 https://www.iconfont.cn/collections/detail?spm=a313x.7781069.0.da5a778a4&cid=20293
   * 找不到再从 iconfont.com 搜索
   */
  // 上传图片
  var UPLOAD_IMAGE_SVG = '<svg viewBox="0 0 1024 1024"><path d="M828.708571 585.045333a48.761905 48.761905 0 0 0-48.737523 48.761905v18.529524l-72.143238-72.167619a135.972571 135.972571 0 0 0-191.585524 0l-34.133334 34.133333-120.880762-120.953905a138.898286 138.898286 0 0 0-191.585523 0l-72.167619 72.167619V292.400762a48.786286 48.786286 0 0 1 48.761904-48.761905h341.23581a48.737524 48.737524 0 0 0 34.474667-83.285333 48.737524 48.737524 0 0 0-34.474667-14.287238H146.236952A146.212571 146.212571 0 0 0 0 292.400762v585.289143A146.358857 146.358857 0 0 0 146.236952 1024h584.996572a146.212571 146.212571 0 0 0 146.236952-146.310095V633.807238a48.786286 48.786286 0 0 0-48.761905-48.761905zM146.261333 926.45181a48.737524 48.737524 0 0 1-48.761904-48.761905v-174.128762l141.409523-141.458286a38.497524 38.497524 0 0 1 53.126096 0l154.526476 154.624 209.627428 209.724953H146.236952z m633.734096-48.761905c-0.073143 9.337905-3.145143 18.383238-8.777143 25.843809l-219.843048-220.94019 34.133333-34.133334a37.546667 37.546667 0 0 1 53.613715 0l140.873143 141.897143V877.714286zM1009.615238 160.231619L863.329524 13.897143a48.737524 48.737524 0 0 0-16.091429-10.24c-11.849143-4.87619-25.161143-4.87619-37.059047 0a48.761905 48.761905 0 0 0-16.067048 10.24l-146.236952 146.334476a49.005714 49.005714 0 0 0 69.217523 69.241905l62.902858-63.390476v272.627809a48.761905 48.761905 0 1 0 97.475047 0V166.083048l62.902857 63.390476a48.737524 48.737524 0 0 0 69.217524 0 48.761905 48.761905 0 0 0 0-69.241905z"></path></svg>';

  /**
   * @description DOM 操作
   * @author wangfupeng
   */
  if (append) {
      $$1.fn.append = append;
  }
  if (on) {
      $$1.fn.on = on;
  }
  if (remove) {
      $$1.fn.remove = remove;
  }
  if (val) {
      $$1.fn.val = val;
  }
  if (click) {
      $$1.fn.click = click;
  }
  if (hide) {
      $$1.fn.hide = hide;
  }

  /**
   * @description 上传文件
   * @author wangfupeng
   */
  // 存储 editor uppy 的关系 - 缓存 uppy ，不重复创建
  var EDITOR_TO_UPPY_MAP = new WeakMap();
  function getMenuConfig(editor) {
      return editor.getMenuConfig('uploadImage');
  }
  /**
   * 获取 uppy 实例（并通过 editor 缓存）
   * @param editor editor
   */
  function getUppy(editor) {
      // 从缓存中获取
      var uppy = EDITOR_TO_UPPY_MAP.get(editor);
      if (uppy != null) {
          return uppy;
      }
      var menuConfig = getMenuConfig(editor);
      var onSuccess = menuConfig.onSuccess, onProgress = menuConfig.onProgress, onFailed = menuConfig.onFailed, customInsert = menuConfig.customInsert, onError = menuConfig.onError;
      // 上传完成之后
      var successHandler = function (file, res) {
          // 预期 res 格式：
          // 成功：{ errno: 0, data: { url, alt, href } } —— 注意，旧版的 data 是数组，要兼容一下
          // 失败：{ errno: !0, message: '失败信息' }
          if (customInsert) {
              // 用户自定义插入图片，此时 res 格式可能不符合预期
              customInsert(res, function (src, alt, href) { return insertImageNode(editor, src, alt, href); });
              // success 回调
              onSuccess(file, res);
              return;
          }
          var _a = res.errno, errno = _a === void 0 ? 1 : _a, _b = res.data, data = _b === void 0 ? {} : _b;
          if (errno !== 0) {
              // failed 回调
              onFailed(file, res);
              return;
          }
          if (Array.isArray(data)) {
              // 返回的数组（旧版的，兼容一下）
              data.forEach(function (item) {
                  var _a = item.url, url = _a === void 0 ? '' : _a, _b = item.alt, alt = _b === void 0 ? '' : _b, _c = item.href, href = _c === void 0 ? '' : _c;
                  // 使用 basic-module 的 insertImageNode 方法插入图片，其中有用户配置的校验和 callback
                  insertImageNode(editor, url, alt, href);
              });
          }
          else {
              // 返回的对象
              var _c = data.url, url = _c === void 0 ? '' : _c, _d = data.alt, alt = _d === void 0 ? '' : _d, _e = data.href, href = _e === void 0 ? '' : _e;
              insertImageNode(editor, url, alt, href);
          }
          // success 回调
          onSuccess(file, res);
      };
      // progress 显示进度条
      var progressHandler = function (progress) {
          editor.showProgressBar(progress);
          // 回调函数
          if (onProgress) {
              onProgress(progress);
          }
      };
      // onError 提示错误
      var errorHandler = function (file, err, res) {
          // 回调函数
          onError(file, err, res);
      };
      // 创建 uppy
      uppy = createUploader(__assign(__assign({}, menuConfig), { onProgress: progressHandler, onSuccess: successHandler, onError: errorHandler }));
      // 缓存 uppy
      EDITOR_TO_UPPY_MAP.set(editor, uppy);
      return uppy;
  }
  /**
   * 插入 base64 格式
   * @param editor editor
   * @param file file
   */
  function insertBase64(editor, file) {
      return __awaiter(this, void 0, void 0, function () {
          return __generator(this, function (_a) {
              return [2 /*return*/, new Promise(function (resolve) {
                      var reader = new FileReader();
                      reader.readAsDataURL(file);
                      reader.onload = function () {
                          var result = reader.result;
                          if (!result) {
                              return;
                          }
                          var src = result.toString();
                          var href = src.indexOf('data:image') === 0 ? '' : src; // base64 格式则不设置 href
                          insertImageNode(editor, src, file.name, href);
                          resolve('ok');
                      };
                  })];
          });
      });
  }
  /**
   * 上传图片文件
   * @param editor editor
   * @param file file
   */
  function uploadFile(editor, files) {
      return __awaiter(this, void 0, void 0, function () {
          var uppy, uploadList;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      uppy = getUppy(editor);
                      uploadList = files.map(function (file) { return ({
                          name: file.name,
                          type: file.type,
                          size: file.size,
                          data: file,
                      }); });
                      uppy.addFiles(uploadList);
                      return [4 /*yield*/, uppy.upload()];
                  case 1:
                      _a.sent();
                      return [2 /*return*/];
              }
          });
      });
  }
  /**
   * 上传图片
   * @param editor editor
   * @param files files
   */
  function uploadImages (editor, files) {
      return __awaiter(this, void 0, void 0, function () {
          var fileList, _a, customUpload, base64LimitSize, uploadFileList, _b, fileList_1, fileList_1_1, file, size, e_1_1;
          var _c, e_1, _d, _e;
          return __generator(this, function (_f) {
              switch (_f.label) {
                  case 0:
                      if (files == null) {
                          return [2 /*return*/];
                      }
                      fileList = Array.prototype.slice.call(files);
                      _a = getMenuConfig(editor), customUpload = _a.customUpload, base64LimitSize = _a.base64LimitSize;
                      uploadFileList = [];
                      _f.label = 1;
                  case 1:
                      _f.trys.push([1, 10, 11, 16]);
                      _b = true, fileList_1 = __asyncValues(fileList);
                      _f.label = 2;
                  case 2: return [4 /*yield*/, fileList_1.next()];
                  case 3:
                      if (!(fileList_1_1 = _f.sent(), _c = fileList_1_1.done, !_c)) return [3 /*break*/, 9];
                      _e = fileList_1_1.value;
                      _b = false;
                      file = _e;
                      size = file.size // size kb
                      ;
                      if (!(base64LimitSize && size <= base64LimitSize)) return [3 /*break*/, 5];
                      // 允许 base64 ，而且 size 在 base64 限制之内，则插入 base64 格式
                      return [4 /*yield*/, insertBase64(editor, file)];
                  case 4:
                      // 允许 base64 ，而且 size 在 base64 限制之内，则插入 base64 格式
                      _f.sent();
                      return [3 /*break*/, 8];
                  case 5:
                      if (!customUpload) return [3 /*break*/, 7];
                      // 自定义上传
                      return [4 /*yield*/, customUpload(file, function (src, alt, href) { return insertImageNode(editor, src, alt, href); })];
                  case 6:
                      // 自定义上传
                      _f.sent();
                      return [3 /*break*/, 8];
                  case 7:
                      // 默认上传
                      uploadFileList.push(file);
                      _f.label = 8;
                  case 8:
                      _b = true;
                      return [3 /*break*/, 2];
                  case 9: return [3 /*break*/, 16];
                  case 10:
                      e_1_1 = _f.sent();
                      e_1 = { error: e_1_1 };
                      return [3 /*break*/, 16];
                  case 11:
                      _f.trys.push([11, , 14, 15]);
                      if (!(!_b && !_c && (_d = fileList_1.return))) return [3 /*break*/, 13];
                      return [4 /*yield*/, _d.call(fileList_1)];
                  case 12:
                      _f.sent();
                      _f.label = 13;
                  case 13: return [3 /*break*/, 15];
                  case 14:
                      if (e_1) throw e_1.error;
                      return [7 /*endfinally*/];
                  case 15: return [7 /*endfinally*/];
                  case 16:
                      if (!(uploadFileList.length > 0)) return [3 /*break*/, 18];
                      return [4 /*yield*/, uploadFile(editor, uploadFileList)];
                  case 17:
                      _f.sent();
                      _f.label = 18;
                  case 18: return [2 /*return*/];
              }
          });
      });
  }

  /**
   * @description upload image menu
   * @author wangfupeng
   */
  var UploadImage = /** @class */ (function () {
      function UploadImage() {
          this.title = t$2('uploadImgModule.uploadImage');
          this.iconSvg = UPLOAD_IMAGE_SVG;
          this.tag = 'button';
      }
      UploadImage.prototype.getValue = function (_editor) {
          // 插入菜单，不需要 value
          return '';
      };
      UploadImage.prototype.isActive = function (_editor) {
          // 任何时候，都不用激活 menu
          return false;
      };
      UploadImage.prototype.isDisabled = function (editor) {
          return isInsertImageMenuDisabled(editor);
      };
      UploadImage.prototype.getMenuConfig = function (editor) {
          // 获取配置，见 `./config.js`
          return editor.getMenuConfig('uploadImage');
      };
      UploadImage.prototype.exec = function (editor, _value) {
          var _a = this.getMenuConfig(editor), _b = _a.allowedFileTypes, allowedFileTypes = _b === void 0 ? [] : _b, customBrowseAndUpload = _a.customBrowseAndUpload;
          // 自定义选择图片，并上传，如图床
          if (customBrowseAndUpload) {
              customBrowseAndUpload(function (src, alt, href) { return insertImageNode(editor, src, alt, href); });
              return;
          }
          // 设置选择文件的类型
          var acceptAttr = '';
          if (allowedFileTypes.length > 0) {
              acceptAttr = "accept=\"".concat(allowedFileTypes.join(', '), "\"");
          }
          // 添加 file input（每次重新创建 input）
          var $body = $$1('body');
          var $inputFile = $$1("<input type=\"file\" ".concat(acceptAttr, " multiple/>"));
          $inputFile.hide();
          $body.append($inputFile);
          $inputFile.click();
          // 选中文件
          $inputFile.on('change', function () {
              var files = $inputFile[0].files;
              uploadImages(editor, files); // 上传文件
          });
      };
      return UploadImage;
  }());

  /**
   * @description upload image menu
   * @author wangfupeng
   */
  var uploadImageMenuConf = {
      key: 'uploadImage',
      factory: function () {
          return new UploadImage();
      },
      // 默认的菜单菜单配置，将存储在 editorConfig.MENU_CONF[key] 中
      // 创建编辑器时，可通过 editorConfig.MENU_CONF[key] = {...} 来修改
      config: genUploadImageConfig(),
  };

  /**
   * @description editor 插件，重写 editor API
   * @author wangfupeng
   */
  function withUploadImage(editor) {
      var insertData = editor.insertData;
      var newEditor = editor;
      // 重写 insertData - 粘贴图片、拖拽上传图片
      newEditor.insertData = function (data) {
          if (isInsertImageMenuDisabled(newEditor)) {
              insertData(data);
              return;
          }
          // 如有 text ，则优先粘贴 text
          var text = data.getData('text/plain');
          if (text) {
              insertData(data);
              return;
          }
          // 获取文件
          var files = data.files;
          if (files.length <= 0) {
              insertData(data);
              return;
          }
          // 判断是否有图片文件（可能是其他类型的文件）
          var fileList = Array.prototype.slice.call(files);
          var hasImageFiles = fileList.some(function (file) {
              var _a = __read(file.type.split('/'), 1), mime = _a[0];
              return mime === 'image';
          });
          if (hasImageFiles) {
              // 有图片文件，则上传图片
              uploadImages(editor, files);
          }
          else {
              // 如果没有， 则继续 insertData
              insertData(data);
          }
      };
      // 返回 editor ，重要！
      return newEditor;
  }

  /**
   * @description uploadImage module
   * @author wangfupeng
   */
  var uploadImage = {
      menus: [uploadImageMenuConf],
      editorPlugin: withUploadImage,
  };

  /**
   * @description i18n en
   * @author wangfupeng
   */
  var enResources = {
      highLightModule: {
          selectLang: 'Language',
      },
  };

  /**
   * @description i18n zh-CN
   * @author wangfupeng
   */
  var zhResources = {
      highLightModule: {
          selectLang: '选择语言',
      },
  };

  /**
   * @description i18n entry
   * @author wangfupeng
   */
  i18nAddResources('en', enResources);
  i18nAddResources('zh-CN', zhResources);

  var prism = {exports: {}};

  var hasRequiredPrism;

  function requirePrism () {
  	if (hasRequiredPrism) return prism.exports;
  	hasRequiredPrism = 1;
  	(function (module) {
  		/* **********************************************
  		     Begin prism-core.js
  		********************************************** */

  		/// <reference lib="WebWorker"/>

  		var _self = (typeof window !== 'undefined')
  			? window   // if in browser
  			: (
  				(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)
  					? self // if in worker
  					: {}   // if in node js
  			);

  		/**
  		 * Prism: Lightweight, robust, elegant syntax highlighting
  		 *
  		 * @license MIT <https://opensource.org/licenses/MIT>
  		 * @author Lea Verou <https://lea.verou.me>
  		 * @namespace
  		 * @public
  		 */
  		var Prism = (function (_self) {

  			// Private helper vars
  			var lang = /(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i;
  			var uniqueId = 0;

  			// The grammar object for plaintext
  			var plainTextGrammar = {};


  			var _ = {
  				/**
  				 * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the
  				 * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load
  				 * additional languages or plugins yourself.
  				 *
  				 * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.
  				 *
  				 * You obviously have to change this value before the automatic highlighting started. To do this, you can add an
  				 * empty Prism object into the global scope before loading the Prism script like this:
  				 *
  				 * ```js
  				 * window.Prism = window.Prism || {};
  				 * Prism.manual = true;
  				 * // add a new <script> to load Prism's script
  				 * ```
  				 *
  				 * @default false
  				 * @type {boolean}
  				 * @memberof Prism
  				 * @public
  				 */
  				manual: _self.Prism && _self.Prism.manual,
  				/**
  				 * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses
  				 * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your
  				 * own worker, you don't want it to do this.
  				 *
  				 * By setting this value to `true`, Prism will not add its own listeners to the worker.
  				 *
  				 * You obviously have to change this value before Prism executes. To do this, you can add an
  				 * empty Prism object into the global scope before loading the Prism script like this:
  				 *
  				 * ```js
  				 * window.Prism = window.Prism || {};
  				 * Prism.disableWorkerMessageHandler = true;
  				 * // Load Prism's script
  				 * ```
  				 *
  				 * @default false
  				 * @type {boolean}
  				 * @memberof Prism
  				 * @public
  				 */
  				disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,

  				/**
  				 * A namespace for utility methods.
  				 *
  				 * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may
  				 * change or disappear at any time.
  				 *
  				 * @namespace
  				 * @memberof Prism
  				 */
  				util: {
  					encode: function encode(tokens) {
  						if (tokens instanceof Token) {
  							return new Token(tokens.type, encode(tokens.content), tokens.alias);
  						} else if (Array.isArray(tokens)) {
  							return tokens.map(encode);
  						} else {
  							return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\u00a0/g, ' ');
  						}
  					},

  					/**
  					 * Returns the name of the type of the given value.
  					 *
  					 * @param {any} o
  					 * @returns {string}
  					 * @example
  					 * type(null)      === 'Null'
  					 * type(undefined) === 'Undefined'
  					 * type(123)       === 'Number'
  					 * type('foo')     === 'String'
  					 * type(true)      === 'Boolean'
  					 * type([1, 2])    === 'Array'
  					 * type({})        === 'Object'
  					 * type(String)    === 'Function'
  					 * type(/abc+/)    === 'RegExp'
  					 */
  					type: function (o) {
  						return Object.prototype.toString.call(o).slice(8, -1);
  					},

  					/**
  					 * Returns a unique number for the given object. Later calls will still return the same number.
  					 *
  					 * @param {Object} obj
  					 * @returns {number}
  					 */
  					objId: function (obj) {
  						if (!obj['__id']) {
  							Object.defineProperty(obj, '__id', { value: ++uniqueId });
  						}
  						return obj['__id'];
  					},

  					/**
  					 * Creates a deep clone of the given object.
  					 *
  					 * The main intended use of this function is to clone language definitions.
  					 *
  					 * @param {T} o
  					 * @param {Record<number, any>} [visited]
  					 * @returns {T}
  					 * @template T
  					 */
  					clone: function deepClone(o, visited) {
  						visited = visited || {};

  						var clone; var id;
  						switch (_.util.type(o)) {
  							case 'Object':
  								id = _.util.objId(o);
  								if (visited[id]) {
  									return visited[id];
  								}
  								clone = /** @type {Record<string, any>} */ ({});
  								visited[id] = clone;

  								for (var key in o) {
  									if (o.hasOwnProperty(key)) {
  										clone[key] = deepClone(o[key], visited);
  									}
  								}

  								return /** @type {any} */ (clone);

  							case 'Array':
  								id = _.util.objId(o);
  								if (visited[id]) {
  									return visited[id];
  								}
  								clone = [];
  								visited[id] = clone;

  								(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {
  									clone[i] = deepClone(v, visited);
  								});

  								return /** @type {any} */ (clone);

  							default:
  								return o;
  						}
  					},

  					/**
  					 * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.
  					 *
  					 * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.
  					 *
  					 * @param {Element} element
  					 * @returns {string}
  					 */
  					getLanguage: function (element) {
  						while (element) {
  							var m = lang.exec(element.className);
  							if (m) {
  								return m[1].toLowerCase();
  							}
  							element = element.parentElement;
  						}
  						return 'none';
  					},

  					/**
  					 * Sets the Prism `language-xxxx` class of the given element.
  					 *
  					 * @param {Element} element
  					 * @param {string} language
  					 * @returns {void}
  					 */
  					setLanguage: function (element, language) {
  						// remove all `language-xxxx` classes
  						// (this might leave behind a leading space)
  						element.className = element.className.replace(RegExp(lang, 'gi'), '');

  						// add the new `language-xxxx` class
  						// (using `classList` will automatically clean up spaces for us)
  						element.classList.add('language-' + language);
  					},

  					/**
  					 * Returns the script element that is currently executing.
  					 *
  					 * This does __not__ work for line script element.
  					 *
  					 * @returns {HTMLScriptElement | null}
  					 */
  					currentScript: function () {
  						if (typeof document === 'undefined') {
  							return null;
  						}
  						if (document.currentScript && document.currentScript.tagName === 'SCRIPT' && 1 < 2 /* hack to trip TS' flow analysis */) {
  							return /** @type {any} */ (document.currentScript);
  						}

  						// IE11 workaround
  						// we'll get the src of the current script by parsing IE11's error stack trace
  						// this will not work for inline scripts

  						try {
  							throw new Error();
  						} catch (err) {
  							// Get file src url from stack. Specifically works with the format of stack traces in IE.
  							// A stack will look like this:
  							//
  							// Error
  							//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)
  							//    at Global code (http://localhost/components/prism-core.js:606:1)

  							var src = (/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(err.stack) || [])[1];
  							if (src) {
  								var scripts = document.getElementsByTagName('script');
  								for (var i in scripts) {
  									if (scripts[i].src == src) {
  										return scripts[i];
  									}
  								}
  							}
  							return null;
  						}
  					},

  					/**
  					 * Returns whether a given class is active for `element`.
  					 *
  					 * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated
  					 * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the
  					 * given class is just the given class with a `no-` prefix.
  					 *
  					 * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is
  					 * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its
  					 * ancestors have the given class or the negated version of it, then the default activation will be returned.
  					 *
  					 * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated
  					 * version of it, the class is considered active.
  					 *
  					 * @param {Element} element
  					 * @param {string} className
  					 * @param {boolean} [defaultActivation=false]
  					 * @returns {boolean}
  					 */
  					isActive: function (element, className, defaultActivation) {
  						var no = 'no-' + className;

  						while (element) {
  							var classList = element.classList;
  							if (classList.contains(className)) {
  								return true;
  							}
  							if (classList.contains(no)) {
  								return false;
  							}
  							element = element.parentElement;
  						}
  						return !!defaultActivation;
  					}
  				},

  				/**
  				 * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.
  				 *
  				 * @namespace
  				 * @memberof Prism
  				 * @public
  				 */
  				languages: {
  					/**
  					 * The grammar for plain, unformatted text.
  					 */
  					plain: plainTextGrammar,
  					plaintext: plainTextGrammar,
  					text: plainTextGrammar,
  					txt: plainTextGrammar,

  					/**
  					 * Creates a deep copy of the language with the given id and appends the given tokens.
  					 *
  					 * If a token in `redef` also appears in the copied language, then the existing token in the copied language
  					 * will be overwritten at its original position.
  					 *
  					 * ## Best practices
  					 *
  					 * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)
  					 * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to
  					 * understand the language definition because, normally, the order of tokens matters in Prism grammars.
  					 *
  					 * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.
  					 * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.
  					 *
  					 * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.
  					 * @param {Grammar} redef The new tokens to append.
  					 * @returns {Grammar} The new language created.
  					 * @public
  					 * @example
  					 * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {
  					 *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token
  					 *     // at its original position
  					 *     'comment': { ... },
  					 *     // CSS doesn't have a 'color' token, so this token will be appended
  					 *     'color': /\b(?:red|green|blue)\b/
  					 * });
  					 */
  					extend: function (id, redef) {
  						var lang = _.util.clone(_.languages[id]);

  						for (var key in redef) {
  							lang[key] = redef[key];
  						}

  						return lang;
  					},

  					/**
  					 * Inserts tokens _before_ another token in a language definition or any other grammar.
  					 *
  					 * ## Usage
  					 *
  					 * This helper method makes it easy to modify existing languages. For example, the CSS language definition
  					 * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded
  					 * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the
  					 * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do
  					 * this:
  					 *
  					 * ```js
  					 * Prism.languages.markup.style = {
  					 *     // token
  					 * };
  					 * ```
  					 *
  					 * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens
  					 * before existing tokens. For the CSS example above, you would use it like this:
  					 *
  					 * ```js
  					 * Prism.languages.insertBefore('markup', 'cdata', {
  					 *     'style': {
  					 *         // token
  					 *     }
  					 * });
  					 * ```
  					 *
  					 * ## Special cases
  					 *
  					 * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar
  					 * will be ignored.
  					 *
  					 * This behavior can be used to insert tokens after `before`:
  					 *
  					 * ```js
  					 * Prism.languages.insertBefore('markup', 'comment', {
  					 *     'comment': Prism.languages.markup.comment,
  					 *     // tokens after 'comment'
  					 * });
  					 * ```
  					 *
  					 * ## Limitations
  					 *
  					 * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object
  					 * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave
  					 * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily
  					 * deleting properties which is necessary to insert at arbitrary positions.
  					 *
  					 * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.
  					 * Instead, it will create a new object and replace all references to the target object with the new one. This
  					 * can be done without temporarily deleting properties, so the iteration order is well-defined.
  					 *
  					 * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if
  					 * you hold the target object in a variable, then the value of the variable will not change.
  					 *
  					 * ```js
  					 * var oldMarkup = Prism.languages.markup;
  					 * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });
  					 *
  					 * assert(oldMarkup !== Prism.languages.markup);
  					 * assert(newMarkup === Prism.languages.markup);
  					 * ```
  					 *
  					 * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the
  					 * object to be modified.
  					 * @param {string} before The key to insert before.
  					 * @param {Grammar} insert An object containing the key-value pairs to be inserted.
  					 * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the
  					 * object to be modified.
  					 *
  					 * Defaults to `Prism.languages`.
  					 * @returns {Grammar} The new grammar object.
  					 * @public
  					 */
  					insertBefore: function (inside, before, insert, root) {
  						root = root || /** @type {any} */ (_.languages);
  						var grammar = root[inside];
  						/** @type {Grammar} */
  						var ret = {};

  						for (var token in grammar) {
  							if (grammar.hasOwnProperty(token)) {

  								if (token == before) {
  									for (var newToken in insert) {
  										if (insert.hasOwnProperty(newToken)) {
  											ret[newToken] = insert[newToken];
  										}
  									}
  								}

  								// Do not insert token which also occur in insert. See #1525
  								if (!insert.hasOwnProperty(token)) {
  									ret[token] = grammar[token];
  								}
  							}
  						}

  						var old = root[inside];
  						root[inside] = ret;

  						// Update references in other language definitions
  						_.languages.DFS(_.languages, function (key, value) {
  							if (value === old && key != inside) {
  								this[key] = ret;
  							}
  						});

  						return ret;
  					},

  					// Traverse a language definition with Depth First Search
  					DFS: function DFS(o, callback, type, visited) {
  						visited = visited || {};

  						var objId = _.util.objId;

  						for (var i in o) {
  							if (o.hasOwnProperty(i)) {
  								callback.call(o, i, o[i], type || i);

  								var property = o[i];
  								var propertyType = _.util.type(property);

  								if (propertyType === 'Object' && !visited[objId(property)]) {
  									visited[objId(property)] = true;
  									DFS(property, callback, null, visited);
  								} else if (propertyType === 'Array' && !visited[objId(property)]) {
  									visited[objId(property)] = true;
  									DFS(property, callback, i, visited);
  								}
  							}
  						}
  					}
  				},

  				plugins: {},

  				/**
  				 * This is the most high-level function in Prism’s API.
  				 * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on
  				 * each one of them.
  				 *
  				 * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.
  				 *
  				 * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.
  				 * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.
  				 * @memberof Prism
  				 * @public
  				 */
  				highlightAll: function (async, callback) {
  					_.highlightAllUnder(document, async, callback);
  				},

  				/**
  				 * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls
  				 * {@link Prism.highlightElement} on each one of them.
  				 *
  				 * The following hooks will be run:
  				 * 1. `before-highlightall`
  				 * 2. `before-all-elements-highlight`
  				 * 3. All hooks of {@link Prism.highlightElement} for each element.
  				 *
  				 * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.
  				 * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.
  				 * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.
  				 * @memberof Prism
  				 * @public
  				 */
  				highlightAllUnder: function (container, async, callback) {
  					var env = {
  						callback: callback,
  						container: container,
  						selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
  					};

  					_.hooks.run('before-highlightall', env);

  					env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));

  					_.hooks.run('before-all-elements-highlight', env);

  					for (var i = 0, element; (element = env.elements[i++]);) {
  						_.highlightElement(element, async === true, env.callback);
  					}
  				},

  				/**
  				 * Highlights the code inside a single element.
  				 *
  				 * The following hooks will be run:
  				 * 1. `before-sanity-check`
  				 * 2. `before-highlight`
  				 * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.
  				 * 4. `before-insert`
  				 * 5. `after-highlight`
  				 * 6. `complete`
  				 *
  				 * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for
  				 * the element's language.
  				 *
  				 * @param {Element} element The element containing the code.
  				 * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.
  				 * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers
  				 * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is
  				 * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).
  				 *
  				 * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for
  				 * asynchronous highlighting to work. You can build your own bundle on the
  				 * [Download page](https://prismjs.com/download.html).
  				 * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.
  				 * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.
  				 * @memberof Prism
  				 * @public
  				 */
  				highlightElement: function (element, async, callback) {
  					// Find language
  					var language = _.util.getLanguage(element);
  					var grammar = _.languages[language];

  					// Set language on the element, if not present
  					_.util.setLanguage(element, language);

  					// Set language on the parent, for styling
  					var parent = element.parentElement;
  					if (parent && parent.nodeName.toLowerCase() === 'pre') {
  						_.util.setLanguage(parent, language);
  					}

  					var code = element.textContent;

  					var env = {
  						element: element,
  						language: language,
  						grammar: grammar,
  						code: code
  					};

  					function insertHighlightedCode(highlightedCode) {
  						env.highlightedCode = highlightedCode;

  						_.hooks.run('before-insert', env);

  						env.element.innerHTML = env.highlightedCode;

  						_.hooks.run('after-highlight', env);
  						_.hooks.run('complete', env);
  						callback && callback.call(env.element);
  					}

  					_.hooks.run('before-sanity-check', env);

  					// plugins may change/add the parent/element
  					parent = env.element.parentElement;
  					if (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {
  						parent.setAttribute('tabindex', '0');
  					}

  					if (!env.code) {
  						_.hooks.run('complete', env);
  						callback && callback.call(env.element);
  						return;
  					}

  					_.hooks.run('before-highlight', env);

  					if (!env.grammar) {
  						insertHighlightedCode(_.util.encode(env.code));
  						return;
  					}

  					if (async && _self.Worker) {
  						var worker = new Worker(_.filename);

  						worker.onmessage = function (evt) {
  							insertHighlightedCode(evt.data);
  						};

  						worker.postMessage(JSON.stringify({
  							language: env.language,
  							code: env.code,
  							immediateClose: true
  						}));
  					} else {
  						insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));
  					}
  				},

  				/**
  				 * Low-level function, only use if you know what you’re doing. It accepts a string of text as input
  				 * and the language definitions to use, and returns a string with the HTML produced.
  				 *
  				 * The following hooks will be run:
  				 * 1. `before-tokenize`
  				 * 2. `after-tokenize`
  				 * 3. `wrap`: On each {@link Token}.
  				 *
  				 * @param {string} text A string with the code to be highlighted.
  				 * @param {Grammar} grammar An object containing the tokens to use.
  				 *
  				 * Usually a language definition like `Prism.languages.markup`.
  				 * @param {string} language The name of the language definition passed to `grammar`.
  				 * @returns {string} The highlighted HTML.
  				 * @memberof Prism
  				 * @public
  				 * @example
  				 * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');
  				 */
  				highlight: function (text, grammar, language) {
  					var env = {
  						code: text,
  						grammar: grammar,
  						language: language
  					};
  					_.hooks.run('before-tokenize', env);
  					if (!env.grammar) {
  						throw new Error('The language "' + env.language + '" has no grammar.');
  					}
  					env.tokens = _.tokenize(env.code, env.grammar);
  					_.hooks.run('after-tokenize', env);
  					return Token.stringify(_.util.encode(env.tokens), env.language);
  				},

  				/**
  				 * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input
  				 * and the language definitions to use, and returns an array with the tokenized code.
  				 *
  				 * When the language definition includes nested tokens, the function is called recursively on each of these tokens.
  				 *
  				 * This method could be useful in other contexts as well, as a very crude parser.
  				 *
  				 * @param {string} text A string with the code to be highlighted.
  				 * @param {Grammar} grammar An object containing the tokens to use.
  				 *
  				 * Usually a language definition like `Prism.languages.markup`.
  				 * @returns {TokenStream} An array of strings and tokens, a token stream.
  				 * @memberof Prism
  				 * @public
  				 * @example
  				 * let code = `var foo = 0;`;
  				 * let tokens = Prism.tokenize(code, Prism.languages.javascript);
  				 * tokens.forEach(token => {
  				 *     if (token instanceof Prism.Token && token.type === 'number') {
  				 *         console.log(`Found numeric literal: ${token.content}`);
  				 *     }
  				 * });
  				 */
  				tokenize: function (text, grammar) {
  					var rest = grammar.rest;
  					if (rest) {
  						for (var token in rest) {
  							grammar[token] = rest[token];
  						}

  						delete grammar.rest;
  					}

  					var tokenList = new LinkedList();
  					addAfter(tokenList, tokenList.head, text);

  					matchGrammar(text, tokenList, grammar, tokenList.head, 0);

  					return toArray(tokenList);
  				},

  				/**
  				 * @namespace
  				 * @memberof Prism
  				 * @public
  				 */
  				hooks: {
  					all: {},

  					/**
  					 * Adds the given callback to the list of callbacks for the given hook.
  					 *
  					 * The callback will be invoked when the hook it is registered for is run.
  					 * Hooks are usually directly run by a highlight function but you can also run hooks yourself.
  					 *
  					 * One callback function can be registered to multiple hooks and the same hook multiple times.
  					 *
  					 * @param {string} name The name of the hook.
  					 * @param {HookCallback} callback The callback function which is given environment variables.
  					 * @public
  					 */
  					add: function (name, callback) {
  						var hooks = _.hooks.all;

  						hooks[name] = hooks[name] || [];

  						hooks[name].push(callback);
  					},

  					/**
  					 * Runs a hook invoking all registered callbacks with the given environment variables.
  					 *
  					 * Callbacks will be invoked synchronously and in the order in which they were registered.
  					 *
  					 * @param {string} name The name of the hook.
  					 * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.
  					 * @public
  					 */
  					run: function (name, env) {
  						var callbacks = _.hooks.all[name];

  						if (!callbacks || !callbacks.length) {
  							return;
  						}

  						for (var i = 0, callback; (callback = callbacks[i++]);) {
  							callback(env);
  						}
  					}
  				},

  				Token: Token
  			};
  			_self.Prism = _;


  			// Typescript note:
  			// The following can be used to import the Token type in JSDoc:
  			//
  			//   @typedef {InstanceType<import("./prism-core")["Token"]>} Token

  			/**
  			 * Creates a new token.
  			 *
  			 * @param {string} type See {@link Token#type type}
  			 * @param {string | TokenStream} content See {@link Token#content content}
  			 * @param {string|string[]} [alias] The alias(es) of the token.
  			 * @param {string} [matchedStr=""] A copy of the full string this token was created from.
  			 * @class
  			 * @global
  			 * @public
  			 */
  			function Token(type, content, alias, matchedStr) {
  				/**
  				 * The type of the token.
  				 *
  				 * This is usually the key of a pattern in a {@link Grammar}.
  				 *
  				 * @type {string}
  				 * @see GrammarToken
  				 * @public
  				 */
  				this.type = type;
  				/**
  				 * The strings or tokens contained by this token.
  				 *
  				 * This will be a token stream if the pattern matched also defined an `inside` grammar.
  				 *
  				 * @type {string | TokenStream}
  				 * @public
  				 */
  				this.content = content;
  				/**
  				 * The alias(es) of the token.
  				 *
  				 * @type {string|string[]}
  				 * @see GrammarToken
  				 * @public
  				 */
  				this.alias = alias;
  				// Copy of the full string this token was created from
  				this.length = (matchedStr || '').length | 0;
  			}

  			/**
  			 * A token stream is an array of strings and {@link Token Token} objects.
  			 *
  			 * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process
  			 * them.
  			 *
  			 * 1. No adjacent strings.
  			 * 2. No empty strings.
  			 *
  			 *    The only exception here is the token stream that only contains the empty string and nothing else.
  			 *
  			 * @typedef {Array<string | Token>} TokenStream
  			 * @global
  			 * @public
  			 */

  			/**
  			 * Converts the given token or token stream to an HTML representation.
  			 *
  			 * The following hooks will be run:
  			 * 1. `wrap`: On each {@link Token}.
  			 *
  			 * @param {string | Token | TokenStream} o The token or token stream to be converted.
  			 * @param {string} language The name of current language.
  			 * @returns {string} The HTML representation of the token or token stream.
  			 * @memberof Token
  			 * @static
  			 */
  			Token.stringify = function stringify(o, language) {
  				if (typeof o == 'string') {
  					return o;
  				}
  				if (Array.isArray(o)) {
  					var s = '';
  					o.forEach(function (e) {
  						s += stringify(e, language);
  					});
  					return s;
  				}

  				var env = {
  					type: o.type,
  					content: stringify(o.content, language),
  					tag: 'span',
  					classes: ['token', o.type],
  					attributes: {},
  					language: language
  				};

  				var aliases = o.alias;
  				if (aliases) {
  					if (Array.isArray(aliases)) {
  						Array.prototype.push.apply(env.classes, aliases);
  					} else {
  						env.classes.push(aliases);
  					}
  				}

  				_.hooks.run('wrap', env);

  				var attributes = '';
  				for (var name in env.attributes) {
  					attributes += ' ' + name + '="' + (env.attributes[name] || '').replace(/"/g, '&quot;') + '"';
  				}

  				return '<' + env.tag + ' class="' + env.classes.join(' ') + '"' + attributes + '>' + env.content + '</' + env.tag + '>';
  			};

  			/**
  			 * @param {RegExp} pattern
  			 * @param {number} pos
  			 * @param {string} text
  			 * @param {boolean} lookbehind
  			 * @returns {RegExpExecArray | null}
  			 */
  			function matchPattern(pattern, pos, text, lookbehind) {
  				pattern.lastIndex = pos;
  				var match = pattern.exec(text);
  				if (match && lookbehind && match[1]) {
  					// change the match to remove the text matched by the Prism lookbehind group
  					var lookbehindLength = match[1].length;
  					match.index += lookbehindLength;
  					match[0] = match[0].slice(lookbehindLength);
  				}
  				return match;
  			}

  			/**
  			 * @param {string} text
  			 * @param {LinkedList<string | Token>} tokenList
  			 * @param {any} grammar
  			 * @param {LinkedListNode<string | Token>} startNode
  			 * @param {number} startPos
  			 * @param {RematchOptions} [rematch]
  			 * @returns {void}
  			 * @private
  			 *
  			 * @typedef RematchOptions
  			 * @property {string} cause
  			 * @property {number} reach
  			 */
  			function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {
  				for (var token in grammar) {
  					if (!grammar.hasOwnProperty(token) || !grammar[token]) {
  						continue;
  					}

  					var patterns = grammar[token];
  					patterns = Array.isArray(patterns) ? patterns : [patterns];

  					for (var j = 0; j < patterns.length; ++j) {
  						if (rematch && rematch.cause == token + ',' + j) {
  							return;
  						}

  						var patternObj = patterns[j];
  						var inside = patternObj.inside;
  						var lookbehind = !!patternObj.lookbehind;
  						var greedy = !!patternObj.greedy;
  						var alias = patternObj.alias;

  						if (greedy && !patternObj.pattern.global) {
  							// Without the global flag, lastIndex won't work
  							var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];
  							patternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');
  						}

  						/** @type {RegExp} */
  						var pattern = patternObj.pattern || patternObj;

  						for ( // iterate the token list and keep track of the current token/string position
  							var currentNode = startNode.next, pos = startPos;
  							currentNode !== tokenList.tail;
  							pos += currentNode.value.length, currentNode = currentNode.next
  						) {

  							if (rematch && pos >= rematch.reach) {
  								break;
  							}

  							var str = currentNode.value;

  							if (tokenList.length > text.length) {
  								// Something went terribly wrong, ABORT, ABORT!
  								return;
  							}

  							if (str instanceof Token) {
  								continue;
  							}

  							var removeCount = 1; // this is the to parameter of removeBetween
  							var match;

  							if (greedy) {
  								match = matchPattern(pattern, pos, text, lookbehind);
  								if (!match || match.index >= text.length) {
  									break;
  								}

  								var from = match.index;
  								var to = match.index + match[0].length;
  								var p = pos;

  								// find the node that contains the match
  								p += currentNode.value.length;
  								while (from >= p) {
  									currentNode = currentNode.next;
  									p += currentNode.value.length;
  								}
  								// adjust pos (and p)
  								p -= currentNode.value.length;
  								pos = p;

  								// the current node is a Token, then the match starts inside another Token, which is invalid
  								if (currentNode.value instanceof Token) {
  									continue;
  								}

  								// find the last node which is affected by this match
  								for (
  									var k = currentNode;
  									k !== tokenList.tail && (p < to || typeof k.value === 'string');
  									k = k.next
  								) {
  									removeCount++;
  									p += k.value.length;
  								}
  								removeCount--;

  								// replace with the new match
  								str = text.slice(pos, p);
  								match.index -= pos;
  							} else {
  								match = matchPattern(pattern, 0, str, lookbehind);
  								if (!match) {
  									continue;
  								}
  							}

  							// eslint-disable-next-line no-redeclare
  							var from = match.index;
  							var matchStr = match[0];
  							var before = str.slice(0, from);
  							var after = str.slice(from + matchStr.length);

  							var reach = pos + str.length;
  							if (rematch && reach > rematch.reach) {
  								rematch.reach = reach;
  							}

  							var removeFrom = currentNode.prev;

  							if (before) {
  								removeFrom = addAfter(tokenList, removeFrom, before);
  								pos += before.length;
  							}

  							removeRange(tokenList, removeFrom, removeCount);

  							var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);
  							currentNode = addAfter(tokenList, removeFrom, wrapped);

  							if (after) {
  								addAfter(tokenList, currentNode, after);
  							}

  							if (removeCount > 1) {
  								// at least one Token object was removed, so we have to do some rematching
  								// this can only happen if the current pattern is greedy

  								/** @type {RematchOptions} */
  								var nestedRematch = {
  									cause: token + ',' + j,
  									reach: reach
  								};
  								matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);

  								// the reach might have been extended because of the rematching
  								if (rematch && nestedRematch.reach > rematch.reach) {
  									rematch.reach = nestedRematch.reach;
  								}
  							}
  						}
  					}
  				}
  			}

  			/**
  			 * @typedef LinkedListNode
  			 * @property {T} value
  			 * @property {LinkedListNode<T> | null} prev The previous node.
  			 * @property {LinkedListNode<T> | null} next The next node.
  			 * @template T
  			 * @private
  			 */

  			/**
  			 * @template T
  			 * @private
  			 */
  			function LinkedList() {
  				/** @type {LinkedListNode<T>} */
  				var head = { value: null, prev: null, next: null };
  				/** @type {LinkedListNode<T>} */
  				var tail = { value: null, prev: head, next: null };
  				head.next = tail;

  				/** @type {LinkedListNode<T>} */
  				this.head = head;
  				/** @type {LinkedListNode<T>} */
  				this.tail = tail;
  				this.length = 0;
  			}

  			/**
  			 * Adds a new node with the given value to the list.
  			 *
  			 * @param {LinkedList<T>} list
  			 * @param {LinkedListNode<T>} node
  			 * @param {T} value
  			 * @returns {LinkedListNode<T>} The added node.
  			 * @template T
  			 */
  			function addAfter(list, node, value) {
  				// assumes that node != list.tail && values.length >= 0
  				var next = node.next;

  				var newNode = { value: value, prev: node, next: next };
  				node.next = newNode;
  				next.prev = newNode;
  				list.length++;

  				return newNode;
  			}
  			/**
  			 * Removes `count` nodes after the given node. The given node will not be removed.
  			 *
  			 * @param {LinkedList<T>} list
  			 * @param {LinkedListNode<T>} node
  			 * @param {number} count
  			 * @template T
  			 */
  			function removeRange(list, node, count) {
  				var next = node.next;
  				for (var i = 0; i < count && next !== list.tail; i++) {
  					next = next.next;
  				}
  				node.next = next;
  				next.prev = node;
  				list.length -= i;
  			}
  			/**
  			 * @param {LinkedList<T>} list
  			 * @returns {T[]}
  			 * @template T
  			 */
  			function toArray(list) {
  				var array = [];
  				var node = list.head.next;
  				while (node !== list.tail) {
  					array.push(node.value);
  					node = node.next;
  				}
  				return array;
  			}


  			if (!_self.document) {
  				if (!_self.addEventListener) {
  					// in Node.js
  					return _;
  				}

  				if (!_.disableWorkerMessageHandler) {
  					// In worker
  					_self.addEventListener('message', function (evt) {
  						var message = JSON.parse(evt.data);
  						var lang = message.language;
  						var code = message.code;
  						var immediateClose = message.immediateClose;

  						_self.postMessage(_.highlight(code, _.languages[lang], lang));
  						if (immediateClose) {
  							_self.close();
  						}
  					}, false);
  				}

  				return _;
  			}

  			// Get current script and highlight
  			var script = _.util.currentScript();

  			if (script) {
  				_.filename = script.src;

  				if (script.hasAttribute('data-manual')) {
  					_.manual = true;
  				}
  			}

  			function highlightAutomaticallyCallback() {
  				if (!_.manual) {
  					_.highlightAll();
  				}
  			}

  			if (!_.manual) {
  				// If the document state is "loading", then we'll use DOMContentLoaded.
  				// If the document state is "interactive" and the prism.js script is deferred, then we'll also use the
  				// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they
  				// might take longer one animation frame to execute which can create a race condition where only some plugins have
  				// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.
  				// See https://github.com/PrismJS/prism/issues/2102
  				var readyState = document.readyState;
  				if (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {
  					document.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);
  				} else {
  					if (window.requestAnimationFrame) {
  						window.requestAnimationFrame(highlightAutomaticallyCallback);
  					} else {
  						window.setTimeout(highlightAutomaticallyCallback, 16);
  					}
  				}
  			}

  			return _;

  		}(_self));

  		if (module.exports) {
  			module.exports = Prism;
  		}

  		// hack for components to work correctly in node.js
  		if (typeof commonjsGlobal !== 'undefined') {
  			commonjsGlobal.Prism = Prism;
  		}

  		// some additional documentation/types

  		/**
  		 * The expansion of a simple `RegExp` literal to support additional properties.
  		 *
  		 * @typedef GrammarToken
  		 * @property {RegExp} pattern The regular expression of the token.
  		 * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)
  		 * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.
  		 * @property {boolean} [greedy=false] Whether the token is greedy.
  		 * @property {string|string[]} [alias] An optional alias or list of aliases.
  		 * @property {Grammar} [inside] The nested grammar of this token.
  		 *
  		 * The `inside` grammar will be used to tokenize the text value of each token of this kind.
  		 *
  		 * This can be used to make nested and even recursive language definitions.
  		 *
  		 * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into
  		 * each another.
  		 * @global
  		 * @public
  		 */

  		/**
  		 * @typedef Grammar
  		 * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}
  		 * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.
  		 * @global
  		 * @public
  		 */

  		/**
  		 * A function which will invoked after an element was successfully highlighted.
  		 *
  		 * @callback HighlightCallback
  		 * @param {Element} element The element successfully highlighted.
  		 * @returns {void}
  		 * @global
  		 * @public
  		 */

  		/**
  		 * @callback HookCallback
  		 * @param {Object<string, any>} env The environment variables of the hook.
  		 * @returns {void}
  		 * @global
  		 * @public
  		 */


  		/* **********************************************
  		     Begin prism-markup.js
  		********************************************** */

  		Prism.languages.markup = {
  			'comment': {
  				pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
  				greedy: true
  			},
  			'prolog': {
  				pattern: /<\?[\s\S]+?\?>/,
  				greedy: true
  			},
  			'doctype': {
  				// https://www.w3.org/TR/xml/#NT-doctypedecl
  				pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
  				greedy: true,
  				inside: {
  					'internal-subset': {
  						pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
  						lookbehind: true,
  						greedy: true,
  						inside: null // see below
  					},
  					'string': {
  						pattern: /"[^"]*"|'[^']*'/,
  						greedy: true
  					},
  					'punctuation': /^<!|>$|[[\]]/,
  					'doctype-tag': /^DOCTYPE/i,
  					'name': /[^\s<>'"]+/
  				}
  			},
  			'cdata': {
  				pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
  				greedy: true
  			},
  			'tag': {
  				pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
  				greedy: true,
  				inside: {
  					'tag': {
  						pattern: /^<\/?[^\s>\/]+/,
  						inside: {
  							'punctuation': /^<\/?/,
  							'namespace': /^[^\s>\/:]+:/
  						}
  					},
  					'special-attr': [],
  					'attr-value': {
  						pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
  						inside: {
  							'punctuation': [
  								{
  									pattern: /^=/,
  									alias: 'attr-equals'
  								},
  								{
  									pattern: /^(\s*)["']|["']$/,
  									lookbehind: true
  								}
  							]
  						}
  					},
  					'punctuation': /\/?>/,
  					'attr-name': {
  						pattern: /[^\s>\/]+/,
  						inside: {
  							'namespace': /^[^\s>\/:]+:/
  						}
  					}

  				}
  			},
  			'entity': [
  				{
  					pattern: /&[\da-z]{1,8};/i,
  					alias: 'named-entity'
  				},
  				/&#x?[\da-f]{1,8};/i
  			]
  		};

  		Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =
  			Prism.languages.markup['entity'];
  		Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;

  		// Plugin to make entity title show the real entity, idea by Roman Komarov
  		Prism.hooks.add('wrap', function (env) {

  			if (env.type === 'entity') {
  				env.attributes['title'] = env.content.replace(/&amp;/, '&');
  			}
  		});

  		Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {
  			/**
  			 * Adds an inlined language to markup.
  			 *
  			 * An example of an inlined language is CSS with `<style>` tags.
  			 *
  			 * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
  			 * case insensitive.
  			 * @param {string} lang The language key.
  			 * @example
  			 * addInlined('style', 'css');
  			 */
  			value: function addInlined(tagName, lang) {
  				var includedCdataInside = {};
  				includedCdataInside['language-' + lang] = {
  					pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
  					lookbehind: true,
  					inside: Prism.languages[lang]
  				};
  				includedCdataInside['cdata'] = /^<!\[CDATA\[|\]\]>$/i;

  				var inside = {
  					'included-cdata': {
  						pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
  						inside: includedCdataInside
  					}
  				};
  				inside['language-' + lang] = {
  					pattern: /[\s\S]+/,
  					inside: Prism.languages[lang]
  				};

  				var def = {};
  				def[tagName] = {
  					pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),
  					lookbehind: true,
  					greedy: true,
  					inside: inside
  				};

  				Prism.languages.insertBefore('markup', 'cdata', def);
  			}
  		});
  		Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {
  			/**
  			 * Adds an pattern to highlight languages embedded in HTML attributes.
  			 *
  			 * An example of an inlined language is CSS with `style` attributes.
  			 *
  			 * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as
  			 * case insensitive.
  			 * @param {string} lang The language key.
  			 * @example
  			 * addAttribute('style', 'css');
  			 */
  			value: function (attrName, lang) {
  				Prism.languages.markup.tag.inside['special-attr'].push({
  					pattern: RegExp(
  						/(^|["'\s])/.source + '(?:' + attrName + ')' + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,
  						'i'
  					),
  					lookbehind: true,
  					inside: {
  						'attr-name': /^[^\s=]+/,
  						'attr-value': {
  							pattern: /=[\s\S]+/,
  							inside: {
  								'value': {
  									pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
  									lookbehind: true,
  									alias: [lang, 'language-' + lang],
  									inside: Prism.languages[lang]
  								},
  								'punctuation': [
  									{
  										pattern: /^=/,
  										alias: 'attr-equals'
  									},
  									/"|'/
  								]
  							}
  						}
  					}
  				});
  			}
  		});

  		Prism.languages.html = Prism.languages.markup;
  		Prism.languages.mathml = Prism.languages.markup;
  		Prism.languages.svg = Prism.languages.markup;

  		Prism.languages.xml = Prism.languages.extend('markup', {});
  		Prism.languages.ssml = Prism.languages.xml;
  		Prism.languages.atom = Prism.languages.xml;
  		Prism.languages.rss = Prism.languages.xml;


  		/* **********************************************
  		     Begin prism-css.js
  		********************************************** */

  		(function (Prism) {

  			var string = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;

  			Prism.languages.css = {
  				'comment': /\/\*[\s\S]*?\*\//,
  				'atrule': {
  					pattern: RegExp('@[\\w-](?:' + /[^;{\s"']|\s+(?!\s)/.source + '|' + string.source + ')*?' + /(?:;|(?=\s*\{))/.source),
  					inside: {
  						'rule': /^@[\w-]+/,
  						'selector-function-argument': {
  							pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
  							lookbehind: true,
  							alias: 'selector'
  						},
  						'keyword': {
  							pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
  							lookbehind: true
  						}
  						// See rest below
  					}
  				},
  				'url': {
  					// https://drafts.csswg.org/css-values-3/#urls
  					pattern: RegExp('\\burl\\((?:' + string.source + '|' + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ')\\)', 'i'),
  					greedy: true,
  					inside: {
  						'function': /^url/i,
  						'punctuation': /^\(|\)$/,
  						'string': {
  							pattern: RegExp('^' + string.source + '$'),
  							alias: 'url'
  						}
  					}
  				},
  				'selector': {
  					pattern: RegExp('(^|[{}\\s])[^{}\\s](?:[^{};"\'\\s]|\\s+(?![\\s{])|' + string.source + ')*(?=\\s*\\{)'),
  					lookbehind: true
  				},
  				'string': {
  					pattern: string,
  					greedy: true
  				},
  				'property': {
  					pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
  					lookbehind: true
  				},
  				'important': /!important\b/i,
  				'function': {
  					pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
  					lookbehind: true
  				},
  				'punctuation': /[(){};:,]/
  			};

  			Prism.languages.css['atrule'].inside.rest = Prism.languages.css;

  			var markup = Prism.languages.markup;
  			if (markup) {
  				markup.tag.addInlined('style', 'css');
  				markup.tag.addAttribute('style', 'css');
  			}

  		}(Prism));


  		/* **********************************************
  		     Begin prism-clike.js
  		********************************************** */

  		Prism.languages.clike = {
  			'comment': [
  				{
  					pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
  					lookbehind: true,
  					greedy: true
  				},
  				{
  					pattern: /(^|[^\\:])\/\/.*/,
  					lookbehind: true,
  					greedy: true
  				}
  			],
  			'string': {
  				pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
  				greedy: true
  			},
  			'class-name': {
  				pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,
  				lookbehind: true,
  				inside: {
  					'punctuation': /[.\\]/
  				}
  			},
  			'keyword': /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,
  			'boolean': /\b(?:false|true)\b/,
  			'function': /\b\w+(?=\()/,
  			'number': /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
  			'operator': /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
  			'punctuation': /[{}[\];(),.:]/
  		};


  		/* **********************************************
  		     Begin prism-javascript.js
  		********************************************** */

  		Prism.languages.javascript = Prism.languages.extend('clike', {
  			'class-name': [
  				Prism.languages.clike['class-name'],
  				{
  					pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,
  					lookbehind: true
  				}
  			],
  			'keyword': [
  				{
  					pattern: /((?:^|\})\s*)catch\b/,
  					lookbehind: true
  				},
  				{
  					pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
  					lookbehind: true
  				},
  			],
  			// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
  			'function': /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
  			'number': {
  				pattern: RegExp(
  					/(^|[^\w$])/.source +
  					'(?:' +
  					(
  						// constant
  						/NaN|Infinity/.source +
  						'|' +
  						// binary integer
  						/0[bB][01]+(?:_[01]+)*n?/.source +
  						'|' +
  						// octal integer
  						/0[oO][0-7]+(?:_[0-7]+)*n?/.source +
  						'|' +
  						// hexadecimal integer
  						/0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source +
  						'|' +
  						// decimal bigint
  						/\d+(?:_\d+)*n/.source +
  						'|' +
  						// decimal number (integer or float) but no bigint
  						/(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source
  					) +
  					')' +
  					/(?![\w$])/.source
  				),
  				lookbehind: true
  			},
  			'operator': /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
  		});

  		Prism.languages.javascript['class-name'][0].pattern = /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/;

  		Prism.languages.insertBefore('javascript', 'keyword', {
  			'regex': {
  				pattern: RegExp(
  					// lookbehind
  					// eslint-disable-next-line regexp/no-dupe-characters-character-class
  					/((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)/.source +
  					// Regex pattern:
  					// There are 2 regex patterns here. The RegExp set notation proposal added support for nested character
  					// classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible
  					// with the only syntax, so we have to define 2 different regex patterns.
  					/\//.source +
  					'(?:' +
  					/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}/.source +
  					'|' +
  					// `v` flag syntax. This supports 3 levels of nested character classes.
  					/(?:\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.)*\])*\])*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source +
  					')' +
  					// lookahead
  					/(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/.source
  				),
  				lookbehind: true,
  				greedy: true,
  				inside: {
  					'regex-source': {
  						pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
  						lookbehind: true,
  						alias: 'language-regex',
  						inside: Prism.languages.regex
  					},
  					'regex-delimiter': /^\/|\/$/,
  					'regex-flags': /^[a-z]+$/,
  				}
  			},
  			// This must be declared before keyword because we use "function" inside the look-forward
  			'function-variable': {
  				pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
  				alias: 'function'
  			},
  			'parameter': [
  				{
  					pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
  					lookbehind: true,
  					inside: Prism.languages.javascript
  				},
  				{
  					pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
  					lookbehind: true,
  					inside: Prism.languages.javascript
  				},
  				{
  					pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
  					lookbehind: true,
  					inside: Prism.languages.javascript
  				},
  				{
  					pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
  					lookbehind: true,
  					inside: Prism.languages.javascript
  				}
  			],
  			'constant': /\b[A-Z](?:[A-Z_]|\dx?)*\b/
  		});

  		Prism.languages.insertBefore('javascript', 'string', {
  			'hashbang': {
  				pattern: /^#!.*/,
  				greedy: true,
  				alias: 'comment'
  			},
  			'template-string': {
  				pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
  				greedy: true,
  				inside: {
  					'template-punctuation': {
  						pattern: /^`|`$/,
  						alias: 'string'
  					},
  					'interpolation': {
  						pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
  						lookbehind: true,
  						inside: {
  							'interpolation-punctuation': {
  								pattern: /^\$\{|\}$/,
  								alias: 'punctuation'
  							},
  							rest: Prism.languages.javascript
  						}
  					},
  					'string': /[\s\S]+/
  				}
  			},
  			'string-property': {
  				pattern: /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,
  				lookbehind: true,
  				greedy: true,
  				alias: 'property'
  			}
  		});

  		Prism.languages.insertBefore('javascript', 'operator', {
  			'literal-property': {
  				pattern: /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,
  				lookbehind: true,
  				alias: 'property'
  			},
  		});

  		if (Prism.languages.markup) {
  			Prism.languages.markup.tag.addInlined('script', 'javascript');

  			// add attribute support for all DOM events.
  			// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events
  			Prism.languages.markup.tag.addAttribute(
  				/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,
  				'javascript'
  			);
  		}

  		Prism.languages.js = Prism.languages.javascript;


  		/* **********************************************
  		     Begin prism-file-highlight.js
  		********************************************** */

  		(function () {

  			if (typeof Prism === 'undefined' || typeof document === 'undefined') {
  				return;
  			}

  			// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill
  			if (!Element.prototype.matches) {
  				Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
  			}

  			var LOADING_MESSAGE = 'Loading…';
  			var FAILURE_MESSAGE = function (status, message) {
  				return '✖ Error ' + status + ' while fetching file: ' + message;
  			};
  			var FAILURE_EMPTY_MESSAGE = '✖ Error: File does not exist or is empty';

  			var EXTENSIONS = {
  				'js': 'javascript',
  				'py': 'python',
  				'rb': 'ruby',
  				'ps1': 'powershell',
  				'psm1': 'powershell',
  				'sh': 'bash',
  				'bat': 'batch',
  				'h': 'c',
  				'tex': 'latex'
  			};

  			var STATUS_ATTR = 'data-src-status';
  			var STATUS_LOADING = 'loading';
  			var STATUS_LOADED = 'loaded';
  			var STATUS_FAILED = 'failed';

  			var SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '="' + STATUS_LOADED + '"])'
  				+ ':not([' + STATUS_ATTR + '="' + STATUS_LOADING + '"])';

  			/**
  			 * Loads the given file.
  			 *
  			 * @param {string} src The URL or path of the source file to load.
  			 * @param {(result: string) => void} success
  			 * @param {(reason: string) => void} error
  			 */
  			function loadFile(src, success, error) {
  				var xhr = new XMLHttpRequest();
  				xhr.open('GET', src, true);
  				xhr.onreadystatechange = function () {
  					if (xhr.readyState == 4) {
  						if (xhr.status < 400 && xhr.responseText) {
  							success(xhr.responseText);
  						} else {
  							if (xhr.status >= 400) {
  								error(FAILURE_MESSAGE(xhr.status, xhr.statusText));
  							} else {
  								error(FAILURE_EMPTY_MESSAGE);
  							}
  						}
  					}
  				};
  				xhr.send(null);
  			}

  			/**
  			 * Parses the given range.
  			 *
  			 * This returns a range with inclusive ends.
  			 *
  			 * @param {string | null | undefined} range
  			 * @returns {[number, number | undefined] | undefined}
  			 */
  			function parseRange(range) {
  				var m = /^\s*(\d+)\s*(?:(,)\s*(?:(\d+)\s*)?)?$/.exec(range || '');
  				if (m) {
  					var start = Number(m[1]);
  					var comma = m[2];
  					var end = m[3];

  					if (!comma) {
  						return [start, start];
  					}
  					if (!end) {
  						return [start, undefined];
  					}
  					return [start, Number(end)];
  				}
  				return undefined;
  			}

  			Prism.hooks.add('before-highlightall', function (env) {
  				env.selector += ', ' + SELECTOR;
  			});

  			Prism.hooks.add('before-sanity-check', function (env) {
  				var pre = /** @type {HTMLPreElement} */ (env.element);
  				if (pre.matches(SELECTOR)) {
  					env.code = ''; // fast-path the whole thing and go to complete

  					pre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading

  					// add code element with loading message
  					var code = pre.appendChild(document.createElement('CODE'));
  					code.textContent = LOADING_MESSAGE;

  					var src = pre.getAttribute('data-src');

  					var language = env.language;
  					if (language === 'none') {
  						// the language might be 'none' because there is no language set;
  						// in this case, we want to use the extension as the language
  						var extension = (/\.(\w+)$/.exec(src) || [, 'none'])[1];
  						language = EXTENSIONS[extension] || extension;
  					}

  					// set language classes
  					Prism.util.setLanguage(code, language);
  					Prism.util.setLanguage(pre, language);

  					// preload the language
  					var autoloader = Prism.plugins.autoloader;
  					if (autoloader) {
  						autoloader.loadLanguages(language);
  					}

  					// load file
  					loadFile(
  						src,
  						function (text) {
  							// mark as loaded
  							pre.setAttribute(STATUS_ATTR, STATUS_LOADED);

  							// handle data-range
  							var range = parseRange(pre.getAttribute('data-range'));
  							if (range) {
  								var lines = text.split(/\r\n?|\n/g);

  								// the range is one-based and inclusive on both ends
  								var start = range[0];
  								var end = range[1] == null ? lines.length : range[1];

  								if (start < 0) { start += lines.length; }
  								start = Math.max(0, Math.min(start - 1, lines.length));
  								if (end < 0) { end += lines.length; }
  								end = Math.max(0, Math.min(end, lines.length));

  								text = lines.slice(start, end).join('\n');

  								// add data-start for line numbers
  								if (!pre.hasAttribute('data-start')) {
  									pre.setAttribute('data-start', String(start + 1));
  								}
  							}

  							// highlight code
  							code.textContent = text;
  							Prism.highlightElement(code);
  						},
  						function (error) {
  							// mark as failed
  							pre.setAttribute(STATUS_ATTR, STATUS_FAILED);

  							code.textContent = error;
  						}
  					);
  				}
  			});

  			Prism.plugins.fileHighlight = {
  				/**
  				 * Executes the File Highlight plugin for all matching `pre` elements under the given container.
  				 *
  				 * Note: Elements which are already loaded or currently loading will not be touched by this method.
  				 *
  				 * @param {ParentNode} [container=document]
  				 */
  				highlight: function highlight(container) {
  					var elements = (container || document).querySelectorAll(SELECTOR);

  					for (var i = 0, element; (element = elements[i++]);) {
  						Prism.highlightElement(element);
  					}
  				}
  			};

  			var logged = false;
  			/** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */
  			Prism.fileHighlight = function () {
  				if (!logged) {
  					console.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');
  					logged = true;
  				}
  				Prism.plugins.fileHighlight.highlight.apply(this, arguments);
  			};

  		}()); 
  	} (prism));
  	return prism.exports;
  }

  var prismExports = requirePrism();
  var Prism$1 = /*@__PURE__*/getDefaultExportFromCjs(prismExports);

  (function (Prism) {

  	var javascript = Prism.util.clone(Prism.languages.javascript);

  	var space = /(?:\s|\/\/.*(?!.)|\/\*(?:[^*]|\*(?!\/))\*\/)/.source;
  	var braces = /(?:\{(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])*\})/.source;
  	var spread = /(?:\{<S>*\.{3}(?:[^{}]|<BRACES>)*\})/.source;

  	/**
  	 * @param {string} source
  	 * @param {string} [flags]
  	 */
  	function re(source, flags) {
  		source = source
  			.replace(/<S>/g, function () { return space; })
  			.replace(/<BRACES>/g, function () { return braces; })
  			.replace(/<SPREAD>/g, function () { return spread; });
  		return RegExp(source, flags);
  	}

  	spread = re(spread).source;


  	Prism.languages.jsx = Prism.languages.extend('markup', javascript);
  	Prism.languages.jsx.tag.pattern = re(
  		/<\/?(?:[\w.:-]+(?:<S>+(?:[\w.:$-]+(?:=(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s{'"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\/?)?>/.source
  	);

  	Prism.languages.jsx.tag.inside['tag'].pattern = /^<\/?[^\s>\/]*/;
  	Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\{)(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s'">]+)/;
  	Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\w*(?:\.[A-Z]\w*)*$/;
  	Prism.languages.jsx.tag.inside['comment'] = javascript['comment'];

  	Prism.languages.insertBefore('inside', 'attr-name', {
  		'spread': {
  			pattern: re(/<SPREAD>/.source),
  			inside: Prism.languages.jsx
  		}
  	}, Prism.languages.jsx.tag);

  	Prism.languages.insertBefore('inside', 'special-attr', {
  		'script': {
  			// Allow for two levels of nesting
  			pattern: re(/=<BRACES>/.source),
  			alias: 'language-javascript',
  			inside: {
  				'script-punctuation': {
  					pattern: /^=(?=\{)/,
  					alias: 'punctuation'
  				},
  				rest: Prism.languages.jsx
  			},
  		}
  	}, Prism.languages.jsx.tag);

  	// The following will handle plain text inside tags
  	var stringifyToken = function (token) {
  		if (!token) {
  			return '';
  		}
  		if (typeof token === 'string') {
  			return token;
  		}
  		if (typeof token.content === 'string') {
  			return token.content;
  		}
  		return token.content.map(stringifyToken).join('');
  	};

  	var walkTokens = function (tokens) {
  		var openedTags = [];
  		for (var i = 0; i < tokens.length; i++) {
  			var token = tokens[i];
  			var notTagNorBrace = false;

  			if (typeof token !== 'string') {
  				if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {
  					// We found a tag, now find its kind

  					if (token.content[0].content[0].content === '</') {
  						// Closing tag
  						if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {
  							// Pop matching opening tag
  							openedTags.pop();
  						}
  					} else {
  						if (token.content[token.content.length - 1].content === '/>') ; else {
  							// Opening tag
  							openedTags.push({
  								tagName: stringifyToken(token.content[0].content[1]),
  								openedBraces: 0
  							});
  						}
  					}
  				} else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {

  					// Here we might have entered a JSX context inside a tag
  					openedTags[openedTags.length - 1].openedBraces++;

  				} else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {

  					// Here we might have left a JSX context inside a tag
  					openedTags[openedTags.length - 1].openedBraces--;

  				} else {
  					notTagNorBrace = true;
  				}
  			}
  			if (notTagNorBrace || typeof token === 'string') {
  				if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {
  					// Here we are inside a tag, and not inside a JSX context.
  					// That's plain text: drop any tokens matched.
  					var plainText = stringifyToken(token);

  					// And merge text with adjacent text
  					if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {
  						plainText += stringifyToken(tokens[i + 1]);
  						tokens.splice(i + 1, 1);
  					}
  					if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {
  						plainText = stringifyToken(tokens[i - 1]) + plainText;
  						tokens.splice(i - 1, 1);
  						i--;
  					}

  					tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);
  				}
  			}

  			if (token.content && typeof token.content !== 'string') {
  				walkTokens(token.content);
  			}
  		}
  	};

  	Prism.hooks.add('after-tokenize', function (env) {
  		if (env.language !== 'jsx' && env.language !== 'tsx') {
  			return;
  		}
  		walkTokens(env.tokens);
  	});

  }(Prism));

  var prismTypescript = {};

  var hasRequiredPrismTypescript;

  function requirePrismTypescript () {
  	if (hasRequiredPrismTypescript) return prismTypescript;
  	hasRequiredPrismTypescript = 1;
  	(function (Prism) {

  		Prism.languages.typescript = Prism.languages.extend('javascript', {
  			'class-name': {
  				pattern: /(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,
  				lookbehind: true,
  				greedy: true,
  				inside: null // see below
  			},
  			'builtin': /\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\b/,
  		});

  		// The keywords TypeScript adds to JavaScript
  		Prism.languages.typescript.keyword.push(
  			/\b(?:abstract|declare|is|keyof|readonly|require)\b/,
  			// keywords that have to be followed by an identifier
  			/\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/,
  			// This is for `import type *, {}`
  			/\btype\b(?=\s*(?:[\{*]|$))/
  		);

  		// doesn't work with TS because TS is too complex
  		delete Prism.languages.typescript['parameter'];
  		delete Prism.languages.typescript['literal-property'];

  		// a version of typescript specifically for highlighting types
  		var typeInside = Prism.languages.extend('typescript', {});
  		delete typeInside['class-name'];

  		Prism.languages.typescript['class-name'].inside = typeInside;

  		Prism.languages.insertBefore('typescript', 'function', {
  			'decorator': {
  				pattern: /@[$\w\xA0-\uFFFF]+/,
  				inside: {
  					'at': {
  						pattern: /^@/,
  						alias: 'operator'
  					},
  					'function': /^[\s\S]+/
  				}
  			},
  			'generic-function': {
  				// e.g. foo<T extends "bar" | "baz">( ...
  				pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,
  				greedy: true,
  				inside: {
  					'function': /^#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/,
  					'generic': {
  						pattern: /<[\s\S]+/, // everything after the first <
  						alias: 'class-name',
  						inside: typeInside
  					}
  				}
  			}
  		});

  		Prism.languages.ts = Prism.languages.typescript;

  	}(Prism));
  	return prismTypescript;
  }

  requirePrismTypescript();

  Prism.languages.markup = {
  	'comment': {
  		pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
  		greedy: true
  	},
  	'prolog': {
  		pattern: /<\?[\s\S]+?\?>/,
  		greedy: true
  	},
  	'doctype': {
  		// https://www.w3.org/TR/xml/#NT-doctypedecl
  		pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
  		greedy: true,
  		inside: {
  			'internal-subset': {
  				pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
  				lookbehind: true,
  				greedy: true,
  				inside: null // see below
  			},
  			'string': {
  				pattern: /"[^"]*"|'[^']*'/,
  				greedy: true
  			},
  			'punctuation': /^<!|>$|[[\]]/,
  			'doctype-tag': /^DOCTYPE/i,
  			'name': /[^\s<>'"]+/
  		}
  	},
  	'cdata': {
  		pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
  		greedy: true
  	},
  	'tag': {
  		pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
  		greedy: true,
  		inside: {
  			'tag': {
  				pattern: /^<\/?[^\s>\/]+/,
  				inside: {
  					'punctuation': /^<\/?/,
  					'namespace': /^[^\s>\/:]+:/
  				}
  			},
  			'special-attr': [],
  			'attr-value': {
  				pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
  				inside: {
  					'punctuation': [
  						{
  							pattern: /^=/,
  							alias: 'attr-equals'
  						},
  						{
  							pattern: /^(\s*)["']|["']$/,
  							lookbehind: true
  						}
  					]
  				}
  			},
  			'punctuation': /\/?>/,
  			'attr-name': {
  				pattern: /[^\s>\/]+/,
  				inside: {
  					'namespace': /^[^\s>\/:]+:/
  				}
  			}

  		}
  	},
  	'entity': [
  		{
  			pattern: /&[\da-z]{1,8};/i,
  			alias: 'named-entity'
  		},
  		/&#x?[\da-f]{1,8};/i
  	]
  };

  Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =
  	Prism.languages.markup['entity'];
  Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;

  // Plugin to make entity title show the real entity, idea by Roman Komarov
  Prism.hooks.add('wrap', function (env) {

  	if (env.type === 'entity') {
  		env.attributes['title'] = env.content.replace(/&amp;/, '&');
  	}
  });

  Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {
  	/**
  	 * Adds an inlined language to markup.
  	 *
  	 * An example of an inlined language is CSS with `<style>` tags.
  	 *
  	 * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
  	 * case insensitive.
  	 * @param {string} lang The language key.
  	 * @example
  	 * addInlined('style', 'css');
  	 */
  	value: function addInlined(tagName, lang) {
  		var includedCdataInside = {};
  		includedCdataInside['language-' + lang] = {
  			pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
  			lookbehind: true,
  			inside: Prism.languages[lang]
  		};
  		includedCdataInside['cdata'] = /^<!\[CDATA\[|\]\]>$/i;

  		var inside = {
  			'included-cdata': {
  				pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
  				inside: includedCdataInside
  			}
  		};
  		inside['language-' + lang] = {
  			pattern: /[\s\S]+/,
  			inside: Prism.languages[lang]
  		};

  		var def = {};
  		def[tagName] = {
  			pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),
  			lookbehind: true,
  			greedy: true,
  			inside: inside
  		};

  		Prism.languages.insertBefore('markup', 'cdata', def);
  	}
  });
  Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {
  	/**
  	 * Adds an pattern to highlight languages embedded in HTML attributes.
  	 *
  	 * An example of an inlined language is CSS with `style` attributes.
  	 *
  	 * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as
  	 * case insensitive.
  	 * @param {string} lang The language key.
  	 * @example
  	 * addAttribute('style', 'css');
  	 */
  	value: function (attrName, lang) {
  		Prism.languages.markup.tag.inside['special-attr'].push({
  			pattern: RegExp(
  				/(^|["'\s])/.source + '(?:' + attrName + ')' + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,
  				'i'
  			),
  			lookbehind: true,
  			inside: {
  				'attr-name': /^[^\s=]+/,
  				'attr-value': {
  					pattern: /=[\s\S]+/,
  					inside: {
  						'value': {
  							pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
  							lookbehind: true,
  							alias: [lang, 'language-' + lang],
  							inside: Prism.languages[lang]
  						},
  						'punctuation': [
  							{
  								pattern: /^=/,
  								alias: 'attr-equals'
  							},
  							/"|'/
  						]
  					}
  				}
  			}
  		});
  	}
  });

  Prism.languages.html = Prism.languages.markup;
  Prism.languages.mathml = Prism.languages.markup;
  Prism.languages.svg = Prism.languages.markup;

  Prism.languages.xml = Prism.languages.extend('markup', {});
  Prism.languages.ssml = Prism.languages.xml;
  Prism.languages.atom = Prism.languages.xml;
  Prism.languages.rss = Prism.languages.xml;

  Prism.languages.go = Prism.languages.extend('clike', {
  	'string': {
  		pattern: /(^|[^\\])"(?:\\.|[^"\\\r\n])*"|`[^`]*`/,
  		lookbehind: true,
  		greedy: true
  	},
  	'keyword': /\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b/,
  	'boolean': /\b(?:_|false|iota|nil|true)\b/,
  	'number': [
  		// binary and octal integers
  		/\b0(?:b[01_]+|o[0-7_]+)i?\b/i,
  		// hexadecimal integers and floats
  		/\b0x(?:[a-f\d_]+(?:\.[a-f\d_]*)?|\.[a-f\d_]+)(?:p[+-]?\d+(?:_\d+)*)?i?(?!\w)/i,
  		// decimal integers and floats
  		/(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?[\d_]+)?i?(?!\w)/i
  	],
  	'operator': /[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\./,
  	'builtin': /\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\b/
  });

  Prism.languages.insertBefore('go', 'string', {
  	'char': {
  		pattern: /'(?:\\.|[^'\\\r\n]){0,10}'/,
  		greedy: true
  	}
  });

  delete Prism.languages.go['class-name'];

  var prismPhp = {};

  /**
   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/
   * Modified by Miles Johnson: http://milesj.me
   * Rewritten by Tom Pavelec
   *
   * Supports PHP 5.3 - 8.0
   */

  var hasRequiredPrismPhp;

  function requirePrismPhp () {
  	if (hasRequiredPrismPhp) return prismPhp;
  	hasRequiredPrismPhp = 1;
  	(function (Prism) {
  		var comment = /\/\*[\s\S]*?\*\/|\/\/.*|#(?!\[).*/;
  		var constant = [
  			{
  				pattern: /\b(?:false|true)\b/i,
  				alias: 'boolean'
  			},
  			{
  				pattern: /(::\s*)\b[a-z_]\w*\b(?!\s*\()/i,
  				greedy: true,
  				lookbehind: true,
  			},
  			{
  				pattern: /(\b(?:case|const)\s+)\b[a-z_]\w*(?=\s*[;=])/i,
  				greedy: true,
  				lookbehind: true,
  			},
  			/\b(?:null)\b/i,
  			/\b[A-Z_][A-Z0-9_]*\b(?!\s*\()/,
  		];
  		var number = /\b0b[01]+(?:_[01]+)*\b|\b0o[0-7]+(?:_[0-7]+)*\b|\b0x[\da-f]+(?:_[\da-f]+)*\b|(?:\b\d+(?:_\d+)*\.?(?:\d+(?:_\d+)*)?|\B\.\d+)(?:e[+-]?\d+)?/i;
  		var operator = /<?=>|\?\?=?|\.{3}|\??->|[!=]=?=?|::|\*\*=?|--|\+\+|&&|\|\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;
  		var punctuation = /[{}\[\](),:;]/;

  		Prism.languages.php = {
  			'delimiter': {
  				pattern: /\?>$|^<\?(?:php(?=\s)|=)?/i,
  				alias: 'important'
  			},
  			'comment': comment,
  			'variable': /\$+(?:\w+\b|(?=\{))/,
  			'package': {
  				pattern: /(namespace\s+|use\s+(?:function\s+)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,
  				lookbehind: true,
  				inside: {
  					'punctuation': /\\/
  				}
  			},
  			'class-name-definition': {
  				pattern: /(\b(?:class|enum|interface|trait)\s+)\b[a-z_]\w*(?!\\)\b/i,
  				lookbehind: true,
  				alias: 'class-name'
  			},
  			'function-definition': {
  				pattern: /(\bfunction\s+)[a-z_]\w*(?=\s*\()/i,
  				lookbehind: true,
  				alias: 'function'
  			},
  			'keyword': [
  				{
  					pattern: /(\(\s*)\b(?:array|bool|boolean|float|int|integer|object|string)\b(?=\s*\))/i,
  					alias: 'type-casting',
  					greedy: true,
  					lookbehind: true
  				},
  				{
  					pattern: /([(,?]\s*)\b(?:array(?!\s*\()|bool|callable|(?:false|null)(?=\s*\|)|float|int|iterable|mixed|object|self|static|string)\b(?=\s*\$)/i,
  					alias: 'type-hint',
  					greedy: true,
  					lookbehind: true
  				},
  				{
  					pattern: /(\)\s*:\s*(?:\?\s*)?)\b(?:array(?!\s*\()|bool|callable|(?:false|null)(?=\s*\|)|float|int|iterable|mixed|never|object|self|static|string|void)\b/i,
  					alias: 'return-type',
  					greedy: true,
  					lookbehind: true
  				},
  				{
  					pattern: /\b(?:array(?!\s*\()|bool|float|int|iterable|mixed|object|string|void)\b/i,
  					alias: 'type-declaration',
  					greedy: true
  				},
  				{
  					pattern: /(\|\s*)(?:false|null)\b|\b(?:false|null)(?=\s*\|)/i,
  					alias: 'type-declaration',
  					greedy: true,
  					lookbehind: true
  				},
  				{
  					pattern: /\b(?:parent|self|static)(?=\s*::)/i,
  					alias: 'static-context',
  					greedy: true
  				},
  				{
  					// yield from
  					pattern: /(\byield\s+)from\b/i,
  					lookbehind: true
  				},
  				// `class` is always a keyword unlike other keywords
  				/\bclass\b/i,
  				{
  					// https://www.php.net/manual/en/reserved.keywords.php
  					//
  					// keywords cannot be preceded by "->"
  					// the complex lookbehind means `(?<!(?:->|::)\s*)`
  					pattern: /((?:^|[^\s>:]|(?:^|[^-])>|(?:^|[^:]):)\s*)\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|never|new|or|parent|print|private|protected|public|readonly|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\b/i,
  					lookbehind: true
  				}
  			],
  			'argument-name': {
  				pattern: /([(,]\s*)\b[a-z_]\w*(?=\s*:(?!:))/i,
  				lookbehind: true
  			},
  			'class-name': [
  				{
  					pattern: /(\b(?:extends|implements|instanceof|new(?!\s+self|\s+static))\s+|\bcatch\s*\()\b[a-z_]\w*(?!\\)\b/i,
  					greedy: true,
  					lookbehind: true
  				},
  				{
  					pattern: /(\|\s*)\b[a-z_]\w*(?!\\)\b/i,
  					greedy: true,
  					lookbehind: true
  				},
  				{
  					pattern: /\b[a-z_]\w*(?!\\)\b(?=\s*\|)/i,
  					greedy: true
  				},
  				{
  					pattern: /(\|\s*)(?:\\?\b[a-z_]\w*)+\b/i,
  					alias: 'class-name-fully-qualified',
  					greedy: true,
  					lookbehind: true,
  					inside: {
  						'punctuation': /\\/
  					}
  				},
  				{
  					pattern: /(?:\\?\b[a-z_]\w*)+\b(?=\s*\|)/i,
  					alias: 'class-name-fully-qualified',
  					greedy: true,
  					inside: {
  						'punctuation': /\\/
  					}
  				},
  				{
  					pattern: /(\b(?:extends|implements|instanceof|new(?!\s+self\b|\s+static\b))\s+|\bcatch\s*\()(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,
  					alias: 'class-name-fully-qualified',
  					greedy: true,
  					lookbehind: true,
  					inside: {
  						'punctuation': /\\/
  					}
  				},
  				{
  					pattern: /\b[a-z_]\w*(?=\s*\$)/i,
  					alias: 'type-declaration',
  					greedy: true
  				},
  				{
  					pattern: /(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i,
  					alias: ['class-name-fully-qualified', 'type-declaration'],
  					greedy: true,
  					inside: {
  						'punctuation': /\\/
  					}
  				},
  				{
  					pattern: /\b[a-z_]\w*(?=\s*::)/i,
  					alias: 'static-context',
  					greedy: true
  				},
  				{
  					pattern: /(?:\\?\b[a-z_]\w*)+(?=\s*::)/i,
  					alias: ['class-name-fully-qualified', 'static-context'],
  					greedy: true,
  					inside: {
  						'punctuation': /\\/
  					}
  				},
  				{
  					pattern: /([(,?]\s*)[a-z_]\w*(?=\s*\$)/i,
  					alias: 'type-hint',
  					greedy: true,
  					lookbehind: true
  				},
  				{
  					pattern: /([(,?]\s*)(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i,
  					alias: ['class-name-fully-qualified', 'type-hint'],
  					greedy: true,
  					lookbehind: true,
  					inside: {
  						'punctuation': /\\/
  					}
  				},
  				{
  					pattern: /(\)\s*:\s*(?:\?\s*)?)\b[a-z_]\w*(?!\\)\b/i,
  					alias: 'return-type',
  					greedy: true,
  					lookbehind: true
  				},
  				{
  					pattern: /(\)\s*:\s*(?:\?\s*)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,
  					alias: ['class-name-fully-qualified', 'return-type'],
  					greedy: true,
  					lookbehind: true,
  					inside: {
  						'punctuation': /\\/
  					}
  				}
  			],
  			'constant': constant,
  			'function': {
  				pattern: /(^|[^\\\w])\\?[a-z_](?:[\w\\]*\w)?(?=\s*\()/i,
  				lookbehind: true,
  				inside: {
  					'punctuation': /\\/
  				}
  			},
  			'property': {
  				pattern: /(->\s*)\w+/,
  				lookbehind: true
  			},
  			'number': number,
  			'operator': operator,
  			'punctuation': punctuation
  		};

  		var string_interpolation = {
  			pattern: /\{\$(?:\{(?:\{[^{}]+\}|[^{}]+)\}|[^{}])+\}|(^|[^\\{])\$+(?:\w+(?:\[[^\r\n\[\]]+\]|->\w+)?)/,
  			lookbehind: true,
  			inside: Prism.languages.php
  		};

  		var string = [
  			{
  				pattern: /<<<'([^']+)'[\r\n](?:.*[\r\n])*?\1;/,
  				alias: 'nowdoc-string',
  				greedy: true,
  				inside: {
  					'delimiter': {
  						pattern: /^<<<'[^']+'|[a-z_]\w*;$/i,
  						alias: 'symbol',
  						inside: {
  							'punctuation': /^<<<'?|[';]$/
  						}
  					}
  				}
  			},
  			{
  				pattern: /<<<(?:"([^"]+)"[\r\n](?:.*[\r\n])*?\1;|([a-z_]\w*)[\r\n](?:.*[\r\n])*?\2;)/i,
  				alias: 'heredoc-string',
  				greedy: true,
  				inside: {
  					'delimiter': {
  						pattern: /^<<<(?:"[^"]+"|[a-z_]\w*)|[a-z_]\w*;$/i,
  						alias: 'symbol',
  						inside: {
  							'punctuation': /^<<<"?|[";]$/
  						}
  					},
  					'interpolation': string_interpolation
  				}
  			},
  			{
  				pattern: /`(?:\\[\s\S]|[^\\`])*`/,
  				alias: 'backtick-quoted-string',
  				greedy: true
  			},
  			{
  				pattern: /'(?:\\[\s\S]|[^\\'])*'/,
  				alias: 'single-quoted-string',
  				greedy: true
  			},
  			{
  				pattern: /"(?:\\[\s\S]|[^\\"])*"/,
  				alias: 'double-quoted-string',
  				greedy: true,
  				inside: {
  					'interpolation': string_interpolation
  				}
  			}
  		];

  		Prism.languages.insertBefore('php', 'variable', {
  			'string': string,
  			'attribute': {
  				pattern: /#\[(?:[^"'\/#]|\/(?![*/])|\/\/.*$|#(?!\[).*$|\/\*(?:[^*]|\*(?!\/))*\*\/|"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*')+\](?=\s*[a-z$#])/im,
  				greedy: true,
  				inside: {
  					'attribute-content': {
  						pattern: /^(#\[)[\s\S]+(?=\]$)/,
  						lookbehind: true,
  						// inside can appear subset of php
  						inside: {
  							'comment': comment,
  							'string': string,
  							'attribute-class-name': [
  								{
  									pattern: /([^:]|^)\b[a-z_]\w*(?!\\)\b/i,
  									alias: 'class-name',
  									greedy: true,
  									lookbehind: true
  								},
  								{
  									pattern: /([^:]|^)(?:\\?\b[a-z_]\w*)+/i,
  									alias: [
  										'class-name',
  										'class-name-fully-qualified'
  									],
  									greedy: true,
  									lookbehind: true,
  									inside: {
  										'punctuation': /\\/
  									}
  								}
  							],
  							'constant': constant,
  							'number': number,
  							'operator': operator,
  							'punctuation': punctuation
  						}
  					},
  					'delimiter': {
  						pattern: /^#\[|\]$/,
  						alias: 'punctuation'
  					}
  				}
  			},
  		});

  		Prism.hooks.add('before-tokenize', function (env) {
  			if (!/<\?/.test(env.code)) {
  				return;
  			}

  			var phpPattern = /<\?(?:[^"'/#]|\/(?![*/])|("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|(?:\/\/|#(?!\[))(?:[^?\n\r]|\?(?!>))*(?=$|\?>|[\r\n])|#\[|\/\*(?:[^*]|\*(?!\/))*(?:\*\/|$))*?(?:\?>|$)/g;
  			Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);
  		});

  		Prism.hooks.add('after-tokenize', function (env) {
  			Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');
  		});

  	}(Prism));
  	return prismPhp;
  }

  requirePrismPhp();

  Prism.languages.c = Prism.languages.extend('clike', {
  	'comment': {
  		pattern: /\/\/(?:[^\r\n\\]|\\(?:\r\n?|\n|(?![\r\n])))*|\/\*[\s\S]*?(?:\*\/|$)/,
  		greedy: true
  	},
  	'string': {
  		// https://en.cppreference.com/w/c/language/string_literal
  		pattern: /"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
  		greedy: true
  	},
  	'class-name': {
  		pattern: /(\b(?:enum|struct)\s+(?:__attribute__\s*\(\([\s\S]*?\)\)\s*)?)\w+|\b[a-z]\w*_t\b/,
  		lookbehind: true
  	},
  	'keyword': /\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\b/,
  	'function': /\b[a-z_]\w*(?=\s*\()/i,
  	'number': /(?:\b0x(?:[\da-f]+(?:\.[\da-f]*)?|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[ful]{0,4}/i,
  	'operator': />>=?|<<=?|->|([-+&|:])\1|[?:~]|[-+*/%&|^!=<>]=?/
  });

  Prism.languages.insertBefore('c', 'string', {
  	'char': {
  		// https://en.cppreference.com/w/c/language/character_constant
  		pattern: /'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n]){0,32}'/,
  		greedy: true
  	}
  });

  Prism.languages.insertBefore('c', 'string', {
  	'macro': {
  		// allow for multiline macro definitions
  		// spaces after the # character compile fine with gcc
  		pattern: /(^[\t ]*)#\s*[a-z](?:[^\r\n\\/]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|\\(?:\r\n|[\s\S]))*/im,
  		lookbehind: true,
  		greedy: true,
  		alias: 'property',
  		inside: {
  			'string': [
  				{
  					// highlight the path of the include statement as a string
  					pattern: /^(#\s*include\s*)<[^>]+>/,
  					lookbehind: true
  				},
  				Prism.languages.c['string']
  			],
  			'char': Prism.languages.c['char'],
  			'comment': Prism.languages.c['comment'],
  			'macro-name': [
  				{
  					pattern: /(^#\s*define\s+)\w+\b(?!\()/i,
  					lookbehind: true
  				},
  				{
  					pattern: /(^#\s*define\s+)\w+\b(?=\()/i,
  					lookbehind: true,
  					alias: 'function'
  				}
  			],
  			// highlight macro directives as keywords
  			'directive': {
  				pattern: /^(#\s*)[a-z]+/,
  				lookbehind: true,
  				alias: 'keyword'
  			},
  			'directive-hash': /^#/,
  			'punctuation': /##|\\(?=[\r\n])/,
  			'expression': {
  				pattern: /\S[\s\S]*/,
  				inside: Prism.languages.c
  			}
  		}
  	}
  });

  Prism.languages.insertBefore('c', 'function', {
  	// highlight predefined macros as constants
  	'constant': /\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\b/
  });

  delete Prism.languages.c['boolean'];

  var prismPython = {};

  var hasRequiredPrismPython;

  function requirePrismPython () {
  	if (hasRequiredPrismPython) return prismPython;
  	hasRequiredPrismPython = 1;
  	Prism.languages.python = {
  		'comment': {
  			pattern: /(^|[^\\])#.*/,
  			lookbehind: true,
  			greedy: true
  		},
  		'string-interpolation': {
  			pattern: /(?:f|fr|rf)(?:("""|''')[\s\S]*?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,
  			greedy: true,
  			inside: {
  				'interpolation': {
  					// "{" <expression> <optional "!s", "!r", or "!a"> <optional ":" format specifier> "}"
  					pattern: /((?:^|[^{])(?:\{\{)*)\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}])+\})+\})+\}/,
  					lookbehind: true,
  					inside: {
  						'format-spec': {
  							pattern: /(:)[^:(){}]+(?=\}$)/,
  							lookbehind: true
  						},
  						'conversion-option': {
  							pattern: /![sra](?=[:}]$)/,
  							alias: 'punctuation'
  						},
  						rest: null
  					}
  				},
  				'string': /[\s\S]+/
  			}
  		},
  		'triple-quoted-string': {
  			pattern: /(?:[rub]|br|rb)?("""|''')[\s\S]*?\1/i,
  			greedy: true,
  			alias: 'string'
  		},
  		'string': {
  			pattern: /(?:[rub]|br|rb)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,
  			greedy: true
  		},
  		'function': {
  			pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,
  			lookbehind: true
  		},
  		'class-name': {
  			pattern: /(\bclass\s+)\w+/i,
  			lookbehind: true
  		},
  		'decorator': {
  			pattern: /(^[\t ]*)@\w+(?:\.\w+)*/m,
  			lookbehind: true,
  			alias: ['annotation', 'punctuation'],
  			inside: {
  				'punctuation': /\./
  			}
  		},
  		'keyword': /\b(?:_(?=\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,
  		'builtin': /\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,
  		'boolean': /\b(?:False|None|True)\b/,
  		'number': /\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\b|(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)(?:e[+-]?\d+(?:_\d+)*)?j?(?!\w)/i,
  		'operator': /[-+%=]=?|!=|:=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
  		'punctuation': /[{}[\];(),.:]/
  	};

  	Prism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;

  	Prism.languages.py = Prism.languages.python;
  	return prismPython;
  }

  requirePrismPython();

  var prismJava = {};

  var hasRequiredPrismJava;

  function requirePrismJava () {
  	if (hasRequiredPrismJava) return prismJava;
  	hasRequiredPrismJava = 1;
  	(function (Prism) {

  		var keywords = /\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record(?!\s*[(){}[\]<>=%~.:,;?+\-*/&|^])|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\b/;

  		// full package (optional) + parent classes (optional)
  		var classNamePrefix = /(?:[a-z]\w*\s*\.\s*)*(?:[A-Z]\w*\s*\.\s*)*/.source;

  		// based on the java naming conventions
  		var className = {
  			pattern: RegExp(/(^|[^\w.])/.source + classNamePrefix + /[A-Z](?:[\d_A-Z]*[a-z]\w*)?\b/.source),
  			lookbehind: true,
  			inside: {
  				'namespace': {
  					pattern: /^[a-z]\w*(?:\s*\.\s*[a-z]\w*)*(?:\s*\.)?/,
  					inside: {
  						'punctuation': /\./
  					}
  				},
  				'punctuation': /\./
  			}
  		};

  		Prism.languages.java = Prism.languages.extend('clike', {
  			'string': {
  				pattern: /(^|[^\\])"(?:\\.|[^"\\\r\n])*"/,
  				lookbehind: true,
  				greedy: true
  			},
  			'class-name': [
  				className,
  				{
  					// variables, parameters, and constructor references
  					// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)
  					pattern: RegExp(/(^|[^\w.])/.source + classNamePrefix + /[A-Z]\w*(?=\s+\w+\s*[;,=()]|\s*(?:\[[\s,]*\]\s*)?::\s*new\b)/.source),
  					lookbehind: true,
  					inside: className.inside
  				},
  				{
  					// class names based on keyword
  					// this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)
  					pattern: RegExp(/(\b(?:class|enum|extends|implements|instanceof|interface|new|record|throws)\s+)/.source + classNamePrefix + /[A-Z]\w*\b/.source),
  					lookbehind: true,
  					inside: className.inside
  				}
  			],
  			'keyword': keywords,
  			'function': [
  				Prism.languages.clike.function,
  				{
  					pattern: /(::\s*)[a-z_]\w*/,
  					lookbehind: true
  				}
  			],
  			'number': /\b0b[01][01_]*L?\b|\b0x(?:\.[\da-f_p+-]+|[\da-f_]+(?:\.[\da-f_p+-]+)?)\b|(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?\d[\d_]*)?[dfl]?/i,
  			'operator': {
  				pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\+\+|&&|\|\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,
  				lookbehind: true
  			},
  			'constant': /\b[A-Z][A-Z_\d]+\b/
  		});

  		Prism.languages.insertBefore('java', 'string', {
  			'triple-quoted-string': {
  				// http://openjdk.java.net/jeps/355#Description
  				pattern: /"""[ \t]*[\r\n](?:(?:"|"")?(?:\\.|[^"\\]))*"""/,
  				greedy: true,
  				alias: 'string'
  			},
  			'char': {
  				pattern: /'(?:\\.|[^'\\\r\n]){1,6}'/,
  				greedy: true
  			}
  		});

  		Prism.languages.insertBefore('java', 'class-name', {
  			'annotation': {
  				pattern: /(^|[^.])@\w+(?:\s*\.\s*\w+)*/,
  				lookbehind: true,
  				alias: 'punctuation'
  			},
  			'generics': {
  				pattern: /<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&))*>)*>)*>)*>/,
  				inside: {
  					'class-name': className,
  					'keyword': keywords,
  					'punctuation': /[<>(),.:]/,
  					'operator': /[?&|]/
  				}
  			},
  			'import': [
  				{
  					pattern: RegExp(/(\bimport\s+)/.source + classNamePrefix + /(?:[A-Z]\w*|\*)(?=\s*;)/.source),
  					lookbehind: true,
  					inside: {
  						'namespace': className.inside.namespace,
  						'punctuation': /\./,
  						'operator': /\*/,
  						'class-name': /\w+/
  					}
  				},
  				{
  					pattern: RegExp(/(\bimport\s+static\s+)/.source + classNamePrefix + /(?:\w+|\*)(?=\s*;)/.source),
  					lookbehind: true,
  					alias: 'static',
  					inside: {
  						'namespace': className.inside.namespace,
  						'static': /\b\w+$/,
  						'punctuation': /\./,
  						'operator': /\*/,
  						'class-name': /\w+/
  					}
  				}
  			],
  			'namespace': {
  				pattern: RegExp(
  					/(\b(?:exports|import(?:\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\s+)(?!<keyword>)[a-z]\w*(?:\.[a-z]\w*)*\.?/
  						.source.replace(/<keyword>/g, function () { return keywords.source; })),
  				lookbehind: true,
  				inside: {
  					'punctuation': /\./,
  				}
  			}
  		});
  	}(Prism));
  	return prismJava;
  }

  requirePrismJava();

  var prismCpp = {};

  var hasRequiredPrismCpp;

  function requirePrismCpp () {
  	if (hasRequiredPrismCpp) return prismCpp;
  	hasRequiredPrismCpp = 1;
  	(function (Prism) {

  		var keyword = /\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/;
  		var modName = /\b(?!<keyword>)\w+(?:\s*\.\s*\w+)*\b/.source.replace(/<keyword>/g, function () { return keyword.source; });

  		Prism.languages.cpp = Prism.languages.extend('c', {
  			'class-name': [
  				{
  					pattern: RegExp(/(\b(?:class|concept|enum|struct|typename)\s+)(?!<keyword>)\w+/.source
  						.replace(/<keyword>/g, function () { return keyword.source; })),
  					lookbehind: true
  				},
  				// This is intended to capture the class name of method implementations like:
  				//   void foo::bar() const {}
  				// However! The `foo` in the above example could also be a namespace, so we only capture the class name if
  				// it starts with an uppercase letter. This approximation should give decent results.
  				/\b[A-Z]\w*(?=\s*::\s*\w+\s*\()/,
  				// This will capture the class name before destructors like:
  				//   Foo::~Foo() {}
  				/\b[A-Z_]\w*(?=\s*::\s*~\w+\s*\()/i,
  				// This also intends to capture the class name of method implementations but here the class has template
  				// parameters, so it can't be a namespace (until C++ adds generic namespaces).
  				/\b\w+(?=\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\s*::\s*\w+\s*\()/
  			],
  			'keyword': keyword,
  			'number': {
  				pattern: /(?:\b0b[01']+|\b0x(?:[\da-f']+(?:\.[\da-f']*)?|\.[\da-f']+)(?:p[+-]?[\d']+)?|(?:\b[\d']+(?:\.[\d']*)?|\B\.[\d']+)(?:e[+-]?[\d']+)?)[ful]{0,4}/i,
  				greedy: true
  			},
  			'operator': />>=?|<<=?|->|--|\+\+|&&|\|\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/,
  			'boolean': /\b(?:false|true)\b/
  		});

  		Prism.languages.insertBefore('cpp', 'string', {
  			'module': {
  				// https://en.cppreference.com/w/cpp/language/modules
  				pattern: RegExp(
  					/(\b(?:import|module)\s+)/.source +
  					'(?:' +
  					// header-name
  					/"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|<[^<>\r\n]*>/.source +
  					'|' +
  					// module name or partition or both
  					/<mod-name>(?:\s*:\s*<mod-name>)?|:\s*<mod-name>/.source.replace(/<mod-name>/g, function () { return modName; }) +
  					')'
  				),
  				lookbehind: true,
  				greedy: true,
  				inside: {
  					'string': /^[<"][\s\S]+/,
  					'operator': /:/,
  					'punctuation': /\./
  				}
  			},
  			'raw-string': {
  				pattern: /R"([^()\\ ]{0,16})\([\s\S]*?\)\1"/,
  				alias: 'string',
  				greedy: true
  			}
  		});

  		Prism.languages.insertBefore('cpp', 'keyword', {
  			'generic-function': {
  				pattern: /\b(?!operator\b)[a-z_]\w*\s*<(?:[^<>]|<[^<>]*>)*>(?=\s*\()/i,
  				inside: {
  					'function': /^\w+/,
  					'generic': {
  						pattern: /<[\s\S]+/,
  						alias: 'class-name',
  						inside: Prism.languages.cpp
  					}
  				}
  			}
  		});

  		Prism.languages.insertBefore('cpp', 'operator', {
  			'double-colon': {
  				pattern: /::/,
  				alias: 'punctuation'
  			}
  		});

  		Prism.languages.insertBefore('cpp', 'class-name', {
  			// the base clause is an optional list of parent classes
  			// https://en.cppreference.com/w/cpp/language/class
  			'base-clause': {
  				pattern: /(\b(?:class|struct)\s+\w+\s*:\s*)[^;{}"'\s]+(?:\s+[^;{}"'\s]+)*(?=\s*[;{])/,
  				lookbehind: true,
  				greedy: true,
  				inside: Prism.languages.extend('cpp', {})
  			}
  		});

  		Prism.languages.insertBefore('inside', 'double-colon', {
  			// All untokenized words that are not namespaces should be class names
  			'class-name': /\b[a-z_]\w*\b(?!\s*::)/i
  		}, Prism.languages.cpp['base-clause']);

  	}(Prism));
  	return prismCpp;
  }

  requirePrismCpp();

  var prismCsharp = {};

  var hasRequiredPrismCsharp;

  function requirePrismCsharp () {
  	if (hasRequiredPrismCsharp) return prismCsharp;
  	hasRequiredPrismCsharp = 1;
  	(function (Prism) {

  		/**
  		 * Replaces all placeholders "<<n>>" of given pattern with the n-th replacement (zero based).
  		 *
  		 * Note: This is a simple text based replacement. Be careful when using backreferences!
  		 *
  		 * @param {string} pattern the given pattern.
  		 * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.
  		 * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.
  		 * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source
  		 */
  		function replace(pattern, replacements) {
  			return pattern.replace(/<<(\d+)>>/g, function (m, index) {
  				return '(?:' + replacements[+index] + ')';
  			});
  		}
  		/**
  		 * @param {string} pattern
  		 * @param {string[]} replacements
  		 * @param {string} [flags]
  		 * @returns {RegExp}
  		 */
  		function re(pattern, replacements, flags) {
  			return RegExp(replace(pattern, replacements), '');
  		}

  		/**
  		 * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.
  		 *
  		 * @param {string} pattern
  		 * @param {number} depthLog2
  		 * @returns {string}
  		 */
  		function nested(pattern, depthLog2) {
  			for (var i = 0; i < depthLog2; i++) {
  				pattern = pattern.replace(/<<self>>/g, function () { return '(?:' + pattern + ')'; });
  			}
  			return pattern.replace(/<<self>>/g, '[^\\s\\S]');
  		}

  		// https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/
  		var keywordKinds = {
  			// keywords which represent a return or variable type
  			type: 'bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void',
  			// keywords which are used to declare a type
  			typeDeclaration: 'class enum interface record struct',
  			// contextual keywords
  			// ("var" and "dynamic" are missing because they are used like types)
  			contextual: 'add alias and ascending async await by descending from(?=\\s*(?:\\w|$)) get global group into init(?=\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\s*{)',
  			// all other keywords
  			other: 'abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield'
  		};

  		// keywords
  		function keywordsToPattern(words) {
  			return '\\b(?:' + words.trim().replace(/ /g, '|') + ')\\b';
  		}
  		var typeDeclarationKeywords = keywordsToPattern(keywordKinds.typeDeclaration);
  		var keywords = RegExp(keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.typeDeclaration + ' ' + keywordKinds.contextual + ' ' + keywordKinds.other));
  		var nonTypeKeywords = keywordsToPattern(keywordKinds.typeDeclaration + ' ' + keywordKinds.contextual + ' ' + keywordKinds.other);
  		var nonContextualKeywords = keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.typeDeclaration + ' ' + keywordKinds.other);

  		// types
  		var generic = nested(/<(?:[^<>;=+\-*/%&|^]|<<self>>)*>/.source, 2); // the idea behind the other forbidden characters is to prevent false positives. Same for tupleElement.
  		var nestedRound = nested(/\((?:[^()]|<<self>>)*\)/.source, 2);
  		var name = /@?\b[A-Za-z_]\w*\b/.source;
  		var genericName = replace(/<<0>>(?:\s*<<1>>)?/.source, [name, generic]);
  		var identifier = replace(/(?!<<0>>)<<1>>(?:\s*\.\s*<<1>>)*/.source, [nonTypeKeywords, genericName]);
  		var array = /\[\s*(?:,\s*)*\]/.source;
  		var typeExpressionWithoutTuple = replace(/<<0>>(?:\s*(?:\?\s*)?<<1>>)*(?:\s*\?)?/.source, [identifier, array]);
  		var tupleElement = replace(/[^,()<>[\];=+\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source, [generic, nestedRound, array]);
  		var tuple = replace(/\(<<0>>+(?:,<<0>>+)+\)/.source, [tupleElement]);
  		var typeExpression = replace(/(?:<<0>>|<<1>>)(?:\s*(?:\?\s*)?<<2>>)*(?:\s*\?)?/.source, [tuple, identifier, array]);

  		var typeInside = {
  			'keyword': keywords,
  			'punctuation': /[<>()?,.:[\]]/
  		};

  		// strings & characters
  		// https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#character-literals
  		// https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#string-literals
  		var character = /'(?:[^\r\n'\\]|\\.|\\[Uux][\da-fA-F]{1,8})'/.source; // simplified pattern
  		var regularString = /"(?:\\.|[^\\"\r\n])*"/.source;
  		var verbatimString = /@"(?:""|\\[\s\S]|[^\\"])*"(?!")/.source;


  		Prism.languages.csharp = Prism.languages.extend('clike', {
  			'string': [
  				{
  					pattern: re(/(^|[^$\\])<<0>>/.source, [verbatimString]),
  					lookbehind: true,
  					greedy: true
  				},
  				{
  					pattern: re(/(^|[^@$\\])<<0>>/.source, [regularString]),
  					lookbehind: true,
  					greedy: true
  				}
  			],
  			'class-name': [
  				{
  					// Using static
  					// using static System.Math;
  					pattern: re(/(\busing\s+static\s+)<<0>>(?=\s*;)/.source, [identifier]),
  					lookbehind: true,
  					inside: typeInside
  				},
  				{
  					// Using alias (type)
  					// using Project = PC.MyCompany.Project;
  					pattern: re(/(\busing\s+<<0>>\s*=\s*)<<1>>(?=\s*;)/.source, [name, typeExpression]),
  					lookbehind: true,
  					inside: typeInside
  				},
  				{
  					// Using alias (alias)
  					// using Project = PC.MyCompany.Project;
  					pattern: re(/(\busing\s+)<<0>>(?=\s*=)/.source, [name]),
  					lookbehind: true
  				},
  				{
  					// Type declarations
  					// class Foo<A, B>
  					// interface Foo<out A, B>
  					pattern: re(/(\b<<0>>\s+)<<1>>/.source, [typeDeclarationKeywords, genericName]),
  					lookbehind: true,
  					inside: typeInside
  				},
  				{
  					// Single catch exception declaration
  					// catch(Foo)
  					// (things like catch(Foo e) is covered by variable declaration)
  					pattern: re(/(\bcatch\s*\(\s*)<<0>>/.source, [identifier]),
  					lookbehind: true,
  					inside: typeInside
  				},
  				{
  					// Name of the type parameter of generic constraints
  					// where Foo : class
  					pattern: re(/(\bwhere\s+)<<0>>/.source, [name]),
  					lookbehind: true
  				},
  				{
  					// Casts and checks via as and is.
  					// as Foo<A>, is Bar<B>
  					// (things like if(a is Foo b) is covered by variable declaration)
  					pattern: re(/(\b(?:is(?:\s+not)?|as)\s+)<<0>>/.source, [typeExpressionWithoutTuple]),
  					lookbehind: true,
  					inside: typeInside
  				},
  				{
  					// Variable, field and parameter declaration
  					// (Foo bar, Bar baz, Foo[,,] bay, Foo<Bar, FooBar<Bar>> bax)
  					pattern: re(/\b<<0>>(?=\s+(?!<<1>>|with\s*\{)<<2>>(?:\s*[=,;:{)\]]|\s+(?:in|when)\b))/.source, [typeExpression, nonContextualKeywords, name]),
  					inside: typeInside
  				}
  			],
  			'keyword': keywords,
  			// https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#literals
  			'number': /(?:\b0(?:x[\da-f_]*[\da-f]|b[01_]*[01])|(?:\B\.\d+(?:_+\d+)*|\b\d+(?:_+\d+)*(?:\.\d+(?:_+\d+)*)?)(?:e[-+]?\d+(?:_+\d+)*)?)(?:[dflmu]|lu|ul)?\b/i,
  			'operator': />>=?|<<=?|[-=]>|([-+&|])\1|~|\?\?=?|[-+*/%&|^!=<>]=?/,
  			'punctuation': /\?\.?|::|[{}[\];(),.:]/
  		});

  		Prism.languages.insertBefore('csharp', 'number', {
  			'range': {
  				pattern: /\.\./,
  				alias: 'operator'
  			}
  		});

  		Prism.languages.insertBefore('csharp', 'punctuation', {
  			'named-parameter': {
  				pattern: re(/([(,]\s*)<<0>>(?=\s*:)/.source, [name]),
  				lookbehind: true,
  				alias: 'punctuation'
  			}
  		});

  		Prism.languages.insertBefore('csharp', 'class-name', {
  			'namespace': {
  				// namespace Foo.Bar {}
  				// using Foo.Bar;
  				pattern: re(/(\b(?:namespace|using)\s+)<<0>>(?:\s*\.\s*<<0>>)*(?=\s*[;{])/.source, [name]),
  				lookbehind: true,
  				inside: {
  					'punctuation': /\./
  				}
  			},
  			'type-expression': {
  				// default(Foo), typeof(Foo<Bar>), sizeof(int)
  				pattern: re(/(\b(?:default|sizeof|typeof)\s*\(\s*(?!\s))(?:[^()\s]|\s(?!\s)|<<0>>)*(?=\s*\))/.source, [nestedRound]),
  				lookbehind: true,
  				alias: 'class-name',
  				inside: typeInside
  			},
  			'return-type': {
  				// Foo<Bar> ForBar(); Foo IFoo.Bar() => 0
  				// int this[int index] => 0; T IReadOnlyList<T>.this[int index] => this[index];
  				// int Foo => 0; int Foo { get; set } = 0;
  				pattern: re(/<<0>>(?=\s+(?:<<1>>\s*(?:=>|[({]|\.\s*this\s*\[)|this\s*\[))/.source, [typeExpression, identifier]),
  				inside: typeInside,
  				alias: 'class-name'
  			},
  			'constructor-invocation': {
  				// new List<Foo<Bar[]>> { }
  				pattern: re(/(\bnew\s+)<<0>>(?=\s*[[({])/.source, [typeExpression]),
  				lookbehind: true,
  				inside: typeInside,
  				alias: 'class-name'
  			},
  			/*'explicit-implementation': {
  				// int IFoo<Foo>.Bar => 0; void IFoo<Foo<Foo>>.Foo<T>();
  				pattern: replace(/\b<<0>>(?=\.<<1>>)/, className, methodOrPropertyDeclaration),
  				inside: classNameInside,
  				alias: 'class-name'
  			},*/
  			'generic-method': {
  				// foo<Bar>()
  				pattern: re(/<<0>>\s*<<1>>(?=\s*\()/.source, [name, generic]),
  				inside: {
  					'function': re(/^<<0>>/.source, [name]),
  					'generic': {
  						pattern: RegExp(generic),
  						alias: 'class-name',
  						inside: typeInside
  					}
  				}
  			},
  			'type-list': {
  				// The list of types inherited or of generic constraints
  				// class Foo<F> : Bar, IList<FooBar>
  				// where F : Bar, IList<int>
  				pattern: re(
  					/\b((?:<<0>>\s+<<1>>|record\s+<<1>>\s*<<5>>|where\s+<<2>>)\s*:\s*)(?:<<3>>|<<4>>|<<1>>\s*<<5>>|<<6>>)(?:\s*,\s*(?:<<3>>|<<4>>|<<6>>))*(?=\s*(?:where|[{;]|=>|$))/.source,
  					[typeDeclarationKeywords, genericName, name, typeExpression, keywords.source, nestedRound, /\bnew\s*\(\s*\)/.source]
  				),
  				lookbehind: true,
  				inside: {
  					'record-arguments': {
  						pattern: re(/(^(?!new\s*\()<<0>>\s*)<<1>>/.source, [genericName, nestedRound]),
  						lookbehind: true,
  						greedy: true,
  						inside: Prism.languages.csharp
  					},
  					'keyword': keywords,
  					'class-name': {
  						pattern: RegExp(typeExpression),
  						greedy: true,
  						inside: typeInside
  					},
  					'punctuation': /[,()]/
  				}
  			},
  			'preprocessor': {
  				pattern: /(^[\t ]*)#.*/m,
  				lookbehind: true,
  				alias: 'property',
  				inside: {
  					// highlight preprocessor directives as keywords
  					'directive': {
  						pattern: /(#)\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\b/,
  						lookbehind: true,
  						alias: 'keyword'
  					}
  				}
  			}
  		});

  		// attributes
  		var regularStringOrCharacter = regularString + '|' + character;
  		var regularStringCharacterOrComment = replace(/\/(?![*/])|\/\/[^\r\n]*[\r\n]|\/\*(?:[^*]|\*(?!\/))*\*\/|<<0>>/.source, [regularStringOrCharacter]);
  		var roundExpression = nested(replace(/[^"'/()]|<<0>>|\(<<self>>*\)/.source, [regularStringCharacterOrComment]), 2);

  		// https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets
  		var attrTarget = /\b(?:assembly|event|field|method|module|param|property|return|type)\b/.source;
  		var attr = replace(/<<0>>(?:\s*\(<<1>>*\))?/.source, [identifier, roundExpression]);

  		Prism.languages.insertBefore('csharp', 'class-name', {
  			'attribute': {
  				// Attributes
  				// [Foo], [Foo(1), Bar(2, Prop = "foo")], [return: Foo(1), Bar(2)], [assembly: Foo(Bar)]
  				pattern: re(/((?:^|[^\s\w>)?])\s*\[\s*)(?:<<0>>\s*:\s*)?<<1>>(?:\s*,\s*<<1>>)*(?=\s*\])/.source, [attrTarget, attr]),
  				lookbehind: true,
  				greedy: true,
  				inside: {
  					'target': {
  						pattern: re(/^<<0>>(?=\s*:)/.source, [attrTarget]),
  						alias: 'keyword'
  					},
  					'attribute-arguments': {
  						pattern: re(/\(<<0>>*\)/.source, [roundExpression]),
  						inside: Prism.languages.csharp
  					},
  					'class-name': {
  						pattern: RegExp(identifier),
  						inside: {
  							'punctuation': /\./
  						}
  					},
  					'punctuation': /[:,]/
  				}
  			}
  		});


  		// string interpolation
  		var formatString = /:[^}\r\n]+/.source;
  		// multi line
  		var mInterpolationRound = nested(replace(/[^"'/()]|<<0>>|\(<<self>>*\)/.source, [regularStringCharacterOrComment]), 2);
  		var mInterpolation = replace(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source, [mInterpolationRound, formatString]);
  		// single line
  		var sInterpolationRound = nested(replace(/[^"'/()]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|<<0>>|\(<<self>>*\)/.source, [regularStringOrCharacter]), 2);
  		var sInterpolation = replace(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source, [sInterpolationRound, formatString]);

  		function createInterpolationInside(interpolation, interpolationRound) {
  			return {
  				'interpolation': {
  					pattern: re(/((?:^|[^{])(?:\{\{)*)<<0>>/.source, [interpolation]),
  					lookbehind: true,
  					inside: {
  						'format-string': {
  							pattern: re(/(^\{(?:(?![}:])<<0>>)*)<<1>>(?=\}$)/.source, [interpolationRound, formatString]),
  							lookbehind: true,
  							inside: {
  								'punctuation': /^:/
  							}
  						},
  						'punctuation': /^\{|\}$/,
  						'expression': {
  							pattern: /[\s\S]+/,
  							alias: 'language-csharp',
  							inside: Prism.languages.csharp
  						}
  					}
  				},
  				'string': /[\s\S]+/
  			};
  		}

  		Prism.languages.insertBefore('csharp', 'string', {
  			'interpolation-string': [
  				{
  					pattern: re(/(^|[^\\])(?:\$@|@\$)"(?:""|\\[\s\S]|\{\{|<<0>>|[^\\{"])*"/.source, [mInterpolation]),
  					lookbehind: true,
  					greedy: true,
  					inside: createInterpolationInside(mInterpolation, mInterpolationRound),
  				},
  				{
  					pattern: re(/(^|[^@\\])\$"(?:\\.|\{\{|<<0>>|[^\\"{])*"/.source, [sInterpolation]),
  					lookbehind: true,
  					greedy: true,
  					inside: createInterpolationInside(sInterpolation, sInterpolationRound),
  				}
  			],
  			'char': {
  				pattern: RegExp(character),
  				greedy: true
  			}
  		});

  		Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp;

  	}(Prism));
  	return prismCsharp;
  }

  requirePrismCsharp();

  Prism.languages['visual-basic'] = {
  	'comment': {
  		pattern: /(?:['‘’]|REM\b)(?:[^\r\n_]|_(?:\r\n?|\n)?)*/i,
  		inside: {
  			'keyword': /^REM/i
  		}
  	},
  	'directive': {
  		pattern: /#(?:Const|Else|ElseIf|End|ExternalChecksum|ExternalSource|If|Region)(?:\b_[ \t]*(?:\r\n?|\n)|.)+/i,
  		alias: 'property',
  		greedy: true
  	},
  	'string': {
  		pattern: /\$?["“”](?:["“”]{2}|[^"“”])*["“”]C?/i,
  		greedy: true
  	},
  	'date': {
  		pattern: /#[ \t]*(?:\d+([/-])\d+\1\d+(?:[ \t]+(?:\d+[ \t]*(?:AM|PM)|\d+:\d+(?::\d+)?(?:[ \t]*(?:AM|PM))?))?|\d+[ \t]*(?:AM|PM)|\d+:\d+(?::\d+)?(?:[ \t]*(?:AM|PM))?)[ \t]*#/i,
  		alias: 'number'
  	},
  	'number': /(?:(?:\b\d+(?:\.\d+)?|\.\d+)(?:E[+-]?\d+)?|&[HO][\dA-F]+)(?:[FRD]|U?[ILS])?/i,
  	'boolean': /\b(?:False|Nothing|True)\b/i,
  	'keyword': /\b(?:AddHandler|AddressOf|Alias|And(?:Also)?|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|C(?:Bool|Byte|Char|Date|Dbl|Dec|Int|Lng|Obj|SByte|Short|Sng|Str|Type|UInt|ULng|UShort)|Char|Class|Const|Continue|Currency|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else(?:If)?|End(?:If)?|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get(?:Type|XMLNamespace)?|Global|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|Must(?:Inherit|Override)|My(?:Base|Class)|Namespace|Narrowing|New|Next|Not(?:Inheritable|Overridable)?|Object|Of|On|Operator|Option(?:al)?|Or(?:Else)?|Out|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TryCast|Type|TypeOf|U(?:Integer|Long|Short)|Until|Using|Variant|Wend|When|While|Widening|With(?:Events)?|WriteOnly|Xor)\b/i,
  	'operator': /[+\-*/\\^<=>&#@$%!]|\b_(?=[ \t]*[\r\n])/,
  	'punctuation': /[{}().,:?]/
  };

  Prism.languages.vb = Prism.languages['visual-basic'];
  Prism.languages.vba = Prism.languages['visual-basic'];

  Prism.languages.sql = {
  	'comment': {
  		pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,
  		lookbehind: true
  	},
  	'variable': [
  		{
  			pattern: /@(["'`])(?:\\[\s\S]|(?!\1)[^\\])+\1/,
  			greedy: true
  		},
  		/@[\w.$]+/
  	],
  	'string': {
  		pattern: /(^|[^@\\])("|')(?:\\[\s\S]|(?!\2)[^\\]|\2\2)*\2/,
  		greedy: true,
  		lookbehind: true
  	},
  	'identifier': {
  		pattern: /(^|[^@\\])`(?:\\[\s\S]|[^`\\]|``)*`/,
  		greedy: true,
  		lookbehind: true,
  		inside: {
  			'punctuation': /^`|`$/
  		}
  	},
  	'function': /\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\s*\()/i, // Should we highlight user defined functions too?
  	'keyword': /\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\b/i,
  	'boolean': /\b(?:FALSE|NULL|TRUE)\b/i,
  	'number': /\b0x[\da-f]+\b|\b\d+(?:\.\d*)?|\B\.\d+\b/i,
  	'operator': /[-+*\/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i,
  	'punctuation': /[;[\]()`,.]/
  };

  var prismRuby = {};

  /**
   * Original by Samuel Flores
   *
   * Adds the following new token classes:
   *     constant, builtin, variable, symbol, regex
   */

  var hasRequiredPrismRuby;

  function requirePrismRuby () {
  	if (hasRequiredPrismRuby) return prismRuby;
  	hasRequiredPrismRuby = 1;
  	(function (Prism) {
  		Prism.languages.ruby = Prism.languages.extend('clike', {
  			'comment': {
  				pattern: /#.*|^=begin\s[\s\S]*?^=end/m,
  				greedy: true
  			},
  			'class-name': {
  				pattern: /(\b(?:class|module)\s+|\bcatch\s+\()[\w.\\]+|\b[A-Z_]\w*(?=\s*\.\s*new\b)/,
  				lookbehind: true,
  				inside: {
  					'punctuation': /[.\\]/
  				}
  			},
  			'keyword': /\b(?:BEGIN|END|alias|and|begin|break|case|class|def|define_method|defined|do|each|else|elsif|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|private|protected|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\b/,
  			'operator': /\.{2,3}|&\.|===|<?=>|[!=]?~|(?:&&|\|\||<<|>>|\*\*|[+\-*/%<>!^&|=])=?|[?:]/,
  			'punctuation': /[(){}[\].,;]/,
  		});

  		Prism.languages.insertBefore('ruby', 'operator', {
  			'double-colon': {
  				pattern: /::/,
  				alias: 'punctuation'
  			},
  		});

  		var interpolation = {
  			pattern: /((?:^|[^\\])(?:\\{2})*)#\{(?:[^{}]|\{[^{}]*\})*\}/,
  			lookbehind: true,
  			inside: {
  				'content': {
  					pattern: /^(#\{)[\s\S]+(?=\}$)/,
  					lookbehind: true,
  					inside: Prism.languages.ruby
  				},
  				'delimiter': {
  					pattern: /^#\{|\}$/,
  					alias: 'punctuation'
  				}
  			}
  		};

  		delete Prism.languages.ruby.function;

  		var percentExpression = '(?:' + [
  			/([^a-zA-Z0-9\s{(\[<=])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source,
  			/\((?:[^()\\]|\\[\s\S]|\((?:[^()\\]|\\[\s\S])*\))*\)/.source,
  			/\{(?:[^{}\\]|\\[\s\S]|\{(?:[^{}\\]|\\[\s\S])*\})*\}/.source,
  			/\[(?:[^\[\]\\]|\\[\s\S]|\[(?:[^\[\]\\]|\\[\s\S])*\])*\]/.source,
  			/<(?:[^<>\\]|\\[\s\S]|<(?:[^<>\\]|\\[\s\S])*>)*>/.source
  		].join('|') + ')';

  		var symbolName = /(?:"(?:\\.|[^"\\\r\n])*"|(?:\b[a-zA-Z_]\w*|[^\s\0-\x7F]+)[?!]?|\$.)/.source;

  		Prism.languages.insertBefore('ruby', 'keyword', {
  			'regex-literal': [
  				{
  					pattern: RegExp(/%r/.source + percentExpression + /[egimnosux]{0,6}/.source),
  					greedy: true,
  					inside: {
  						'interpolation': interpolation,
  						'regex': /[\s\S]+/
  					}
  				},
  				{
  					pattern: /(^|[^/])\/(?!\/)(?:\[[^\r\n\]]+\]|\\.|[^[/\\\r\n])+\/[egimnosux]{0,6}(?=\s*(?:$|[\r\n,.;})#]))/,
  					lookbehind: true,
  					greedy: true,
  					inside: {
  						'interpolation': interpolation,
  						'regex': /[\s\S]+/
  					}
  				}
  			],
  			'variable': /[@$]+[a-zA-Z_]\w*(?:[?!]|\b)/,
  			'symbol': [
  				{
  					pattern: RegExp(/(^|[^:]):/.source + symbolName),
  					lookbehind: true,
  					greedy: true
  				},
  				{
  					pattern: RegExp(/([\r\n{(,][ \t]*)/.source + symbolName + /(?=:(?!:))/.source),
  					lookbehind: true,
  					greedy: true
  				},
  			],
  			'method-definition': {
  				pattern: /(\bdef\s+)\w+(?:\s*\.\s*\w+)?/,
  				lookbehind: true,
  				inside: {
  					'function': /\b\w+$/,
  					'keyword': /^self\b/,
  					'class-name': /^\w+/,
  					'punctuation': /\./
  				}
  			}
  		});

  		Prism.languages.insertBefore('ruby', 'string', {
  			'string-literal': [
  				{
  					pattern: RegExp(/%[qQiIwWs]?/.source + percentExpression),
  					greedy: true,
  					inside: {
  						'interpolation': interpolation,
  						'string': /[\s\S]+/
  					}
  				},
  				{
  					pattern: /("|')(?:#\{[^}]+\}|#(?!\{)|\\(?:\r\n|[\s\S])|(?!\1)[^\\#\r\n])*\1/,
  					greedy: true,
  					inside: {
  						'interpolation': interpolation,
  						'string': /[\s\S]+/
  					}
  				},
  				{
  					pattern: /<<[-~]?([a-z_]\w*)[\r\n](?:.*[\r\n])*?[\t ]*\1/i,
  					alias: 'heredoc-string',
  					greedy: true,
  					inside: {
  						'delimiter': {
  							pattern: /^<<[-~]?[a-z_]\w*|\b[a-z_]\w*$/i,
  							inside: {
  								'symbol': /\b\w+/,
  								'punctuation': /^<<[-~]?/
  							}
  						},
  						'interpolation': interpolation,
  						'string': /[\s\S]+/
  					}
  				},
  				{
  					pattern: /<<[-~]?'([a-z_]\w*)'[\r\n](?:.*[\r\n])*?[\t ]*\1/i,
  					alias: 'heredoc-string',
  					greedy: true,
  					inside: {
  						'delimiter': {
  							pattern: /^<<[-~]?'[a-z_]\w*'|\b[a-z_]\w*$/i,
  							inside: {
  								'symbol': /\b\w+/,
  								'punctuation': /^<<[-~]?'|'$/,
  							}
  						},
  						'string': /[\s\S]+/
  					}
  				}
  			],
  			'command-literal': [
  				{
  					pattern: RegExp(/%x/.source + percentExpression),
  					greedy: true,
  					inside: {
  						'interpolation': interpolation,
  						'command': {
  							pattern: /[\s\S]+/,
  							alias: 'string'
  						}
  					}
  				},
  				{
  					pattern: /`(?:#\{[^}]+\}|#(?!\{)|\\(?:\r\n|[\s\S])|[^\\`#\r\n])*`/,
  					greedy: true,
  					inside: {
  						'interpolation': interpolation,
  						'command': {
  							pattern: /[\s\S]+/,
  							alias: 'string'
  						}
  					}
  				}
  			]
  		});

  		delete Prism.languages.ruby.string;

  		Prism.languages.insertBefore('ruby', 'number', {
  			'builtin': /\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Fixnum|Float|Hash|IO|Integer|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|Stat|String|Struct|Symbol|TMS|Thread|ThreadGroup|Time|TrueClass)\b/,
  			'constant': /\b[A-Z][A-Z0-9_]*(?:[?!]|\b)/
  		});

  		Prism.languages.rb = Prism.languages.ruby;
  	}(Prism));
  	return prismRuby;
  }

  requirePrismRuby();

  Prism.languages.swift = {
  	'comment': {
  		// Nested comments are supported up to 2 levels
  		pattern: /(^|[^\\:])(?:\/\/.*|\/\*(?:[^/*]|\/(?!\*)|\*(?!\/)|\/\*(?:[^*]|\*(?!\/))*\*\/)*\*\/)/,
  		lookbehind: true,
  		greedy: true
  	},
  	'string-literal': [
  		// https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html
  		{
  			pattern: RegExp(
  				/(^|[^"#])/.source
  				+ '(?:'
  				// single-line string
  				+ /"(?:\\(?:\((?:[^()]|\([^()]*\))*\)|\r\n|[^(])|[^\\\r\n"])*"/.source
  				+ '|'
  				// multi-line string
  				+ /"""(?:\\(?:\((?:[^()]|\([^()]*\))*\)|[^(])|[^\\"]|"(?!""))*"""/.source
  				+ ')'
  				+ /(?!["#])/.source
  			),
  			lookbehind: true,
  			greedy: true,
  			inside: {
  				'interpolation': {
  					pattern: /(\\\()(?:[^()]|\([^()]*\))*(?=\))/,
  					lookbehind: true,
  					inside: null // see below
  				},
  				'interpolation-punctuation': {
  					pattern: /^\)|\\\($/,
  					alias: 'punctuation'
  				},
  				'punctuation': /\\(?=[\r\n])/,
  				'string': /[\s\S]+/
  			}
  		},
  		{
  			pattern: RegExp(
  				/(^|[^"#])(#+)/.source
  				+ '(?:'
  				// single-line string
  				+ /"(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|\r\n|[^#])|[^\\\r\n])*?"/.source
  				+ '|'
  				// multi-line string
  				+ /"""(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|[^#])|[^\\])*?"""/.source
  				+ ')'
  				+ '\\2'
  			),
  			lookbehind: true,
  			greedy: true,
  			inside: {
  				'interpolation': {
  					pattern: /(\\#+\()(?:[^()]|\([^()]*\))*(?=\))/,
  					lookbehind: true,
  					inside: null // see below
  				},
  				'interpolation-punctuation': {
  					pattern: /^\)|\\#+\($/,
  					alias: 'punctuation'
  				},
  				'string': /[\s\S]+/
  			}
  		},
  	],

  	'directive': {
  		// directives with conditions
  		pattern: RegExp(
  			/#/.source
  			+ '(?:'
  			+ (
  				/(?:elseif|if)\b/.source
  				+ '(?:[ \t]*'
  				// This regex is a little complex. It's equivalent to this:
  				//   (?:![ \t]*)?(?:\b\w+\b(?:[ \t]*<round>)?|<round>)(?:[ \t]*(?:&&|\|\|))?
  				// where <round> is a general parentheses expression.
  				+ /(?:![ \t]*)?(?:\b\w+\b(?:[ \t]*\((?:[^()]|\([^()]*\))*\))?|\((?:[^()]|\([^()]*\))*\))(?:[ \t]*(?:&&|\|\|))?/.source
  				+ ')+'
  			)
  			+ '|'
  			+ /(?:else|endif)\b/.source
  			+ ')'
  		),
  		alias: 'property',
  		inside: {
  			'directive-name': /^#\w+/,
  			'boolean': /\b(?:false|true)\b/,
  			'number': /\b\d+(?:\.\d+)*\b/,
  			'operator': /!|&&|\|\||[<>]=?/,
  			'punctuation': /[(),]/
  		}
  	},
  	'literal': {
  		pattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\b/,
  		alias: 'constant'
  	},
  	'other-directive': {
  		pattern: /#\w+\b/,
  		alias: 'property'
  	},

  	'attribute': {
  		pattern: /@\w+/,
  		alias: 'atrule'
  	},

  	'function-definition': {
  		pattern: /(\bfunc\s+)\w+/,
  		lookbehind: true,
  		alias: 'function'
  	},
  	'label': {
  		// https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141
  		pattern: /\b(break|continue)\s+\w+|\b[a-zA-Z_]\w*(?=\s*:\s*(?:for|repeat|while)\b)/,
  		lookbehind: true,
  		alias: 'important'
  	},

  	'keyword': /\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\b/,
  	'boolean': /\b(?:false|true)\b/,
  	'nil': {
  		pattern: /\bnil\b/,
  		alias: 'constant'
  	},

  	'short-argument': /\$\d+\b/,
  	'omit': {
  		pattern: /\b_\b/,
  		alias: 'keyword'
  	},
  	'number': /\b(?:[\d_]+(?:\.[\de_]+)?|0x[a-f0-9_]+(?:\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\b/i,

  	// A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.
  	'class-name': /\b[A-Z](?:[A-Z_\d]*[a-z]\w*)?\b/,
  	'function': /\b[a-z_]\w*(?=\s*\()/i,
  	'constant': /\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\b/,

  	// Operators are generic in Swift. Developers can even create new operators (e.g. +++).
  	// https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481
  	// This regex only supports ASCII operators.
  	'operator': /[-+*/%=!<>&|^~?]+|\.[.\-+*/%=!<>&|^~?]+/,
  	'punctuation': /[{}[\]();,.:\\]/
  };

  Prism.languages.swift['string-literal'].forEach(function (rule) {
  	rule.inside['interpolation'].inside = Prism.languages.swift;
  });

  (function (Prism) {
  	// $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\n' '|'
  	// + LC_ALL, RANDOM, REPLY, SECONDS.
  	// + make sure PS1..4 are here as they are not always set,
  	// - some useless things.
  	var envVars = '\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b';

  	var commandAfterHeredoc = {
  		pattern: /(^(["']?)\w+\2)[ \t]+\S.*/,
  		lookbehind: true,
  		alias: 'punctuation', // this looks reasonably well in all themes
  		inside: null // see below
  	};

  	var insideString = {
  		'bash': commandAfterHeredoc,
  		'environment': {
  			pattern: RegExp('\\$' + envVars),
  			alias: 'constant'
  		},
  		'variable': [
  			// [0]: Arithmetic Environment
  			{
  				pattern: /\$?\(\([\s\S]+?\)\)/,
  				greedy: true,
  				inside: {
  					// If there is a $ sign at the beginning highlight $(( and )) as variable
  					'variable': [
  						{
  							pattern: /(^\$\(\([\s\S]+)\)\)/,
  							lookbehind: true
  						},
  						/^\$\(\(/
  					],
  					'number': /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,
  					// Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic
  					'operator': /--|\+\+|\*\*=?|<<=?|>>=?|&&|\|\||[=!+\-*/%<>^&|]=?|[?~:]/,
  					// If there is no $ sign at the beginning highlight (( and )) as punctuation
  					'punctuation': /\(\(?|\)\)?|,|;/
  				}
  			},
  			// [1]: Command Substitution
  			{
  				pattern: /\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,
  				greedy: true,
  				inside: {
  					'variable': /^\$\(|^`|\)$|`$/
  				}
  			},
  			// [2]: Brace expansion
  			{
  				pattern: /\$\{[^}]+\}/,
  				greedy: true,
  				inside: {
  					'operator': /:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,
  					'punctuation': /[\[\]]/,
  					'environment': {
  						pattern: RegExp('(\\{)' + envVars),
  						lookbehind: true,
  						alias: 'constant'
  					}
  				}
  			},
  			/\$(?:\w+|[#?*!@$])/
  		],
  		// Escape sequences from echo and printf's manuals, and escaped quotes.
  		'entity': /\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/
  	};

  	Prism.languages.bash = {
  		'shebang': {
  			pattern: /^#!\s*\/.*/,
  			alias: 'important'
  		},
  		'comment': {
  			pattern: /(^|[^"{\\$])#.*/,
  			lookbehind: true
  		},
  		'function-name': [
  			// a) function foo {
  			// b) foo() {
  			// c) function foo() {
  			// but not “foo {”
  			{
  				// a) and c)
  				pattern: /(\bfunction\s+)[\w-]+(?=(?:\s*\(?:\s*\))?\s*\{)/,
  				lookbehind: true,
  				alias: 'function'
  			},
  			{
  				// b)
  				pattern: /\b[\w-]+(?=\s*\(\s*\)\s*\{)/,
  				alias: 'function'
  			}
  		],
  		// Highlight variable names as variables in for and select beginnings.
  		'for-or-select': {
  			pattern: /(\b(?:for|select)\s+)\w+(?=\s+in\s)/,
  			alias: 'variable',
  			lookbehind: true
  		},
  		// Highlight variable names as variables in the left-hand part
  		// of assignments (“=” and “+=”).
  		'assign-left': {
  			pattern: /(^|[\s;|&]|[<>]\()\w+(?:\.\w+)*(?=\+?=)/,
  			inside: {
  				'environment': {
  					pattern: RegExp('(^|[\\s;|&]|[<>]\\()' + envVars),
  					lookbehind: true,
  					alias: 'constant'
  				}
  			},
  			alias: 'variable',
  			lookbehind: true
  		},
  		// Highlight parameter names as variables
  		'parameter': {
  			pattern: /(^|\s)-{1,2}(?:\w+:[+-]?)?\w+(?:\.\w+)*(?=[=\s]|$)/,
  			alias: 'variable',
  			lookbehind: true
  		},
  		'string': [
  			// Support for Here-documents https://en.wikipedia.org/wiki/Here_document
  			{
  				pattern: /((?:^|[^<])<<-?\s*)(\w+)\s[\s\S]*?(?:\r?\n|\r)\2/,
  				lookbehind: true,
  				greedy: true,
  				inside: insideString
  			},
  			// Here-document with quotes around the tag
  			// → No expansion (so no “inside”).
  			{
  				pattern: /((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s[\s\S]*?(?:\r?\n|\r)\3/,
  				lookbehind: true,
  				greedy: true,
  				inside: {
  					'bash': commandAfterHeredoc
  				}
  			},
  			// “Normal” string
  			{
  				// https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html
  				pattern: /(^|[^\\](?:\\\\)*)"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/,
  				lookbehind: true,
  				greedy: true,
  				inside: insideString
  			},
  			{
  				// https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html
  				pattern: /(^|[^$\\])'[^']*'/,
  				lookbehind: true,
  				greedy: true
  			},
  			{
  				// https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html
  				pattern: /\$'(?:[^'\\]|\\[\s\S])*'/,
  				greedy: true,
  				inside: {
  					'entity': insideString.entity
  				}
  			}
  		],
  		'environment': {
  			pattern: RegExp('\\$?' + envVars),
  			alias: 'constant'
  		},
  		'variable': insideString.variable,
  		'function': {
  			pattern: /(^|[\s;|&]|[<>]\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cargo|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|java|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|sysctl|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,
  			lookbehind: true
  		},
  		'keyword': {
  			pattern: /(^|[\s;|&]|[<>]\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\s;|&])/,
  			lookbehind: true
  		},
  		// https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
  		'builtin': {
  			pattern: /(^|[\s;|&]|[<>]\()(?:\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\s;|&])/,
  			lookbehind: true,
  			// Alias added to make those easier to distinguish from strings.
  			alias: 'class-name'
  		},
  		'boolean': {
  			pattern: /(^|[\s;|&]|[<>]\()(?:false|true)(?=$|[)\s;|&])/,
  			lookbehind: true
  		},
  		'file-descriptor': {
  			pattern: /\B&\d\b/,
  			alias: 'important'
  		},
  		'operator': {
  			// Lots of redirections here, but not just that.
  			pattern: /\d?<>|>\||\+=|=[=~]?|!=?|<<[<-]?|[&\d]?>>|\d[<>]&?|[<>][&=]?|&[>&]?|\|[&|]?/,
  			inside: {
  				'file-descriptor': {
  					pattern: /^\d/,
  					alias: 'important'
  				}
  			}
  		},
  		'punctuation': /\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,
  		'number': {
  			pattern: /(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,
  			lookbehind: true
  		}
  	};

  	commandAfterHeredoc.inside = Prism.languages.bash;

  	/* Patterns in command substitution. */
  	var toBeCopied = [
  		'comment',
  		'function-name',
  		'for-or-select',
  		'assign-left',
  		'parameter',
  		'string',
  		'environment',
  		'function',
  		'keyword',
  		'builtin',
  		'boolean',
  		'file-descriptor',
  		'operator',
  		'punctuation',
  		'number'
  	];
  	var inside = insideString.variable[1].inside;
  	for (var i = 0; i < toBeCopied.length; i++) {
  		inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];
  	}

  	Prism.languages.sh = Prism.languages.bash;
  	Prism.languages.shell = Prism.languages.bash;
  }(Prism));

  (function (Prism) {

  	// Allow only one line break
  	var inner = /(?:\\.|[^\\\n\r]|(?:\n|\r\n?)(?![\r\n]))/.source;

  	/**
  	 * This function is intended for the creation of the bold or italic pattern.
  	 *
  	 * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.
  	 *
  	 * _Note:_ Keep in mind that this adds a capturing group.
  	 *
  	 * @param {string} pattern
  	 * @returns {RegExp}
  	 */
  	function createInline(pattern) {
  		pattern = pattern.replace(/<inner>/g, function () { return inner; });
  		return RegExp(/((?:^|[^\\])(?:\\{2})*)/.source + '(?:' + pattern + ')');
  	}


  	var tableCell = /(?:\\.|``(?:[^`\r\n]|`(?!`))+``|`[^`\r\n]+`|[^\\|\r\n`])+/.source;
  	var tableRow = /\|?__(?:\|__)+\|?(?:(?:\n|\r\n?)|(?![\s\S]))/.source.replace(/__/g, function () { return tableCell; });
  	var tableLine = /\|?[ \t]*:?-{3,}:?[ \t]*(?:\|[ \t]*:?-{3,}:?[ \t]*)+\|?(?:\n|\r\n?)/.source;


  	Prism.languages.markdown = Prism.languages.extend('markup', {});
  	Prism.languages.insertBefore('markdown', 'prolog', {
  		'front-matter-block': {
  			pattern: /(^(?:\s*[\r\n])?)---(?!.)[\s\S]*?[\r\n]---(?!.)/,
  			lookbehind: true,
  			greedy: true,
  			inside: {
  				'punctuation': /^---|---$/,
  				'front-matter': {
  					pattern: /\S+(?:\s+\S+)*/,
  					alias: ['yaml', 'language-yaml'],
  					inside: Prism.languages.yaml
  				}
  			}
  		},
  		'blockquote': {
  			// > ...
  			pattern: /^>(?:[\t ]*>)*/m,
  			alias: 'punctuation'
  		},
  		'table': {
  			pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),
  			inside: {
  				'table-data-rows': {
  					pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),
  					lookbehind: true,
  					inside: {
  						'table-data': {
  							pattern: RegExp(tableCell),
  							inside: Prism.languages.markdown
  						},
  						'punctuation': /\|/
  					}
  				},
  				'table-line': {
  					pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),
  					lookbehind: true,
  					inside: {
  						'punctuation': /\||:?-{3,}:?/
  					}
  				},
  				'table-header-row': {
  					pattern: RegExp('^' + tableRow + '$'),
  					inside: {
  						'table-header': {
  							pattern: RegExp(tableCell),
  							alias: 'important',
  							inside: Prism.languages.markdown
  						},
  						'punctuation': /\|/
  					}
  				}
  			}
  		},
  		'code': [
  			{
  				// Prefixed by 4 spaces or 1 tab and preceded by an empty line
  				pattern: /((?:^|\n)[ \t]*\n|(?:^|\r\n?)[ \t]*\r\n?)(?: {4}|\t).+(?:(?:\n|\r\n?)(?: {4}|\t).+)*/,
  				lookbehind: true,
  				alias: 'keyword'
  			},
  			{
  				// ```optional language
  				// code block
  				// ```
  				pattern: /^```[\s\S]*?^```$/m,
  				greedy: true,
  				inside: {
  					'code-block': {
  						pattern: /^(```.*(?:\n|\r\n?))[\s\S]+?(?=(?:\n|\r\n?)^```$)/m,
  						lookbehind: true
  					},
  					'code-language': {
  						pattern: /^(```).+/,
  						lookbehind: true
  					},
  					'punctuation': /```/
  				}
  			}
  		],
  		'title': [
  			{
  				// title 1
  				// =======

  				// title 2
  				// -------
  				pattern: /\S.*(?:\n|\r\n?)(?:==+|--+)(?=[ \t]*$)/m,
  				alias: 'important',
  				inside: {
  					punctuation: /==+$|--+$/
  				}
  			},
  			{
  				// # title 1
  				// ###### title 6
  				pattern: /(^\s*)#.+/m,
  				lookbehind: true,
  				alias: 'important',
  				inside: {
  					punctuation: /^#+|#+$/
  				}
  			}
  		],
  		'hr': {
  			// ***
  			// ---
  			// * * *
  			// -----------
  			pattern: /(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,
  			lookbehind: true,
  			alias: 'punctuation'
  		},
  		'list': {
  			// * item
  			// + item
  			// - item
  			// 1. item
  			pattern: /(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,
  			lookbehind: true,
  			alias: 'punctuation'
  		},
  		'url-reference': {
  			// [id]: http://example.com "Optional title"
  			// [id]: http://example.com 'Optional title'
  			// [id]: http://example.com (Optional title)
  			// [id]: <http://example.com> "Optional title"
  			pattern: /!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,
  			inside: {
  				'variable': {
  					pattern: /^(!?\[)[^\]]+/,
  					lookbehind: true
  				},
  				'string': /(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,
  				'punctuation': /^[\[\]!:]|[<>]/
  			},
  			alias: 'url'
  		},
  		'bold': {
  			// **strong**
  			// __strong__

  			// allow one nested instance of italic text using the same delimiter
  			pattern: createInline(/\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\b|\*\*(?:(?!\*)<inner>|\*(?:(?!\*)<inner>)+\*)+\*\*/.source),
  			lookbehind: true,
  			greedy: true,
  			inside: {
  				'content': {
  					pattern: /(^..)[\s\S]+(?=..$)/,
  					lookbehind: true,
  					inside: {} // see below
  				},
  				'punctuation': /\*\*|__/
  			}
  		},
  		'italic': {
  			// *em*
  			// _em_

  			// allow one nested instance of bold text using the same delimiter
  			pattern: createInline(/\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\b|\*(?:(?!\*)<inner>|\*\*(?:(?!\*)<inner>)+\*\*)+\*/.source),
  			lookbehind: true,
  			greedy: true,
  			inside: {
  				'content': {
  					pattern: /(^.)[\s\S]+(?=.$)/,
  					lookbehind: true,
  					inside: {} // see below
  				},
  				'punctuation': /[*_]/
  			}
  		},
  		'strike': {
  			// ~~strike through~~
  			// ~strike~
  			// eslint-disable-next-line regexp/strict
  			pattern: createInline(/(~~?)(?:(?!~)<inner>)+\2/.source),
  			lookbehind: true,
  			greedy: true,
  			inside: {
  				'content': {
  					pattern: /(^~~?)[\s\S]+(?=\1$)/,
  					lookbehind: true,
  					inside: {} // see below
  				},
  				'punctuation': /~~?/
  			}
  		},
  		'code-snippet': {
  			// `code`
  			// ``code``
  			pattern: /(^|[^\\`])(?:``[^`\r\n]+(?:`[^`\r\n]+)*``(?!`)|`[^`\r\n]+`(?!`))/,
  			lookbehind: true,
  			greedy: true,
  			alias: ['code', 'keyword']
  		},
  		'url': {
  			// [example](http://example.com "Optional title")
  			// [example][id]
  			// [example] [id]
  			pattern: createInline(/!?\[(?:(?!\])<inner>)+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)|[ \t]?\[(?:(?!\])<inner>)+\])/.source),
  			lookbehind: true,
  			greedy: true,
  			inside: {
  				'operator': /^!/,
  				'content': {
  					pattern: /(^\[)[^\]]+(?=\])/,
  					lookbehind: true,
  					inside: {} // see below
  				},
  				'variable': {
  					pattern: /(^\][ \t]?\[)[^\]]+(?=\]$)/,
  					lookbehind: true
  				},
  				'url': {
  					pattern: /(^\]\()[^\s)]+/,
  					lookbehind: true
  				},
  				'string': {
  					pattern: /(^[ \t]+)"(?:\\.|[^"\\])*"(?=\)$)/,
  					lookbehind: true
  				}
  			}
  		}
  	});

  	['url', 'bold', 'italic', 'strike'].forEach(function (token) {
  		['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {
  			if (token !== inside) {
  				Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];
  			}
  		});
  	});

  	Prism.hooks.add('after-tokenize', function (env) {
  		if (env.language !== 'markdown' && env.language !== 'md') {
  			return;
  		}

  		function walkTokens(tokens) {
  			if (!tokens || typeof tokens === 'string') {
  				return;
  			}

  			for (var i = 0, l = tokens.length; i < l; i++) {
  				var token = tokens[i];

  				if (token.type !== 'code') {
  					walkTokens(token.content);
  					continue;
  				}

  				/*
  				 * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token
  				 * is optional. But the grammar is defined so that there is only one case we have to handle:
  				 *
  				 * token.content = [
  				 *     <span class="punctuation">```</span>,
  				 *     <span class="code-language">xxxx</span>,
  				 *     '\n', // exactly one new lines (\r or \n or \r\n)
  				 *     <span class="code-block">...</span>,
  				 *     '\n', // exactly one new lines again
  				 *     <span class="punctuation">```</span>
  				 * ];
  				 */

  				var codeLang = token.content[1];
  				var codeBlock = token.content[3];

  				if (codeLang && codeBlock &&
  					codeLang.type === 'code-language' && codeBlock.type === 'code-block' &&
  					typeof codeLang.content === 'string') {

  					// this might be a language that Prism does not support

  					// do some replacements to support C++, C#, and F#
  					var lang = codeLang.content.replace(/\b#/g, 'sharp').replace(/\b\+\+/g, 'pp');
  					// only use the first word
  					lang = (/[a-z][\w-]*/i.exec(lang) || [''])[0].toLowerCase();
  					var alias = 'language-' + lang;

  					// add alias
  					if (!codeBlock.alias) {
  						codeBlock.alias = [alias];
  					} else if (typeof codeBlock.alias === 'string') {
  						codeBlock.alias = [codeBlock.alias, alias];
  					} else {
  						codeBlock.alias.push(alias);
  					}
  				}
  			}
  		}

  		walkTokens(env.tokens);
  	});

  	Prism.hooks.add('wrap', function (env) {
  		if (env.type !== 'code-block') {
  			return;
  		}

  		var codeLang = '';
  		for (var i = 0, l = env.classes.length; i < l; i++) {
  			var cls = env.classes[i];
  			var match = /language-(.+)/.exec(cls);
  			if (match) {
  				codeLang = match[1];
  				break;
  			}
  		}

  		var grammar = Prism.languages[codeLang];

  		if (!grammar) {
  			if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {
  				var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);
  				env.attributes['id'] = id;

  				Prism.plugins.autoloader.loadLanguages(codeLang, function () {
  					var ele = document.getElementById(id);
  					if (ele) {
  						ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);
  					}
  				});
  			}
  		} else {
  			env.content = Prism.highlight(textContent(env.content), grammar, codeLang);
  		}
  	});

  	var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');

  	/**
  	 * A list of known entity names.
  	 *
  	 * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.
  	 *
  	 * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}
  	 */
  	var KNOWN_ENTITY_NAMES = {
  		'amp': '&',
  		'lt': '<',
  		'gt': '>',
  		'quot': '"',
  	};

  	// IE 11 doesn't support `String.fromCodePoint`
  	var fromCodePoint = String.fromCodePoint || String.fromCharCode;

  	/**
  	 * Returns the text content of a given HTML source code string.
  	 *
  	 * @param {string} html
  	 * @returns {string}
  	 */
  	function textContent(html) {
  		// remove all tags
  		var text = html.replace(tagPattern, '');

  		// decode known entities
  		text = text.replace(/&(\w{1,8}|#x?[\da-f]{1,8});/gi, function (m, code) {
  			code = code.toLowerCase();

  			if (code[0] === '#') {
  				var value;
  				if (code[1] === 'x') {
  					value = parseInt(code.slice(2), 16);
  				} else {
  					value = Number(code.slice(1));
  				}

  				return fromCodePoint(value);
  			} else {
  				var known = KNOWN_ENTITY_NAMES[code];
  				if (known) {
  					return known;
  				}

  				// unable to decode
  				return m;
  			}
  		});

  		return text;
  	}

  	Prism.languages.md = Prism.languages.markdown;

  }(Prism));

  Prism.languages.lua = {
  	'comment': /^#!.+|--(?:\[(=*)\[[\s\S]*?\]\1\]|.*)/m,
  	// \z may be used to skip the following space
  	'string': {
  		pattern: /(["'])(?:(?!\1)[^\\\r\n]|\\z(?:\r\n|\s)|\\(?:\r\n|[^z]))*\1|\[(=*)\[[\s\S]*?\]\2\]/,
  		greedy: true
  	},
  	'number': /\b0x[a-f\d]+(?:\.[a-f\d]*)?(?:p[+-]?\d+)?\b|\b\d+(?:\.\B|(?:\.\d*)?(?:e[+-]?\d+)?\b)|\B\.\d+(?:e[+-]?\d+)?\b/i,
  	'keyword': /\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\b/,
  	'function': /(?!\d)\w+(?=\s*(?:[({]))/,
  	'operator': [
  		/[-+*%^&|#]|\/\/?|<[<=]?|>[>=]?|[=~]=?/,
  		{
  			// Match ".." but don't break "..."
  			pattern: /(^|[^.])\.\.(?!\.)/,
  			lookbehind: true
  		}
  	],
  	'punctuation': /[\[\](){},;]|\.+|:+/
  };

  (function (Prism) {

  	var interpolation = {
  		pattern: /((?:^|[^\\$])(?:\\{2})*)\$(?:\w+|\{[^{}]*\})/,
  		lookbehind: true,
  		inside: {
  			'interpolation-punctuation': {
  				pattern: /^\$\{?|\}$/,
  				alias: 'punctuation'
  			},
  			'expression': {
  				pattern: /[\s\S]+/,
  				inside: null // see below
  			}
  		}
  	};

  	Prism.languages.groovy = Prism.languages.extend('clike', {
  		'string': {
  			// https://groovy-lang.org/syntax.html#_dollar_slashy_string
  			pattern: /'''(?:[^\\]|\\[\s\S])*?'''|'(?:\\.|[^\\'\r\n])*'/,
  			greedy: true
  		},
  		'keyword': /\b(?:abstract|as|assert|boolean|break|byte|case|catch|char|class|const|continue|def|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|in|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\b/,
  		'number': /\b(?:0b[01_]+|0x[\da-f_]+(?:\.[\da-f_p\-]+)?|[\d_]+(?:\.[\d_]+)?(?:e[+-]?\d+)?)[glidf]?\b/i,
  		'operator': {
  			pattern: /(^|[^.])(?:~|==?~?|\?[.:]?|\*(?:[.=]|\*=?)?|\.[@&]|\.\.<|\.\.(?!\.)|-[-=>]?|\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\|[|=]?|\/=?|\^=?|%=?)/,
  			lookbehind: true
  		},
  		'punctuation': /\.+|[{}[\];(),:$]/
  	});

  	Prism.languages.insertBefore('groovy', 'string', {
  		'shebang': {
  			pattern: /#!.+/,
  			alias: 'comment',
  			greedy: true
  		},
  		'interpolation-string': {
  			// TODO: Slash strings (e.g. /foo/) can contain line breaks but this will cause a lot of trouble with
  			// simple division (see JS regex), so find a fix maybe?
  			pattern: /"""(?:[^\\]|\\[\s\S])*?"""|(["/])(?:\\.|(?!\1)[^\\\r\n])*\1|\$\/(?:[^/$]|\$(?:[/$]|(?![/$]))|\/(?!\$))*\/\$/,
  			greedy: true,
  			inside: {
  				'interpolation': interpolation,
  				'string': /[\s\S]+/
  			}
  		}
  	});

  	Prism.languages.insertBefore('groovy', 'punctuation', {
  		'spock-block': /\b(?:and|cleanup|expect|given|setup|then|when|where):/
  	});

  	Prism.languages.insertBefore('groovy', 'function', {
  		'annotation': {
  			pattern: /(^|[^.])@\w+/,
  			lookbehind: true,
  			alias: 'punctuation'
  		}
  	});

  	interpolation.inside.expression.inside = Prism.languages.groovy;

  }(Prism));

  Prism.languages.abap = {
  	'comment': /^\*.*/m,
  	'string': /(`|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
  	'string-template': {
  		pattern: /([|}])(?:\\.|[^\\|{\r\n])*(?=[|{])/,
  		lookbehind: true,
  		alias: 'string'
  	},
  	/* End Of Line comments should not interfere with strings when the
  	quote character occurs within them. We assume a string being highlighted
  	inside an EOL comment is more acceptable than the opposite.
  	*/
  	'eol-comment': {
  		pattern: /(^|\s)".*/m,
  		lookbehind: true,
  		alias: 'comment'
  	},
  	'keyword': {
  		pattern: /(\s|\.|^)(?:\*-INPUT|\?TO|ABAP-SOURCE|ABBREVIATED|ABS|ABSTRACT|ACCEPT|ACCEPTING|ACCESSPOLICY|ACCORDING|ACOS|ACTIVATION|ACTUAL|ADD|ADD-CORRESPONDING|ADJACENT|AFTER|ALIAS|ALIASES|ALIGN|ALL|ALLOCATE|ALPHA|ANALYSIS|ANALYZER|AND|ANY|APPEND|APPENDAGE|APPENDING|APPLICATION|ARCHIVE|AREA|ARITHMETIC|AS|ASCENDING|ASIN|ASPECT|ASSERT|ASSIGN|ASSIGNED|ASSIGNING|ASSOCIATION|ASYNCHRONOUS|AT|ATAN|ATTRIBUTES|AUTHORITY|AUTHORITY-CHECK|AVG|BACK|BACKGROUND|BACKUP|BACKWARD|BADI|BASE|BEFORE|BEGIN|BETWEEN|BIG|BINARY|BINDING|BIT|BIT-AND|BIT-NOT|BIT-OR|BIT-XOR|BLACK|BLANK|BLANKS|BLOB|BLOCK|BLOCKS|BLUE|BOUND|BOUNDARIES|BOUNDS|BOXED|BREAK-POINT|BT|BUFFER|BY|BYPASSING|BYTE|BYTE-CA|BYTE-CN|BYTE-CO|BYTE-CS|BYTE-NA|BYTE-NS|BYTE-ORDER|C|CA|CALL|CALLING|CASE|CAST|CASTING|CATCH|CEIL|CENTER|CENTERED|CHAIN|CHAIN-INPUT|CHAIN-REQUEST|CHANGE|CHANGING|CHANNELS|CHAR-TO-HEX|CHARACTER|CHARLEN|CHECK|CHECKBOX|CIRCULAR|CI_|CLASS|CLASS-CODING|CLASS-DATA|CLASS-EVENTS|CLASS-METHODS|CLASS-POOL|CLEANUP|CLEAR|CLIENT|CLOB|CLOCK|CLOSE|CN|CNT|CO|COALESCE|CODE|CODING|COLLECT|COLOR|COLUMN|COLUMNS|COL_BACKGROUND|COL_GROUP|COL_HEADING|COL_KEY|COL_NEGATIVE|COL_NORMAL|COL_POSITIVE|COL_TOTAL|COMMENT|COMMENTS|COMMIT|COMMON|COMMUNICATION|COMPARING|COMPONENT|COMPONENTS|COMPRESSION|COMPUTE|CONCAT|CONCATENATE|COND|CONDENSE|CONDITION|CONNECT|CONNECTION|CONSTANTS|CONTEXT|CONTEXTS|CONTINUE|CONTROL|CONTROLS|CONV|CONVERSION|CONVERT|COPIES|COPY|CORRESPONDING|COS|COSH|COUNT|COUNTRY|COVER|CP|CPI|CREATE|CREATING|CRITICAL|CS|CURRENCY|CURRENCY_CONVERSION|CURRENT|CURSOR|CURSOR-SELECTION|CUSTOMER|CUSTOMER-FUNCTION|DANGEROUS|DATA|DATABASE|DATAINFO|DATASET|DATE|DAYLIGHT|DBMAXLEN|DD\/MM\/YY|DD\/MM\/YYYY|DDMMYY|DEALLOCATE|DECIMALS|DECIMAL_SHIFT|DECLARATIONS|DEEP|DEFAULT|DEFERRED|DEFINE|DEFINING|DEFINITION|DELETE|DELETING|DEMAND|DEPARTMENT|DESCENDING|DESCRIBE|DESTINATION|DETAIL|DIALOG|DIRECTORY|DISCONNECT|DISPLAY|DISPLAY-MODE|DISTANCE|DISTINCT|DIV|DIVIDE|DIVIDE-CORRESPONDING|DIVISION|DO|DUMMY|DUPLICATE|DUPLICATES|DURATION|DURING|DYNAMIC|DYNPRO|E|EACH|EDIT|EDITOR-CALL|ELSE|ELSEIF|EMPTY|ENABLED|ENABLING|ENCODING|END|END-ENHANCEMENT-SECTION|END-LINES|END-OF-DEFINITION|END-OF-FILE|END-OF-PAGE|END-OF-SELECTION|ENDAT|ENDCASE|ENDCATCH|ENDCHAIN|ENDCLASS|ENDDO|ENDENHANCEMENT|ENDEXEC|ENDFOR|ENDFORM|ENDFUNCTION|ENDIAN|ENDIF|ENDING|ENDINTERFACE|ENDLOOP|ENDMETHOD|ENDMODULE|ENDON|ENDPROVIDE|ENDSELECT|ENDTRY|ENDWHILE|ENGINEERING|ENHANCEMENT|ENHANCEMENT-POINT|ENHANCEMENT-SECTION|ENHANCEMENTS|ENTRIES|ENTRY|ENVIRONMENT|EQ|EQUAL|EQUIV|ERRORMESSAGE|ERRORS|ESCAPE|ESCAPING|EVENT|EVENTS|EXACT|EXCEPT|EXCEPTION|EXCEPTION-TABLE|EXCEPTIONS|EXCLUDE|EXCLUDING|EXEC|EXECUTE|EXISTS|EXIT|EXIT-COMMAND|EXP|EXPAND|EXPANDING|EXPIRATION|EXPLICIT|EXPONENT|EXPORT|EXPORTING|EXTEND|EXTENDED|EXTENSION|EXTRACT|FAIL|FETCH|FIELD|FIELD-GROUPS|FIELD-SYMBOL|FIELD-SYMBOLS|FIELDS|FILE|FILTER|FILTER-TABLE|FILTERS|FINAL|FIND|FIRST|FIRST-LINE|FIXED-POINT|FKEQ|FKGE|FLOOR|FLUSH|FONT|FOR|FORM|FORMAT|FORWARD|FOUND|FRAC|FRAME|FRAMES|FREE|FRIENDS|FROM|FUNCTION|FUNCTION-POOL|FUNCTIONALITY|FURTHER|GAPS|GE|GENERATE|GET|GIVING|GKEQ|GKGE|GLOBAL|GRANT|GREATER|GREEN|GROUP|GROUPS|GT|HANDLE|HANDLER|HARMLESS|HASHED|HAVING|HDB|HEAD-LINES|HEADER|HEADERS|HEADING|HELP-ID|HELP-REQUEST|HIDE|HIGH|HINT|HOLD|HOTSPOT|I|ICON|ID|IDENTIFICATION|IDENTIFIER|IDS|IF|IGNORE|IGNORING|IMMEDIATELY|IMPLEMENTATION|IMPLEMENTATIONS|IMPLEMENTED|IMPLICIT|IMPORT|IMPORTING|IN|INACTIVE|INCL|INCLUDE|INCLUDES|INCLUDING|INCREMENT|INDEX|INDEX-LINE|INFOTYPES|INHERITING|INIT|INITIAL|INITIALIZATION|INNER|INOUT|INPUT|INSERT|INSTANCES|INTENSIFIED|INTERFACE|INTERFACE-POOL|INTERFACES|INTERNAL|INTERVALS|INTO|INVERSE|INVERTED-DATE|IS|ISO|ITERATOR|ITNO|JOB|JOIN|KEEP|KEEPING|KERNEL|KEY|KEYS|KEYWORDS|KIND|LANGUAGE|LAST|LATE|LAYOUT|LE|LEADING|LEAVE|LEFT|LEFT-JUSTIFIED|LEFTPLUS|LEFTSPACE|LEGACY|LENGTH|LESS|LET|LEVEL|LEVELS|LIKE|LINE|LINE-COUNT|LINE-SELECTION|LINE-SIZE|LINEFEED|LINES|LIST|LIST-PROCESSING|LISTBOX|LITTLE|LLANG|LOAD|LOAD-OF-PROGRAM|LOB|LOCAL|LOCALE|LOCATOR|LOG|LOG-POINT|LOG10|LOGFILE|LOGICAL|LONG|LOOP|LOW|LOWER|LPAD|LPI|LT|M|MAIL|MAIN|MAJOR-ID|MAPPING|MARGIN|MARK|MASK|MATCH|MATCHCODE|MAX|MAXIMUM|MEDIUM|MEMBERS|MEMORY|MESH|MESSAGE|MESSAGE-ID|MESSAGES|MESSAGING|METHOD|METHODS|MIN|MINIMUM|MINOR-ID|MM\/DD\/YY|MM\/DD\/YYYY|MMDDYY|MOD|MODE|MODIF|MODIFIER|MODIFY|MODULE|MOVE|MOVE-CORRESPONDING|MULTIPLY|MULTIPLY-CORRESPONDING|NA|NAME|NAMETAB|NATIVE|NB|NE|NESTED|NESTING|NEW|NEW-LINE|NEW-PAGE|NEW-SECTION|NEXT|NO|NO-DISPLAY|NO-EXTENSION|NO-GAP|NO-GAPS|NO-GROUPING|NO-HEADING|NO-SCROLLING|NO-SIGN|NO-TITLE|NO-TOPOFPAGE|NO-ZERO|NODE|NODES|NON-UNICODE|NON-UNIQUE|NOT|NP|NS|NULL|NUMBER|NUMOFCHAR|O|OBJECT|OBJECTS|OBLIGATORY|OCCURRENCE|OCCURRENCES|OCCURS|OF|OFF|OFFSET|OLE|ON|ONLY|OPEN|OPTION|OPTIONAL|OPTIONS|OR|ORDER|OTHER|OTHERS|OUT|OUTER|OUTPUT|OUTPUT-LENGTH|OVERFLOW|OVERLAY|PACK|PACKAGE|PAD|PADDING|PAGE|PAGES|PARAMETER|PARAMETER-TABLE|PARAMETERS|PART|PARTIALLY|PATTERN|PERCENTAGE|PERFORM|PERFORMING|PERSON|PF|PF-STATUS|PINK|PLACES|POOL|POSITION|POS_HIGH|POS_LOW|PRAGMAS|PRECOMPILED|PREFERRED|PRESERVING|PRIMARY|PRINT|PRINT-CONTROL|PRIORITY|PRIVATE|PROCEDURE|PROCESS|PROGRAM|PROPERTY|PROTECTED|PROVIDE|PUBLIC|PUSHBUTTON|PUT|QUEUE-ONLY|QUICKINFO|RADIOBUTTON|RAISE|RAISING|RANGE|RANGES|RAW|READ|READ-ONLY|READER|RECEIVE|RECEIVED|RECEIVER|RECEIVING|RED|REDEFINITION|REDUCE|REDUCED|REF|REFERENCE|REFRESH|REGEX|REJECT|REMOTE|RENAMING|REPLACE|REPLACEMENT|REPLACING|REPORT|REQUEST|REQUESTED|RESERVE|RESET|RESOLUTION|RESPECTING|RESPONSIBLE|RESULT|RESULTS|RESUMABLE|RESUME|RETRY|RETURN|RETURNCODE|RETURNING|RIGHT|RIGHT-JUSTIFIED|RIGHTPLUS|RIGHTSPACE|RISK|RMC_COMMUNICATION_FAILURE|RMC_INVALID_STATUS|RMC_SYSTEM_FAILURE|ROLE|ROLLBACK|ROUND|ROWS|RTTI|RUN|SAP|SAP-SPOOL|SAVING|SCALE_PRESERVING|SCALE_PRESERVING_SCIENTIFIC|SCAN|SCIENTIFIC|SCIENTIFIC_WITH_LEADING_ZERO|SCREEN|SCROLL|SCROLL-BOUNDARY|SCROLLING|SEARCH|SECONDARY|SECONDS|SECTION|SELECT|SELECT-OPTIONS|SELECTION|SELECTION-SCREEN|SELECTION-SET|SELECTION-SETS|SELECTION-TABLE|SELECTIONS|SELECTOR|SEND|SEPARATE|SEPARATED|SET|SHARED|SHIFT|SHORT|SHORTDUMP-ID|SIGN|SIGN_AS_POSTFIX|SIMPLE|SIN|SINGLE|SINH|SIZE|SKIP|SKIPPING|SMART|SOME|SORT|SORTABLE|SORTED|SOURCE|SPACE|SPECIFIED|SPLIT|SPOOL|SPOTS|SQL|SQLSCRIPT|SQRT|STABLE|STAMP|STANDARD|START-OF-SELECTION|STARTING|STATE|STATEMENT|STATEMENTS|STATIC|STATICS|STATUSINFO|STEP-LOOP|STOP|STRLEN|STRUCTURE|STRUCTURES|STYLE|SUBKEY|SUBMATCHES|SUBMIT|SUBROUTINE|SUBSCREEN|SUBSTRING|SUBTRACT|SUBTRACT-CORRESPONDING|SUFFIX|SUM|SUMMARY|SUMMING|SUPPLIED|SUPPLY|SUPPRESS|SWITCH|SWITCHSTATES|SYMBOL|SYNCPOINTS|SYNTAX|SYNTAX-CHECK|SYNTAX-TRACE|SYSTEM-CALL|SYSTEM-EXCEPTIONS|SYSTEM-EXIT|TAB|TABBED|TABLE|TABLES|TABLEVIEW|TABSTRIP|TAN|TANH|TARGET|TASK|TASKS|TEST|TESTING|TEXT|TEXTPOOL|THEN|THROW|TIME|TIMES|TIMESTAMP|TIMEZONE|TITLE|TITLE-LINES|TITLEBAR|TO|TOKENIZATION|TOKENS|TOP-LINES|TOP-OF-PAGE|TRACE-FILE|TRACE-TABLE|TRAILING|TRANSACTION|TRANSFER|TRANSFORMATION|TRANSLATE|TRANSPORTING|TRMAC|TRUNC|TRUNCATE|TRUNCATION|TRY|TYPE|TYPE-POOL|TYPE-POOLS|TYPES|ULINE|UNASSIGN|UNDER|UNICODE|UNION|UNIQUE|UNIT|UNIT_CONVERSION|UNIX|UNPACK|UNTIL|UNWIND|UP|UPDATE|UPPER|USER|USER-COMMAND|USING|UTF-8|VALID|VALUE|VALUE-REQUEST|VALUES|VARY|VARYING|VERIFICATION-MESSAGE|VERSION|VIA|VIEW|VISIBLE|WAIT|WARNING|WHEN|WHENEVER|WHERE|WHILE|WIDTH|WINDOW|WINDOWS|WITH|WITH-HEADING|WITH-TITLE|WITHOUT|WORD|WORK|WRITE|WRITER|X|XML|XOR|XSD|XSTRLEN|YELLOW|YES|YYMMDD|Z|ZERO|ZONE)(?![\w-])/i,
  		lookbehind: true
  	},
  	/* Numbers can be only integers. Decimal or Hex appear only as strings */
  	'number': /\b\d+\b/,
  	/* Operators must always be surrounded by whitespace, they cannot be put
  	adjacent to operands.
  	*/
  	'operator': {
  		pattern: /(\s)(?:\*\*?|<[=>]?|>=?|\?=|[-+\/=])(?=\s)/,
  		lookbehind: true
  	},
  	'string-operator': {
  		pattern: /(\s)&&?(?=\s)/,
  		lookbehind: true,
  		/* The official editor highlights */
  		alias: 'keyword'
  	},
  	'token-operator': [{
  		/* Special operators used to access structure components, class methods/attributes, etc. */
  		pattern: /(\w)(?:->?|=>|[~|{}])(?=\w)/,
  		lookbehind: true,
  		alias: 'punctuation'
  	}, {
  		/* Special tokens used do delimit string templates */
  		pattern: /[|{}]/,
  		alias: 'punctuation'
  	}],
  	'punctuation': /[,.:()]/
  };

  /**
   * @description prismjs
   * @author wangfupeng
   */
  // 语言模块，参考 https://github.com/PrismJS/prism/tree/master/components
  // prismjs 的 token 类型汇总
  var prismTokenTypes = [
      'comment',
      'prolog',
      'doctype',
      'cdata',
      'punctuation',
      'namespace',
      'property',
      'tag',
      'boolean',
      'number',
      'constant',
      'symbol',
      'deleted',
      'selector',
      'attr-name',
      'string',
      'builtin',
      'inserted',
      'operator',
      'entity',
      'url',
      'string',
      'atrule',
      'attr-value',
      'keyword',
      'function',
      'class-name',
      'regex',
      'important',
      'variable',
      'bold',
      'italic',
      'entity',
      'char',
  ];
  /**
   * 获取 prism token 的字符串长度
   * @param token prism token
   */
  function getPrismTokenLength(token) {
      if (typeof token === 'string') {
          return token.length;
      }
      else if (typeof token.content === 'string') {
          return token.content.length;
      }
      else {
          // 累加 length
          return token.content.reduce(
          // @ts-ignore
          function (l, t) { return l + getPrismTokenLength(t); }, 0);
      }
  }
  /**
   * 获取 prism 解析的 token 列表
   * @param textNode text node
   * @param language 代码语言
   */
  function getPrismTokens(textNode, language) {
      if (!language)
          return [];
      var langGrammar = Prism$1.languages[language];
      if (!langGrammar)
          return [];
      return Prism$1.tokenize(textNode.text, langGrammar);
      // tokens 即 Prism 对整个字符串的拆分，有普通文字也有高亮的关键字
      // 例如 `const a = 100;` 的 tokens 是一个数组 [ token, ' a ', token, ' ', token ] ，有对象有字符串，对象就表示关键字
      // 如数组第一个 token 是 { type: "keyword", content: "const" } 。关键字类型不同 type 也不同
  }

  /**
   * @description code-highlight decorate
   * @author wangfupeng
   */
  /**
   * 获取 code elem
   * @param node text node
   */
  function getCodeElem(textNode) {
      if (!distExports$1.Text.isText(textNode)) {
          return null;
      } // 非文本 node
      var codeNode = DomEditor.getParentNode(null, textNode);
      if (codeNode && DomEditor.getNodeType(codeNode) === 'code') {
          var preNode = DomEditor.getParentNode(null, codeNode);
          if (preNode && DomEditor.getNodeType(preNode) === 'pre') {
              return codeNode;
          }
      }
      return null;
  }
  var codeHighLightDecorate = function (nodeEntry) {
      var e_1, _a, _b;
      var _c = __read(nodeEntry, 2), n = _c[0], path = _c[1];
      var ranges = [];
      // 节点不合法，则不处理
      var codeElem = getCodeElem(n);
      if (codeElem == null) {
          return ranges;
      }
      var _d = codeElem.language, language = _d === void 0 ? '' : _d;
      if (!language) {
          return ranges;
      }
      var textNode = n;
      var tokens = getPrismTokens(textNode, language);
      var start = 0;
      try {
          for (var tokens_1 = __values(tokens), tokens_1_1 = tokens_1.next(); !tokens_1_1.done; tokens_1_1 = tokens_1.next()) {
              var token = tokens_1_1.value;
              var length_1 = getPrismTokenLength(token);
              var end = start + length_1;
              if (typeof token !== 'string') {
                  // 遇到关键字，则拆分多个 range —— decorate 规则
                  ranges.push((_b = {},
                      _b[token.type] = true,
                      _b.anchor = { path: path, offset: start },
                      _b.focus = { path: path, offset: end },
                      _b));
              }
              start = end;
          }
      }
      catch (e_1_1) { e_1 = { error: e_1_1 }; }
      finally {
          try {
              if (tokens_1_1 && !tokens_1_1.done && (_a = tokens_1.return)) _a.call(tokens_1);
          }
          finally { if (e_1) throw e_1.error; }
      }
      return ranges;
  };

  /**
   * @description to html
   * @author wangfupeng
   */
  function codeToHtml(elem, childrenHtml) {
      var _a = elem.language, language = _a === void 0 ? '' : _a;
      var cssClass = language
          ? "class=\"language-".concat(language, "\"") // prism.js 根据 language 代码高亮
          : '';
      return "<code ".concat(cssClass, ">").concat(childrenHtml, "</code>");
  }
  // 覆盖 basic-module 中的 code to html
  var codeToHtmlConf = {
      type: 'code',
      elemToHtml: codeToHtml,
  };

  /**
   * @description menu config
   * @author wangfupeng
   */
  function genCodeLangs() {
      // 1. text value 对应关系参考 prism 官网 https://prismjs.com/#supported-languages
      // 2. 要加入一个新语言时，要引入相应的 js 模块（代码在 `vender/prism.ts`），例如 `import 'prismjs/components/prism-php'`
      return [
          { text: 'CSS', value: 'css' },
          { text: 'HTML', value: 'html' },
          { text: 'XML', value: 'xml' },
          { text: 'Javascript', value: 'javascript' },
          { text: 'Typescript', value: 'typescript' },
          { text: 'JSX', value: 'jsx' },
          { text: 'Go', value: 'go' },
          { text: 'PHP', value: 'php' },
          { text: 'C', value: 'c' },
          { text: 'Python', value: 'python' },
          { text: 'Java', value: 'java' },
          { text: 'C++', value: 'cpp' },
          { text: 'C#', value: 'csharp' },
          { text: 'Visual Basic', value: 'visual-basic' },
          { text: 'SQL', value: 'sql' },
          { text: 'Ruby', value: 'ruby' },
          { text: 'Swift', value: 'swift' },
          { text: 'Bash', value: 'bash' },
          { text: 'Lua', value: 'lua' },
          { text: 'Groovy', value: 'groovy' },
          { text: 'Markdown', value: 'markdown' },
          { text: 'ABAP', value: 'abap' },
      ];
  }

  /**
   * @description icon svg
   * @author wangfupeng
   */
  /**
   * 【注意】svg 字符串的长度 ，否则会导致代码体积过大
   * 尽量选择 https://www.iconfont.cn/collections/detail?spm=a313x.7781069.0.da5a778a4&cid=20293
   * 找不到再从 iconfont.com 搜索
   */
  var JS_SVG = '<svg viewBox="0 0 1024 1024"><path d="M64 64v896h896V64H64z m487.6 698.8c0 87.2-51.2 127-125.8 127-67.4 0-106.4-34.8-126.4-77l68.6-41.4c13.2 23.4 25.2 43.2 54.2 43.2 27.6 0 45.2-10.8 45.2-53V475.4h84.2v287.4z m199.2 127c-78.2 0-128.8-37.2-153.4-86l68.6-39.6c18 29.4 41.6 51.2 83 51.2 34.8 0 57.2-17.4 57.2-41.6 0-28.8-22.8-39-61.4-56l-21-9c-60.8-25.8-101-58.4-101-127 0-63.2 48.2-111.2 123.2-111.2 53.6 0 92 18.6 119.6 67.4L800 580c-14.4-25.8-30-36-54.2-36-24.6 0-40.2 15.6-40.2 36 0 25.2 15.6 35.4 51.8 51.2l21 9c71.6 30.6 111.8 62 111.8 132.4 0 75.6-59.6 117.2-139.4 117.2z"></path></svg>';

  /**
   * @description code-highlight select lang
   * @author wangfupeng
   */
  var SelectLangMenu = /** @class */ (function () {
      function SelectLangMenu() {
          this.title = t$2('highLightModule.selectLang');
          this.iconSvg = JS_SVG;
          this.tag = 'select';
          this.width = 95;
          this.selectPanelWidth = 115;
          this.defaultCodeLang = '';
      }
      SelectLangMenu.prototype.getOptions = function (editor) {
          var _this = this;
          var options = [];
          // 获取配置，参考 './config.ts'
          var _a = editor.getMenuConfig('codeSelectLang').codeLangs, codeLangs = _a === void 0 ? [] : _a; // 第二个参数 menu key
          options.push({
              text: 'plain text',
              value: '', // getValue 默认会返回 ''
          });
          codeLangs.forEach(function (lang) {
              var text = lang.text, value = lang.value, selected = lang.selected;
              // 判断是否是默认选中
              if (selected) {
                  _this.defaultCodeLang = value;
              }
              options.push({ text: text, value: value });
          });
          // 设置 selected
          var curValue = this.getValue(editor);
          options.forEach(function (opt) {
              if (opt.value === curValue) {
                  opt.selected = true;
              }
              else {
                  opt.selected = undefined;
              }
          });
          return options;
      };
      SelectLangMenu.prototype.isActive = function (_editor) {
          // select menu 会显示 selected value ，用不到 active
          return false;
      };
      /**
       * 获取语言类型
       * @param editor editor
       */
      SelectLangMenu.prototype.getValue = function (editor) {
          var elem = this.getSelectCodeElem(editor);
          if (elem == null) {
              return this.defaultCodeLang;
          }
          if (!distExports$1.Element.isElement(elem)) {
              return this.defaultCodeLang;
          }
          var lang = elem.language.toString();
          // 当前 elem.language 是否在已配置的 langs 中？
          var _a = editor.getMenuConfig('codeSelectLang').codeLangs, codeLangs = _a === void 0 ? [] : _a;
          var hasLang = codeLangs.some(function (item) { return item.value === lang; });
          if (hasLang) {
              return lang;
          }
          return this.defaultCodeLang;
      };
      SelectLangMenu.prototype.isDisabled = function (editor) {
          if (editor.selection == null) {
              return true;
          }
          var elem = this.getSelectCodeElem(editor);
          if (elem) {
              return false;
          }
          return true;
      };
      SelectLangMenu.prototype.exec = function (editor, value) {
          var elem = this.getSelectCodeElem(editor);
          if (elem == null) {
              return;
          }
          // 设置语言
          var props = { language: value.toString() };
          distExports$1.Transforms.setNodes(editor, props, {
              match: function (n) { return DomEditor.checkNodeType(n, 'code'); },
          });
      };
      SelectLangMenu.prototype.getSelectCodeElem = function (editor) {
          var codeNode = DomEditor.getSelectedNodeByType(editor, 'code');
          if (codeNode == null) {
              return null;
          }
          var preNode = DomEditor.getParentNode(editor, codeNode);
          if (!distExports$1.Element.isElement(preNode)) {
              return null;
          }
          if (preNode.type !== 'pre') {
              return null;
          }
          return codeNode;
      };
      return SelectLangMenu;
  }());

  /**
   * @description code-highlight menu
   * @author wangfupeng
   */
  var selectLangMenuConf = {
      key: 'codeSelectLang',
      factory: function () {
          return new SelectLangMenu();
      },
      config: {
          codeLangs: genCodeLangs(),
      },
  };

  /**
   * @description DOM 操作
   * @author wangfupeng
   */
  /* eslint-disable  no-undef */
  if (attr) {
      $$1.fn.attr = attr;
  }

  /**
   * @description parse style html
   * @author wangfupeng
   */
  function parseCodeStyleHtml(elem, node, _editor) {
      var $elem = $$1(elem);
      if (!distExports$1.Element.isElement(node)) {
          return node;
      }
      if (DomEditor.getNodeType(node) !== 'code') {
          return node;
      } // 只针对 pre/code 元素
      var elemNode = node;
      var langAttr = $elem.attr('class') || '';
      if (langAttr.indexOf('language-') === 0) {
          // V5 版本，格式如 class="language-javascript"
          elemNode.language = langAttr.split('-')[1] || ''; // 获取 'javascript'
      }
      else {
          // 兼容 V4 版本，格式如 class="Javascript"
          elemNode.language = langAttr.toLowerCase();
      }
      return elemNode;
  }

  /**
   * @description vdom utils fn
   * @author wangfupeng
   */
  /**
   * 给 vnode 添加 className
   * @param vnode vnode
   * @param className css class
   */
  function addVnodeClassName(vnode, className) {
      if (vnode.data == null) {
          vnode.data = {};
      }
      var data = vnode.data;
      if (data.props == null) {
          data.props = {};
      }
      Object.assign(data.props, { className: className });
  }

  /**
   * @description render code highlight style
   * @author wangfupeng
   */
  /**
   * 添加样式
   * @param node slate text
   * @param vnode vnode
   * @returns vnode
   */
  function renderStyle(node, vnode) {
      var leafNode = node;
      var styleVnode = vnode;
      var className = '';
      prismTokenTypes.forEach(function (type) {
          if (leafNode[type]) {
              className = type;
          }
      });
      if (className) {
          className = "token ".concat(className); // 如 'token keyword' - prismjs 渲染的规则
          addVnodeClassName(styleVnode, className);
      }
      return styleVnode;
  }

  /**
   * @description code highlight module
   * @author wangfupeng
   */
  var codeHighlightModule = {
      renderStyle: renderStyle,
      parseStyleHtml: parseCodeStyleHtml,
      menus: [selectLangMenuConf],
      elemsToHtml: [codeToHtmlConf],
  };

  /**
   * @description Editor View class
   * @author wangfupeng
   */
  var Boot = /** @class */ (function () {
      function Boot() {
          throw new Error('不能实例化\nCan not construct a instance');
      }
      Boot.setEditorConfig = function (newConfig) {
          if (newConfig === void 0) { newConfig = {}; }
          this.editorConfig = __assign(__assign({}, this.editorConfig), newConfig);
      };
      Boot.setSimpleEditorConfig = function (newConfig) {
          if (newConfig === void 0) { newConfig = {}; }
          this.simpleEditorConfig = __assign(__assign({}, this.simpleEditorConfig), newConfig);
      };
      Boot.setToolbarConfig = function (newConfig) {
          if (newConfig === void 0) { newConfig = {}; }
          this.toolbarConfig = __assign(__assign({}, this.toolbarConfig), newConfig);
      };
      Boot.setSimpleToolbarConfig = function (newConfig) {
          if (newConfig === void 0) { newConfig = {}; }
          this.simpleToolbarConfig = __assign(__assign({}, this.simpleToolbarConfig), newConfig);
      };
      Boot.registerPlugin = function (plugin) {
          this.plugins.push(plugin);
      };
      // 注册 menu
      // TODO 可在注册时传入配置，在开发文档中说明
      Boot.registerMenu = function (menuConf, customConfig) {
          registerMenu(menuConf, customConfig);
      };
      // 注册 renderElem
      Boot.registerRenderElem = function (renderElemConf) {
          registerRenderElemConf(renderElemConf);
      };
      // 注册 renderStyle
      Boot.registerRenderStyle = function (fn) {
          registerStyleHandler(fn);
      };
      // 注册 elemToHtml
      Boot.registerElemToHtml = function (elemToHtmlConf) {
          registerElemToHtmlConf(elemToHtmlConf);
      };
      // 注册 styleToHtml
      Boot.registerStyleToHtml = function (fn) {
          registerStyleToHtmlHandler(fn);
      };
      // 注册 preParseHtml
      Boot.registerPreParseHtml = function (preParseHtmlConf) {
          registerPreParseHtmlConf(preParseHtmlConf);
      };
      // 注册 parseElemHtml
      Boot.registerParseElemHtml = function (parseElemHtmlConf) {
          registerParseElemHtmlConf(parseElemHtmlConf);
      };
      // 注册 parseStyleHtml
      Boot.registerParseStyleHtml = function (fn) {
          registerParseStyleHtmlHandler(fn);
      };
      // 注册 module
      Boot.registerModule = function (module) {
          registerModule(module);
      };
      // editor 配置
      Boot.editorConfig = {};
      Boot.simpleEditorConfig = {};
      // toolbar 配置
      Boot.toolbarConfig = {};
      Boot.simpleToolbarConfig = {};
      // 注册插件
      Boot.plugins = [];
      return Boot;
  }());

  /**
   * @description 注册 module
   * @author wangfupeng
   */
  function registerModule(module) {
      var menus = module.menus, renderElems = module.renderElems, renderStyle = module.renderStyle, elemsToHtml = module.elemsToHtml, styleToHtml = module.styleToHtml, preParseHtml = module.preParseHtml, parseElemsHtml = module.parseElemsHtml, parseStyleHtml = module.parseStyleHtml, editorPlugin = module.editorPlugin;
      if (menus) {
          menus.forEach(function (menu) { return Boot.registerMenu(menu); });
      }
      if (renderElems) {
          renderElems.forEach(function (renderElemConf) { return Boot.registerRenderElem(renderElemConf); });
      }
      if (renderStyle) {
          Boot.registerRenderStyle(renderStyle);
      }
      if (elemsToHtml) {
          elemsToHtml.forEach(function (elemToHtmlConf) { return Boot.registerElemToHtml(elemToHtmlConf); });
      }
      if (styleToHtml) {
          Boot.registerStyleToHtml(styleToHtml);
      }
      if (preParseHtml) {
          preParseHtml.forEach(function (conf) { return Boot.registerPreParseHtml(conf); });
      }
      if (parseElemsHtml) {
          parseElemsHtml.forEach(function (parseElemHtmlConf) { return Boot.registerParseElemHtml(parseElemHtmlConf); });
      }
      if (parseStyleHtml) {
          Boot.registerParseStyleHtml(parseStyleHtml);
      }
      if (editorPlugin) {
          Boot.registerPlugin(editorPlugin);
      }
  }

  /**
   * @description register builtin modules
   * @author wangfupeng
   */
  // basic-modules
  basicModules.forEach(function (module) { return registerModule(module); });
  registerModule(list);
  registerModule(table);
  registerModule(video);
  registerModule(uploadImage);
  registerModule(codeHighlightModule);

  /**
   * @description svg tag
   * @author wangfupeng
   */
  /**
   * 【注意】svg 字符串的长度 ，否则会导致代码体积过大
   * 尽量选择 https://www.iconfont.cn/collections/detail?spm=a313x.7781069.0.da5a778a4&cid=20293
   * 找不到再从 iconfont.com 搜索
   */
  // 缩进 right
  var INDENT_RIGHT_SVG = '<svg viewBox="0 0 1024 1024"><path d="M0 64h1024v128H0z m384 192h640v128H384z m0 192h640v128H384z m0 192h640v128H384zM0 832h1024v128H0z m0-128V320l256 192z"></path></svg>';
  // 左对齐
  var JUSTIFY_LEFT_SVG = '<svg viewBox="0 0 1024 1024"><path d="M768 793.6v102.4H51.2v-102.4h716.8z m204.8-230.4v102.4H51.2v-102.4h921.6z m-204.8-230.4v102.4H51.2v-102.4h716.8zM972.8 102.4v102.4H51.2V102.4h921.6z"></path></svg>';
  // 图片
  var IMAGE_SVG = '<svg viewBox="0 0 1024 1024"><path d="M959.877 128l0.123 0.123v767.775l-0.123 0.122H64.102l-0.122-0.122V128.123l0.122-0.123h895.775zM960 64H64C28.795 64 0 92.795 0 128v768c0 35.205 28.795 64 64 64h896c35.205 0 64-28.795 64-64V128c0-35.205-28.795-64-64-64zM832 288.01c0 53.023-42.988 96.01-96.01 96.01s-96.01-42.987-96.01-96.01S682.967 192 735.99 192 832 234.988 832 288.01zM896 832H128V704l224.01-384 256 320h64l224.01-192z"></path></svg>';
  // plus
  var MORE_SVG = '<svg viewBox="0 0 1024 1024"><path d="M204.8 505.6m-76.8 0a76.8 76.8 0 1 0 153.6 0 76.8 76.8 0 1 0-153.6 0Z"></path><path d="M505.6 505.6m-76.8 0a76.8 76.8 0 1 0 153.6 0 76.8 76.8 0 1 0-153.6 0Z"></path><path d="M806.4 505.6m-76.8 0a76.8 76.8 0 1 0 153.6 0 76.8 76.8 0 1 0-153.6 0Z"></path></svg>';
  // 视频
  var VIDEO_SVG = '<svg viewBox="0 0 1024 1024"><path d="M981.184 160.096C837.568 139.456 678.848 128 512 128S186.432 139.456 42.816 160.096C15.296 267.808 0 386.848 0 512s15.264 244.16 42.816 351.904C186.464 884.544 345.152 896 512 896s325.568-11.456 469.184-32.096C1008.704 756.192 1024 637.152 1024 512s-15.264-244.16-42.816-351.904zM384 704V320l320 192-320 192z"></path></svg>';

  /**
   * @description toolbar 配置
   * @author wangfupeng
   */
  function genDefaultToolbarKeys() {
      return [
          'headerSelect',
          // 'header1',
          // 'header2',
          // 'header3',
          'blockquote',
          '|',
          'bold',
          'underline',
          'italic',
          {
              key: 'group-more-style', // 以 group 开头
              title: t$2('editor.more'),
              iconSvg: MORE_SVG,
              menuKeys: ['through', 'code', 'sup', 'sub', 'clearStyle'],
          },
          'color',
          'bgColor',
          '|',
          'fontSize',
          'fontFamily',
          'lineHeight',
          '|',
          'bulletedList',
          'numberedList',
          'todo',
          {
              key: 'group-justify', // 以 group 开头
              title: t$2('editor.justify'),
              iconSvg: JUSTIFY_LEFT_SVG,
              menuKeys: ['justifyLeft', 'justifyRight', 'justifyCenter', 'justifyJustify'],
          },
          {
              key: 'group-indent', // 以 group 开头
              title: t$2('editor.indent'),
              iconSvg: INDENT_RIGHT_SVG,
              menuKeys: ['indent', 'delIndent'],
          },
          '|',
          'emotion',
          'insertLink',
          // 'editLink',
          // 'unLink',
          // 'viewLink',
          {
              key: 'group-image', // 以 group 开头
              title: t$2('editor.image'),
              iconSvg: IMAGE_SVG,
              menuKeys: ['insertImage', 'uploadImage'],
          },
          // 'deleteImage',
          // 'editImage',
          // 'viewImageLink',
          {
              key: 'group-video', // 以 group 开头
              title: t$2('editor.video'),
              iconSvg: VIDEO_SVG,
              menuKeys: ['insertVideo', 'uploadVideo'],
          },
          // 'deleteVideo',
          'insertTable',
          'codeBlock',
          // 'codeSelectLang',
          'divider',
          // 'deleteTable',
          '|',
          'undo',
          'redo',
          '|',
          'formatPainter',
          'fullScreen',
      ];
  }
  function genSimpleToolbarKeys() {
      return [
          'blockquote',
          'header1',
          'header2',
          'header3',
          '|',
          'bold',
          'underline',
          'italic',
          'through',
          'color',
          'bgColor',
          'clearStyle',
          '|',
          'bulletedList',
          'numberedList',
          'todo',
          'justifyLeft',
          'justifyRight',
          'justifyCenter',
          '|',
          'insertLink',
          {
              key: 'group-image', // 以 group 开头
              title: t$2('editor.image'),
              iconSvg: IMAGE_SVG,
              menuKeys: ['insertImage', 'uploadImage'],
          },
          'insertVideo',
          'insertTable',
          'codeBlock',
          '|',
          'undo',
          'redo',
          '|',
          'fullScreen',
      ];
  }

  /**
   * @description hoverbar 配置
   * @author wangfupeng
   */
  var COMMON_HOVERBAR_KEYS = {
      // key 即 element type
      link: {
          menuKeys: ['editLink', 'unLink', 'viewLink'],
      },
      image: {
          menuKeys: [
              'imageWidth30',
              'imageWidth50',
              'imageWidth100',
              'editorImageSizeMenu',
              'editImage',
              'viewImageLink',
              'deleteImage',
          ],
      },
      pre: {
          menuKeys: ['enter', 'codeBlock', 'codeSelectLang'],
      },
      table: {
          menuKeys: [
              'enter',
              'tableHeader',
              'tableFullWidth',
              'insertTableRow',
              'deleteTableRow',
              'insertTableCol',
              'deleteTableCol',
              'deleteTable',
              /** 注册单元格合并 拆分 */
              'mergeTableCell',
              'splitTableCell',
              /** 注册表格/单元格属性设置 */
              'setTableProperty',
              'setTableCellProperty',
          ],
      },
      divider: {
          menuKeys: ['enter'],
      },
      video: {
          menuKeys: ['enter', 'editVideoSize', 'editVideoSrc'],
      },
  };
  function genDefaultHoverbarKeys() {
      return __assign(__assign({}, COMMON_HOVERBAR_KEYS), { 
          // 也可以自定义 match 来匹配元素，此时 key 就随意了
          text: {
              menuKeys: [
                  'formatPainter',
                  'headerSelect',
                  'insertLink',
                  'bulletedList',
                  '|',
                  'bold',
                  'through',
                  'color',
                  'bgColor',
                  'clearStyle',
              ],
          } });
  }
  function genSimpleHoverbarKeys() {
      return COMMON_HOVERBAR_KEYS;
  }

  /**
   * @description 获取编辑器默认配置
   * @author wangfupeng
   */
  function getDefaultEditorConfig() {
      return {
          hoverbarKeys: genDefaultHoverbarKeys(),
      };
  }
  function getSimpleEditorConfig() {
      return {
          hoverbarKeys: genSimpleHoverbarKeys(),
      };
  }
  function getDefaultToolbarConfig() {
      return {
          toolbarKeys: genDefaultToolbarKeys(),
      };
  }
  function getSimpleToolbarConfig() {
      return {
          toolbarKeys: genSimpleToolbarKeys(),
      };
  }

  /**
   * @description set default config
   * @author wangfupeng
   */
  var defaultEditorConfig = getDefaultEditorConfig();
  Boot.setEditorConfig(__assign(__assign({}, defaultEditorConfig), { decorate: codeHighLightDecorate }));
  var simpleEditorConfig = getSimpleEditorConfig();
  Boot.setSimpleEditorConfig(__assign(__assign({}, simpleEditorConfig), { decorate: codeHighLightDecorate }));
  var defaultToolbarConfig = getDefaultToolbarConfig();
  Boot.setToolbarConfig(defaultToolbarConfig);
  var simpleToolbarConfig = getSimpleToolbarConfig();
  Boot.setSimpleToolbarConfig(simpleToolbarConfig);

  /**
   * @description create
   * @author wangfupeng
   */
  /**
   * 创建 editor 实例
   */
  function createEditor(option) {
      if (option === void 0) { option = {}; }
      var _a = option.selector, selector = _a === void 0 ? '' : _a, _b = option.content, content = _b === void 0 ? [] : _b, html = option.html, _c = option.config, config = _c === void 0 ? {} : _c, _d = option.mode, mode = _d === void 0 ? 'default' : _d;
      var globalConfig = mode === 'simple' ? Boot.simpleEditorConfig : Boot.editorConfig;
      // 单独处理 hoverbarKeys
      var newHoverbarKeys = __assign(__assign({}, (globalConfig.hoverbarKeys || {})), (config.hoverbarKeys || {}));
      var editor = coreCreateEditor({
          selector: selector,
          config: __assign(__assign(__assign({}, globalConfig), config), { hoverbarKeys: newHoverbarKeys }),
          content: content,
          html: html,
          plugins: Boot.plugins,
      });
      return editor;
  }
  /**
   * 创建 toolbar 实例
   */
  function createToolbar(option) {
      var selector = option.selector, editor = option.editor, _a = option.config, config = _a === void 0 ? {} : _a, _b = option.mode, mode = _b === void 0 ? 'default' : _b;
      if (!selector) {
          throw new Error("Cannot find 'selector' when create toolbar");
      }
      var globalConfig = mode === 'simple' ? Boot.simpleToolbarConfig : Boot.toolbarConfig;
      var toolbar = coreCreateToolbar(editor, {
          selector: selector,
          config: __assign(__assign({}, globalConfig), config),
      });
      return toolbar;
  }

  /**
   * @description editor entry
   * @author wangfupeng
   */
  var index = {};

  exports.Boot = Boot;
  exports.DomEditor = DomEditor;
  exports.SlateEditor = distExports$1.Editor;
  exports.SlateElement = distExports$1.Element;
  exports.SlateLocation = distExports$1.Location;
  exports.SlateNode = distExports$1.Node;
  exports.SlatePath = distExports$1.Path;
  exports.SlatePoint = distExports$1.Point;
  exports.SlateRange = distExports$1.Range;
  exports.SlateText = distExports$1.Text;
  exports.SlateTransforms = distExports$1.Transforms;
  exports.Toolbar = Toolbar;
  exports.createEditor = createEditor;
  exports.createToolbar = createToolbar;
  exports.createUploader = createUploader;
  exports.default = index;
  exports.genModalButtonElems = genModalButtonElems;
  exports.genModalInputElems = genModalInputElems;
  exports.genModalTextareaElems = genModalTextareaElems;
  exports.i18nAddResources = i18nAddResources;
  exports.i18nChangeLanguage = i18nChangeLanguage;
  exports.i18nGetResources = i18nGetResources;
  exports.t = t$2;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
